
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

0000c000 <_vector_table>:
    c000:	20025ff8 	.word	0x20025ff8
    c004:	0001155d 	.word	0x0001155d
    c008:	00025b93 	.word	0x00025b93
    c00c:	00010f15 	.word	0x00010f15
    c010:	00010f15 	.word	0x00010f15
    c014:	00010f15 	.word	0x00010f15
    c018:	00010f15 	.word	0x00010f15
    c01c:	00010f15 	.word	0x00010f15
    c020:	00010f15 	.word	0x00010f15
    c024:	00010f15 	.word	0x00010f15
    c028:	00010f15 	.word	0x00010f15
    c02c:	00010ed9 	.word	0x00010ed9
    c030:	00010f15 	.word	0x00010f15
    c034:	00010f15 	.word	0x00010f15
    c038:	00010e29 	.word	0x00010e29
    c03c:	00010a9d 	.word	0x00010a9d

0000c040 <_irq_vector_table>:
    c040:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c050:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c060:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c070:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c080:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c090:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c0a0:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c0b0:	000136b1 00026ceb 00010f39 00010f39     .6...l..9...9...
    c0c0:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c0d0:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c0e0:	00010f39 00010f39 00026e09 00010f39     9...9....n..9...
    c0f0:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c100:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c110:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c120:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c130:	00010f39 00010f39 00010f39 00010f39     9...9...9...9...
    c140:	00010f39                                9...

Disassembly of section _TEXT_SECTION_NAME_2:

0000c144 <__aeabi_ldivmod>:
    c144:	b97b      	cbnz	r3, c166 <__aeabi_ldivmod+0x22>
    c146:	b972      	cbnz	r2, c166 <__aeabi_ldivmod+0x22>
    c148:	2900      	cmp	r1, #0
    c14a:	bfbe      	ittt	lt
    c14c:	2000      	movlt	r0, #0
    c14e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c152:	e006      	blt.n	c162 <__aeabi_ldivmod+0x1e>
    c154:	bf08      	it	eq
    c156:	2800      	cmpeq	r0, #0
    c158:	bf1c      	itt	ne
    c15a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c15e:	f04f 30ff 	movne.w	r0, #4294967295
    c162:	f000 b9c7 	b.w	c4f4 <__aeabi_idiv0>
    c166:	f1ad 0c08 	sub.w	ip, sp, #8
    c16a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c16e:	2900      	cmp	r1, #0
    c170:	db09      	blt.n	c186 <__aeabi_ldivmod+0x42>
    c172:	2b00      	cmp	r3, #0
    c174:	db1a      	blt.n	c1ac <__aeabi_ldivmod+0x68>
    c176:	f000 f84d 	bl	c214 <__udivmoddi4>
    c17a:	f8dd e004 	ldr.w	lr, [sp, #4]
    c17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c182:	b004      	add	sp, #16
    c184:	4770      	bx	lr
    c186:	4240      	negs	r0, r0
    c188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c18c:	2b00      	cmp	r3, #0
    c18e:	db1b      	blt.n	c1c8 <__aeabi_ldivmod+0x84>
    c190:	f000 f840 	bl	c214 <__udivmoddi4>
    c194:	f8dd e004 	ldr.w	lr, [sp, #4]
    c198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c19c:	b004      	add	sp, #16
    c19e:	4240      	negs	r0, r0
    c1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c1a4:	4252      	negs	r2, r2
    c1a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c1aa:	4770      	bx	lr
    c1ac:	4252      	negs	r2, r2
    c1ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c1b2:	f000 f82f 	bl	c214 <__udivmoddi4>
    c1b6:	f8dd e004 	ldr.w	lr, [sp, #4]
    c1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c1be:	b004      	add	sp, #16
    c1c0:	4240      	negs	r0, r0
    c1c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c1c6:	4770      	bx	lr
    c1c8:	4252      	negs	r2, r2
    c1ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c1ce:	f000 f821 	bl	c214 <__udivmoddi4>
    c1d2:	f8dd e004 	ldr.w	lr, [sp, #4]
    c1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c1da:	b004      	add	sp, #16
    c1dc:	4252      	negs	r2, r2
    c1de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c1e2:	4770      	bx	lr

0000c1e4 <__aeabi_uldivmod>:
    c1e4:	b953      	cbnz	r3, c1fc <__aeabi_uldivmod+0x18>
    c1e6:	b94a      	cbnz	r2, c1fc <__aeabi_uldivmod+0x18>
    c1e8:	2900      	cmp	r1, #0
    c1ea:	bf08      	it	eq
    c1ec:	2800      	cmpeq	r0, #0
    c1ee:	bf1c      	itt	ne
    c1f0:	f04f 31ff 	movne.w	r1, #4294967295
    c1f4:	f04f 30ff 	movne.w	r0, #4294967295
    c1f8:	f000 b97c 	b.w	c4f4 <__aeabi_idiv0>
    c1fc:	f1ad 0c08 	sub.w	ip, sp, #8
    c200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c204:	f000 f806 	bl	c214 <__udivmoddi4>
    c208:	f8dd e004 	ldr.w	lr, [sp, #4]
    c20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c210:	b004      	add	sp, #16
    c212:	4770      	bx	lr

0000c214 <__udivmoddi4>:
    c214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c218:	468c      	mov	ip, r1
    c21a:	9d08      	ldr	r5, [sp, #32]
    c21c:	4604      	mov	r4, r0
    c21e:	468a      	mov	sl, r1
    c220:	2b00      	cmp	r3, #0
    c222:	d14a      	bne.n	c2ba <__udivmoddi4+0xa6>
    c224:	428a      	cmp	r2, r1
    c226:	4617      	mov	r7, r2
    c228:	d962      	bls.n	c2f0 <__udivmoddi4+0xdc>
    c22a:	fab2 f682 	clz	r6, r2
    c22e:	b14e      	cbz	r6, c244 <__udivmoddi4+0x30>
    c230:	f1c6 0e20 	rsb	lr, r6, #32
    c234:	fa01 f306 	lsl.w	r3, r1, r6
    c238:	40b7      	lsls	r7, r6
    c23a:	40b4      	lsls	r4, r6
    c23c:	fa20 fe0e 	lsr.w	lr, r0, lr
    c240:	ea4e 0a03 	orr.w	sl, lr, r3
    c244:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c248:	0c23      	lsrs	r3, r4, #16
    c24a:	fa1f f987 	uxth.w	r9, r7
    c24e:	fbba fef8 	udiv	lr, sl, r8
    c252:	fb08 aa1e 	mls	sl, r8, lr, sl
    c256:	fb0e f209 	mul.w	r2, lr, r9
    c25a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    c25e:	429a      	cmp	r2, r3
    c260:	d90b      	bls.n	c27a <__udivmoddi4+0x66>
    c262:	18fb      	adds	r3, r7, r3
    c264:	f10e 31ff 	add.w	r1, lr, #4294967295
    c268:	bf2c      	ite	cs
    c26a:	2001      	movcs	r0, #1
    c26c:	2000      	movcc	r0, #0
    c26e:	429a      	cmp	r2, r3
    c270:	d902      	bls.n	c278 <__udivmoddi4+0x64>
    c272:	2800      	cmp	r0, #0
    c274:	f000 812a 	beq.w	c4cc <__udivmoddi4+0x2b8>
    c278:	468e      	mov	lr, r1
    c27a:	1a9a      	subs	r2, r3, r2
    c27c:	b2a3      	uxth	r3, r4
    c27e:	fbb2 f0f8 	udiv	r0, r2, r8
    c282:	fb08 2210 	mls	r2, r8, r0, r2
    c286:	fb00 f909 	mul.w	r9, r0, r9
    c28a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
    c28e:	45a1      	cmp	r9, r4
    c290:	d907      	bls.n	c2a2 <__udivmoddi4+0x8e>
    c292:	193c      	adds	r4, r7, r4
    c294:	f100 33ff 	add.w	r3, r0, #4294967295
    c298:	d202      	bcs.n	c2a0 <__udivmoddi4+0x8c>
    c29a:	45a1      	cmp	r9, r4
    c29c:	f200 8110 	bhi.w	c4c0 <__udivmoddi4+0x2ac>
    c2a0:	4618      	mov	r0, r3
    c2a2:	eba4 0409 	sub.w	r4, r4, r9
    c2a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c2aa:	2100      	movs	r1, #0
    c2ac:	b11d      	cbz	r5, c2b6 <__udivmoddi4+0xa2>
    c2ae:	40f4      	lsrs	r4, r6
    c2b0:	2300      	movs	r3, #0
    c2b2:	e9c5 4300 	strd	r4, r3, [r5]
    c2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2ba:	428b      	cmp	r3, r1
    c2bc:	d908      	bls.n	c2d0 <__udivmoddi4+0xbc>
    c2be:	2d00      	cmp	r5, #0
    c2c0:	f000 80f2 	beq.w	c4a8 <__udivmoddi4+0x294>
    c2c4:	2100      	movs	r1, #0
    c2c6:	e9c5 0c00 	strd	r0, ip, [r5]
    c2ca:	4608      	mov	r0, r1
    c2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2d0:	fab3 f183 	clz	r1, r3
    c2d4:	2900      	cmp	r1, #0
    c2d6:	d14e      	bne.n	c376 <__udivmoddi4+0x162>
    c2d8:	4563      	cmp	r3, ip
    c2da:	f0c0 80e8 	bcc.w	c4ae <__udivmoddi4+0x29a>
    c2de:	4282      	cmp	r2, r0
    c2e0:	f240 80e5 	bls.w	c4ae <__udivmoddi4+0x29a>
    c2e4:	4608      	mov	r0, r1
    c2e6:	2d00      	cmp	r5, #0
    c2e8:	d0e5      	beq.n	c2b6 <__udivmoddi4+0xa2>
    c2ea:	e9c5 4a00 	strd	r4, sl, [r5]
    c2ee:	e7e2      	b.n	c2b6 <__udivmoddi4+0xa2>
    c2f0:	b902      	cbnz	r2, c2f4 <__udivmoddi4+0xe0>
    c2f2:	deff      	udf	#255	; 0xff
    c2f4:	fab2 f682 	clz	r6, r2
    c2f8:	2e00      	cmp	r6, #0
    c2fa:	f040 8099 	bne.w	c430 <__udivmoddi4+0x21c>
    c2fe:	1a8b      	subs	r3, r1, r2
    c300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    c304:	fa1f f882 	uxth.w	r8, r2
    c308:	2101      	movs	r1, #1
    c30a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c30e:	fbb3 f2fe 	udiv	r2, r3, lr
    c312:	fb0e 3012 	mls	r0, lr, r2, r3
    c316:	fb08 f902 	mul.w	r9, r8, r2
    c31a:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
    c31e:	45e1      	cmp	r9, ip
    c320:	d908      	bls.n	c334 <__udivmoddi4+0x120>
    c322:	eb17 0c0c 	adds.w	ip, r7, ip
    c326:	f102 33ff 	add.w	r3, r2, #4294967295
    c32a:	d202      	bcs.n	c332 <__udivmoddi4+0x11e>
    c32c:	45e1      	cmp	r9, ip
    c32e:	f200 80ca 	bhi.w	c4c6 <__udivmoddi4+0x2b2>
    c332:	461a      	mov	r2, r3
    c334:	ebac 0c09 	sub.w	ip, ip, r9
    c338:	b2a3      	uxth	r3, r4
    c33a:	fbbc f0fe 	udiv	r0, ip, lr
    c33e:	fb0e cc10 	mls	ip, lr, r0, ip
    c342:	fb08 f800 	mul.w	r8, r8, r0
    c346:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
    c34a:	45a0      	cmp	r8, r4
    c34c:	d90e      	bls.n	c36c <__udivmoddi4+0x158>
    c34e:	193c      	adds	r4, r7, r4
    c350:	f100 33ff 	add.w	r3, r0, #4294967295
    c354:	bf2c      	ite	cs
    c356:	f04f 0c01 	movcs.w	ip, #1
    c35a:	f04f 0c00 	movcc.w	ip, #0
    c35e:	45a0      	cmp	r8, r4
    c360:	d903      	bls.n	c36a <__udivmoddi4+0x156>
    c362:	f1bc 0f00 	cmp.w	ip, #0
    c366:	f000 80a8 	beq.w	c4ba <__udivmoddi4+0x2a6>
    c36a:	4618      	mov	r0, r3
    c36c:	eba4 0408 	sub.w	r4, r4, r8
    c370:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    c374:	e79a      	b.n	c2ac <__udivmoddi4+0x98>
    c376:	f1c1 0420 	rsb	r4, r1, #32
    c37a:	408b      	lsls	r3, r1
    c37c:	fa02 fe01 	lsl.w	lr, r2, r1
    c380:	fa0c f601 	lsl.w	r6, ip, r1
    c384:	40e2      	lsrs	r2, r4
    c386:	fa20 f704 	lsr.w	r7, r0, r4
    c38a:	fa2c fc04 	lsr.w	ip, ip, r4
    c38e:	fa00 f801 	lsl.w	r8, r0, r1
    c392:	4313      	orrs	r3, r2
    c394:	433e      	orrs	r6, r7
    c396:	0c1f      	lsrs	r7, r3, #16
    c398:	0c32      	lsrs	r2, r6, #16
    c39a:	fa1f f983 	uxth.w	r9, r3
    c39e:	fbbc f0f7 	udiv	r0, ip, r7
    c3a2:	fb07 cc10 	mls	ip, r7, r0, ip
    c3a6:	fb00 fa09 	mul.w	sl, r0, r9
    c3aa:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c3ae:	45e2      	cmp	sl, ip
    c3b0:	d908      	bls.n	c3c4 <__udivmoddi4+0x1b0>
    c3b2:	eb13 0c0c 	adds.w	ip, r3, ip
    c3b6:	f100 32ff 	add.w	r2, r0, #4294967295
    c3ba:	d202      	bcs.n	c3c2 <__udivmoddi4+0x1ae>
    c3bc:	45e2      	cmp	sl, ip
    c3be:	f200 8089 	bhi.w	c4d4 <__udivmoddi4+0x2c0>
    c3c2:	4610      	mov	r0, r2
    c3c4:	ebac 0c0a 	sub.w	ip, ip, sl
    c3c8:	b2b6      	uxth	r6, r6
    c3ca:	fbbc faf7 	udiv	sl, ip, r7
    c3ce:	fb07 cc1a 	mls	ip, r7, sl, ip
    c3d2:	fb0a f909 	mul.w	r9, sl, r9
    c3d6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
    c3da:	4591      	cmp	r9, r2
    c3dc:	d906      	bls.n	c3ec <__udivmoddi4+0x1d8>
    c3de:	189a      	adds	r2, r3, r2
    c3e0:	f10a 36ff 	add.w	r6, sl, #4294967295
    c3e4:	d201      	bcs.n	c3ea <__udivmoddi4+0x1d6>
    c3e6:	4591      	cmp	r9, r2
    c3e8:	d87a      	bhi.n	c4e0 <__udivmoddi4+0x2cc>
    c3ea:	46b2      	mov	sl, r6
    c3ec:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
    c3f0:	eba2 0209 	sub.w	r2, r2, r9
    c3f4:	fba0 670e 	umull	r6, r7, r0, lr
    c3f8:	42ba      	cmp	r2, r7
    c3fa:	46b4      	mov	ip, r6
    c3fc:	46b9      	mov	r9, r7
    c3fe:	d302      	bcc.n	c406 <__udivmoddi4+0x1f2>
    c400:	d107      	bne.n	c412 <__udivmoddi4+0x1fe>
    c402:	45b0      	cmp	r8, r6
    c404:	d205      	bcs.n	c412 <__udivmoddi4+0x1fe>
    c406:	ebb6 0c0e 	subs.w	ip, r6, lr
    c40a:	eb67 0303 	sbc.w	r3, r7, r3
    c40e:	3801      	subs	r0, #1
    c410:	4699      	mov	r9, r3
    c412:	2d00      	cmp	r5, #0
    c414:	d06b      	beq.n	c4ee <__udivmoddi4+0x2da>
    c416:	ebb8 030c 	subs.w	r3, r8, ip
    c41a:	eb62 0209 	sbc.w	r2, r2, r9
    c41e:	fa02 f404 	lsl.w	r4, r2, r4
    c422:	40cb      	lsrs	r3, r1
    c424:	40ca      	lsrs	r2, r1
    c426:	2100      	movs	r1, #0
    c428:	431c      	orrs	r4, r3
    c42a:	e9c5 4200 	strd	r4, r2, [r5]
    c42e:	e742      	b.n	c2b6 <__udivmoddi4+0xa2>
    c430:	40b7      	lsls	r7, r6
    c432:	f1c6 0220 	rsb	r2, r6, #32
    c436:	fa01 f306 	lsl.w	r3, r1, r6
    c43a:	40b4      	lsls	r4, r6
    c43c:	fa21 fc02 	lsr.w	ip, r1, r2
    c440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c444:	fa20 f202 	lsr.w	r2, r0, r2
    c448:	fa1f f887 	uxth.w	r8, r7
    c44c:	fbbc f1fe 	udiv	r1, ip, lr
    c450:	431a      	orrs	r2, r3
    c452:	fb0e cc11 	mls	ip, lr, r1, ip
    c456:	fb01 f008 	mul.w	r0, r1, r8
    c45a:	0c13      	lsrs	r3, r2, #16
    c45c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    c460:	4560      	cmp	r0, ip
    c462:	d907      	bls.n	c474 <__udivmoddi4+0x260>
    c464:	eb17 0c0c 	adds.w	ip, r7, ip
    c468:	f101 33ff 	add.w	r3, r1, #4294967295
    c46c:	d201      	bcs.n	c472 <__udivmoddi4+0x25e>
    c46e:	4560      	cmp	r0, ip
    c470:	d833      	bhi.n	c4da <__udivmoddi4+0x2c6>
    c472:	4619      	mov	r1, r3
    c474:	ebac 0c00 	sub.w	ip, ip, r0
    c478:	b292      	uxth	r2, r2
    c47a:	fbbc f0fe 	udiv	r0, ip, lr
    c47e:	fb0e cc10 	mls	ip, lr, r0, ip
    c482:	fb00 f308 	mul.w	r3, r0, r8
    c486:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c48a:	4563      	cmp	r3, ip
    c48c:	d907      	bls.n	c49e <__udivmoddi4+0x28a>
    c48e:	eb17 0c0c 	adds.w	ip, r7, ip
    c492:	f100 32ff 	add.w	r2, r0, #4294967295
    c496:	d201      	bcs.n	c49c <__udivmoddi4+0x288>
    c498:	4563      	cmp	r3, ip
    c49a:	d825      	bhi.n	c4e8 <__udivmoddi4+0x2d4>
    c49c:	4610      	mov	r0, r2
    c49e:	ebac 0303 	sub.w	r3, ip, r3
    c4a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c4a6:	e730      	b.n	c30a <__udivmoddi4+0xf6>
    c4a8:	4629      	mov	r1, r5
    c4aa:	4628      	mov	r0, r5
    c4ac:	e703      	b.n	c2b6 <__udivmoddi4+0xa2>
    c4ae:	1a84      	subs	r4, r0, r2
    c4b0:	eb6c 0303 	sbc.w	r3, ip, r3
    c4b4:	2001      	movs	r0, #1
    c4b6:	469a      	mov	sl, r3
    c4b8:	e715      	b.n	c2e6 <__udivmoddi4+0xd2>
    c4ba:	3802      	subs	r0, #2
    c4bc:	443c      	add	r4, r7
    c4be:	e755      	b.n	c36c <__udivmoddi4+0x158>
    c4c0:	3802      	subs	r0, #2
    c4c2:	443c      	add	r4, r7
    c4c4:	e6ed      	b.n	c2a2 <__udivmoddi4+0x8e>
    c4c6:	3a02      	subs	r2, #2
    c4c8:	44bc      	add	ip, r7
    c4ca:	e733      	b.n	c334 <__udivmoddi4+0x120>
    c4cc:	f1ae 0e02 	sub.w	lr, lr, #2
    c4d0:	443b      	add	r3, r7
    c4d2:	e6d2      	b.n	c27a <__udivmoddi4+0x66>
    c4d4:	3802      	subs	r0, #2
    c4d6:	449c      	add	ip, r3
    c4d8:	e774      	b.n	c3c4 <__udivmoddi4+0x1b0>
    c4da:	3902      	subs	r1, #2
    c4dc:	44bc      	add	ip, r7
    c4de:	e7c9      	b.n	c474 <__udivmoddi4+0x260>
    c4e0:	f1aa 0a02 	sub.w	sl, sl, #2
    c4e4:	441a      	add	r2, r3
    c4e6:	e781      	b.n	c3ec <__udivmoddi4+0x1d8>
    c4e8:	3802      	subs	r0, #2
    c4ea:	44bc      	add	ip, r7
    c4ec:	e7d7      	b.n	c49e <__udivmoddi4+0x28a>
    c4ee:	4629      	mov	r1, r5
    c4f0:	e6e1      	b.n	c2b6 <__udivmoddi4+0xa2>
    c4f2:	bf00      	nop

0000c4f4 <__aeabi_idiv0>:
    c4f4:	4770      	bx	lr
    c4f6:	bf00      	nop

0000c4f8 <ocrypto_bigint_add128>:
    c4f8:	b470      	push	{r4, r5, r6}
    c4fa:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c4fe:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c502:	185b      	adds	r3, r3, r1
    c504:	eb54 040c 	adcs.w	r4, r4, ip
    c508:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c50c:	414d      	adcs	r5, r1
    c50e:	eb56 060c 	adcs.w	r6, r6, ip
    c512:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c516:	4180      	sbcs	r0, r0
    c518:	3001      	adds	r0, #1
    c51a:	bc70      	pop	{r4, r5, r6}
    c51c:	4770      	bx	lr

0000c51e <ocrypto_bigint_sub128>:
    c51e:	b470      	push	{r4, r5, r6}
    c520:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
    c524:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c528:	1a5b      	subs	r3, r3, r1
    c52a:	eb74 040c 	sbcs.w	r4, r4, ip
    c52e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c532:	418d      	sbcs	r5, r1
    c534:	eb76 060c 	sbcs.w	r6, r6, ip
    c538:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
    c53c:	4180      	sbcs	r0, r0
    c53e:	4240      	negs	r0, r0
    c540:	bc70      	pop	{r4, r5, r6}
    c542:	4770      	bx	lr

0000c544 <ocrypto_bigint_add256>:
    c544:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c548:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c54c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c550:	185b      	adds	r3, r3, r1
    c552:	eb54 040c 	adcs.w	r4, r4, ip
    c556:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c55a:	414d      	adcs	r5, r1
    c55c:	eb56 060c 	adcs.w	r6, r6, ip
    c560:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c564:	414f      	adcs	r7, r1
    c566:	eb58 080c 	adcs.w	r8, r8, ip
    c56a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c56e:	eb59 0901 	adcs.w	r9, r9, r1
    c572:	eb5a 0a0c 	adcs.w	sl, sl, ip
    c576:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c57a:	4180      	sbcs	r0, r0
    c57c:	3001      	adds	r0, #1
    c57e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c582:	4770      	bx	lr

0000c584 <ocrypto_bigint_sub256>:
    c584:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c588:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    c58c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c590:	1a5b      	subs	r3, r3, r1
    c592:	eb74 040c 	sbcs.w	r4, r4, ip
    c596:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c59a:	418d      	sbcs	r5, r1
    c59c:	eb76 060c 	sbcs.w	r6, r6, ip
    c5a0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5a4:	418f      	sbcs	r7, r1
    c5a6:	eb78 080c 	sbcs.w	r8, r8, ip
    c5aa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    c5ae:	eb79 0901 	sbcs.w	r9, r9, r1
    c5b2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    c5b6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    c5ba:	4180      	sbcs	r0, r0
    c5bc:	4240      	negs	r0, r0
    c5be:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5c2:	4770      	bx	lr

0000c5c4 <ocrypto_bigint_cadd256>:
    c5c4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c5c8:	4252      	negs	r2, r2
    c5ca:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c5ce:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c5d2:	4017      	ands	r7, r2
    c5d4:	19db      	adds	r3, r3, r7
    c5d6:	ea18 0802 	ands.w	r8, r8, r2
    c5da:	eb54 0408 	adcs.w	r4, r4, r8
    c5de:	ea19 0902 	ands.w	r9, r9, r2
    c5e2:	eb55 0509 	adcs.w	r5, r5, r9
    c5e6:	ea1a 0a02 	ands.w	sl, sl, r2
    c5ea:	eb56 060a 	adcs.w	r6, r6, sl
    c5ee:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c5f0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c5f4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c5f8:	4017      	ands	r7, r2
    c5fa:	417b      	adcs	r3, r7
    c5fc:	ea18 0802 	ands.w	r8, r8, r2
    c600:	eb54 0408 	adcs.w	r4, r4, r8
    c604:	ea19 0902 	ands.w	r9, r9, r2
    c608:	eb55 0509 	adcs.w	r5, r5, r9
    c60c:	ea1a 0a02 	ands.w	sl, sl, r2
    c610:	eb56 060a 	adcs.w	r6, r6, sl
    c614:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c616:	4180      	sbcs	r0, r0
    c618:	3001      	adds	r0, #1
    c61a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c61e:	4770      	bx	lr

0000c620 <ocrypto_bigint_csub256>:
    c620:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c624:	4252      	negs	r2, r2
    c626:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c62a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c62e:	4017      	ands	r7, r2
    c630:	1bdb      	subs	r3, r3, r7
    c632:	ea18 0802 	ands.w	r8, r8, r2
    c636:	eb74 0408 	sbcs.w	r4, r4, r8
    c63a:	ea19 0902 	ands.w	r9, r9, r2
    c63e:	eb75 0509 	sbcs.w	r5, r5, r9
    c642:	ea1a 0a02 	ands.w	sl, sl, r2
    c646:	eb76 060a 	sbcs.w	r6, r6, sl
    c64a:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c64c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
    c650:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    c654:	4017      	ands	r7, r2
    c656:	41bb      	sbcs	r3, r7
    c658:	ea18 0802 	ands.w	r8, r8, r2
    c65c:	eb74 0408 	sbcs.w	r4, r4, r8
    c660:	ea19 0902 	ands.w	r9, r9, r2
    c664:	eb75 0509 	sbcs.w	r5, r5, r9
    c668:	ea1a 0a02 	ands.w	sl, sl, r2
    c66c:	eb76 060a 	sbcs.w	r6, r6, sl
    c670:	c078      	stmia	r0!, {r3, r4, r5, r6}
    c672:	4180      	sbcs	r0, r0
    c674:	4240      	negs	r0, r0
    c676:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c67a:	4770      	bx	lr

0000c67c <cswap64>:
    c67c:	e890 0030 	ldmia.w	r0, {r4, r5}
    c680:	e891 00c0 	ldmia.w	r1, {r6, r7}
    c684:	1ba3      	subs	r3, r4, r6
    c686:	4013      	ands	r3, r2
    c688:	1ae4      	subs	r4, r4, r3
    c68a:	18f6      	adds	r6, r6, r3
    c68c:	1beb      	subs	r3, r5, r7
    c68e:	4013      	ands	r3, r2
    c690:	1aed      	subs	r5, r5, r3
    c692:	18ff      	adds	r7, r7, r3
    c694:	c030      	stmia	r0!, {r4, r5}
    c696:	c1c0      	stmia	r1!, {r6, r7}
    c698:	4770      	bx	lr

0000c69a <ocrypto_bigint_cswap256>:
    c69a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c69c:	4252      	negs	r2, r2
    c69e:	f7ff ffed 	bl	c67c <cswap64>
    c6a2:	f7ff ffeb 	bl	c67c <cswap64>
    c6a6:	f7ff ffe9 	bl	c67c <cswap64>
    c6aa:	f7ff ffe7 	bl	c67c <cswap64>
    c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c6b0 <ocrypto_bigint_mul128>:
    c6b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c6b4:	c93a      	ldmia	r1, {r1, r3, r4, r5}
    c6b6:	6816      	ldr	r6, [r2, #0]
    c6b8:	fba1 9a06 	umull	r9, sl, r1, r6
    c6bc:	f04f 0c00 	mov.w	ip, #0
    c6c0:	fbe3 ac06 	umlal	sl, ip, r3, r6
    c6c4:	f04f 0700 	mov.w	r7, #0
    c6c8:	fbe4 c706 	umlal	ip, r7, r4, r6
    c6cc:	f04f 0800 	mov.w	r8, #0
    c6d0:	fbe5 7806 	umlal	r7, r8, r5, r6
    c6d4:	f840 9b04 	str.w	r9, [r0], #4
    c6d8:	6856      	ldr	r6, [r2, #4]
    c6da:	f04f 0900 	mov.w	r9, #0
    c6de:	fbe1 a906 	umlal	sl, r9, r1, r6
    c6e2:	eb1c 0c09 	adds.w	ip, ip, r9
    c6e6:	f04f 0900 	mov.w	r9, #0
    c6ea:	eb49 0909 	adc.w	r9, r9, r9
    c6ee:	fbe3 c906 	umlal	ip, r9, r3, r6
    c6f2:	eb17 0709 	adds.w	r7, r7, r9
    c6f6:	f04f 0900 	mov.w	r9, #0
    c6fa:	eb49 0909 	adc.w	r9, r9, r9
    c6fe:	fbe4 7906 	umlal	r7, r9, r4, r6
    c702:	eb18 0809 	adds.w	r8, r8, r9
    c706:	f04f 0900 	mov.w	r9, #0
    c70a:	eb49 0909 	adc.w	r9, r9, r9
    c70e:	fbe5 8906 	umlal	r8, r9, r5, r6
    c712:	f840 ab04 	str.w	sl, [r0], #4
    c716:	6896      	ldr	r6, [r2, #8]
    c718:	f04f 0a00 	mov.w	sl, #0
    c71c:	fbe1 ca06 	umlal	ip, sl, r1, r6
    c720:	eb17 070a 	adds.w	r7, r7, sl
    c724:	f04f 0a00 	mov.w	sl, #0
    c728:	eb4a 0a0a 	adc.w	sl, sl, sl
    c72c:	fbe3 7a06 	umlal	r7, sl, r3, r6
    c730:	eb18 080a 	adds.w	r8, r8, sl
    c734:	f04f 0a00 	mov.w	sl, #0
    c738:	eb4a 0a0a 	adc.w	sl, sl, sl
    c73c:	fbe4 8a06 	umlal	r8, sl, r4, r6
    c740:	eb19 090a 	adds.w	r9, r9, sl
    c744:	f04f 0a00 	mov.w	sl, #0
    c748:	eb4a 0a0a 	adc.w	sl, sl, sl
    c74c:	fbe5 9a06 	umlal	r9, sl, r5, r6
    c750:	f840 cb04 	str.w	ip, [r0], #4
    c754:	68d6      	ldr	r6, [r2, #12]
    c756:	f04f 0c00 	mov.w	ip, #0
    c75a:	fbe1 7c06 	umlal	r7, ip, r1, r6
    c75e:	eb18 080c 	adds.w	r8, r8, ip
    c762:	f04f 0c00 	mov.w	ip, #0
    c766:	eb4c 0c0c 	adc.w	ip, ip, ip
    c76a:	fbe3 8c06 	umlal	r8, ip, r3, r6
    c76e:	eb19 090c 	adds.w	r9, r9, ip
    c772:	f04f 0c00 	mov.w	ip, #0
    c776:	eb4c 0c0c 	adc.w	ip, ip, ip
    c77a:	fbe4 9c06 	umlal	r9, ip, r4, r6
    c77e:	eb1a 0a0c 	adds.w	sl, sl, ip
    c782:	f04f 0c00 	mov.w	ip, #0
    c786:	eb4c 0c0c 	adc.w	ip, ip, ip
    c78a:	fbe5 ac06 	umlal	sl, ip, r5, r6
    c78e:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
    c792:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    c796:	4770      	bx	lr

0000c798 <ocrypto_bigint_sqr256>:
    c798:	460a      	mov	r2, r1

0000c79a <ocrypto_bigint_mul256>:
    c79a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c79e:	ec41 0a14 	vmov	s8, s9, r0, r1
    c7a2:	ec92 0a08 	vldmia	r2, {s0-s7}
    c7a6:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c7a8:	ee10 0a10 	vmov	r0, s0
    c7ac:	fba1 7800 	umull	r7, r8, r1, r0
    c7b0:	f04f 0900 	mov.w	r9, #0
    c7b4:	fbe2 8900 	umlal	r8, r9, r2, r0
    c7b8:	f04f 0a00 	mov.w	sl, #0
    c7bc:	fbe3 9a00 	umlal	r9, sl, r3, r0
    c7c0:	f04f 0b00 	mov.w	fp, #0
    c7c4:	fbe4 ab00 	umlal	sl, fp, r4, r0
    c7c8:	ee12 0a10 	vmov	r0, s4
    c7cc:	f04f 0c00 	mov.w	ip, #0
    c7d0:	fbe1 bc00 	umlal	fp, ip, r1, r0
    c7d4:	f04f 0e00 	mov.w	lr, #0
    c7d8:	fbe2 ce00 	umlal	ip, lr, r2, r0
    c7dc:	f04f 0500 	mov.w	r5, #0
    c7e0:	fbe3 e500 	umlal	lr, r5, r3, r0
    c7e4:	f04f 0600 	mov.w	r6, #0
    c7e8:	fbe4 5600 	umlal	r5, r6, r4, r0
    c7ec:	ee05 7a10 	vmov	s10, r7
    c7f0:	ee10 0a90 	vmov	r0, s1
    c7f4:	f04f 0700 	mov.w	r7, #0
    c7f8:	fbe1 8700 	umlal	r8, r7, r1, r0
    c7fc:	eb19 0907 	adds.w	r9, r9, r7
    c800:	f04f 0700 	mov.w	r7, #0
    c804:	eb47 0707 	adc.w	r7, r7, r7
    c808:	fbe2 9700 	umlal	r9, r7, r2, r0
    c80c:	eb1a 0a07 	adds.w	sl, sl, r7
    c810:	f04f 0700 	mov.w	r7, #0
    c814:	eb47 0707 	adc.w	r7, r7, r7
    c818:	fbe3 a700 	umlal	sl, r7, r3, r0
    c81c:	eb1b 0b07 	adds.w	fp, fp, r7
    c820:	f04f 0700 	mov.w	r7, #0
    c824:	eb47 0707 	adc.w	r7, r7, r7
    c828:	fbe4 b700 	umlal	fp, r7, r4, r0
    c82c:	ee12 0a90 	vmov	r0, s5
    c830:	eb1c 0c07 	adds.w	ip, ip, r7
    c834:	f04f 0700 	mov.w	r7, #0
    c838:	eb47 0707 	adc.w	r7, r7, r7
    c83c:	fbe1 c700 	umlal	ip, r7, r1, r0
    c840:	eb1e 0e07 	adds.w	lr, lr, r7
    c844:	f04f 0700 	mov.w	r7, #0
    c848:	eb47 0707 	adc.w	r7, r7, r7
    c84c:	fbe2 e700 	umlal	lr, r7, r2, r0
    c850:	19ed      	adds	r5, r5, r7
    c852:	f04f 0700 	mov.w	r7, #0
    c856:	eb47 0707 	adc.w	r7, r7, r7
    c85a:	fbe3 5700 	umlal	r5, r7, r3, r0
    c85e:	19f6      	adds	r6, r6, r7
    c860:	f04f 0700 	mov.w	r7, #0
    c864:	eb47 0707 	adc.w	r7, r7, r7
    c868:	fbe4 6700 	umlal	r6, r7, r4, r0
    c86c:	ee05 8a90 	vmov	s11, r8
    c870:	ee11 0a10 	vmov	r0, s2
    c874:	f04f 0800 	mov.w	r8, #0
    c878:	fbe1 9800 	umlal	r9, r8, r1, r0
    c87c:	eb1a 0a08 	adds.w	sl, sl, r8
    c880:	f04f 0800 	mov.w	r8, #0
    c884:	eb48 0808 	adc.w	r8, r8, r8
    c888:	fbe2 a800 	umlal	sl, r8, r2, r0
    c88c:	eb1b 0b08 	adds.w	fp, fp, r8
    c890:	f04f 0800 	mov.w	r8, #0
    c894:	eb48 0808 	adc.w	r8, r8, r8
    c898:	fbe3 b800 	umlal	fp, r8, r3, r0
    c89c:	eb1c 0c08 	adds.w	ip, ip, r8
    c8a0:	f04f 0800 	mov.w	r8, #0
    c8a4:	eb48 0808 	adc.w	r8, r8, r8
    c8a8:	fbe4 c800 	umlal	ip, r8, r4, r0
    c8ac:	ee13 0a10 	vmov	r0, s6
    c8b0:	eb1e 0e08 	adds.w	lr, lr, r8
    c8b4:	f04f 0800 	mov.w	r8, #0
    c8b8:	eb48 0808 	adc.w	r8, r8, r8
    c8bc:	fbe1 e800 	umlal	lr, r8, r1, r0
    c8c0:	eb15 0508 	adds.w	r5, r5, r8
    c8c4:	f04f 0800 	mov.w	r8, #0
    c8c8:	eb48 0808 	adc.w	r8, r8, r8
    c8cc:	fbe2 5800 	umlal	r5, r8, r2, r0
    c8d0:	eb16 0608 	adds.w	r6, r6, r8
    c8d4:	f04f 0800 	mov.w	r8, #0
    c8d8:	eb48 0808 	adc.w	r8, r8, r8
    c8dc:	fbe3 6800 	umlal	r6, r8, r3, r0
    c8e0:	eb17 0708 	adds.w	r7, r7, r8
    c8e4:	f04f 0800 	mov.w	r8, #0
    c8e8:	eb48 0808 	adc.w	r8, r8, r8
    c8ec:	fbe4 7800 	umlal	r7, r8, r4, r0
    c8f0:	ee06 9a10 	vmov	s12, r9
    c8f4:	ee11 0a90 	vmov	r0, s3
    c8f8:	f04f 0900 	mov.w	r9, #0
    c8fc:	fbe1 a900 	umlal	sl, r9, r1, r0
    c900:	eb1b 0b09 	adds.w	fp, fp, r9
    c904:	f04f 0900 	mov.w	r9, #0
    c908:	eb49 0909 	adc.w	r9, r9, r9
    c90c:	fbe2 b900 	umlal	fp, r9, r2, r0
    c910:	eb1c 0c09 	adds.w	ip, ip, r9
    c914:	f04f 0900 	mov.w	r9, #0
    c918:	eb49 0909 	adc.w	r9, r9, r9
    c91c:	fbe3 c900 	umlal	ip, r9, r3, r0
    c920:	eb1e 0e09 	adds.w	lr, lr, r9
    c924:	f04f 0900 	mov.w	r9, #0
    c928:	eb49 0909 	adc.w	r9, r9, r9
    c92c:	fbe4 e900 	umlal	lr, r9, r4, r0
    c930:	ee13 0a90 	vmov	r0, s7
    c934:	eb15 0509 	adds.w	r5, r5, r9
    c938:	f04f 0900 	mov.w	r9, #0
    c93c:	eb49 0909 	adc.w	r9, r9, r9
    c940:	fbe1 5900 	umlal	r5, r9, r1, r0
    c944:	eb16 0609 	adds.w	r6, r6, r9
    c948:	f04f 0900 	mov.w	r9, #0
    c94c:	eb49 0909 	adc.w	r9, r9, r9
    c950:	fbe2 6900 	umlal	r6, r9, r2, r0
    c954:	eb17 0709 	adds.w	r7, r7, r9
    c958:	f04f 0900 	mov.w	r9, #0
    c95c:	eb49 0909 	adc.w	r9, r9, r9
    c960:	fbe3 7900 	umlal	r7, r9, r3, r0
    c964:	eb18 0809 	adds.w	r8, r8, r9
    c968:	f04f 0900 	mov.w	r9, #0
    c96c:	eb49 0909 	adc.w	r9, r9, r9
    c970:	fbe4 8900 	umlal	r8, r9, r4, r0
    c974:	ee06 aa90 	vmov	s13, sl
    c978:	ee14 1a90 	vmov	r1, s9
    c97c:	f101 0110 	add.w	r1, r1, #16
    c980:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    c982:	ee10 0a10 	vmov	r0, s0
    c986:	f04f 0a00 	mov.w	sl, #0
    c98a:	fbe1 ba00 	umlal	fp, sl, r1, r0
    c98e:	eb1c 0c0a 	adds.w	ip, ip, sl
    c992:	f04f 0a00 	mov.w	sl, #0
    c996:	eb4a 0a0a 	adc.w	sl, sl, sl
    c99a:	fbe2 ca00 	umlal	ip, sl, r2, r0
    c99e:	eb1e 0e0a 	adds.w	lr, lr, sl
    c9a2:	f04f 0a00 	mov.w	sl, #0
    c9a6:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9aa:	fbe3 ea00 	umlal	lr, sl, r3, r0
    c9ae:	eb15 050a 	adds.w	r5, r5, sl
    c9b2:	f04f 0a00 	mov.w	sl, #0
    c9b6:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9ba:	fbe4 5a00 	umlal	r5, sl, r4, r0
    c9be:	ee12 0a10 	vmov	r0, s4
    c9c2:	eb16 060a 	adds.w	r6, r6, sl
    c9c6:	f04f 0a00 	mov.w	sl, #0
    c9ca:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9ce:	fbe1 6a00 	umlal	r6, sl, r1, r0
    c9d2:	eb17 070a 	adds.w	r7, r7, sl
    c9d6:	f04f 0a00 	mov.w	sl, #0
    c9da:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9de:	fbe2 7a00 	umlal	r7, sl, r2, r0
    c9e2:	eb18 080a 	adds.w	r8, r8, sl
    c9e6:	f04f 0a00 	mov.w	sl, #0
    c9ea:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9ee:	fbe3 8a00 	umlal	r8, sl, r3, r0
    c9f2:	eb19 090a 	adds.w	r9, r9, sl
    c9f6:	f04f 0a00 	mov.w	sl, #0
    c9fa:	eb4a 0a0a 	adc.w	sl, sl, sl
    c9fe:	fbe4 9a00 	umlal	r9, sl, r4, r0
    ca02:	ee07 ba10 	vmov	s14, fp
    ca06:	ee10 0a90 	vmov	r0, s1
    ca0a:	f04f 0b00 	mov.w	fp, #0
    ca0e:	fbe1 cb00 	umlal	ip, fp, r1, r0
    ca12:	eb1e 0e0b 	adds.w	lr, lr, fp
    ca16:	f04f 0b00 	mov.w	fp, #0
    ca1a:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca1e:	fbe2 eb00 	umlal	lr, fp, r2, r0
    ca22:	eb15 050b 	adds.w	r5, r5, fp
    ca26:	f04f 0b00 	mov.w	fp, #0
    ca2a:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca2e:	fbe3 5b00 	umlal	r5, fp, r3, r0
    ca32:	eb16 060b 	adds.w	r6, r6, fp
    ca36:	f04f 0b00 	mov.w	fp, #0
    ca3a:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca3e:	fbe4 6b00 	umlal	r6, fp, r4, r0
    ca42:	ee12 0a90 	vmov	r0, s5
    ca46:	eb17 070b 	adds.w	r7, r7, fp
    ca4a:	f04f 0b00 	mov.w	fp, #0
    ca4e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca52:	fbe1 7b00 	umlal	r7, fp, r1, r0
    ca56:	eb18 080b 	adds.w	r8, r8, fp
    ca5a:	f04f 0b00 	mov.w	fp, #0
    ca5e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca62:	fbe2 8b00 	umlal	r8, fp, r2, r0
    ca66:	eb19 090b 	adds.w	r9, r9, fp
    ca6a:	f04f 0b00 	mov.w	fp, #0
    ca6e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca72:	fbe3 9b00 	umlal	r9, fp, r3, r0
    ca76:	eb1a 0a0b 	adds.w	sl, sl, fp
    ca7a:	f04f 0b00 	mov.w	fp, #0
    ca7e:	eb4b 0b0b 	adc.w	fp, fp, fp
    ca82:	fbe4 ab00 	umlal	sl, fp, r4, r0
    ca86:	ee07 ca90 	vmov	s15, ip
    ca8a:	ee11 0a10 	vmov	r0, s2
    ca8e:	f04f 0c00 	mov.w	ip, #0
    ca92:	fbe1 ec00 	umlal	lr, ip, r1, r0
    ca96:	eb15 050c 	adds.w	r5, r5, ip
    ca9a:	f04f 0c00 	mov.w	ip, #0
    ca9e:	eb4c 0c0c 	adc.w	ip, ip, ip
    caa2:	fbe2 5c00 	umlal	r5, ip, r2, r0
    caa6:	eb16 060c 	adds.w	r6, r6, ip
    caaa:	f04f 0c00 	mov.w	ip, #0
    caae:	eb4c 0c0c 	adc.w	ip, ip, ip
    cab2:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cab6:	eb17 070c 	adds.w	r7, r7, ip
    caba:	f04f 0c00 	mov.w	ip, #0
    cabe:	eb4c 0c0c 	adc.w	ip, ip, ip
    cac2:	fbe4 7c00 	umlal	r7, ip, r4, r0
    cac6:	ee13 0a10 	vmov	r0, s6
    caca:	eb18 080c 	adds.w	r8, r8, ip
    cace:	f04f 0c00 	mov.w	ip, #0
    cad2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cad6:	fbe1 8c00 	umlal	r8, ip, r1, r0
    cada:	eb19 090c 	adds.w	r9, r9, ip
    cade:	f04f 0c00 	mov.w	ip, #0
    cae2:	eb4c 0c0c 	adc.w	ip, ip, ip
    cae6:	fbe2 9c00 	umlal	r9, ip, r2, r0
    caea:	eb1a 0a0c 	adds.w	sl, sl, ip
    caee:	f04f 0c00 	mov.w	ip, #0
    caf2:	eb4c 0c0c 	adc.w	ip, ip, ip
    caf6:	fbe3 ac00 	umlal	sl, ip, r3, r0
    cafa:	eb1b 0b0c 	adds.w	fp, fp, ip
    cafe:	f04f 0c00 	mov.w	ip, #0
    cb02:	eb4c 0c0c 	adc.w	ip, ip, ip
    cb06:	fbe4 bc00 	umlal	fp, ip, r4, r0
    cb0a:	ee08 ea10 	vmov	s16, lr
    cb0e:	ee11 0a90 	vmov	r0, s3
    cb12:	f04f 0e00 	mov.w	lr, #0
    cb16:	fbe1 5e00 	umlal	r5, lr, r1, r0
    cb1a:	eb16 060e 	adds.w	r6, r6, lr
    cb1e:	f04f 0e00 	mov.w	lr, #0
    cb22:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb26:	fbe2 6e00 	umlal	r6, lr, r2, r0
    cb2a:	eb17 070e 	adds.w	r7, r7, lr
    cb2e:	f04f 0e00 	mov.w	lr, #0
    cb32:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb36:	fbe3 7e00 	umlal	r7, lr, r3, r0
    cb3a:	eb18 080e 	adds.w	r8, r8, lr
    cb3e:	f04f 0e00 	mov.w	lr, #0
    cb42:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb46:	fbe4 8e00 	umlal	r8, lr, r4, r0
    cb4a:	ee13 0a90 	vmov	r0, s7
    cb4e:	eb19 090e 	adds.w	r9, r9, lr
    cb52:	f04f 0e00 	mov.w	lr, #0
    cb56:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb5a:	fbe1 9e00 	umlal	r9, lr, r1, r0
    cb5e:	eb1a 0a0e 	adds.w	sl, sl, lr
    cb62:	f04f 0e00 	mov.w	lr, #0
    cb66:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb6a:	fbe2 ae00 	umlal	sl, lr, r2, r0
    cb6e:	eb1b 0b0e 	adds.w	fp, fp, lr
    cb72:	f04f 0e00 	mov.w	lr, #0
    cb76:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb7a:	fbe3 be00 	umlal	fp, lr, r3, r0
    cb7e:	eb1c 0c0e 	adds.w	ip, ip, lr
    cb82:	f04f 0e00 	mov.w	lr, #0
    cb86:	eb4e 0e0e 	adc.w	lr, lr, lr
    cb8a:	fbe4 ce00 	umlal	ip, lr, r4, r0
    cb8e:	ee14 0a10 	vmov	r0, s8
    cb92:	eca0 5a07 	vstmia	r0!, {s10-s16}
    cb96:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    cb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb9e:	bf00      	nop

0000cba0 <ocrypto_constant_time_equal>:
    cba0:	b430      	push	{r4, r5}
    cba2:	f04f 0300 	mov.w	r3, #0

0000cba6 <constant_time_equal_loop>:
    cba6:	f810 4b01 	ldrb.w	r4, [r0], #1
    cbaa:	f811 5b01 	ldrb.w	r5, [r1], #1
    cbae:	3a01      	subs	r2, #1
    cbb0:	ea84 0405 	eor.w	r4, r4, r5
    cbb4:	ea43 0304 	orr.w	r3, r3, r4
    cbb8:	d1f5      	bne.n	cba6 <constant_time_equal_loop>
    cbba:	f1a3 0301 	sub.w	r3, r3, #1
    cbbe:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cbc2:	bc30      	pop	{r4, r5}
    cbc4:	4770      	bx	lr

0000cbc6 <ocrypto_constant_time_is_zero>:
    cbc6:	f04f 0300 	mov.w	r3, #0

0000cbca <constant_time_is_zero_loop>:
    cbca:	f810 2b01 	ldrb.w	r2, [r0], #1
    cbce:	3901      	subs	r1, #1
    cbd0:	ea43 0302 	orr.w	r3, r3, r2
    cbd4:	d1f9      	bne.n	cbca <constant_time_is_zero_loop>
    cbd6:	f1a3 0301 	sub.w	r3, r3, #1
    cbda:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    cbde:	4770      	bx	lr

0000cbe0 <ocrypto_constant_time_copy>:
    cbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
    cbe4:	f800 3b01 	strb.w	r3, [r0], #1
    cbe8:	3a01      	subs	r2, #1
    cbea:	d1f9      	bne.n	cbe0 <ocrypto_constant_time_copy>
    cbec:	4770      	bx	lr

0000cbee <ocrypto_constant_time_fill_zero>:
    cbee:	2200      	movs	r2, #0

0000cbf0 <constant_time_fill_zero_loop>:
    cbf0:	f800 2b01 	strb.w	r2, [r0], #1
    cbf4:	3901      	subs	r1, #1
    cbf6:	d1fb      	bne.n	cbf0 <constant_time_fill_zero_loop>
    cbf8:	4770      	bx	lr
    cbfa:	bf00      	nop

0000cbfc <ocrypto_mod_p256_add>:
    cbfc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc00:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc04:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc08:	185b      	adds	r3, r3, r1
    cc0a:	eb54 040c 	adcs.w	r4, r4, ip
    cc0e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc12:	414d      	adcs	r5, r1
    cc14:	eb56 060c 	adcs.w	r6, r6, ip
    cc18:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc1c:	414f      	adcs	r7, r1
    cc1e:	eb58 080c 	adcs.w	r8, r8, ip
    cc22:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc26:	eb59 0901 	adcs.w	r9, r9, r1
    cc2a:	eb5a 0a0c 	adcs.w	sl, sl, ip
    cc2e:	4189      	sbcs	r1, r1
    cc30:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    cc34:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    cc38:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    cc3c:	f176 0600 	sbcs.w	r6, r6, #0
    cc40:	f177 0700 	sbcs.w	r7, r7, #0
    cc44:	f178 0800 	sbcs.w	r8, r8, #0
    cc48:	f179 0901 	sbcs.w	r9, r9, #1
    cc4c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    cc50:	f151 0100 	adcs.w	r1, r1, #0
    cc54:	424a      	negs	r2, r1
    cc56:	185b      	adds	r3, r3, r1
    cc58:	414c      	adcs	r4, r1
    cc5a:	414d      	adcs	r5, r1
    cc5c:	f156 0600 	adcs.w	r6, r6, #0
    cc60:	f157 0700 	adcs.w	r7, r7, #0
    cc64:	f158 0800 	adcs.w	r8, r8, #0
    cc68:	eb59 0902 	adcs.w	r9, r9, r2
    cc6c:	eb5a 0a01 	adcs.w	sl, sl, r1
    cc70:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc74:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc78:	4770      	bx	lr

0000cc7a <ocrypto_mod_p256_sub>:
    cc7a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    cc7e:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    cc82:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc86:	1a5b      	subs	r3, r3, r1
    cc88:	eb74 040c 	sbcs.w	r4, r4, ip
    cc8c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc90:	418d      	sbcs	r5, r1
    cc92:	eb76 060c 	sbcs.w	r6, r6, ip
    cc96:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cc9a:	418f      	sbcs	r7, r1
    cc9c:	eb78 080c 	sbcs.w	r8, r8, ip
    cca0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    cca4:	eb79 0901 	sbcs.w	r9, r9, r1
    cca8:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    ccac:	4189      	sbcs	r1, r1
    ccae:	424a      	negs	r2, r1
    ccb0:	185b      	adds	r3, r3, r1
    ccb2:	414c      	adcs	r4, r1
    ccb4:	414d      	adcs	r5, r1
    ccb6:	f156 0600 	adcs.w	r6, r6, #0
    ccba:	f157 0700 	adcs.w	r7, r7, #0
    ccbe:	f158 0800 	adcs.w	r8, r8, #0
    ccc2:	eb59 0902 	adcs.w	r9, r9, r2
    ccc6:	eb5a 0a01 	adcs.w	sl, sl, r1
    ccca:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    ccce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    ccd2:	4770      	bx	lr

0000ccd4 <ocrypto_mod_p256_square>:
    ccd4:	460a      	mov	r2, r1

0000ccd6 <ocrypto_mod_p256_mul>:
    ccd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccda:	ec41 0a14 	vmov	s8, s9, r0, r1
    ccde:	ec92 0a08 	vldmia	r2, {s0-s7}
    cce2:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cce4:	ee10 0a10 	vmov	r0, s0
    cce8:	fba1 7800 	umull	r7, r8, r1, r0
    ccec:	f04f 0900 	mov.w	r9, #0
    ccf0:	fbe2 8900 	umlal	r8, r9, r2, r0
    ccf4:	f04f 0a00 	mov.w	sl, #0
    ccf8:	fbe3 9a00 	umlal	r9, sl, r3, r0
    ccfc:	f04f 0b00 	mov.w	fp, #0
    cd00:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cd04:	ee12 0a10 	vmov	r0, s4
    cd08:	f04f 0c00 	mov.w	ip, #0
    cd0c:	fbe1 bc00 	umlal	fp, ip, r1, r0
    cd10:	f04f 0e00 	mov.w	lr, #0
    cd14:	fbe2 ce00 	umlal	ip, lr, r2, r0
    cd18:	f04f 0500 	mov.w	r5, #0
    cd1c:	fbe3 e500 	umlal	lr, r5, r3, r0
    cd20:	f04f 0600 	mov.w	r6, #0
    cd24:	fbe4 5600 	umlal	r5, r6, r4, r0
    cd28:	ee05 7a10 	vmov	s10, r7
    cd2c:	ee10 0a90 	vmov	r0, s1
    cd30:	f04f 0700 	mov.w	r7, #0
    cd34:	fbe1 8700 	umlal	r8, r7, r1, r0
    cd38:	eb19 0907 	adds.w	r9, r9, r7
    cd3c:	f04f 0700 	mov.w	r7, #0
    cd40:	eb47 0707 	adc.w	r7, r7, r7
    cd44:	fbe2 9700 	umlal	r9, r7, r2, r0
    cd48:	eb1a 0a07 	adds.w	sl, sl, r7
    cd4c:	f04f 0700 	mov.w	r7, #0
    cd50:	eb47 0707 	adc.w	r7, r7, r7
    cd54:	fbe3 a700 	umlal	sl, r7, r3, r0
    cd58:	eb1b 0b07 	adds.w	fp, fp, r7
    cd5c:	f04f 0700 	mov.w	r7, #0
    cd60:	eb47 0707 	adc.w	r7, r7, r7
    cd64:	fbe4 b700 	umlal	fp, r7, r4, r0
    cd68:	ee12 0a90 	vmov	r0, s5
    cd6c:	eb1c 0c07 	adds.w	ip, ip, r7
    cd70:	f04f 0700 	mov.w	r7, #0
    cd74:	eb47 0707 	adc.w	r7, r7, r7
    cd78:	fbe1 c700 	umlal	ip, r7, r1, r0
    cd7c:	eb1e 0e07 	adds.w	lr, lr, r7
    cd80:	f04f 0700 	mov.w	r7, #0
    cd84:	eb47 0707 	adc.w	r7, r7, r7
    cd88:	fbe2 e700 	umlal	lr, r7, r2, r0
    cd8c:	19ed      	adds	r5, r5, r7
    cd8e:	f04f 0700 	mov.w	r7, #0
    cd92:	eb47 0707 	adc.w	r7, r7, r7
    cd96:	fbe3 5700 	umlal	r5, r7, r3, r0
    cd9a:	19f6      	adds	r6, r6, r7
    cd9c:	f04f 0700 	mov.w	r7, #0
    cda0:	eb47 0707 	adc.w	r7, r7, r7
    cda4:	fbe4 6700 	umlal	r6, r7, r4, r0
    cda8:	ee05 8a90 	vmov	s11, r8
    cdac:	ee11 0a10 	vmov	r0, s2
    cdb0:	f04f 0800 	mov.w	r8, #0
    cdb4:	fbe1 9800 	umlal	r9, r8, r1, r0
    cdb8:	eb1a 0a08 	adds.w	sl, sl, r8
    cdbc:	f04f 0800 	mov.w	r8, #0
    cdc0:	eb48 0808 	adc.w	r8, r8, r8
    cdc4:	fbe2 a800 	umlal	sl, r8, r2, r0
    cdc8:	eb1b 0b08 	adds.w	fp, fp, r8
    cdcc:	f04f 0800 	mov.w	r8, #0
    cdd0:	eb48 0808 	adc.w	r8, r8, r8
    cdd4:	fbe3 b800 	umlal	fp, r8, r3, r0
    cdd8:	eb1c 0c08 	adds.w	ip, ip, r8
    cddc:	f04f 0800 	mov.w	r8, #0
    cde0:	eb48 0808 	adc.w	r8, r8, r8
    cde4:	fbe4 c800 	umlal	ip, r8, r4, r0
    cde8:	ee13 0a10 	vmov	r0, s6
    cdec:	eb1e 0e08 	adds.w	lr, lr, r8
    cdf0:	f04f 0800 	mov.w	r8, #0
    cdf4:	eb48 0808 	adc.w	r8, r8, r8
    cdf8:	fbe1 e800 	umlal	lr, r8, r1, r0
    cdfc:	eb15 0508 	adds.w	r5, r5, r8
    ce00:	f04f 0800 	mov.w	r8, #0
    ce04:	eb48 0808 	adc.w	r8, r8, r8
    ce08:	fbe2 5800 	umlal	r5, r8, r2, r0
    ce0c:	eb16 0608 	adds.w	r6, r6, r8
    ce10:	f04f 0800 	mov.w	r8, #0
    ce14:	eb48 0808 	adc.w	r8, r8, r8
    ce18:	fbe3 6800 	umlal	r6, r8, r3, r0
    ce1c:	eb17 0708 	adds.w	r7, r7, r8
    ce20:	f04f 0800 	mov.w	r8, #0
    ce24:	eb48 0808 	adc.w	r8, r8, r8
    ce28:	fbe4 7800 	umlal	r7, r8, r4, r0
    ce2c:	ee06 9a10 	vmov	s12, r9
    ce30:	ee11 0a90 	vmov	r0, s3
    ce34:	f04f 0900 	mov.w	r9, #0
    ce38:	fbe1 a900 	umlal	sl, r9, r1, r0
    ce3c:	eb1b 0b09 	adds.w	fp, fp, r9
    ce40:	f04f 0900 	mov.w	r9, #0
    ce44:	eb49 0909 	adc.w	r9, r9, r9
    ce48:	fbe2 b900 	umlal	fp, r9, r2, r0
    ce4c:	eb1c 0c09 	adds.w	ip, ip, r9
    ce50:	f04f 0900 	mov.w	r9, #0
    ce54:	eb49 0909 	adc.w	r9, r9, r9
    ce58:	fbe3 c900 	umlal	ip, r9, r3, r0
    ce5c:	eb1e 0e09 	adds.w	lr, lr, r9
    ce60:	f04f 0900 	mov.w	r9, #0
    ce64:	eb49 0909 	adc.w	r9, r9, r9
    ce68:	fbe4 e900 	umlal	lr, r9, r4, r0
    ce6c:	ee13 0a90 	vmov	r0, s7
    ce70:	eb15 0509 	adds.w	r5, r5, r9
    ce74:	f04f 0900 	mov.w	r9, #0
    ce78:	eb49 0909 	adc.w	r9, r9, r9
    ce7c:	fbe1 5900 	umlal	r5, r9, r1, r0
    ce80:	eb16 0609 	adds.w	r6, r6, r9
    ce84:	f04f 0900 	mov.w	r9, #0
    ce88:	eb49 0909 	adc.w	r9, r9, r9
    ce8c:	fbe2 6900 	umlal	r6, r9, r2, r0
    ce90:	eb17 0709 	adds.w	r7, r7, r9
    ce94:	f04f 0900 	mov.w	r9, #0
    ce98:	eb49 0909 	adc.w	r9, r9, r9
    ce9c:	fbe3 7900 	umlal	r7, r9, r3, r0
    cea0:	eb18 0809 	adds.w	r8, r8, r9
    cea4:	f04f 0900 	mov.w	r9, #0
    cea8:	eb49 0909 	adc.w	r9, r9, r9
    ceac:	fbe4 8900 	umlal	r8, r9, r4, r0
    ceb0:	ee06 aa90 	vmov	s13, sl
    ceb4:	ee14 1a90 	vmov	r1, s9
    ceb8:	f101 0110 	add.w	r1, r1, #16
    cebc:	c91e      	ldmia	r1, {r1, r2, r3, r4}
    cebe:	ee10 0a10 	vmov	r0, s0
    cec2:	f04f 0a00 	mov.w	sl, #0
    cec6:	fbe1 ba00 	umlal	fp, sl, r1, r0
    ceca:	eb1c 0c0a 	adds.w	ip, ip, sl
    cece:	f04f 0a00 	mov.w	sl, #0
    ced2:	eb4a 0a0a 	adc.w	sl, sl, sl
    ced6:	fbe2 ca00 	umlal	ip, sl, r2, r0
    ceda:	eb1e 0e0a 	adds.w	lr, lr, sl
    cede:	f04f 0a00 	mov.w	sl, #0
    cee2:	eb4a 0a0a 	adc.w	sl, sl, sl
    cee6:	fbe3 ea00 	umlal	lr, sl, r3, r0
    ceea:	eb15 050a 	adds.w	r5, r5, sl
    ceee:	f04f 0a00 	mov.w	sl, #0
    cef2:	eb4a 0a0a 	adc.w	sl, sl, sl
    cef6:	fbe4 5a00 	umlal	r5, sl, r4, r0
    cefa:	ee12 0a10 	vmov	r0, s4
    cefe:	eb16 060a 	adds.w	r6, r6, sl
    cf02:	f04f 0a00 	mov.w	sl, #0
    cf06:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf0a:	fbe1 6a00 	umlal	r6, sl, r1, r0
    cf0e:	eb17 070a 	adds.w	r7, r7, sl
    cf12:	f04f 0a00 	mov.w	sl, #0
    cf16:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf1a:	fbe2 7a00 	umlal	r7, sl, r2, r0
    cf1e:	eb18 080a 	adds.w	r8, r8, sl
    cf22:	f04f 0a00 	mov.w	sl, #0
    cf26:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf2a:	fbe3 8a00 	umlal	r8, sl, r3, r0
    cf2e:	eb19 090a 	adds.w	r9, r9, sl
    cf32:	f04f 0a00 	mov.w	sl, #0
    cf36:	eb4a 0a0a 	adc.w	sl, sl, sl
    cf3a:	fbe4 9a00 	umlal	r9, sl, r4, r0
    cf3e:	ee07 ba10 	vmov	s14, fp
    cf42:	ee10 0a90 	vmov	r0, s1
    cf46:	f04f 0b00 	mov.w	fp, #0
    cf4a:	fbe1 cb00 	umlal	ip, fp, r1, r0
    cf4e:	eb1e 0e0b 	adds.w	lr, lr, fp
    cf52:	f04f 0b00 	mov.w	fp, #0
    cf56:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf5a:	fbe2 eb00 	umlal	lr, fp, r2, r0
    cf5e:	eb15 050b 	adds.w	r5, r5, fp
    cf62:	f04f 0b00 	mov.w	fp, #0
    cf66:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf6a:	fbe3 5b00 	umlal	r5, fp, r3, r0
    cf6e:	eb16 060b 	adds.w	r6, r6, fp
    cf72:	f04f 0b00 	mov.w	fp, #0
    cf76:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf7a:	fbe4 6b00 	umlal	r6, fp, r4, r0
    cf7e:	ee12 0a90 	vmov	r0, s5
    cf82:	eb17 070b 	adds.w	r7, r7, fp
    cf86:	f04f 0b00 	mov.w	fp, #0
    cf8a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf8e:	fbe1 7b00 	umlal	r7, fp, r1, r0
    cf92:	eb18 080b 	adds.w	r8, r8, fp
    cf96:	f04f 0b00 	mov.w	fp, #0
    cf9a:	eb4b 0b0b 	adc.w	fp, fp, fp
    cf9e:	fbe2 8b00 	umlal	r8, fp, r2, r0
    cfa2:	eb19 090b 	adds.w	r9, r9, fp
    cfa6:	f04f 0b00 	mov.w	fp, #0
    cfaa:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfae:	fbe3 9b00 	umlal	r9, fp, r3, r0
    cfb2:	eb1a 0a0b 	adds.w	sl, sl, fp
    cfb6:	f04f 0b00 	mov.w	fp, #0
    cfba:	eb4b 0b0b 	adc.w	fp, fp, fp
    cfbe:	fbe4 ab00 	umlal	sl, fp, r4, r0
    cfc2:	ee07 ca90 	vmov	s15, ip
    cfc6:	ee11 0a10 	vmov	r0, s2
    cfca:	f04f 0c00 	mov.w	ip, #0
    cfce:	fbe1 ec00 	umlal	lr, ip, r1, r0
    cfd2:	eb15 050c 	adds.w	r5, r5, ip
    cfd6:	f04f 0c00 	mov.w	ip, #0
    cfda:	eb4c 0c0c 	adc.w	ip, ip, ip
    cfde:	fbe2 5c00 	umlal	r5, ip, r2, r0
    cfe2:	eb16 060c 	adds.w	r6, r6, ip
    cfe6:	f04f 0c00 	mov.w	ip, #0
    cfea:	eb4c 0c0c 	adc.w	ip, ip, ip
    cfee:	fbe3 6c00 	umlal	r6, ip, r3, r0
    cff2:	eb17 070c 	adds.w	r7, r7, ip
    cff6:	f04f 0c00 	mov.w	ip, #0
    cffa:	eb4c 0c0c 	adc.w	ip, ip, ip
    cffe:	fbe4 7c00 	umlal	r7, ip, r4, r0
    d002:	ee13 0a10 	vmov	r0, s6
    d006:	eb18 080c 	adds.w	r8, r8, ip
    d00a:	f04f 0c00 	mov.w	ip, #0
    d00e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d012:	fbe1 8c00 	umlal	r8, ip, r1, r0
    d016:	eb19 090c 	adds.w	r9, r9, ip
    d01a:	f04f 0c00 	mov.w	ip, #0
    d01e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d022:	fbe2 9c00 	umlal	r9, ip, r2, r0
    d026:	eb1a 0a0c 	adds.w	sl, sl, ip
    d02a:	f04f 0c00 	mov.w	ip, #0
    d02e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d032:	fbe3 ac00 	umlal	sl, ip, r3, r0
    d036:	eb1b 0b0c 	adds.w	fp, fp, ip
    d03a:	f04f 0c00 	mov.w	ip, #0
    d03e:	eb4c 0c0c 	adc.w	ip, ip, ip
    d042:	fbe4 bc00 	umlal	fp, ip, r4, r0
    d046:	ee08 ea10 	vmov	s16, lr
    d04a:	ee11 0a90 	vmov	r0, s3
    d04e:	f04f 0e00 	mov.w	lr, #0
    d052:	fbe1 5e00 	umlal	r5, lr, r1, r0
    d056:	eb16 060e 	adds.w	r6, r6, lr
    d05a:	f04f 0e00 	mov.w	lr, #0
    d05e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d062:	fbe2 6e00 	umlal	r6, lr, r2, r0
    d066:	eb17 070e 	adds.w	r7, r7, lr
    d06a:	f04f 0e00 	mov.w	lr, #0
    d06e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d072:	fbe3 7e00 	umlal	r7, lr, r3, r0
    d076:	eb18 080e 	adds.w	r8, r8, lr
    d07a:	f04f 0e00 	mov.w	lr, #0
    d07e:	eb4e 0e0e 	adc.w	lr, lr, lr
    d082:	fbe4 8e00 	umlal	r8, lr, r4, r0
    d086:	ee13 0a90 	vmov	r0, s7
    d08a:	eb19 090e 	adds.w	r9, r9, lr
    d08e:	f04f 0e00 	mov.w	lr, #0
    d092:	eb4e 0e0e 	adc.w	lr, lr, lr
    d096:	fbe1 9e00 	umlal	r9, lr, r1, r0
    d09a:	eb1a 0a0e 	adds.w	sl, sl, lr
    d09e:	f04f 0e00 	mov.w	lr, #0
    d0a2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0a6:	fbe2 ae00 	umlal	sl, lr, r2, r0
    d0aa:	eb1b 0b0e 	adds.w	fp, fp, lr
    d0ae:	f04f 0e00 	mov.w	lr, #0
    d0b2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0b6:	fbe3 be00 	umlal	fp, lr, r3, r0
    d0ba:	eb1c 0c0e 	adds.w	ip, ip, lr
    d0be:	f04f 0e00 	mov.w	lr, #0
    d0c2:	eb4e 0e0e 	adc.w	lr, lr, lr
    d0c6:	fbe4 ce00 	umlal	ip, lr, r4, r0
    d0ca:	ec53 2a17 	vmov	r2, r3, s14, s15
    d0ce:	ee18 4a10 	vmov	r4, s16
    d0d2:	eb12 020a 	adds.w	r2, r2, sl
    d0d6:	eb53 030b 	adcs.w	r3, r3, fp
    d0da:	eb54 040c 	adcs.w	r4, r4, ip
    d0de:	eb55 050e 	adcs.w	r5, r5, lr
    d0e2:	2000      	movs	r0, #0
    d0e4:	f140 0000 	adc.w	r0, r0, #0
    d0e8:	eb12 020b 	adds.w	r2, r2, fp
    d0ec:	eb53 030c 	adcs.w	r3, r3, ip
    d0f0:	eb54 040e 	adcs.w	r4, r4, lr
    d0f4:	eb55 050e 	adcs.w	r5, r5, lr
    d0f8:	4146      	adcs	r6, r0
    d0fa:	2000      	movs	r0, #0
    d0fc:	4147      	adcs	r7, r0
    d0fe:	eb58 0800 	adcs.w	r8, r8, r0
    d102:	eb59 090a 	adcs.w	r9, r9, sl
    d106:	f140 0000 	adc.w	r0, r0, #0
    d10a:	ebb2 020e 	subs.w	r2, r2, lr
    d10e:	f173 0300 	sbcs.w	r3, r3, #0
    d112:	f174 0400 	sbcs.w	r4, r4, #0
    d116:	eb75 050a 	sbcs.w	r5, r5, sl
    d11a:	eb76 060b 	sbcs.w	r6, r6, fp
    d11e:	eb77 070c 	sbcs.w	r7, r7, ip
    d122:	eb78 080a 	sbcs.w	r8, r8, sl
    d126:	eb79 090c 	sbcs.w	r9, r9, ip
    d12a:	f160 0000 	sbc.w	r0, r0, #0
    d12e:	ebb5 050b 	subs.w	r5, r5, fp
    d132:	eb76 060c 	sbcs.w	r6, r6, ip
    d136:	eb77 070e 	sbcs.w	r7, r7, lr
    d13a:	eb78 080b 	sbcs.w	r8, r8, fp
    d13e:	eb79 090e 	sbcs.w	r9, r9, lr
    d142:	f160 0000 	sbc.w	r0, r0, #0
    d146:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d14a:	ea7f 0c0c 	mvns.w	ip, ip
    d14e:	f1dc 0e00 	rsbs	lr, ip, #0
    d152:	ebb2 020c 	subs.w	r2, r2, ip
    d156:	eb73 030c 	sbcs.w	r3, r3, ip
    d15a:	eb74 040c 	sbcs.w	r4, r4, ip
    d15e:	f175 0500 	sbcs.w	r5, r5, #0
    d162:	f176 0600 	sbcs.w	r6, r6, #0
    d166:	f177 0700 	sbcs.w	r7, r7, #0
    d16a:	eb78 080e 	sbcs.w	r8, r8, lr
    d16e:	eb79 090c 	sbcs.w	r9, r9, ip
    d172:	f160 0000 	sbc.w	r0, r0, #0
    d176:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d17a:	f1dc 0e00 	rsbs	lr, ip, #0
    d17e:	eb12 020c 	adds.w	r2, r2, ip
    d182:	eb53 030c 	adcs.w	r3, r3, ip
    d186:	eb54 040c 	adcs.w	r4, r4, ip
    d18a:	f155 0500 	adcs.w	r5, r5, #0
    d18e:	f156 0600 	adcs.w	r6, r6, #0
    d192:	f157 0700 	adcs.w	r7, r7, #0
    d196:	eb58 080e 	adcs.w	r8, r8, lr
    d19a:	eb59 090c 	adcs.w	r9, r9, ip
    d19e:	f140 0000 	adc.w	r0, r0, #0
    d1a2:	ea5f 7ce0 	movs.w	ip, r0, asr #31
    d1a6:	f1dc 0e00 	rsbs	lr, ip, #0
    d1aa:	eb12 020c 	adds.w	r2, r2, ip
    d1ae:	eb53 030c 	adcs.w	r3, r3, ip
    d1b2:	eb54 040c 	adcs.w	r4, r4, ip
    d1b6:	f155 0500 	adcs.w	r5, r5, #0
    d1ba:	f156 0600 	adcs.w	r6, r6, #0
    d1be:	f157 0700 	adcs.w	r7, r7, #0
    d1c2:	eb58 080e 	adcs.w	r8, r8, lr
    d1c6:	eb59 090c 	adcs.w	r9, r9, ip
    d1ca:	ec5b aa15 	vmov	sl, fp, s10, s11
    d1ce:	ec51 0a16 	vmov	r0, r1, s12, s13
    d1d2:	eb1a 0a06 	adds.w	sl, sl, r6
    d1d6:	eb5b 0b07 	adcs.w	fp, fp, r7
    d1da:	eb50 0008 	adcs.w	r0, r0, r8
    d1de:	eb51 0109 	adcs.w	r1, r1, r9
    d1e2:	f05f 0c00 	movs.w	ip, #0
    d1e6:	f14c 0c00 	adc.w	ip, ip, #0
    d1ea:	eb1a 0a07 	adds.w	sl, sl, r7
    d1ee:	eb5b 0b08 	adcs.w	fp, fp, r8
    d1f2:	eb50 0009 	adcs.w	r0, r0, r9
    d1f6:	eb51 0109 	adcs.w	r1, r1, r9
    d1fa:	eb52 020c 	adcs.w	r2, r2, ip
    d1fe:	f05f 0c00 	movs.w	ip, #0
    d202:	eb53 030c 	adcs.w	r3, r3, ip
    d206:	eb54 040c 	adcs.w	r4, r4, ip
    d20a:	4175      	adcs	r5, r6
    d20c:	f14c 0c00 	adc.w	ip, ip, #0
    d210:	ebba 0a09 	subs.w	sl, sl, r9
    d214:	f17b 0b00 	sbcs.w	fp, fp, #0
    d218:	f170 0000 	sbcs.w	r0, r0, #0
    d21c:	41b1      	sbcs	r1, r6
    d21e:	41ba      	sbcs	r2, r7
    d220:	eb73 0308 	sbcs.w	r3, r3, r8
    d224:	41b4      	sbcs	r4, r6
    d226:	eb75 0508 	sbcs.w	r5, r5, r8
    d22a:	f16c 0c00 	sbc.w	ip, ip, #0
    d22e:	1bc9      	subs	r1, r1, r7
    d230:	eb72 0208 	sbcs.w	r2, r2, r8
    d234:	eb73 0309 	sbcs.w	r3, r3, r9
    d238:	41bc      	sbcs	r4, r7
    d23a:	eb75 0509 	sbcs.w	r5, r5, r9
    d23e:	f16c 0c00 	sbc.w	ip, ip, #0
    d242:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d246:	ea7f 0808 	mvns.w	r8, r8
    d24a:	f1d8 0900 	rsbs	r9, r8, #0
    d24e:	ebba 0a08 	subs.w	sl, sl, r8
    d252:	eb7b 0b08 	sbcs.w	fp, fp, r8
    d256:	eb70 0008 	sbcs.w	r0, r0, r8
    d25a:	f171 0100 	sbcs.w	r1, r1, #0
    d25e:	f172 0200 	sbcs.w	r2, r2, #0
    d262:	f173 0300 	sbcs.w	r3, r3, #0
    d266:	eb74 0409 	sbcs.w	r4, r4, r9
    d26a:	eb75 0508 	sbcs.w	r5, r5, r8
    d26e:	f16c 0c00 	sbc.w	ip, ip, #0
    d272:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d276:	f1d8 0900 	rsbs	r9, r8, #0
    d27a:	eb1a 0a08 	adds.w	sl, sl, r8
    d27e:	eb5b 0b08 	adcs.w	fp, fp, r8
    d282:	eb50 0008 	adcs.w	r0, r0, r8
    d286:	f151 0100 	adcs.w	r1, r1, #0
    d28a:	f152 0200 	adcs.w	r2, r2, #0
    d28e:	f153 0300 	adcs.w	r3, r3, #0
    d292:	eb54 0409 	adcs.w	r4, r4, r9
    d296:	eb55 0508 	adcs.w	r5, r5, r8
    d29a:	f14c 0c00 	adc.w	ip, ip, #0
    d29e:	ea5f 78ec 	movs.w	r8, ip, asr #31
    d2a2:	f1d8 0900 	rsbs	r9, r8, #0
    d2a6:	eb1a 0a08 	adds.w	sl, sl, r8
    d2aa:	eb5b 0b08 	adcs.w	fp, fp, r8
    d2ae:	eb50 0008 	adcs.w	r0, r0, r8
    d2b2:	f151 0100 	adcs.w	r1, r1, #0
    d2b6:	f152 0200 	adcs.w	r2, r2, #0
    d2ba:	f153 0300 	adcs.w	r3, r3, #0
    d2be:	eb54 0409 	adcs.w	r4, r4, r9
    d2c2:	eb55 0508 	adcs.w	r5, r5, r8
    d2c6:	ee14 7a10 	vmov	r7, s8
    d2ca:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
    d2ce:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
    d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2d6:	bf00      	nop

0000d2d8 <expiry_function_sub>:
int tickSubs = 0;
char clock[10];

void expiry_function_sub(struct k_timer *timer_id){

    tickSubs++;
    d2d8:	4b07      	ldr	r3, [pc, #28]	; (d2f8 <expiry_function_sub+0x20>)
    d2da:	6819      	ldr	r1, [r3, #0]
    d2dc:	3101      	adds	r1, #1
    d2de:	6019      	str	r1, [r3, #0]

    /*--Toggle every ten seconds to update SUB and ctHrsMins from main loop.--*/
    if(connected == true){
    d2e0:	4b06      	ldr	r3, [pc, #24]	; (d2fc <expiry_function_sub+0x24>)
    d2e2:	781a      	ldrb	r2, [r3, #0]
    d2e4:	4b06      	ldr	r3, [pc, #24]	; (d300 <expiry_function_sub+0x28>)
    d2e6:	b12a      	cbz	r2, d2f4 <expiry_function_sub+0x1c>
        updateSub = true;
    d2e8:	2001      	movs	r0, #1
    d2ea:	7018      	strb	r0, [r3, #0]
        } else {
            updateSub = false;
            }

    printk("subscribe counter: %d --- CONN: %d --- SUB: %d\n", tickSubs, connected, updateSub); 
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	4805      	ldr	r0, [pc, #20]	; (d304 <expiry_function_sub+0x2c>)
    d2f0:	f018 bc25 	b.w	25b3e <printk>
            updateSub = false;
    d2f4:	701a      	strb	r2, [r3, #0]
    d2f6:	e7f9      	b.n	d2ec <expiry_function_sub+0x14>
    d2f8:	200200a8 	.word	0x200200a8
    d2fc:	2002240d 	.word	0x2002240d
    d300:	20028354 	.word	0x20028354
    d304:	0002a745 	.word	0x0002a745

0000d308 <expiry_function_minute>:
    }




void expiry_function_minute(struct k_timer *timer_id){
    d308:	b510      	push	{r4, lr}
    tickMins++;
    d30a:	4c0e      	ldr	r4, [pc, #56]	; (d344 <expiry_function_minute+0x3c>)
    
    /*--Update clock time.--*/
    currentTime++;
    printk("currentTime: %d\n", currentTime);
    d30c:	480e      	ldr	r0, [pc, #56]	; (d348 <expiry_function_minute+0x40>)
    tickMins++;
    d30e:	6823      	ldr	r3, [r4, #0]
    d310:	3301      	adds	r3, #1
    d312:	6023      	str	r3, [r4, #0]
    currentTime++;
    d314:	4b0d      	ldr	r3, [pc, #52]	; (d34c <expiry_function_minute+0x44>)
    d316:	6819      	ldr	r1, [r3, #0]
    d318:	3101      	adds	r1, #1
    d31a:	6019      	str	r1, [r3, #0]
    printk("currentTime: %d\n", currentTime);
    d31c:	f018 fc0f 	bl	25b3e <printk>
    printk("minutes counter: %d\n", tickMins); 
    d320:	6821      	ldr	r1, [r4, #0]
    d322:	480b      	ldr	r0, [pc, #44]	; (d350 <expiry_function_minute+0x48>)
    d324:	f018 fc0b 	bl	25b3e <printk>

    /*--Toggle every minute to update display.--*/
    update_display = true; //to update watch time 00:00
    d328:	2201      	movs	r2, #1
    d32a:	4b0a      	ldr	r3, [pc, #40]	; (d354 <expiry_function_minute+0x4c>)
//        updateSub = true;
//        } else {
//            updateSub = false;
//            };

    printk("minutes counter: %d --- CONN: %d --- SUB: %d\n", tickMins, connected, updateSub); 
    d32c:	6821      	ldr	r1, [r4, #0]
    update_display = true; //to update watch time 00:00
    d32e:	701a      	strb	r2, [r3, #0]
    printk("minutes counter: %d --- CONN: %d --- SUB: %d\n", tickMins, connected, updateSub); 
    d330:	4b09      	ldr	r3, [pc, #36]	; (d358 <expiry_function_minute+0x50>)
    d332:	4a0a      	ldr	r2, [pc, #40]	; (d35c <expiry_function_minute+0x54>)
    d334:	781b      	ldrb	r3, [r3, #0]
    d336:	7812      	ldrb	r2, [r2, #0]
    d338:	4809      	ldr	r0, [pc, #36]	; (d360 <expiry_function_minute+0x58>)
    }
    d33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("minutes counter: %d --- CONN: %d --- SUB: %d\n", tickMins, connected, updateSub); 
    d33e:	f018 bbfe 	b.w	25b3e <printk>
    d342:	bf00      	nop
    d344:	200200a0 	.word	0x200200a0
    d348:	0002a6f1 	.word	0x0002a6f1
    d34c:	20020144 	.word	0x20020144
    d350:	0002a702 	.word	0x0002a702
    d354:	20028355 	.word	0x20028355
    d358:	20028354 	.word	0x20028354
    d35c:	2002240d 	.word	0x2002240d
    d360:	0002a717 	.word	0x0002a717

0000d364 <expiry_function_second>:
void expiry_function_second(struct k_timer *timer_id){
    d364:	b538      	push	{r3, r4, r5, lr}
    tickSecs++;
    d366:	4c11      	ldr	r4, [pc, #68]	; (d3ac <expiry_function_second+0x48>)
    if(alarm == true && tickSecs % 6 == 0){
    d368:	4911      	ldr	r1, [pc, #68]	; (d3b0 <expiry_function_second+0x4c>)
    tickSecs++;
    d36a:	6822      	ldr	r2, [r4, #0]
    if(alarm == true && tickSecs % 6 == 0){
    d36c:	7809      	ldrb	r1, [r1, #0]
    tickSecs++;
    d36e:	3201      	adds	r2, #1
    d370:	6022      	str	r2, [r4, #0]
    d372:	4d10      	ldr	r5, [pc, #64]	; (d3b4 <expiry_function_second+0x50>)
    if(alarm == true && tickSecs % 6 == 0){
    d374:	b149      	cbz	r1, d38a <expiry_function_second+0x26>
    d376:	2106      	movs	r1, #6
    d378:	fb92 f3f1 	sdiv	r3, r2, r1
    d37c:	fb01 2213 	mls	r2, r1, r3, r2
    d380:	b91a      	cbnz	r2, d38a <expiry_function_second+0x26>
        vibSwitch = true;
    d382:	2001      	movs	r0, #1
    d384:	7028      	strb	r0, [r5, #0]
        vibrate(true);
    d386:	f001 ff2d 	bl	f1e4 <vibrate>
    if(vibSwitch == true && tickSecs % 6 == 1){
    d38a:	782b      	ldrb	r3, [r5, #0]
    d38c:	b163      	cbz	r3, d3a8 <expiry_function_second+0x44>
    d38e:	2206      	movs	r2, #6
    d390:	6821      	ldr	r1, [r4, #0]
    d392:	fb91 f3f2 	sdiv	r3, r1, r2
    d396:	fb02 1313 	mls	r3, r2, r3, r1
    d39a:	2b01      	cmp	r3, #1
    d39c:	d104      	bne.n	d3a8 <expiry_function_second+0x44>
    }
    d39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        vibrate(false);
    d3a2:	2000      	movs	r0, #0
    d3a4:	f001 bf1e 	b.w	f1e4 <vibrate>
    }
    d3a8:	bd38      	pop	{r3, r4, r5, pc}
    d3aa:	bf00      	nop
    d3ac:	200200a4 	.word	0x200200a4
    d3b0:	200222de 	.word	0x200222de
    d3b4:	20023626 	.word	0x20023626

0000d3b8 <poll.constprop.5>:
	__ASSERT_NO_MSG(socket_ops->connect);

	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
    d3b8:	b510      	push	{r4, lr}
{
	__ASSERT_NO_MSG(socket_ops);
    d3ba:	4c11      	ldr	r4, [pc, #68]	; (d400 <poll.constprop.5+0x48>)
    d3bc:	6823      	ldr	r3, [r4, #0]
    d3be:	b94b      	cbnz	r3, d3d4 <poll.constprop.5+0x1c>
    d3c0:	4910      	ldr	r1, [pc, #64]	; (d404 <poll.constprop.5+0x4c>)
    d3c2:	4811      	ldr	r0, [pc, #68]	; (d408 <poll.constprop.5+0x50>)
    d3c4:	234d      	movs	r3, #77	; 0x4d
    d3c6:	4a11      	ldr	r2, [pc, #68]	; (d40c <poll.constprop.5+0x54>)
    d3c8:	f018 fbb9 	bl	25b3e <printk>
    d3cc:	214d      	movs	r1, #77	; 0x4d
    d3ce:	480f      	ldr	r0, [pc, #60]	; (d40c <poll.constprop.5+0x54>)
    d3d0:	f018 fbc2 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
    d3d4:	6823      	ldr	r3, [r4, #0]
    d3d6:	699b      	ldr	r3, [r3, #24]
    d3d8:	b94b      	cbnz	r3, d3ee <poll.constprop.5+0x36>
    d3da:	490d      	ldr	r1, [pc, #52]	; (d410 <poll.constprop.5+0x58>)
    d3dc:	480a      	ldr	r0, [pc, #40]	; (d408 <poll.constprop.5+0x50>)
    d3de:	234e      	movs	r3, #78	; 0x4e
    d3e0:	4a0a      	ldr	r2, [pc, #40]	; (d40c <poll.constprop.5+0x54>)
    d3e2:	f018 fbac 	bl	25b3e <printk>
    d3e6:	214e      	movs	r1, #78	; 0x4e
    d3e8:	4808      	ldr	r0, [pc, #32]	; (d40c <poll.constprop.5+0x54>)
    d3ea:	f018 fbb5 	bl	25b58 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
    d3ee:	6823      	ldr	r3, [r4, #0]
    d3f0:	f64e 2260 	movw	r2, #60000	; 0xea60
}
    d3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return socket_ops->poll(fds, nfds, timeout);
    d3f8:	699b      	ldr	r3, [r3, #24]
    d3fa:	2101      	movs	r1, #1
    d3fc:	4805      	ldr	r0, [pc, #20]	; (d414 <poll.constprop.5+0x5c>)
    d3fe:	4718      	bx	r3
    d400:	200201a8 	.word	0x200201a8
    d404:	0002ab9f 	.word	0x0002ab9f
    d408:	0002abaa 	.word	0x0002abaa
    d40c:	0002ab6d 	.word	0x0002ab6d
    d410:	0002abc7 	.word	0x0002abc7
    d414:	20020098 	.word	0x20020098

0000d418 <mqtt_evt_handler>:
{
    d418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d41c:	b088      	sub	sp, #32
	switch (evt->type) {
    d41e:	780b      	ldrb	r3, [r1, #0]
{
    d420:	af02      	add	r7, sp, #8
    d422:	4606      	mov	r6, r0
    d424:	460c      	mov	r4, r1
	switch (evt->type) {
    d426:	2b07      	cmp	r3, #7
    d428:	f200 80d1 	bhi.w	d5ce <mqtt_evt_handler+0x1b6>
    d42c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d430:	00340008 	.word	0x00340008
    d434:	00b9003f 	.word	0x00b9003f
    d438:	00cf00cf 	.word	0x00cf00cf
    d43c:	00c500cf 	.word	0x00c500cf
		if (evt->result != 0) {
    d440:	69cd      	ldr	r5, [r1, #28]
    d442:	b125      	cbz	r5, d44e <mqtt_evt_handler+0x36>
			printk("MQTT connect failed %d\n", evt->result);
    d444:	4629      	mov	r1, r5
    d446:	4864      	ldr	r0, [pc, #400]	; (d5d8 <mqtt_evt_handler+0x1c0>)
			printk("MQTT SUBACK error %d\n", evt->result);
    d448:	f018 fb79 	bl	25b3e <printk>
			break;
    d44c:	e020      	b.n	d490 <mqtt_evt_handler+0x78>
		connected = true;
    d44e:	2201      	movs	r2, #1
    d450:	4b62      	ldr	r3, [pc, #392]	; (d5dc <mqtt_evt_handler+0x1c4>)
	struct mqtt_topic subscribe_topic = {
    d452:	4c63      	ldr	r4, [pc, #396]	; (d5e0 <mqtt_evt_handler+0x1c8>)
		connected = true;
    d454:	701a      	strb	r2, [r3, #0]
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
    d456:	4963      	ldr	r1, [pc, #396]	; (d5e4 <mqtt_evt_handler+0x1cc>)
    d458:	f240 1223 	movw	r2, #291	; 0x123
    d45c:	4862      	ldr	r0, [pc, #392]	; (d5e8 <mqtt_evt_handler+0x1d0>)
    d45e:	f018 fb6e 	bl	25b3e <printk>
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    d462:	4620      	mov	r0, r4
	struct mqtt_topic subscribe_topic = {
    d464:	60fc      	str	r4, [r7, #12]
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    d466:	f018 fc93 	bl	25d90 <strlen>
	const struct mqtt_subscription_list subscription_list = {
    d46a:	f107 030c 	add.w	r3, r7, #12
    d46e:	607b      	str	r3, [r7, #4]
    d470:	4b5e      	ldr	r3, [pc, #376]	; (d5ec <mqtt_evt_handler+0x1d4>)
	struct mqtt_topic subscribe_topic = {
    d472:	6138      	str	r0, [r7, #16]
		(unsigned int)strlen(CONFIG_MQTT_SUB_TOPIC));
    d474:	4620      	mov	r0, r4
	const struct mqtt_subscription_list subscription_list = {
    d476:	60bb      	str	r3, [r7, #8]
	struct mqtt_topic subscribe_topic = {
    d478:	753d      	strb	r5, [r7, #20]
		(unsigned int)strlen(CONFIG_MQTT_SUB_TOPIC));
    d47a:	f018 fc89 	bl	25d90 <strlen>
	printk("Subscribing to: %s len %u\n", CONFIG_MQTT_SUB_TOPIC,
    d47e:	4621      	mov	r1, r4
    d480:	4602      	mov	r2, r0
    d482:	485b      	ldr	r0, [pc, #364]	; (d5f0 <mqtt_evt_handler+0x1d8>)
    d484:	f018 fb5b 	bl	25b3e <printk>
	return mqtt_subscribe(&client, &subscription_list);
    d488:	1d39      	adds	r1, r7, #4
    d48a:	485a      	ldr	r0, [pc, #360]	; (d5f4 <mqtt_evt_handler+0x1dc>)
    d48c:	f019 f9a0 	bl	267d0 <mqtt_subscribe>
}
    d490:	3718      	adds	r7, #24
    d492:	46bd      	mov	sp, r7
    d494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printk("[%s:%d] MQTT client disconnected %d\n", __func__,
    d498:	69cb      	ldr	r3, [r1, #28]
    d49a:	f240 1229 	movw	r2, #297	; 0x129
    d49e:	4951      	ldr	r1, [pc, #324]	; (d5e4 <mqtt_evt_handler+0x1cc>)
    d4a0:	4855      	ldr	r0, [pc, #340]	; (d5f8 <mqtt_evt_handler+0x1e0>)
    d4a2:	f018 fb4c 	bl	25b3e <printk>
		connected = false;
    d4a6:	2200      	movs	r2, #0
    d4a8:	4b4c      	ldr	r3, [pc, #304]	; (d5dc <mqtt_evt_handler+0x1c4>)
    d4aa:	701a      	strb	r2, [r3, #0]
		break;
    d4ac:	e7f0      	b.n	d490 <mqtt_evt_handler+0x78>
	    printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
    d4ae:	694b      	ldr	r3, [r1, #20]
    d4b0:	f44f 7299 	mov.w	r2, #306	; 0x132
    d4b4:	9300      	str	r3, [sp, #0]
    d4b6:	69cb      	ldr	r3, [r1, #28]
    d4b8:	4850      	ldr	r0, [pc, #320]	; (d5fc <mqtt_evt_handler+0x1e4>)
    d4ba:	494a      	ldr	r1, [pc, #296]	; (d5e4 <mqtt_evt_handler+0x1cc>)
	u8_t *end = buf + length;
    d4bc:	4d50      	ldr	r5, [pc, #320]	; (d600 <mqtt_evt_handler+0x1e8>)
	    printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
    d4be:	f018 fb3e 	bl	25b3e <printk>
	    err = publish_get_payload(c, p->message.payload.len);
    d4c2:	f8d4 9014 	ldr.w	r9, [r4, #20]
        memset(payload_buf, 0, sizeof(payload_buf));
    d4c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d4ca:	2100      	movs	r1, #0
    d4cc:	4628      	mov	r0, r5
    d4ce:	f018 fcf7 	bl	25ec0 <memset>
	if (length > sizeof(payload_buf)) {
    d4d2:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
	u8_t *end = buf + length;
    d4d6:	eb05 0809 	add.w	r8, r5, r9
	if (length > sizeof(payload_buf)) {
    d4da:	d85f      	bhi.n	d59c <mqtt_evt_handler+0x184>
			printk("mqtt_read_publish_payload: EAGAIN\n");
    d4dc:	f8df 9164 	ldr.w	r9, [pc, #356]	; d644 <mqtt_evt_handler+0x22c>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    d4e0:	f8df a164 	ldr.w	sl, [pc, #356]	; d648 <mqtt_evt_handler+0x230>
	while (buf < end) {
    d4e4:	45a8      	cmp	r8, r5
    d4e6:	d82b      	bhi.n	d540 <mqtt_evt_handler+0x128>
	buf[len] = 0;
    d4e8:	2600      	movs	r6, #0
{
    d4ea:	46e8      	mov	r8, sp
			data_print("Received: ", payload_buf,
    d4ec:	6965      	ldr	r5, [r4, #20]
	memcpy(buf, data, len);
    d4ee:	4944      	ldr	r1, [pc, #272]	; (d600 <mqtt_evt_handler+0x1e8>)
	char buf[len + 1];
    d4f0:	f105 0308 	add.w	r3, r5, #8
    d4f4:	f023 0307 	bic.w	r3, r3, #7
    d4f8:	ebad 0d03 	sub.w	sp, sp, r3
    d4fc:	ac02      	add	r4, sp, #8
	memcpy(buf, data, len);
    d4fe:	462a      	mov	r2, r5
    d500:	4620      	mov	r0, r4
    d502:	f018 fcb0 	bl	25e66 <memcpy>
	buf[len] = 0;
    d506:	5566      	strb	r6, [r4, r5]
	printk("%s%s\n", prefix, buf);
    d508:	4622      	mov	r2, r4
    d50a:	493e      	ldr	r1, [pc, #248]	; (d604 <mqtt_evt_handler+0x1ec>)
    d50c:	483e      	ldr	r0, [pc, #248]	; (d608 <mqtt_evt_handler+0x1f0>)
    d50e:	f018 fb16 	bl	25b3e <printk>
                        if(skip == false){
    d512:	4b3e      	ldr	r3, [pc, #248]	; (d60c <mqtt_evt_handler+0x1f4>)
    d514:	46c5      	mov	sp, r8
    d516:	781c      	ldrb	r4, [r3, #0]
    d518:	2c00      	cmp	r4, #0
    d51a:	d13d      	bne.n	d598 <mqtt_evt_handler+0x180>
                            unpack(payload_buf);
    d51c:	4838      	ldr	r0, [pc, #224]	; (d600 <mqtt_evt_handler+0x1e8>)
    d51e:	f002 f84d 	bl	f5bc <unpack>
                            currentTime = atoi(ctHrsMins);
    d522:	483b      	ldr	r0, [pc, #236]	; (d610 <mqtt_evt_handler+0x1f8>)
    d524:	f018 fb66 	bl	25bf4 <atoi>
    d528:	4b3a      	ldr	r3, [pc, #232]	; (d614 <mqtt_evt_handler+0x1fc>)
    d52a:	4d3b      	ldr	r5, [pc, #236]	; (d618 <mqtt_evt_handler+0x200>)
    d52c:	6018      	str	r0, [r3, #0]
                            if(tfmwTimeStamp != "OOB"){
    d52e:	483b      	ldr	r0, [pc, #236]	; (d61c <mqtt_evt_handler+0x204>)
    d530:	4b3b      	ldr	r3, [pc, #236]	; (d620 <mqtt_evt_handler+0x208>)
    d532:	4298      	cmp	r0, r3
    d534:	d02e      	beq.n	d594 <mqtt_evt_handler+0x17c>
                                tfmwEnd = atoi(tfmwTimeStamp);
    d536:	f018 fb5d 	bl	25bf4 <atoi>
                                tfmwEnd = tfmwEnd + 120;
    d53a:	3078      	adds	r0, #120	; 0x78
    d53c:	6028      	str	r0, [r5, #0]
    d53e:	e7a7      	b.n	d490 <mqtt_evt_handler+0x78>
		int ret = mqtt_read_publish_payload(c, buf, end - buf);
    d540:	4629      	mov	r1, r5
    d542:	eba8 0205 	sub.w	r2, r8, r5
    d546:	4630      	mov	r0, r6
    d548:	f019 f9b6 	bl	268b8 <mqtt_read_publish_payload>
		if (ret < 0) {
    d54c:	1e01      	subs	r1, r0, #0
    d54e:	da1e      	bge.n	d58e <mqtt_evt_handler+0x176>
			if (ret != -EAGAIN) {
    d550:	f111 0f0b 	cmn.w	r1, #11
    d554:	d108      	bne.n	d568 <mqtt_evt_handler+0x150>
			printk("mqtt_read_publish_payload: EAGAIN\n");
    d556:	4648      	mov	r0, r9
    d558:	f018 faf1 	bl	25b3e <printk>
			err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE));
    d55c:	f7ff ff2c 	bl	d3b8 <poll.constprop.5>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    d560:	2800      	cmp	r0, #0
    d562:	dc0f      	bgt.n	d584 <mqtt_evt_handler+0x16c>
				return -EIO;
    d564:	f06f 0104 	mvn.w	r1, #4
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
    d568:	482e      	ldr	r0, [pc, #184]	; (d624 <mqtt_evt_handler+0x20c>)
    d56a:	f018 fae8 	bl	25b3e <printk>
			printk("Disconnecting MQTT client...\n");
    d56e:	482e      	ldr	r0, [pc, #184]	; (d628 <mqtt_evt_handler+0x210>)
    d570:	f018 fae5 	bl	25b3e <printk>
			err = mqtt_disconnect(c);
    d574:	4630      	mov	r0, r6
    d576:	f019 f904 	bl	26782 <mqtt_disconnect>
			if (err) {
    d57a:	4601      	mov	r1, r0
    d57c:	2800      	cmp	r0, #0
    d57e:	d087      	beq.n	d490 <mqtt_evt_handler+0x78>
                            printk("Could not disconnect: %d\n", err);
    d580:	482a      	ldr	r0, [pc, #168]	; (d62c <mqtt_evt_handler+0x214>)
    d582:	e761      	b.n	d448 <mqtt_evt_handler+0x30>
			if (err > 0 && (fds.revents & POLLIN) == POLLIN) {
    d584:	f8ba 3006 	ldrh.w	r3, [sl, #6]
    d588:	07db      	lsls	r3, r3, #31
    d58a:	d4ab      	bmi.n	d4e4 <mqtt_evt_handler+0xcc>
    d58c:	e7ea      	b.n	d564 <mqtt_evt_handler+0x14c>
		if (ret == 0) {
    d58e:	d0e9      	beq.n	d564 <mqtt_evt_handler+0x14c>
		buf += ret;
    d590:	440d      	add	r5, r1
    d592:	e7a7      	b.n	d4e4 <mqtt_evt_handler+0xcc>
                                    tfmwEnd = 0;
    d594:	602c      	str	r4, [r5, #0]
    d596:	e77b      	b.n	d490 <mqtt_evt_handler+0x78>
                                skip = false;
    d598:	701e      	strb	r6, [r3, #0]
    d59a:	e779      	b.n	d490 <mqtt_evt_handler+0x78>
		return -EMSGSIZE;
    d59c:	f06f 0123 	mvn.w	r1, #35	; 0x23
    d5a0:	e7e2      	b.n	d568 <mqtt_evt_handler+0x150>
		if (evt->result != 0) {
    d5a2:	69c9      	ldr	r1, [r1, #28]
    d5a4:	b109      	cbz	r1, d5aa <mqtt_evt_handler+0x192>
			printk("MQTT PUBACK error %d\n", evt->result);
    d5a6:	4822      	ldr	r0, [pc, #136]	; (d630 <mqtt_evt_handler+0x218>)
    d5a8:	e74e      	b.n	d448 <mqtt_evt_handler+0x30>
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
    d5aa:	f44f 72b1 	mov.w	r2, #354	; 0x162
    d5ae:	88a3      	ldrh	r3, [r4, #4]
    d5b0:	490c      	ldr	r1, [pc, #48]	; (d5e4 <mqtt_evt_handler+0x1cc>)
    d5b2:	4820      	ldr	r0, [pc, #128]	; (d634 <mqtt_evt_handler+0x21c>)
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    d5b4:	f018 fac3 	bl	25b3e <printk>
}
    d5b8:	e76a      	b.n	d490 <mqtt_evt_handler+0x78>
		if (evt->result != 0) {
    d5ba:	69c9      	ldr	r1, [r1, #28]
    d5bc:	b109      	cbz	r1, d5c2 <mqtt_evt_handler+0x1aa>
			printk("MQTT SUBACK error %d\n", evt->result);
    d5be:	481e      	ldr	r0, [pc, #120]	; (d638 <mqtt_evt_handler+0x220>)
    d5c0:	e742      	b.n	d448 <mqtt_evt_handler+0x30>
		printk("[%s:%d] SUBACK packet id: %u\n", __func__, __LINE__,
    d5c2:	88a3      	ldrh	r3, [r4, #4]
    d5c4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    d5c8:	4906      	ldr	r1, [pc, #24]	; (d5e4 <mqtt_evt_handler+0x1cc>)
    d5ca:	481c      	ldr	r0, [pc, #112]	; (d63c <mqtt_evt_handler+0x224>)
    d5cc:	e7f2      	b.n	d5b4 <mqtt_evt_handler+0x19c>
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
    d5ce:	f240 1271 	movw	r2, #369	; 0x171
    d5d2:	4904      	ldr	r1, [pc, #16]	; (d5e4 <mqtt_evt_handler+0x1cc>)
    d5d4:	481a      	ldr	r0, [pc, #104]	; (d640 <mqtt_evt_handler+0x228>)
    d5d6:	e7ed      	b.n	d5b4 <mqtt_evt_handler+0x19c>
    d5d8:	0002a9a1 	.word	0x0002a9a1
    d5dc:	2002240d 	.word	0x2002240d
    d5e0:	0002a9d9 	.word	0x0002a9d9
    d5e4:	0002a694 	.word	0x0002a694
    d5e8:	0002a9b9 	.word	0x0002a9b9
    d5ec:	04d20001 	.word	0x04d20001
    d5f0:	0002a9f2 	.word	0x0002a9f2
    d5f4:	20020020 	.word	0x20020020
    d5f8:	0002aa0d 	.word	0x0002aa0d
    d5fc:	0002aa32 	.word	0x0002aa32
    d600:	20022824 	.word	0x20022824
    d604:	0002ab5c 	.word	0x0002ab5c
    d608:	0002ab67 	.word	0x0002ab67
    d60c:	20023025 	.word	0x20023025
    d610:	2002362c 	.word	0x2002362c
    d614:	20020144 	.word	0x20020144
    d618:	2002014c 	.word	0x2002014c
    d61c:	20023cee 	.word	0x20023cee
    d620:	0002aa7c 	.word	0x0002aa7c
    d624:	0002aa80 	.word	0x0002aa80
    d628:	0002aaa7 	.word	0x0002aaa7
    d62c:	0002aac5 	.word	0x0002aac5
    d630:	0002aadf 	.word	0x0002aadf
    d634:	0002aaf5 	.word	0x0002aaf5
    d638:	0002ab13 	.word	0x0002ab13
    d63c:	0002ab29 	.word	0x0002ab29
    d640:	0002ab47 	.word	0x0002ab47
    d644:	0002aa59 	.word	0x0002aa59
    d648:	20020098 	.word	0x20020098

0000d64c <uart_cb>:
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
    d64c:	6843      	ldr	r3, [r0, #4]
void uart_cb(struct device *x){
    d64e:	b570      	push	{r4, r5, r6, lr}
    d650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d652:	4604      	mov	r4, r0
    d654:	b103      	cbz	r3, d658 <uart_cb+0xc>
		return api->irq_update(dev);
    d656:	4798      	blx	r3
	if (api->irq_rx_ready) {
    d658:	6863      	ldr	r3, [r4, #4]
    d65a:	4d2b      	ldr	r5, [pc, #172]	; (d708 <uart_cb+0xbc>)
    d65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d65e:	b163      	cbz	r3, d67a <uart_cb+0x2e>
		return api->irq_rx_ready(dev);
    d660:	4620      	mov	r0, r4
    d662:	4798      	blx	r3
    if(uart_irq_rx_ready(x)){
    d664:	b148      	cbz	r0, d67a <uart_cb+0x2e>
	if (api->fifo_read) {
    d666:	6863      	ldr	r3, [r4, #4]
    d668:	699b      	ldr	r3, [r3, #24]
    d66a:	b1fb      	cbz	r3, d6ac <uart_cb+0x60>
		return api->fifo_read(dev, rx_data, size);
    d66c:	f44f 7280 	mov.w	r2, #256	; 0x100
    d670:	4629      	mov	r1, r5
    d672:	4620      	mov	r0, r4
    d674:	4798      	blx	r3
        uart_buf[data_length] = 0;
    d676:	2300      	movs	r3, #0
    d678:	542b      	strb	r3, [r5, r0]
    printk("UART buffer: %s\n", uart_buf);
    d67a:	4923      	ldr	r1, [pc, #140]	; (d708 <uart_cb+0xbc>)
    d67c:	4823      	ldr	r0, [pc, #140]	; (d70c <uart_cb+0xc0>)
    d67e:	f018 fa5e 	bl	25b3e <printk>
    if(uart_buf[0]/*last incoming byte*/ == '['){
    d682:	782b      	ldrb	r3, [r5, #0]
    d684:	4c22      	ldr	r4, [pc, #136]	; (d710 <uart_cb+0xc4>)
    d686:	2b5b      	cmp	r3, #91	; 0x5b
    d688:	d112      	bne.n	d6b0 <uart_cb+0x64>
        barcode_incoming = 'B'; //Start appending incoming barcode message.
    d68a:	2342      	movs	r3, #66	; 0x42
            barcode_incoming = 'C'; //End appending incoming barcode message.
    d68c:	7023      	strb	r3, [r4, #0]
    if(barcode_incoming == 'B'){ //Appending incoming message.
    d68e:	7823      	ldrb	r3, [r4, #0]
    d690:	2b42      	cmp	r3, #66	; 0x42
    d692:	d111      	bne.n	d6b8 <uart_cb+0x6c>
        memcpy(&temp_buff[count], uart_buf, 1);
    d694:	4c1f      	ldr	r4, [pc, #124]	; (d714 <uart_cb+0xc8>)
    d696:	4820      	ldr	r0, [pc, #128]	; (d718 <uart_cb+0xcc>)
    d698:	6823      	ldr	r3, [r4, #0]
    d69a:	2201      	movs	r2, #1
    d69c:	4418      	add	r0, r3
    d69e:	491a      	ldr	r1, [pc, #104]	; (d708 <uart_cb+0xbc>)
    d6a0:	f018 fbe1 	bl	25e66 <memcpy>
        count++;
    d6a4:	6823      	ldr	r3, [r4, #0]
    d6a6:	3301      	adds	r3, #1
    d6a8:	6023      	str	r3, [r4, #0]
    };
    d6aa:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    d6ac:	4618      	mov	r0, r3
    d6ae:	e7e2      	b.n	d676 <uart_cb+0x2a>
        } else if(uart_buf[0]/*last incoming byte*/ == ']'){
    d6b0:	2b5d      	cmp	r3, #93	; 0x5d
    d6b2:	d1ec      	bne.n	d68e <uart_cb+0x42>
            barcode_incoming = 'C'; //End appending incoming barcode message.
    d6b4:	2343      	movs	r3, #67	; 0x43
    d6b6:	e7e9      	b.n	d68c <uart_cb+0x40>
        } else if(barcode_incoming == 'C'){
    d6b8:	2b43      	cmp	r3, #67	; 0x43
    d6ba:	d1f6      	bne.n	d6aa <uart_cb+0x5e>
            memcpy(&temp_buff[count], uart_buf, 1);
    d6bc:	4e15      	ldr	r6, [pc, #84]	; (d714 <uart_cb+0xc8>)
            memset(barcode_buffer, NULL, sizeof(barcode_buffer)); //Clear barcode buffer.
    d6be:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6c2:	2100      	movs	r1, #0
    d6c4:	4815      	ldr	r0, [pc, #84]	; (d71c <uart_cb+0xd0>)
    d6c6:	f018 fbfb 	bl	25ec0 <memset>
            memcpy(&temp_buff[count], uart_buf, 1);
    d6ca:	4d13      	ldr	r5, [pc, #76]	; (d718 <uart_cb+0xcc>)
    d6cc:	6830      	ldr	r0, [r6, #0]
    d6ce:	2201      	movs	r2, #1
    d6d0:	490d      	ldr	r1, [pc, #52]	; (d708 <uart_cb+0xbc>)
    d6d2:	4428      	add	r0, r5
    d6d4:	f018 fbc7 	bl	25e66 <memcpy>
            memcpy(&barcode_buffer[0], &temp_buff[1], count - 1); //Update barcpde_buffer and exclude first '[' and last ']' characters.
    d6d8:	6832      	ldr	r2, [r6, #0]
    d6da:	1c69      	adds	r1, r5, #1
    d6dc:	3a01      	subs	r2, #1
    d6de:	480f      	ldr	r0, [pc, #60]	; (d71c <uart_cb+0xd0>)
    d6e0:	f018 fbc1 	bl	25e66 <memcpy>
            printk("barcode_buffer: %s\n", barcode_buffer);
    d6e4:	490d      	ldr	r1, [pc, #52]	; (d71c <uart_cb+0xd0>)
    d6e6:	480e      	ldr	r0, [pc, #56]	; (d720 <uart_cb+0xd4>)
    d6e8:	f018 fa29 	bl	25b3e <printk>
            barcode_incoming = 'A';
    d6ec:	2341      	movs	r3, #65	; 0x41
            count = 0;
    d6ee:	2100      	movs	r1, #0
            memset(temp_buff, NULL, sizeof(temp_buff));//Clear buffer.
    d6f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6f4:	4628      	mov	r0, r5
            barcode_incoming = 'A';
    d6f6:	7023      	strb	r3, [r4, #0]
            count = 0;
    d6f8:	6031      	str	r1, [r6, #0]
            memset(temp_buff, NULL, sizeof(temp_buff));//Clear buffer.
    d6fa:	f018 fbe1 	bl	25ec0 <memset>
            update_display = true;
    d6fe:	2201      	movs	r2, #1
    d700:	4b08      	ldr	r3, [pc, #32]	; (d724 <uart_cb+0xd8>)
    d702:	701a      	strb	r2, [r3, #0]
    };
    d704:	e7d1      	b.n	d6aa <uart_cb+0x5e>
    d706:	bf00      	nop
    d708:	20023526 	.word	0x20023526
    d70c:	0002af4a 	.word	0x0002af4a
    d710:	20028350 	.word	0x20028350
    d714:	20020088 	.word	0x20020088
    d718:	20023026 	.word	0x20023026
    d71c:	200222df 	.word	0x200222df
    d720:	0002af5b 	.word	0x0002af5b
    d724:	20028355 	.word	0x20028355

0000d728 <bsd_recoverable_error_handler>:
	printk("bsdlib recoverable error: %u\n", err);
    d728:	4601      	mov	r1, r0
    d72a:	4801      	ldr	r0, [pc, #4]	; (d730 <bsd_recoverable_error_handler+0x8>)
    d72c:	f018 ba07 	b.w	25b3e <printk>
    d730:	0002a6d3 	.word	0x0002a6d3

0000d734 <bsd_irrecoverable_error_handler>:
{
    d734:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    d736:	4c08      	ldr	r4, [pc, #32]	; (d758 <bsd_irrecoverable_error_handler+0x24>)
	printk("bsdlib irrecoverable error: %u\n", err);
    d738:	4601      	mov	r1, r0
    d73a:	4808      	ldr	r0, [pc, #32]	; (d75c <bsd_irrecoverable_error_handler+0x28>)
    d73c:	f018 f9ff 	bl	25b3e <printk>
	__ASSERT_NO_MSG(false);
    d740:	4622      	mov	r2, r4
    d742:	4907      	ldr	r1, [pc, #28]	; (d760 <bsd_irrecoverable_error_handler+0x2c>)
    d744:	4807      	ldr	r0, [pc, #28]	; (d764 <bsd_irrecoverable_error_handler+0x30>)
    d746:	23aa      	movs	r3, #170	; 0xaa
    d748:	f018 f9f9 	bl	25b3e <printk>
    d74c:	4620      	mov	r0, r4
}
    d74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    d752:	21aa      	movs	r1, #170	; 0xaa
    d754:	f018 ba00 	b.w	25b58 <assert_post_action>
    d758:	0002a6c5 	.word	0x0002a6c5
    d75c:	0002a6a5 	.word	0x0002a6a5
    d760:	0002c399 	.word	0x0002c399
    d764:	0002abaa 	.word	0x0002abaa

0000d768 <pub_settings_packet>:

/* Setup Timers. END *//////////////////////////////////////////////////////////////////////

/*--Report TFM has most recent setting update.--*/
void pub_settings_packet(char reportName[24]){
    d768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d76c:	4605      	mov	r5, r0
    //char message_buff[256];
    memset(message_buff, 0, sizeof(message_buff)); /*--clear register.--*/
    d76e:	4ce0      	ldr	r4, [pc, #896]	; (daf0 <pub_settings_packet+0x388>)
void pub_settings_packet(char reportName[24]){
    d770:	b087      	sub	sp, #28
    memset(batVoltage,  0, sizeof(batVoltage));
    d772:	f8df 8458 	ldr.w	r8, [pc, #1112]	; dbcc <pub_settings_packet+0x464>
    memset(message_buff, 0, sizeof(message_buff)); /*--clear register.--*/
    d776:	f44f 6280 	mov.w	r2, #1024	; 0x400
void pub_settings_packet(char reportName[24]){
    d77a:	af00      	add	r7, sp, #0
    memset(message_buff, 0, sizeof(message_buff)); /*--clear register.--*/
    d77c:	2100      	movs	r1, #0
    d77e:	4620      	mov	r0, r4
    d780:	f018 fb9e 	bl	25ec0 <memset>
    memset(batVoltage,  0, sizeof(batVoltage));
    d784:	220a      	movs	r2, #10
    d786:	2100      	movs	r1, #0
    d788:	4640      	mov	r0, r8
    d78a:	f018 fb99 	bl	25ec0 <memset>
    
    //Report Name:
    strcat(message_buff, "{ "); //Begining characters for JSON.
    d78e:	49d9      	ldr	r1, [pc, #868]	; (daf4 <pub_settings_packet+0x38c>)
    d790:	4620      	mov	r0, r4
    d792:	f018 fb21 	bl	25dd8 <strcat>
    strcat(message_buff, "!!reportName!!:!!");
    d796:	49d8      	ldr	r1, [pc, #864]	; (daf8 <pub_settings_packet+0x390>)
    d798:	4620      	mov	r0, r4
    d79a:	f018 fb1d 	bl	25dd8 <strcat>
    strcat(message_buff, reportName);
    d79e:	4629      	mov	r1, r5
    strcat(message_buff, "!!");
    d7a0:	4dd6      	ldr	r5, [pc, #856]	; (dafc <pub_settings_packet+0x394>)

    //Device ID:
    strcat(message_buff, ","); //',' between items.
    d7a2:	4ed7      	ldr	r6, [pc, #860]	; (db00 <pub_settings_packet+0x398>)
    strcat(message_buff, reportName);
    d7a4:	4620      	mov	r0, r4
    d7a6:	f018 fb17 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d7aa:	4629      	mov	r1, r5
    d7ac:	4620      	mov	r0, r4
    d7ae:	f018 fb13 	bl	25dd8 <strcat>
    strcat(message_buff, ","); //',' between items.
    d7b2:	4631      	mov	r1, r6
    d7b4:	4620      	mov	r0, r4
    d7b6:	f018 fb0f 	bl	25dd8 <strcat>
    strcat(message_buff, "!!deviceId!!:!!");
    d7ba:	49d2      	ldr	r1, [pc, #840]	; (db04 <pub_settings_packet+0x39c>)
    d7bc:	4620      	mov	r0, r4
    d7be:	f018 fb0b 	bl	25dd8 <strcat>
    strcat(message_buff, CONFIG_MQTT_CLIENT_ID);
    d7c2:	49d1      	ldr	r1, [pc, #836]	; (db08 <pub_settings_packet+0x3a0>)
    d7c4:	4620      	mov	r0, r4
    d7c6:	f018 fb07 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d7ca:	4629      	mov	r1, r5
    d7cc:	4620      	mov	r0, r4
    d7ce:	f018 fb03 	bl	25dd8 <strcat>

    //Battery Condition:
    strcat(message_buff, ","); //',' between items.
    d7d2:	4631      	mov	r1, r6
    d7d4:	4620      	mov	r0, r4
    d7d6:	f018 faff 	bl	25dd8 <strcat>
    strcat(message_buff, "!!battery!!:!!");
    d7da:	49cc      	ldr	r1, [pc, #816]	; (db0c <pub_settings_packet+0x3a4>)
    d7dc:	4620      	mov	r0, r4
    d7de:	f018 fafb 	bl	25dd8 <strcat>
    itoa(bat_voltage(), batVoltage, 10);
    d7e2:	f001 fd97 	bl	f314 <bat_voltage>
    d7e6:	220a      	movs	r2, #10
    d7e8:	4641      	mov	r1, r8
    d7ea:	f017 fd65 	bl	252b8 <itoa>
    strcat(message_buff, batVoltage);
    d7ee:	4641      	mov	r1, r8
    d7f0:	4620      	mov	r0, r4
    d7f2:	f018 faf1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d7f6:	4629      	mov	r1, r5
    d7f8:	4620      	mov	r0, r4
    d7fa:	f018 faed 	bl	25dd8 <strcat>

    //Device TimeStamp:
    strcat(message_buff, ","); //',' between items.
    d7fe:	4631      	mov	r1, r6
    d800:	4620      	mov	r0, r4
    d802:	f018 fae9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!devTimeStamp!!:!!");
    d806:	49c2      	ldr	r1, [pc, #776]	; (db10 <pub_settings_packet+0x3a8>)
    d808:	4620      	mov	r0, r4
    d80a:	f018 fae5 	bl	25dd8 <strcat>
    strcat(message_buff, ctHrsMins);
    d80e:	49c1      	ldr	r1, [pc, #772]	; (db14 <pub_settings_packet+0x3ac>)
    d810:	4620      	mov	r0, r4
    d812:	f018 fae1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d816:	4629      	mov	r1, r5
    d818:	4620      	mov	r0, r4
    d81a:	f018 fadd 	bl	25dd8 <strcat>

    //MedA:
    strcat(message_buff, ","); //',' between items.
    d81e:	4631      	mov	r1, r6
    d820:	4620      	mov	r0, r4
    d822:	f018 fad9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!barcodeA!!:!!");
    d826:	49bc      	ldr	r1, [pc, #752]	; (db18 <pub_settings_packet+0x3b0>)
    d828:	4620      	mov	r0, r4
    d82a:	f018 fad5 	bl	25dd8 <strcat>
    strcat(message_buff, medABarcode);
    d82e:	49bb      	ldr	r1, [pc, #748]	; (db1c <pub_settings_packet+0x3b4>)
    d830:	4620      	mov	r0, r4
    d832:	f018 fad1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d836:	4629      	mov	r1, r5
    d838:	4620      	mov	r0, r4
    d83a:	f018 facd 	bl	25dd8 <strcat>
    
    strcat(message_buff, ","); //',' between items.
    d83e:	4631      	mov	r1, r6
    d840:	4620      	mov	r0, r4
    d842:	f018 fac9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!doseA!!:!!");
    d846:	49b6      	ldr	r1, [pc, #728]	; (db20 <pub_settings_packet+0x3b8>)
    d848:	4620      	mov	r0, r4
    d84a:	f018 fac5 	bl	25dd8 <strcat>
    strcat(message_buff, medADose);
    d84e:	49b5      	ldr	r1, [pc, #724]	; (db24 <pub_settings_packet+0x3bc>)
    d850:	4620      	mov	r0, r4
    d852:	f018 fac1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d856:	4629      	mov	r1, r5
    d858:	4620      	mov	r0, r4
    d85a:	f018 fabd 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d85e:	4631      	mov	r1, r6
    d860:	4620      	mov	r0, r4
    d862:	f018 fab9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!formatA!!:!!");
    d866:	49b0      	ldr	r1, [pc, #704]	; (db28 <pub_settings_packet+0x3c0>)
    d868:	4620      	mov	r0, r4
    d86a:	f018 fab5 	bl	25dd8 <strcat>
    strcat(message_buff, medAFormat);
    d86e:	49af      	ldr	r1, [pc, #700]	; (db2c <pub_settings_packet+0x3c4>)
    d870:	4620      	mov	r0, r4
    d872:	f018 fab1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d876:	4629      	mov	r1, r5
    d878:	4620      	mov	r0, r4
    d87a:	f018 faad 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d87e:	4631      	mov	r1, r6
    d880:	4620      	mov	r0, r4
    d882:	f018 faa9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!nameA!!:!!");
    d886:	49aa      	ldr	r1, [pc, #680]	; (db30 <pub_settings_packet+0x3c8>)
    d888:	4620      	mov	r0, r4
    d88a:	f018 faa5 	bl	25dd8 <strcat>
    strcat(message_buff, medAName);
    d88e:	49a9      	ldr	r1, [pc, #676]	; (db34 <pub_settings_packet+0x3cc>)
    d890:	4620      	mov	r0, r4
    d892:	f018 faa1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d896:	4629      	mov	r1, r5
    d898:	4620      	mov	r0, r4
    d89a:	f018 fa9d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d89e:	4631      	mov	r1, r6
    d8a0:	4620      	mov	r0, r4
    d8a2:	f018 fa99 	bl	25dd8 <strcat>
    strcat(message_buff, "!!statusA!!:!!");
    d8a6:	49a4      	ldr	r1, [pc, #656]	; (db38 <pub_settings_packet+0x3d0>)
    d8a8:	4620      	mov	r0, r4
    d8aa:	f018 fa95 	bl	25dd8 <strcat>
    strcat(message_buff, medAStatus);
    d8ae:	49a3      	ldr	r1, [pc, #652]	; (db3c <pub_settings_packet+0x3d4>)
    d8b0:	4620      	mov	r0, r4
    d8b2:	f018 fa91 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d8b6:	4629      	mov	r1, r5
    d8b8:	4620      	mov	r0, r4
    d8ba:	f018 fa8d 	bl	25dd8 <strcat>

    //MedB:
    strcat(message_buff, ","); //',' between items.
    d8be:	4631      	mov	r1, r6
    d8c0:	4620      	mov	r0, r4
    d8c2:	f018 fa89 	bl	25dd8 <strcat>
    strcat(message_buff, "!!barcodeB!!:!!");
    d8c6:	499e      	ldr	r1, [pc, #632]	; (db40 <pub_settings_packet+0x3d8>)
    d8c8:	4620      	mov	r0, r4
    d8ca:	f018 fa85 	bl	25dd8 <strcat>
    strcat(message_buff, medBBarcode);
    d8ce:	499d      	ldr	r1, [pc, #628]	; (db44 <pub_settings_packet+0x3dc>)
    d8d0:	4620      	mov	r0, r4
    d8d2:	f018 fa81 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d8d6:	4629      	mov	r1, r5
    d8d8:	4620      	mov	r0, r4
    d8da:	f018 fa7d 	bl	25dd8 <strcat>
    
    strcat(message_buff, ","); //',' between items.
    d8de:	4631      	mov	r1, r6
    d8e0:	4620      	mov	r0, r4
    d8e2:	f018 fa79 	bl	25dd8 <strcat>
    strcat(message_buff, "!!doseB!!:!!");
    d8e6:	4998      	ldr	r1, [pc, #608]	; (db48 <pub_settings_packet+0x3e0>)
    d8e8:	4620      	mov	r0, r4
    d8ea:	f018 fa75 	bl	25dd8 <strcat>
    strcat(message_buff, medBDose);
    d8ee:	4997      	ldr	r1, [pc, #604]	; (db4c <pub_settings_packet+0x3e4>)
    d8f0:	4620      	mov	r0, r4
    d8f2:	f018 fa71 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d8f6:	4629      	mov	r1, r5
    d8f8:	4620      	mov	r0, r4
    d8fa:	f018 fa6d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d8fe:	4631      	mov	r1, r6
    d900:	4620      	mov	r0, r4
    d902:	f018 fa69 	bl	25dd8 <strcat>
    strcat(message_buff, "!!formatB!!:!!");
    d906:	4992      	ldr	r1, [pc, #584]	; (db50 <pub_settings_packet+0x3e8>)
    d908:	4620      	mov	r0, r4
    d90a:	f018 fa65 	bl	25dd8 <strcat>
    strcat(message_buff, medBFormat);
    d90e:	4991      	ldr	r1, [pc, #580]	; (db54 <pub_settings_packet+0x3ec>)
    d910:	4620      	mov	r0, r4
    d912:	f018 fa61 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d916:	4629      	mov	r1, r5
    d918:	4620      	mov	r0, r4
    d91a:	f018 fa5d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d91e:	4631      	mov	r1, r6
    d920:	4620      	mov	r0, r4
    d922:	f018 fa59 	bl	25dd8 <strcat>
    strcat(message_buff, "!!nameB!!:!!");
    d926:	498c      	ldr	r1, [pc, #560]	; (db58 <pub_settings_packet+0x3f0>)
    d928:	4620      	mov	r0, r4
    d92a:	f018 fa55 	bl	25dd8 <strcat>
    strcat(message_buff, medBName);
    d92e:	498b      	ldr	r1, [pc, #556]	; (db5c <pub_settings_packet+0x3f4>)
    d930:	4620      	mov	r0, r4
    d932:	f018 fa51 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d936:	4629      	mov	r1, r5
    d938:	4620      	mov	r0, r4
    d93a:	f018 fa4d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d93e:	4631      	mov	r1, r6
    d940:	4620      	mov	r0, r4
    d942:	f018 fa49 	bl	25dd8 <strcat>
    strcat(message_buff, "!!statusB!!:!!");
    d946:	4986      	ldr	r1, [pc, #536]	; (db60 <pub_settings_packet+0x3f8>)
    d948:	4620      	mov	r0, r4
    d94a:	f018 fa45 	bl	25dd8 <strcat>
    strcat(message_buff, medBStatus);
    d94e:	4985      	ldr	r1, [pc, #532]	; (db64 <pub_settings_packet+0x3fc>)
    d950:	4620      	mov	r0, r4
    d952:	f018 fa41 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d956:	4629      	mov	r1, r5
    d958:	4620      	mov	r0, r4
    d95a:	f018 fa3d 	bl	25dd8 <strcat>

    //MedC:
    strcat(message_buff, ","); //',' between items.
    d95e:	4631      	mov	r1, r6
    d960:	4620      	mov	r0, r4
    d962:	f018 fa39 	bl	25dd8 <strcat>
    strcat(message_buff, "!!barcodeC!!:!!");
    d966:	4980      	ldr	r1, [pc, #512]	; (db68 <pub_settings_packet+0x400>)
    d968:	4620      	mov	r0, r4
    d96a:	f018 fa35 	bl	25dd8 <strcat>
    strcat(message_buff, medCBarcode);
    d96e:	497f      	ldr	r1, [pc, #508]	; (db6c <pub_settings_packet+0x404>)
    d970:	4620      	mov	r0, r4
    d972:	f018 fa31 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d976:	4629      	mov	r1, r5
    d978:	4620      	mov	r0, r4
    d97a:	f018 fa2d 	bl	25dd8 <strcat>
    
    strcat(message_buff, ","); //',' between items.
    d97e:	4631      	mov	r1, r6
    d980:	4620      	mov	r0, r4
    d982:	f018 fa29 	bl	25dd8 <strcat>
    strcat(message_buff, "!!doseC!!:!!");
    d986:	497a      	ldr	r1, [pc, #488]	; (db70 <pub_settings_packet+0x408>)
    d988:	4620      	mov	r0, r4
    d98a:	f018 fa25 	bl	25dd8 <strcat>
    strcat(message_buff, medCDose);
    d98e:	4979      	ldr	r1, [pc, #484]	; (db74 <pub_settings_packet+0x40c>)
    d990:	4620      	mov	r0, r4
    d992:	f018 fa21 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d996:	4629      	mov	r1, r5
    d998:	4620      	mov	r0, r4
    d99a:	f018 fa1d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d99e:	4631      	mov	r1, r6
    d9a0:	4620      	mov	r0, r4
    d9a2:	f018 fa19 	bl	25dd8 <strcat>
    strcat(message_buff, "!!formatC!!:!!");
    d9a6:	4974      	ldr	r1, [pc, #464]	; (db78 <pub_settings_packet+0x410>)
    d9a8:	4620      	mov	r0, r4
    d9aa:	f018 fa15 	bl	25dd8 <strcat>
    strcat(message_buff, medCFormat);
    d9ae:	4973      	ldr	r1, [pc, #460]	; (db7c <pub_settings_packet+0x414>)
    d9b0:	4620      	mov	r0, r4
    d9b2:	f018 fa11 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d9b6:	4629      	mov	r1, r5
    d9b8:	4620      	mov	r0, r4
    d9ba:	f018 fa0d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d9be:	4631      	mov	r1, r6
    d9c0:	4620      	mov	r0, r4
    d9c2:	f018 fa09 	bl	25dd8 <strcat>
    strcat(message_buff, "!!nameC!!:!!");
    d9c6:	496e      	ldr	r1, [pc, #440]	; (db80 <pub_settings_packet+0x418>)
    d9c8:	4620      	mov	r0, r4
    d9ca:	f018 fa05 	bl	25dd8 <strcat>
    strcat(message_buff, medCName);
    d9ce:	496d      	ldr	r1, [pc, #436]	; (db84 <pub_settings_packet+0x41c>)
    d9d0:	4620      	mov	r0, r4
    d9d2:	f018 fa01 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d9d6:	4629      	mov	r1, r5
    d9d8:	4620      	mov	r0, r4
    d9da:	f018 f9fd 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    d9de:	4631      	mov	r1, r6
    d9e0:	4620      	mov	r0, r4
    d9e2:	f018 f9f9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!statusC!!:!!");
    d9e6:	4968      	ldr	r1, [pc, #416]	; (db88 <pub_settings_packet+0x420>)
    d9e8:	4620      	mov	r0, r4
    d9ea:	f018 f9f5 	bl	25dd8 <strcat>
    strcat(message_buff, medCStatus);
    d9ee:	4967      	ldr	r1, [pc, #412]	; (db8c <pub_settings_packet+0x424>)
    d9f0:	4620      	mov	r0, r4
    d9f2:	f018 f9f1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    d9f6:	4629      	mov	r1, r5
    d9f8:	4620      	mov	r0, r4
    d9fa:	f018 f9ed 	bl	25dd8 <strcat>
    
    //MedD:
    strcat(message_buff, ","); //',' between items.
    d9fe:	4631      	mov	r1, r6
    da00:	4620      	mov	r0, r4
    da02:	f018 f9e9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!barcodeD!!:!!");
    da06:	4962      	ldr	r1, [pc, #392]	; (db90 <pub_settings_packet+0x428>)
    da08:	4620      	mov	r0, r4
    da0a:	f018 f9e5 	bl	25dd8 <strcat>
    strcat(message_buff, medDBarcode);
    da0e:	4961      	ldr	r1, [pc, #388]	; (db94 <pub_settings_packet+0x42c>)
    da10:	4620      	mov	r0, r4
    da12:	f018 f9e1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    da16:	4629      	mov	r1, r5
    da18:	4620      	mov	r0, r4
    da1a:	f018 f9dd 	bl	25dd8 <strcat>
    
    strcat(message_buff, ","); //',' between items.
    da1e:	4631      	mov	r1, r6
    da20:	4620      	mov	r0, r4
    da22:	f018 f9d9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!doseD!!:!!");
    da26:	495c      	ldr	r1, [pc, #368]	; (db98 <pub_settings_packet+0x430>)
    da28:	4620      	mov	r0, r4
    da2a:	f018 f9d5 	bl	25dd8 <strcat>
    strcat(message_buff, medDDose);
    da2e:	495b      	ldr	r1, [pc, #364]	; (db9c <pub_settings_packet+0x434>)
    da30:	4620      	mov	r0, r4
    da32:	f018 f9d1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    da36:	4629      	mov	r1, r5
    da38:	4620      	mov	r0, r4
    da3a:	f018 f9cd 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    da3e:	4631      	mov	r1, r6
    da40:	4620      	mov	r0, r4
    da42:	f018 f9c9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!formatD!!:!!");
    da46:	4956      	ldr	r1, [pc, #344]	; (dba0 <pub_settings_packet+0x438>)
    da48:	4620      	mov	r0, r4
    da4a:	f018 f9c5 	bl	25dd8 <strcat>
    strcat(message_buff, medDFormat);
    da4e:	4955      	ldr	r1, [pc, #340]	; (dba4 <pub_settings_packet+0x43c>)
    da50:	4620      	mov	r0, r4
    da52:	f018 f9c1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    da56:	4629      	mov	r1, r5
    da58:	4620      	mov	r0, r4
    da5a:	f018 f9bd 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    da5e:	4631      	mov	r1, r6
    da60:	4620      	mov	r0, r4
    da62:	f018 f9b9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!nameD!!:!!");
    da66:	4950      	ldr	r1, [pc, #320]	; (dba8 <pub_settings_packet+0x440>)
    da68:	4620      	mov	r0, r4
    da6a:	f018 f9b5 	bl	25dd8 <strcat>
    strcat(message_buff, medDName);
    da6e:	494f      	ldr	r1, [pc, #316]	; (dbac <pub_settings_packet+0x444>)
    da70:	4620      	mov	r0, r4
    da72:	f018 f9b1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    da76:	4629      	mov	r1, r5
    da78:	4620      	mov	r0, r4
    da7a:	f018 f9ad 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    da7e:	4631      	mov	r1, r6
    da80:	4620      	mov	r0, r4
    da82:	f018 f9a9 	bl	25dd8 <strcat>
    strcat(message_buff, "!!statusD!!:!!");
    da86:	494a      	ldr	r1, [pc, #296]	; (dbb0 <pub_settings_packet+0x448>)
    da88:	4620      	mov	r0, r4
    da8a:	f018 f9a5 	bl	25dd8 <strcat>
    strcat(message_buff, medDStatus);
    da8e:	4949      	ldr	r1, [pc, #292]	; (dbb4 <pub_settings_packet+0x44c>)
    da90:	4620      	mov	r0, r4
    da92:	f018 f9a1 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");   
    da96:	4629      	mov	r1, r5
    da98:	4620      	mov	r0, r4
    da9a:	f018 f99d 	bl	25dd8 <strcat>
     
    //MedE:
    strcat(message_buff, ","); //',' between items.
    da9e:	4631      	mov	r1, r6
    daa0:	4620      	mov	r0, r4
    daa2:	f018 f999 	bl	25dd8 <strcat>
    strcat(message_buff, "!!barcodeE!!:!!");
    daa6:	4944      	ldr	r1, [pc, #272]	; (dbb8 <pub_settings_packet+0x450>)
    daa8:	4620      	mov	r0, r4
    daaa:	f018 f995 	bl	25dd8 <strcat>
    strcat(message_buff, medEBarcode);
    daae:	4943      	ldr	r1, [pc, #268]	; (dbbc <pub_settings_packet+0x454>)
    dab0:	4620      	mov	r0, r4
    dab2:	f018 f991 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    dab6:	4629      	mov	r1, r5
    dab8:	4620      	mov	r0, r4
    daba:	f018 f98d 	bl	25dd8 <strcat>
    
    strcat(message_buff, ","); //',' between items.
    dabe:	4631      	mov	r1, r6
    dac0:	4620      	mov	r0, r4
    dac2:	f018 f989 	bl	25dd8 <strcat>
    strcat(message_buff, "!!doseE!!:!!");
    dac6:	493e      	ldr	r1, [pc, #248]	; (dbc0 <pub_settings_packet+0x458>)
    dac8:	4620      	mov	r0, r4
    daca:	f018 f985 	bl	25dd8 <strcat>
    strcat(message_buff, medEDose);
    dace:	493d      	ldr	r1, [pc, #244]	; (dbc4 <pub_settings_packet+0x45c>)
    dad0:	4620      	mov	r0, r4
    dad2:	f018 f981 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    dad6:	4629      	mov	r1, r5
    dad8:	4620      	mov	r0, r4
    dada:	f018 f97d 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    dade:	4631      	mov	r1, r6
    dae0:	4620      	mov	r0, r4
    dae2:	f018 f979 	bl	25dd8 <strcat>
    strcat(message_buff, "!!formatE!!:!!");
    dae6:	4938      	ldr	r1, [pc, #224]	; (dbc8 <pub_settings_packet+0x460>)
    dae8:	4620      	mov	r0, r4
    daea:	f018 f975 	bl	25dd8 <strcat>
    daee:	e06f      	b.n	dbd0 <pub_settings_packet+0x468>
    daf0:	20022412 	.word	0x20022412
    daf4:	0002abd8 	.word	0x0002abd8
    daf8:	0002abdb 	.word	0x0002abdb
    dafc:	0002ac2f 	.word	0x0002ac2f
    db00:	0002abed 	.word	0x0002abed
    db04:	0002abef 	.word	0x0002abef
    db08:	0002a9e8 	.word	0x0002a9e8
    db0c:	0002abff 	.word	0x0002abff
    db10:	0002ac0e 	.word	0x0002ac0e
    db14:	2002362c 	.word	0x2002362c
    db18:	0002ac22 	.word	0x0002ac22
    db1c:	20023631 	.word	0x20023631
    db20:	0002ac32 	.word	0x0002ac32
    db24:	20023676 	.word	0x20023676
    db28:	0002ac3f 	.word	0x0002ac3f
    db2c:	200236bb 	.word	0x200236bb
    db30:	0002ac4e 	.word	0x0002ac4e
    db34:	20023700 	.word	0x20023700
    db38:	0002ac5b 	.word	0x0002ac5b
    db3c:	20023745 	.word	0x20023745
    db40:	0002ac6a 	.word	0x0002ac6a
    db44:	2002378a 	.word	0x2002378a
    db48:	0002ac7a 	.word	0x0002ac7a
    db4c:	200237cf 	.word	0x200237cf
    db50:	0002ac87 	.word	0x0002ac87
    db54:	20023814 	.word	0x20023814
    db58:	0002ac96 	.word	0x0002ac96
    db5c:	20023859 	.word	0x20023859
    db60:	0002aca3 	.word	0x0002aca3
    db64:	2002389e 	.word	0x2002389e
    db68:	0002acb2 	.word	0x0002acb2
    db6c:	200238e3 	.word	0x200238e3
    db70:	0002acc2 	.word	0x0002acc2
    db74:	20023928 	.word	0x20023928
    db78:	0002accf 	.word	0x0002accf
    db7c:	2002396d 	.word	0x2002396d
    db80:	0002acde 	.word	0x0002acde
    db84:	200239b2 	.word	0x200239b2
    db88:	0002aceb 	.word	0x0002aceb
    db8c:	200239f7 	.word	0x200239f7
    db90:	0002acfa 	.word	0x0002acfa
    db94:	20023a3c 	.word	0x20023a3c
    db98:	0002ad0a 	.word	0x0002ad0a
    db9c:	20023a81 	.word	0x20023a81
    dba0:	0002ad17 	.word	0x0002ad17
    dba4:	20023ac6 	.word	0x20023ac6
    dba8:	0002ad26 	.word	0x0002ad26
    dbac:	20023b0b 	.word	0x20023b0b
    dbb0:	0002ad33 	.word	0x0002ad33
    dbb4:	20023b50 	.word	0x20023b50
    dbb8:	0002ad42 	.word	0x0002ad42
    dbbc:	20023b95 	.word	0x20023b95
    dbc0:	0002ad52 	.word	0x0002ad52
    dbc4:	20023bda 	.word	0x20023bda
    dbc8:	0002ad5f 	.word	0x0002ad5f
    dbcc:	200223f3 	.word	0x200223f3
    strcat(message_buff, medEFormat);
    dbd0:	4934      	ldr	r1, [pc, #208]	; (dca4 <pub_settings_packet+0x53c>)
    dbd2:	4620      	mov	r0, r4
    dbd4:	f018 f900 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    dbd8:	4629      	mov	r1, r5
    dbda:	4620      	mov	r0, r4
    dbdc:	f018 f8fc 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    dbe0:	4631      	mov	r1, r6
    dbe2:	4620      	mov	r0, r4
    dbe4:	f018 f8f8 	bl	25dd8 <strcat>
    strcat(message_buff, "!!nameE!!:!!");
    dbe8:	492f      	ldr	r1, [pc, #188]	; (dca8 <pub_settings_packet+0x540>)
    dbea:	4620      	mov	r0, r4
    dbec:	f018 f8f4 	bl	25dd8 <strcat>
    strcat(message_buff, medEName);
    dbf0:	492e      	ldr	r1, [pc, #184]	; (dcac <pub_settings_packet+0x544>)
    dbf2:	4620      	mov	r0, r4
    dbf4:	f018 f8f0 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    dbf8:	4629      	mov	r1, r5
    dbfa:	4620      	mov	r0, r4
    dbfc:	f018 f8ec 	bl	25dd8 <strcat>

    strcat(message_buff, ","); //',' between items.
    dc00:	4631      	mov	r1, r6
    dc02:	4620      	mov	r0, r4
    dc04:	f018 f8e8 	bl	25dd8 <strcat>
    strcat(message_buff, "!!statusE!!:!!");
    dc08:	4929      	ldr	r1, [pc, #164]	; (dcb0 <pub_settings_packet+0x548>)
    dc0a:	4620      	mov	r0, r4
    dc0c:	f018 f8e4 	bl	25dd8 <strcat>
    strcat(message_buff, medEStatus);
    dc10:	4928      	ldr	r1, [pc, #160]	; (dcb4 <pub_settings_packet+0x54c>)
    dc12:	4620      	mov	r0, r4
    dc14:	f018 f8e0 	bl	25dd8 <strcat>
    strcat(message_buff, "!!");
    dc18:	4629      	mov	r1, r5
    dc1a:	4620      	mov	r0, r4
    dc1c:	f018 f8dc 	bl	25dd8 <strcat>
    strcat(message_buff, " }"); //Begining characters for JSON.
    dc20:	4925      	ldr	r1, [pc, #148]	; (dcb8 <pub_settings_packet+0x550>)
    dc22:	4620      	mov	r0, r4
    dc24:	f018 f8d8 	bl	25dd8 <strcat>

    data_publish(&client, MQTT_QOS_0_AT_MOST_ONCE, message_buff, strlen(message_buff));
    dc28:	4620      	mov	r0, r4
    dc2a:	f018 f8b1 	bl	25d90 <strlen>
	param.message.topic.qos = qos;
    dc2e:	f04f 0800 	mov.w	r8, #0
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    dc32:	4d22      	ldr	r5, [pc, #136]	; (dcbc <pub_settings_packet+0x554>)
    data_publish(&client, MQTT_QOS_0_AT_MOST_ONCE, message_buff, strlen(message_buff));
    dc34:	4606      	mov	r6, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    dc36:	4628      	mov	r0, r5
	param.message.topic.qos = qos;
    dc38:	f887 8008 	strb.w	r8, [r7, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    dc3c:	603d      	str	r5, [r7, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    dc3e:	f018 f8a7 	bl	25d90 <strlen>
	param.message.payload.len = len;
    dc42:	e9c7 4603 	strd	r4, r6, [r7, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    dc46:	6078      	str	r0, [r7, #4]
	param.message_id = sys_rand32_get();
    dc48:	f002 fdb4 	bl	107b4 <sys_rand32_get>
{
    dc4c:	46e9      	mov	r9, sp
	param.dup_flag = 0;
    dc4e:	7dbb      	ldrb	r3, [r7, #22]
	param.message_id = sys_rand32_get();
    dc50:	82b8      	strh	r0, [r7, #20]
	param.retain_flag = 1;
    dc52:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    dc56:	f043 0302 	orr.w	r3, r3, #2
    dc5a:	75bb      	strb	r3, [r7, #22]
	char buf[len + 1];
    dc5c:	f106 0308 	add.w	r3, r6, #8
    dc60:	f023 0307 	bic.w	r3, r3, #7
    dc64:	ebad 0d03 	sub.w	sp, sp, r3
	memcpy(buf, data, len);
    dc68:	4632      	mov	r2, r6
    dc6a:	4621      	mov	r1, r4
    dc6c:	4668      	mov	r0, sp
    dc6e:	f018 f8fa 	bl	25e66 <memcpy>
	printk("%s%s\n", prefix, buf);
    dc72:	466a      	mov	r2, sp
	buf[len] = 0;
    dc74:	f80d 8006 	strb.w	r8, [sp, r6]
	printk("%s%s\n", prefix, buf);
    dc78:	4911      	ldr	r1, [pc, #68]	; (dcc0 <pub_settings_packet+0x558>)
    dc7a:	4812      	ldr	r0, [pc, #72]	; (dcc4 <pub_settings_packet+0x55c>)
    dc7c:	f017 ff5f 	bl	25b3e <printk>
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));
    dc80:	4628      	mov	r0, r5
    dc82:	46cd      	mov	sp, r9
    dc84:	f018 f884 	bl	25d90 <strlen>
	printk("to topic: %s len: %u\n",
    dc88:	4629      	mov	r1, r5
    dc8a:	4602      	mov	r2, r0
    dc8c:	480e      	ldr	r0, [pc, #56]	; (dcc8 <pub_settings_packet+0x560>)
    dc8e:	f017 ff56 	bl	25b3e <printk>
	return mqtt_publish(c, &param);
    dc92:	4639      	mov	r1, r7
    dc94:	480d      	ldr	r0, [pc, #52]	; (dccc <pub_settings_packet+0x564>)
    dc96:	f018 fd46 	bl	26726 <mqtt_publish>
    };
    dc9a:	371c      	adds	r7, #28
    dc9c:	46bd      	mov	sp, r7
    dc9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dca2:	bf00      	nop
    dca4:	20023c1f 	.word	0x20023c1f
    dca8:	0002ad6e 	.word	0x0002ad6e
    dcac:	20023c64 	.word	0x20023c64
    dcb0:	0002ad7b 	.word	0x0002ad7b
    dcb4:	20023ca9 	.word	0x20023ca9
    dcb8:	0002ad8a 	.word	0x0002ad8a
    dcbc:	0002ad8d 	.word	0x0002ad8d
    dcc0:	0002ada7 	.word	0x0002ada7
    dcc4:	0002ab67 	.word	0x0002ab67
    dcc8:	0002adb4 	.word	0x0002adb4
    dccc:	20020020 	.word	0x20020020

0000dcd0 <reconnect>:

/*--Reconnect sequence.--*/
void reconnect(){
    dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Reconnect Sequence. */
    if(connected == false){   
    dcd2:	4b99      	ldr	r3, [pc, #612]	; (df38 <reconnect+0x268>)
void reconnect(){
    dcd4:	b099      	sub	sp, #100	; 0x64
    if(connected == false){   
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d17a      	bne.n	ddd2 <reconnect+0x102>
        alarm = false;
    dcdc:	4a97      	ldr	r2, [pc, #604]	; (df3c <reconnect+0x26c>)
        clearDisplay();
        small_print(1, 100, "CONNECTING...");

        printk("Disconnecting MQTT client...\n");

        err = mqtt_live(&client);
    dcde:	4d98      	ldr	r5, [pc, #608]	; (df40 <reconnect+0x270>)
        alarm = false;
    dce0:	7013      	strb	r3, [r2, #0]
        clearDisplay();
    dce2:	f001 f845 	bl	ed70 <clearDisplay>
        small_print(1, 100, "CONNECTING...");
    dce6:	2164      	movs	r1, #100	; 0x64
    dce8:	4a96      	ldr	r2, [pc, #600]	; (df44 <reconnect+0x274>)
    dcea:	2001      	movs	r0, #1
    dcec:	f001 f88e 	bl	ee0c <small_print>
        printk("Disconnecting MQTT client...\n");
    dcf0:	4895      	ldr	r0, [pc, #596]	; (df48 <reconnect+0x278>)
    dcf2:	f017 ff24 	bl	25b3e <printk>
        err = mqtt_live(&client);
    dcf6:	4895      	ldr	r0, [pc, #596]	; (df4c <reconnect+0x27c>)
    dcf8:	f004 feaa 	bl	12a50 <mqtt_live>
    dcfc:	4601      	mov	r1, r0
    dcfe:	6028      	str	r0, [r5, #0]
        if (err != 0) {
    dd00:	b110      	cbz	r0, dd08 <reconnect+0x38>
        printk("ERROR: mqtt_live %d\n", err);
    dd02:	4893      	ldr	r0, [pc, #588]	; (df50 <reconnect+0x280>)
    dd04:	f017 ff1b 	bl	25b3e <printk>
        }
        printk("LTE reconnecting.\n");
    dd08:	4892      	ldr	r0, [pc, #584]	; (df54 <reconnect+0x284>)
    dd0a:	f017 ff18 	bl	25b3e <printk>

        err = mqtt_disconnect(&client);
    dd0e:	488f      	ldr	r0, [pc, #572]	; (df4c <reconnect+0x27c>)
    dd10:	f018 fd37 	bl	26782 <mqtt_disconnect>
    dd14:	4601      	mov	r1, r0
    dd16:	6028      	str	r0, [r5, #0]
        printk("err: %d \n", err);
    dd18:	488f      	ldr	r0, [pc, #572]	; (df58 <reconnect+0x288>)
    dd1a:	f017 ff10 	bl	25b3e <printk>
        if (err) {
    dd1e:	6829      	ldr	r1, [r5, #0]
    dd20:	b111      	cbz	r1, dd28 <reconnect+0x58>
            printk("Could not disconnect MQTT client. Error: %d\n", err);
    dd22:	488e      	ldr	r0, [pc, #568]	; (df5c <reconnect+0x28c>)
    dd24:	f017 ff0b 	bl	25b3e <printk>
	mqtt_client_init(client);
    dd28:	4888      	ldr	r0, [pc, #544]	; (df4c <reconnect+0x27c>)
    dd2a:	f018 fca4 	bl	26676 <mqtt_client_init>
	struct addrinfo hints = {
    dd2e:	2220      	movs	r2, #32
    dd30:	2100      	movs	r1, #0
    dd32:	a806      	add	r0, sp, #24
    dd34:	f018 f8c4 	bl	25ec0 <memset>
    dd38:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
    dd3a:	4c89      	ldr	r4, [pc, #548]	; (df60 <reconnect+0x290>)
    dd3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
    dd40:	6823      	ldr	r3, [r4, #0]
    dd42:	b94b      	cbnz	r3, dd58 <reconnect+0x88>
    dd44:	4987      	ldr	r1, [pc, #540]	; (df64 <reconnect+0x294>)
    dd46:	4888      	ldr	r0, [pc, #544]	; (df68 <reconnect+0x298>)
    dd48:	2393      	movs	r3, #147	; 0x93
    dd4a:	4a88      	ldr	r2, [pc, #544]	; (df6c <reconnect+0x29c>)
    dd4c:	f017 fef7 	bl	25b3e <printk>
    dd50:	2193      	movs	r1, #147	; 0x93
    dd52:	4886      	ldr	r0, [pc, #536]	; (df6c <reconnect+0x29c>)
    dd54:	f017 ff00 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
    dd58:	6823      	ldr	r3, [r4, #0]
    dd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dd5c:	b94b      	cbnz	r3, dd72 <reconnect+0xa2>
    dd5e:	4984      	ldr	r1, [pc, #528]	; (df70 <reconnect+0x2a0>)
    dd60:	4881      	ldr	r0, [pc, #516]	; (df68 <reconnect+0x298>)
    dd62:	2394      	movs	r3, #148	; 0x94
    dd64:	4a81      	ldr	r2, [pc, #516]	; (df6c <reconnect+0x29c>)
    dd66:	f017 feea 	bl	25b3e <printk>
    dd6a:	2194      	movs	r1, #148	; 0x94
    dd6c:	487f      	ldr	r0, [pc, #508]	; (df6c <reconnect+0x29c>)
    dd6e:	f017 fef3 	bl	25b58 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
    dd72:	6823      	ldr	r3, [r4, #0]
    dd74:	2100      	movs	r1, #0
    dd76:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    dd78:	aa06      	add	r2, sp, #24
    dd7a:	ab01      	add	r3, sp, #4
    dd7c:	487d      	ldr	r0, [pc, #500]	; (df74 <reconnect+0x2a4>)
    dd7e:	47b0      	blx	r6
    dd80:	4e7d      	ldr	r6, [pc, #500]	; (df78 <reconnect+0x2a8>)
	if (err) {
    dd82:	4601      	mov	r1, r0
    dd84:	b338      	cbz	r0, ddd6 <reconnect+0x106>
		printk("ERROR: getaddrinfo failed %d\n", err);
    dd86:	487d      	ldr	r0, [pc, #500]	; (df7c <reconnect+0x2ac>)
    dd88:	f017 fed9 	bl	25b3e <printk>
	client->broker = &broker;
    dd8c:	4c6f      	ldr	r4, [pc, #444]	; (df4c <reconnect+0x27c>)
	client->evt_cb = mqtt_evt_handler;
    dd8e:	4b7c      	ldr	r3, [pc, #496]	; (df80 <reconnect+0x2b0>)
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    dd90:	487c      	ldr	r0, [pc, #496]	; (df84 <reconnect+0x2b4>)
	client->evt_cb = mqtt_evt_handler;
    dd92:	64a3      	str	r3, [r4, #72]	; 0x48
	client->broker = &broker;
    dd94:	6366      	str	r6, [r4, #52]	; 0x34
	client->client_id.utf8 = (u8_t *)CONFIG_MQTT_CLIENT_ID;
    dd96:	62e0      	str	r0, [r4, #44]	; 0x2c
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    dd98:	f017 fffa 	bl	25d90 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    dd9c:	2204      	movs	r2, #4
    dd9e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
	client->rx_buf = rx_buffer;
    dda2:	4a79      	ldr	r2, [pc, #484]	; (df88 <reconnect+0x2b8>)
	client->password = NULL;
    dda4:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
    dda6:	64e2      	str	r2, [r4, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    dda8:	f44f 6280 	mov.w	r2, #1024	; 0x400
	client->tx_buf = tx_buffer;
    ddac:	4977      	ldr	r1, [pc, #476]	; (df8c <reconnect+0x2bc>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    ddae:	6320      	str	r0, [r4, #48]	; 0x30

        modem_configure();
        
        client_init(&client);
        
        err = mqtt_connect(&client);
    ddb0:	4620      	mov	r0, r4
	client->tx_buf_size = sizeof(tx_buffer);
    ddb2:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
	client->user_name = NULL;
    ddb6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
	client->rx_buf_size = sizeof(rx_buffer);
    ddba:	6522      	str	r2, [r4, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    ddbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        err = mqtt_connect(&client);
    ddc0:	f018 fc6f 	bl	266a2 <mqtt_connect>
    ddc4:	4601      	mov	r1, r0
    ddc6:	6028      	str	r0, [r5, #0]
        if (err != 0) {
    ddc8:	2800      	cmp	r0, #0
    ddca:	d03f      	beq.n	de4c <reconnect+0x17c>
            printk("ERROR: mqtt_connect %d\n", err);
    ddcc:	4870      	ldr	r0, [pc, #448]	; (df90 <reconnect+0x2c0>)
            return;
            }
       
        err = fds_init(&client);
        if (err != 0) {
            printk("ERROR: fds_init %d\n", err);
    ddce:	f017 feb6 	bl	25b3e <printk>
        //dev_condition = standby;
        update_display = true;
        updateSub = true;
        }
    /*--Reconnect Sequence. END--*/
    };
    ddd2:	b019      	add	sp, #100	; 0x64
    ddd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr = result;
    ddd6:	9b01      	ldr	r3, [sp, #4]
	while (addr != NULL) {
    ddd8:	b19b      	cbz	r3, de02 <reconnect+0x132>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    ddda:	6919      	ldr	r1, [r3, #16]
    dddc:	2908      	cmp	r1, #8
    ddde:	d12f      	bne.n	de40 <reconnect+0x170>
				->sin_addr.s_addr;
    dde0:	695b      	ldr	r3, [r3, #20]
			broker4->sin_family = AF_INET;
    dde2:	2001      	movs	r0, #1
				->sin_addr.s_addr;
    dde4:	685b      	ldr	r3, [r3, #4]
 * @endrststar
 */
static inline char *zsock_inet_ntop(sa_family_t family, const void *src,
				    char *dst, size_t size)
{
	return net_addr_ntop(family, src, dst, size);
    dde6:	1d31      	adds	r1, r6, #4
			broker4->sin_addr.s_addr =
    dde8:	6073      	str	r3, [r6, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    ddea:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
    ddee:	8030      	strh	r0, [r6, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    ddf0:	8073      	strh	r3, [r6, #2]
    ddf2:	aa02      	add	r2, sp, #8
    ddf4:	2310      	movs	r3, #16
    ddf6:	f004 fb21 	bl	1243c <net_addr_ntop>
			printk("IPv4 Address found %s\n", ipv4_addr);
    ddfa:	a902      	add	r1, sp, #8
    ddfc:	4865      	ldr	r0, [pc, #404]	; (df94 <reconnect+0x2c4>)
    ddfe:	f017 fe9e 	bl	25b3e <printk>
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
    de02:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
    de04:	9f01      	ldr	r7, [sp, #4]
    de06:	b94b      	cbnz	r3, de1c <reconnect+0x14c>
    de08:	4956      	ldr	r1, [pc, #344]	; (df64 <reconnect+0x294>)
    de0a:	4857      	ldr	r0, [pc, #348]	; (df68 <reconnect+0x298>)
    de0c:	239b      	movs	r3, #155	; 0x9b
    de0e:	4a57      	ldr	r2, [pc, #348]	; (df6c <reconnect+0x29c>)
    de10:	f017 fe95 	bl	25b3e <printk>
    de14:	219b      	movs	r1, #155	; 0x9b
    de16:	4855      	ldr	r0, [pc, #340]	; (df6c <reconnect+0x29c>)
    de18:	f017 fe9e 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
    de1c:	6823      	ldr	r3, [r4, #0]
    de1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de20:	b94b      	cbnz	r3, de36 <reconnect+0x166>
    de22:	495d      	ldr	r1, [pc, #372]	; (df98 <reconnect+0x2c8>)
    de24:	4850      	ldr	r0, [pc, #320]	; (df68 <reconnect+0x298>)
    de26:	239c      	movs	r3, #156	; 0x9c
    de28:	4a50      	ldr	r2, [pc, #320]	; (df6c <reconnect+0x29c>)
    de2a:	f017 fe88 	bl	25b3e <printk>
    de2e:	219c      	movs	r1, #156	; 0x9c
    de30:	484e      	ldr	r0, [pc, #312]	; (df6c <reconnect+0x29c>)
    de32:	f017 fe91 	bl	25b58 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
    de36:	6823      	ldr	r3, [r4, #0]
    de38:	4638      	mov	r0, r7
    de3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de3c:	4798      	blx	r3
    de3e:	e7a5      	b.n	dd8c <reconnect+0xbc>
			printk("ai_addrlen = %u should be %u or %u\n",
    de40:	2318      	movs	r3, #24
    de42:	2208      	movs	r2, #8
    de44:	4855      	ldr	r0, [pc, #340]	; (df9c <reconnect+0x2cc>)
    de46:	f017 fe7a 	bl	25b3e <printk>
    de4a:	e7da      	b.n	de02 <reconnect+0x132>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    de4c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    de50:	b123      	cbz	r3, de5c <reconnect+0x18c>
        err = fds_init(&client);
    de52:	f06f 0122 	mvn.w	r1, #34	; 0x22
            printk("ERROR: fds_init %d\n", err);
    de56:	4852      	ldr	r0, [pc, #328]	; (dfa0 <reconnect+0x2d0>)
        err = fds_init(&client);
    de58:	6029      	str	r1, [r5, #0]
    de5a:	e7b8      	b.n	ddce <reconnect+0xfe>
		fds.fd = c->transport.tcp.sock;
    de5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de5e:	4e51      	ldr	r6, [pc, #324]	; (dfa4 <reconnect+0x2d4>)
    de60:	6033      	str	r3, [r6, #0]
	fds.events = POLLIN;
    de62:	2301      	movs	r3, #1
    de64:	80b3      	strh	r3, [r6, #4]
        err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    de66:	f7ff faa7 	bl	d3b8 <poll.constprop.5>
        if (err < 0) {
    de6a:	2800      	cmp	r0, #0
        err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    de6c:	6028      	str	r0, [r5, #0]
        if (err < 0) {
    de6e:	da05      	bge.n	de7c <reconnect+0x1ac>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
    de70:	f013 fede 	bl	21c30 <z_impl_z_errno>
            printk("ERROR: poll %d\n", errno);
    de74:	6801      	ldr	r1, [r0, #0]
    de76:	484c      	ldr	r0, [pc, #304]	; (dfa8 <reconnect+0x2d8>)
    de78:	f017 fe61 	bl	25b3e <printk>
        err = mqtt_live(&client);
    de7c:	4833      	ldr	r0, [pc, #204]	; (df4c <reconnect+0x27c>)
    de7e:	f004 fde7 	bl	12a50 <mqtt_live>
    de82:	4601      	mov	r1, r0
    de84:	6028      	str	r0, [r5, #0]
        if (err != 0) {
    de86:	b110      	cbz	r0, de8e <reconnect+0x1be>
            printk("ERROR: mqtt_live %d\n", err);
    de88:	4831      	ldr	r0, [pc, #196]	; (df50 <reconnect+0x280>)
    de8a:	f017 fe58 	bl	25b3e <printk>
        if ((fds.revents & POLLIN) == POLLIN) {
    de8e:	88f3      	ldrh	r3, [r6, #6]
    de90:	07d9      	lsls	r1, r3, #31
    de92:	d508      	bpl.n	dea6 <reconnect+0x1d6>
            err = mqtt_input(&client);
    de94:	482d      	ldr	r0, [pc, #180]	; (df4c <reconnect+0x27c>)
    de96:	f018 fce6 	bl	26866 <mqtt_input>
    de9a:	4601      	mov	r1, r0
    de9c:	6028      	str	r0, [r5, #0]
    	if (err != 0) {
    de9e:	b110      	cbz	r0, dea6 <reconnect+0x1d6>
                printk("ERROR: mqtt_input %d\n", err);
    dea0:	4842      	ldr	r0, [pc, #264]	; (dfac <reconnect+0x2dc>)
    dea2:	f017 fe4c 	bl	25b3e <printk>
        if ((fds.revents & POLLERR) == POLLERR) {
    dea6:	88f3      	ldrh	r3, [r6, #6]
    dea8:	071a      	lsls	r2, r3, #28
    deaa:	d502      	bpl.n	deb2 <reconnect+0x1e2>
            printk("POLLERR\n");
    deac:	4840      	ldr	r0, [pc, #256]	; (dfb0 <reconnect+0x2e0>)
    deae:	f017 fe46 	bl	25b3e <printk>
        if ((fds.revents & POLLNVAL) == POLLNVAL) {
    deb2:	88f3      	ldrh	r3, [r6, #6]
    deb4:	069b      	lsls	r3, r3, #26
    deb6:	d502      	bpl.n	debe <reconnect+0x1ee>
            printk("POLLNVAL\n");
    deb8:	483e      	ldr	r0, [pc, #248]	; (dfb4 <reconnect+0x2e4>)
    deba:	f017 fe40 	bl	25b3e <printk>
        memset(message_buff, 0, sizeof(message_buff)); /*--clear register.--*/
    debe:	2245      	movs	r2, #69	; 0x45
    dec0:	2100      	movs	r1, #0
    dec2:	a806      	add	r0, sp, #24
    dec4:	f017 fffc 	bl	25ec0 <memset>
        memset(batVoltage,  0, sizeof(batVoltage));
    dec8:	220a      	movs	r2, #10
    deca:	2100      	movs	r1, #0
    decc:	483a      	ldr	r0, [pc, #232]	; (dfb8 <reconnect+0x2e8>)
    dece:	f017 fff7 	bl	25ec0 <memset>
        strcat(message_buff, "Reconnect");
    ded2:	493a      	ldr	r1, [pc, #232]	; (dfbc <reconnect+0x2ec>)
    ded4:	a806      	add	r0, sp, #24
    ded6:	f017 ff7f 	bl	25dd8 <strcat>
        strcat(message_buff, ",");
    deda:	4939      	ldr	r1, [pc, #228]	; (dfc0 <reconnect+0x2f0>)
    dedc:	a806      	add	r0, sp, #24
    dede:	f017 ff7b 	bl	25dd8 <strcat>
        strcat(message_buff, CONFIG_MQTT_CLIENT_ID);
    dee2:	4928      	ldr	r1, [pc, #160]	; (df84 <reconnect+0x2b4>)
    dee4:	a806      	add	r0, sp, #24
    dee6:	f017 ff77 	bl	25dd8 <strcat>
        strcat(message_buff, ",");
    deea:	4935      	ldr	r1, [pc, #212]	; (dfc0 <reconnect+0x2f0>)
    deec:	a806      	add	r0, sp, #24
    deee:	f017 ff73 	bl	25dd8 <strcat>
        if(restart == true){
    def2:	4d34      	ldr	r5, [pc, #208]	; (dfc4 <reconnect+0x2f4>)
        itoa(bat_voltage(), batVoltage, 10);
    def4:	f001 fa0e 	bl	f314 <bat_voltage>
    def8:	220a      	movs	r2, #10
    defa:	492f      	ldr	r1, [pc, #188]	; (dfb8 <reconnect+0x2e8>)
    defc:	f017 f9dc 	bl	252b8 <itoa>
        strcat(message_buff, batVoltage);
    df00:	492d      	ldr	r1, [pc, #180]	; (dfb8 <reconnect+0x2e8>)
    df02:	a806      	add	r0, sp, #24
    df04:	f017 ff68 	bl	25dd8 <strcat>
        if(restart == true){
    df08:	782b      	ldrb	r3, [r5, #0]
    df0a:	4c2f      	ldr	r4, [pc, #188]	; (dfc8 <reconnect+0x2f8>)
    df0c:	b17b      	cbz	r3, df2e <reconnect+0x25e>
            pub_settings_packet("Restart");
    df0e:	482f      	ldr	r0, [pc, #188]	; (dfcc <reconnect+0x2fc>)
    df10:	f7ff fc2a 	bl	d768 <pub_settings_packet>
            dev_condition = standby;
    df14:	2202      	movs	r2, #2
    df16:	4b2e      	ldr	r3, [pc, #184]	; (dfd0 <reconnect+0x300>)
    df18:	701a      	strb	r2, [r3, #0]
            restart = false;
    df1a:	2300      	movs	r3, #0
    df1c:	702b      	strb	r3, [r5, #0]
                skip = true;
    df1e:	2301      	movs	r3, #1
    df20:	7023      	strb	r3, [r4, #0]
        update_display = true;
    df22:	2301      	movs	r3, #1
    df24:	4a2b      	ldr	r2, [pc, #172]	; (dfd4 <reconnect+0x304>)
    df26:	7013      	strb	r3, [r2, #0]
        updateSub = true;
    df28:	4a2b      	ldr	r2, [pc, #172]	; (dfd8 <reconnect+0x308>)
    df2a:	7013      	strb	r3, [r2, #0]
    df2c:	e751      	b.n	ddd2 <reconnect+0x102>
                pub_settings_packet("Reconnect");
    df2e:	4823      	ldr	r0, [pc, #140]	; (dfbc <reconnect+0x2ec>)
    df30:	f7ff fc1a 	bl	d768 <pub_settings_packet>
    df34:	e7f3      	b.n	df1e <reconnect+0x24e>
    df36:	bf00      	nop
    df38:	2002240d 	.word	0x2002240d
    df3c:	200222de 	.word	0x200222de
    df40:	20020094 	.word	0x20020094
    df44:	0002adca 	.word	0x0002adca
    df48:	0002aaa7 	.word	0x0002aaa7
    df4c:	20020020 	.word	0x20020020
    df50:	0002add8 	.word	0x0002add8
    df54:	0002aded 	.word	0x0002aded
    df58:	0002ae00 	.word	0x0002ae00
    df5c:	0002ae0a 	.word	0x0002ae0a
    df60:	200201a8 	.word	0x200201a8
    df64:	0002ab9f 	.word	0x0002ab9f
    df68:	0002abaa 	.word	0x0002abaa
    df6c:	0002ab6d 	.word	0x0002ab6d
    df70:	0002ae37 	.word	0x0002ae37
    df74:	0002ae4f 	.word	0x0002ae4f
    df78:	2002223c 	.word	0x2002223c
    df7c:	0002ae61 	.word	0x0002ae61
    df80:	0000d419 	.word	0x0000d419
    df84:	0002a9e8 	.word	0x0002a9e8
    df88:	20022c25 	.word	0x20022c25
    df8c:	20023126 	.word	0x20023126
    df90:	0002aed3 	.word	0x0002aed3
    df94:	0002ae7f 	.word	0x0002ae7f
    df98:	0002aeba 	.word	0x0002aeba
    df9c:	0002ae96 	.word	0x0002ae96
    dfa0:	0002aeeb 	.word	0x0002aeeb
    dfa4:	20020098 	.word	0x20020098
    dfa8:	0002aeff 	.word	0x0002aeff
    dfac:	0002af0f 	.word	0x0002af0f
    dfb0:	0002af25 	.word	0x0002af25
    dfb4:	0002af2e 	.word	0x0002af2e
    dfb8:	200223f3 	.word	0x200223f3
    dfbc:	0002af38 	.word	0x0002af38
    dfc0:	0002abed 	.word	0x0002abed
    dfc4:	20028353 	.word	0x20028353
    dfc8:	20023025 	.word	0x20023025
    dfcc:	0002af42 	.word	0x0002af42
    dfd0:	2002240e 	.word	0x2002240e
    dfd4:	20028355 	.word	0x20028355
    dfd8:	20028354 	.word	0x20028354

0000dfdc <maintain_connection>:



/*--function to keep connection alive and 'MQTT SUB' periodicaly.--*/
void maintain_connection(){
    dfdc:	b570      	push	{r4, r5, r6, lr}

    /*--Enter loop if updateSub == true && connected == true--*/
    if(updateSub == true && connected == true){
    dfde:	4e2c      	ldr	r6, [pc, #176]	; (e090 <maintain_connection+0xb4>)
    dfe0:	7832      	ldrb	r2, [r6, #0]
    dfe2:	2a00      	cmp	r2, #0
    dfe4:	d03c      	beq.n	e060 <maintain_connection+0x84>
    dfe6:	4b2b      	ldr	r3, [pc, #172]	; (e094 <maintain_connection+0xb8>)
    dfe8:	781b      	ldrb	r3, [r3, #0]
    dfea:	2b00      	cmp	r3, #0
    dfec:	d037      	beq.n	e05e <maintain_connection+0x82>
        //gpio_pin_read(dev, 6, &button_A_state);
        //gpio_pin_write(dev, LED_RED, 1); //red LED on.

        err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    dfee:	f7ff f9e3 	bl	d3b8 <poll.constprop.5>
    dff2:	4d29      	ldr	r5, [pc, #164]	; (e098 <maintain_connection+0xbc>)
        if (err < 0) {
    dff4:	2800      	cmp	r0, #0
        err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    dff6:	6028      	str	r0, [r5, #0]
        if (err < 0) {
    dff8:	da05      	bge.n	e006 <maintain_connection+0x2a>
    dffa:	f013 fe19 	bl	21c30 <z_impl_z_errno>
            printk("ERROR: poll %d\n", errno);
    dffe:	6801      	ldr	r1, [r0, #0]
    e000:	4826      	ldr	r0, [pc, #152]	; (e09c <maintain_connection+0xc0>)
    e002:	f017 fd9c 	bl	25b3e <printk>
            //break;
            }

        err = mqtt_live(&client);
    e006:	4826      	ldr	r0, [pc, #152]	; (e0a0 <maintain_connection+0xc4>)
    e008:	f004 fd22 	bl	12a50 <mqtt_live>
    e00c:	4601      	mov	r1, r0
    e00e:	6028      	str	r0, [r5, #0]
        if (err != 0) {
    e010:	b110      	cbz	r0, e018 <maintain_connection+0x3c>
            printk("ERROR: mqtt_live %d\n", err);
    e012:	4824      	ldr	r0, [pc, #144]	; (e0a4 <maintain_connection+0xc8>)
    e014:	f017 fd93 	bl	25b3e <printk>
	   	//break;
            }      

        if ((fds.revents & POLLIN) == POLLIN) {
    e018:	4c23      	ldr	r4, [pc, #140]	; (e0a8 <maintain_connection+0xcc>)
    e01a:	88e3      	ldrh	r3, [r4, #6]
    e01c:	07d9      	lsls	r1, r3, #31
    e01e:	d508      	bpl.n	e032 <maintain_connection+0x56>
            err = mqtt_input(&client);
    e020:	481f      	ldr	r0, [pc, #124]	; (e0a0 <maintain_connection+0xc4>)
    e022:	f018 fc20 	bl	26866 <mqtt_input>
    e026:	4601      	mov	r1, r0
    e028:	6028      	str	r0, [r5, #0]
	   	if (err != 0) {
    e02a:	b110      	cbz	r0, e032 <maintain_connection+0x56>
                printk("ERROR: mqtt_input %d\n", err);
    e02c:	481f      	ldr	r0, [pc, #124]	; (e0ac <maintain_connection+0xd0>)
    e02e:	f017 fd86 	bl	25b3e <printk>
                //break;
                }
            }

        if ((fds.revents & POLLERR) == POLLERR) {
    e032:	88e3      	ldrh	r3, [r4, #6]
    e034:	071a      	lsls	r2, r3, #28
    e036:	d502      	bpl.n	e03e <maintain_connection+0x62>
            printk("POLLERR\n");
    e038:	481d      	ldr	r0, [pc, #116]	; (e0b0 <maintain_connection+0xd4>)
    e03a:	f017 fd80 	bl	25b3e <printk>
            //break;
            }

        /* POLLNVAL - Invalid request: fd not open (output only) */
        if ((fds.revents & POLLNVAL) == POLLNVAL) {
    e03e:	88e3      	ldrh	r3, [r4, #6]
    e040:	069b      	lsls	r3, r3, #26
    e042:	d502      	bpl.n	e04a <maintain_connection+0x6e>
            printk("POLLNVAL\n");
    e044:	481b      	ldr	r0, [pc, #108]	; (e0b4 <maintain_connection+0xd8>)
    e046:	f017 fd7a 	bl	25b3e <printk>
	        //break;
            }
 
        printk("payload_buf: %s  -- %d\n", payload_buf, strlen(payload_buf));
    e04a:	481b      	ldr	r0, [pc, #108]	; (e0b8 <maintain_connection+0xdc>)
    e04c:	f017 fea0 	bl	25d90 <strlen>
    e050:	4919      	ldr	r1, [pc, #100]	; (e0b8 <maintain_connection+0xdc>)
    e052:	4602      	mov	r2, r0
    e054:	4819      	ldr	r0, [pc, #100]	; (e0bc <maintain_connection+0xe0>)
    e056:	f017 fd72 	bl	25b3e <printk>
        updateSub = false;
    e05a:	2300      	movs	r3, #0
    e05c:	7033      	strb	r3, [r6, #0]
                printk("ERROR: mqtt_live %d\n", err);
                //break;
                }
            /* keep MQTT connection alive. END */
            }
    };  
    e05e:	bd70      	pop	{r4, r5, r6, pc}
            err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    e060:	f7ff f9aa 	bl	d3b8 <poll.constprop.5>
    e064:	4c0c      	ldr	r4, [pc, #48]	; (e098 <maintain_connection+0xbc>)
            if (err < 0) {
    e066:	2800      	cmp	r0, #0
            err = poll(&fds, 1, K_SECONDS(CONFIG_MQTT_KEEPALIVE)); //CONFIG_MQTT_KEEPALIVE
    e068:	6020      	str	r0, [r4, #0]
            if (err < 0) {
    e06a:	da05      	bge.n	e078 <maintain_connection+0x9c>
    e06c:	f013 fde0 	bl	21c30 <z_impl_z_errno>
                printk("ERROR: poll %d\n", errno);
    e070:	6801      	ldr	r1, [r0, #0]
    e072:	480a      	ldr	r0, [pc, #40]	; (e09c <maintain_connection+0xc0>)
    e074:	f017 fd63 	bl	25b3e <printk>
            err = mqtt_live(&client);
    e078:	4809      	ldr	r0, [pc, #36]	; (e0a0 <maintain_connection+0xc4>)
    e07a:	f004 fce9 	bl	12a50 <mqtt_live>
    e07e:	4601      	mov	r1, r0
    e080:	6020      	str	r0, [r4, #0]
            if (err != 0) {
    e082:	2800      	cmp	r0, #0
    e084:	d0eb      	beq.n	e05e <maintain_connection+0x82>
    };  
    e086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                printk("ERROR: mqtt_live %d\n", err);
    e08a:	4806      	ldr	r0, [pc, #24]	; (e0a4 <maintain_connection+0xc8>)
    e08c:	f017 bd57 	b.w	25b3e <printk>
    e090:	20028354 	.word	0x20028354
    e094:	2002240d 	.word	0x2002240d
    e098:	20020094 	.word	0x20020094
    e09c:	0002aeff 	.word	0x0002aeff
    e0a0:	20020020 	.word	0x20020020
    e0a4:	0002add8 	.word	0x0002add8
    e0a8:	20020098 	.word	0x20020098
    e0ac:	0002af0f 	.word	0x0002af0f
    e0b0:	0002af25 	.word	0x0002af25
    e0b4:	0002af2e 	.word	0x0002af2e
    e0b8:	20022824 	.word	0x20022824
    e0bc:	0002a989 	.word	0x0002a989

0000e0c0 <btn_a_init>:
bool btnAtoggle = true;
int btnAstateNew = 0;
int btnAstateOld = 0;

void btn_a_init(){
    btnAtoggle = true;
    e0c0:	2201      	movs	r2, #1
    e0c2:	4b04      	ldr	r3, [pc, #16]	; (e0d4 <btn_a_init+0x14>)
    e0c4:	701a      	strb	r2, [r3, #0]
    btnAstateNew = 0;
    e0c6:	2300      	movs	r3, #0
    e0c8:	4a03      	ldr	r2, [pc, #12]	; (e0d8 <btn_a_init+0x18>)
    e0ca:	6013      	str	r3, [r2, #0]
    btnAstateOld = 0;
    e0cc:	4a03      	ldr	r2, [pc, #12]	; (e0dc <btn_a_init+0x1c>)
    e0ce:	6013      	str	r3, [r2, #0]
    };
    e0d0:	4770      	bx	lr
    e0d2:	bf00      	nop
    e0d4:	20028351 	.word	0x20028351
    e0d8:	20020010 	.word	0x20020010
    e0dc:	20020014 	.word	0x20020014

0000e0e0 <btn_a_toggle>:

void btn_a_toggle(void){
    e0e0:	b538      	push	{r3, r4, r5, lr}
    //Get current state of button A.
    gpio_pin_read(dev, 6, &btnAstateNew);
    e0e2:	4b0b      	ldr	r3, [pc, #44]	; (e110 <btn_a_toggle+0x30>)
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
    e0e4:	4c0b      	ldr	r4, [pc, #44]	; (e114 <btn_a_toggle+0x34>)
    e0e6:	6818      	ldr	r0, [r3, #0]
    e0e8:	2206      	movs	r2, #6
    e0ea:	6843      	ldr	r3, [r0, #4]
    e0ec:	2100      	movs	r1, #0
    e0ee:	689d      	ldr	r5, [r3, #8]
    e0f0:	4623      	mov	r3, r4
    e0f2:	47a8      	blx	r5

    //Has button gone high since last time?
    if(btnAstateNew == false && btnAstateOld == true){
    e0f4:	6822      	ldr	r2, [r4, #0]
    e0f6:	4908      	ldr	r1, [pc, #32]	; (e118 <btn_a_toggle+0x38>)
    e0f8:	b942      	cbnz	r2, e10c <btn_a_toggle+0x2c>
    e0fa:	680b      	ldr	r3, [r1, #0]
    e0fc:	2b01      	cmp	r3, #1
    e0fe:	d105      	bne.n	e10c <btn_a_toggle+0x2c>
        if(btnAtoggle == false){
    e100:	4806      	ldr	r0, [pc, #24]	; (e11c <btn_a_toggle+0x3c>)
    e102:	7804      	ldrb	r4, [r0, #0]
            //Toggle on
            btnAtoggle = true;
    e104:	2c00      	cmp	r4, #0
    e106:	bf18      	it	ne
    e108:	4613      	movne	r3, r2
    e10a:	7003      	strb	r3, [r0, #0]
            //Toggle off
            btnAtoggle = false;
            }
        }
        //Save button state so we can tell if it changed text time button is pressed.
        btnAstateOld = btnAstateNew;
    e10c:	600a      	str	r2, [r1, #0]
    };
    e10e:	bd38      	pop	{r3, r4, r5, pc}
    e110:	20020090 	.word	0x20020090
    e114:	20020010 	.word	0x20020010
    e118:	20020014 	.word	0x20020014
    e11c:	20028351 	.word	0x20028351

0000e120 <btn_b_init>:
bool btnBtoggle = true;
int btnBstateNew = 0;
int btnBstateOld = 0;

void btn_b_init(){
    btnBtoggle = true;
    e120:	2201      	movs	r2, #1
    e122:	4b04      	ldr	r3, [pc, #16]	; (e134 <btn_b_init+0x14>)
    e124:	701a      	strb	r2, [r3, #0]
    btnBstateNew = 0;
    e126:	2300      	movs	r3, #0
    e128:	4a03      	ldr	r2, [pc, #12]	; (e138 <btn_b_init+0x18>)
    e12a:	6013      	str	r3, [r2, #0]
    btnBstateOld = 0;
    e12c:	4a03      	ldr	r2, [pc, #12]	; (e13c <btn_b_init+0x1c>)
    e12e:	6013      	str	r3, [r2, #0]
    };
    e130:	4770      	bx	lr
    e132:	bf00      	nop
    e134:	20028352 	.word	0x20028352
    e138:	20020018 	.word	0x20020018
    e13c:	2002001c 	.word	0x2002001c

0000e140 <btn_b_toggle>:


void btn_b_toggle(void){
    e140:	b538      	push	{r3, r4, r5, lr}
    //Get current state of button A.
    gpio_pin_read(dev, 7, &btnBstateNew);
    e142:	4b0b      	ldr	r3, [pc, #44]	; (e170 <btn_b_toggle+0x30>)
    e144:	4c0b      	ldr	r4, [pc, #44]	; (e174 <btn_b_toggle+0x34>)
    e146:	6818      	ldr	r0, [r3, #0]
    e148:	2207      	movs	r2, #7
    e14a:	6843      	ldr	r3, [r0, #4]
    e14c:	2100      	movs	r1, #0
    e14e:	689d      	ldr	r5, [r3, #8]
    e150:	4623      	mov	r3, r4
    e152:	47a8      	blx	r5

    //Has button gone high since last time?
    if(btnBstateNew == false && btnBstateOld == true){
    e154:	6822      	ldr	r2, [r4, #0]
    e156:	4908      	ldr	r1, [pc, #32]	; (e178 <btn_b_toggle+0x38>)
    e158:	b942      	cbnz	r2, e16c <btn_b_toggle+0x2c>
    e15a:	680b      	ldr	r3, [r1, #0]
    e15c:	2b01      	cmp	r3, #1
    e15e:	d105      	bne.n	e16c <btn_b_toggle+0x2c>
        if(btnBtoggle == false){
    e160:	4806      	ldr	r0, [pc, #24]	; (e17c <btn_b_toggle+0x3c>)
    e162:	7804      	ldrb	r4, [r0, #0]
            //Toggle on
            btnBtoggle = true;
    e164:	2c00      	cmp	r4, #0
    e166:	bf18      	it	ne
    e168:	4613      	movne	r3, r2
    e16a:	7003      	strb	r3, [r0, #0]
            //Toggle off
            btnBtoggle = false;
            }
        }
        //Save button state so we can tell if it changed text time button is pressed.
        btnBstateOld = btnBstateNew;
    e16c:	600a      	str	r2, [r1, #0]
    };
    e16e:	bd38      	pop	{r3, r4, r5, pc}
    e170:	20020090 	.word	0x20020090
    e174:	20020018 	.word	0x20020018
    e178:	2002001c 	.word	0x2002001c
    e17c:	20028352 	.word	0x20028352

0000e180 <update_battery_life>:




//STUPIDLY WRITTEN CODE HERE.
void update_battery_life(){
    e180:	b510      	push	{r4, lr}
    memset(batLife_c,  0, sizeof(batLife_c));
    e182:	4c17      	ldr	r4, [pc, #92]	; (e1e0 <update_battery_life+0x60>)
    e184:	220a      	movs	r2, #10
    e186:	2100      	movs	r1, #0
    e188:	4620      	mov	r0, r4
    e18a:	f017 fe99 	bl	25ec0 <memset>
    //batLife_f = (( bat_voltage() - 3300 ) / 900) * 100;
    batLife_f = bat_voltage() - 3300;
    e18e:	f001 f8c1 	bl	f314 <bat_voltage>
    e192:	f6a0 40e4 	subw	r0, r0, #3300	; 0xce4
    e196:	ee07 0a90 	vmov	s15, r0
    batLife_f = batLife_f / 900;
    e19a:	eddf 6a12 	vldr	s13, [pc, #72]	; e1e4 <update_battery_life+0x64>
    batLife_f = bat_voltage() - 3300;
    e19e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    batLife_f = batLife_f / 900;
    e1a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
    batLife_f = batLife_f * 100;
    e1a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; e1e8 <update_battery_life+0x68>
    e1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    batLife_i = batLife_f + 0;
    e1ae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; e1ec <update_battery_life+0x6c>
    batLife_f = batLife_f * 100;
    e1b2:	4b0f      	ldr	r3, [pc, #60]	; (e1f0 <update_battery_life+0x70>)
    itoa(batLife_i, batLife_c, 10); 
    e1b4:	4621      	mov	r1, r4
    batLife_f = batLife_f * 100;
    e1b6:	edc3 7a00 	vstr	s15, [r3]
    batLife_i = batLife_f + 0;
    e1ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    e1be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    e1c2:	4b0c      	ldr	r3, [pc, #48]	; (e1f4 <update_battery_life+0x74>)
    e1c4:	ee17 0a90 	vmov	r0, s15
    itoa(batLife_i, batLife_c, 10); 
    e1c8:	220a      	movs	r2, #10
    batLife_i = batLife_f + 0;
    e1ca:	edc3 7a00 	vstr	s15, [r3]
    itoa(batLife_i, batLife_c, 10); 
    e1ce:	f017 f873 	bl	252b8 <itoa>
    strcat(batLife_c, "%");
    e1d2:	4620      	mov	r0, r4
    };
    e1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    strcat(batLife_c, "%");
    e1d8:	4907      	ldr	r1, [pc, #28]	; (e1f8 <update_battery_life+0x78>)
    e1da:	f017 bdfd 	b.w	25dd8 <strcat>
    e1de:	bf00      	nop
    e1e0:	200223df 	.word	0x200223df
    e1e4:	44610000 	.word	0x44610000
    e1e8:	42c80000 	.word	0x42c80000
    e1ec:	00000000 	.word	0x00000000
    e1f0:	20020008 	.word	0x20020008
    e1f4:	2002000c 	.word	0x2002000c
    e1f8:	0002af6f 	.word	0x0002af6f

0000e1fc <main>:
char FORM[32];
char STAT[32];

char new_barcode_buffer[256];

void main(void){
    e1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    e200:	4877      	ldr	r0, [pc, #476]	; (e3e0 <main+0x1e4>)
    e202:	f013 fcef 	bl	21be4 <z_impl_device_get_binding>
    e206:	4605      	mov	r5, r0
    e208:	4876      	ldr	r0, [pc, #472]	; (e3e4 <main+0x1e8>)
    e20a:	f013 fceb 	bl	21be4 <z_impl_device_get_binding>
    e20e:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_ENABLE, uart_irq_tx_enable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev)
    e210:	4628      	mov	r0, r5
    e212:	f017 f891 	bl	25338 <z_impl_uart_irq_rx_enable>
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    e216:	6863      	ldr	r3, [r4, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    e218:	b12b      	cbz	r3, e226 <main+0x2a>
    e21a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e21c:	b11b      	cbz	r3, e226 <main+0x2a>
		api->irq_callback_set(dev, cb, user_data);
    e21e:	4622      	mov	r2, r4
    e220:	4971      	ldr	r1, [pc, #452]	; (e3e8 <main+0x1ec>)
    e222:	4620      	mov	r0, r4
    e224:	4798      	blx	r3
    e226:	4620      	mov	r0, r4
    e228:	f017 f886 	bl	25338 <z_impl_uart_irq_rx_enable>
    //Set UART callbacks.
    uart_irq_rx_enable(uart0);
    uart_irq_callback_set(uart1, uart_cb);
    uart_irq_rx_enable(uart1);

    init_MT15(uart1);
    e22c:	4620      	mov	r0, r4
    e22e:	f000 ff61 	bl	f0f4 <init_MT15>

    /*--Initialize elva display of boast.--*/
    dispBegin();
    e232:	f000 fd43 	bl	ecbc <dispBegin>
    spi_init();
    e236:	f000 fd2d 	bl	ec94 <spi_init>
    printk("\nSPI ready!\n");
    e23a:	486c      	ldr	r0, [pc, #432]	; (e3ec <main+0x1f0>)
    e23c:	f017 fc7f 	bl	25b3e <printk>
    clearDisplay();
    e240:	f000 fd96 	bl	ed70 <clearDisplay>
    /*--Initialize elva display. END--*/ 

    /*--initialize and test leds and buttons.--*/
    printk("initializing GPIOs\n");
    e244:	486a      	ldr	r0, [pc, #424]	; (e3f0 <main+0x1f4>)
    e246:	f017 fc7a 	bl	25b3e <printk>
    e24a:	486a      	ldr	r0, [pc, #424]	; (e3f4 <main+0x1f8>)
    e24c:	f013 fcca 	bl	21be4 <z_impl_device_get_binding>
    dev = device_get_binding("GPIO_0");
    e250:	4d69      	ldr	r5, [pc, #420]	; (e3f8 <main+0x1fc>)

    /*--Initialize battery monitor and haptic driver (I2C).--*/
    init_elva_i2c();
    i2c_dev = device_get_binding(I2C_DEV);
    /*--Initialize Haptic feedback.--*/
    u8_t vib_init_sequence[3] = {0x01, 0x01, 0x00};
    e252:	2400      	movs	r4, #0
    dev = device_get_binding("GPIO_0");
    e254:	6028      	str	r0, [r5, #0]
    init_elva_gpio();
    e256:	f000 ff73 	bl	f140 <init_elva_gpio>
    init_elva_i2c();
    e25a:	f000 ffcb 	bl	f1f4 <init_elva_i2c>
    e25e:	4867      	ldr	r0, [pc, #412]	; (e3fc <main+0x200>)
    e260:	f013 fcc0 	bl	21be4 <z_impl_device_get_binding>
    u8_t vib_init_sequence[3] = {0x01, 0x01, 0x00};
    e264:	f240 1301 	movw	r3, #257	; 0x101
    e268:	f8ad 3000 	strh.w	r3, [sp]
			    u32_t num_bytes, u16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (u8_t *)buf;
	msg.len = num_bytes;
    e26c:	2302      	movs	r3, #2
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    e26e:	f88d 300c 	strb.w	r3, [sp, #12]
	msg.len = num_bytes;
    e272:	9302      	str	r3, [sp, #8]
	return api->transfer(dev, msgs, num_msgs, addr);
    e274:	6843      	ldr	r3, [r0, #4]
    e276:	2201      	movs	r2, #1
    e278:	685e      	ldr	r6, [r3, #4]
    e27a:	a901      	add	r1, sp, #4
    e27c:	235a      	movs	r3, #90	; 0x5a
    e27e:	f88d 4002 	strb.w	r4, [sp, #2]
	msg.buf = (u8_t *)buf;
    e282:	f8cd d004 	str.w	sp, [sp, #4]
	return api->transfer(dev, msgs, num_msgs, addr);
    e286:	47b0      	blx	r6
    i2c_write(i2c_dev, &vib_init_sequence[0], 2, 0x5a);
    
    printk("Value of CONFIG_MQTT_ALIVE: %d\n", CONFIG_MQTT_KEEPALIVE);
    e288:	213c      	movs	r1, #60	; 0x3c
    e28a:	485d      	ldr	r0, [pc, #372]	; (e400 <main+0x204>)
    e28c:	f017 fc57 	bl	25b3e <printk>
    vibrate(true);
    e290:	2001      	movs	r0, #1
    e292:	f000 ffa7 	bl	f1e4 <vibrate>

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype)

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)

K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    e296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    e29a:	f015 fb97 	bl	239cc <z_impl_k_sleep>
    k_sleep(1000);
    vibrate(false);
    e29e:	4620      	mov	r0, r4
    e2a0:	f000 ffa0 	bl	f1e4 <vibrate>

    //Setup battery monitor and haptic driver.
    u8_t write_bytes[1] = {0x30, 0x00, 0x00}; //{0x01, 0x0C, 0x00} 0x1c
    u8_t read_bytes[10] = "HELLO THER";
    bat_setCapacity(800);
    e2a4:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2a8:	f017 f94b 	bl	25542 <bat_setCapacity>

    printk("Control    returned : %d\n", bat_control());
    e2ac:	f017 f8f4 	bl	25498 <bat_control>
    e2b0:	4601      	mov	r1, r0
    e2b2:	4854      	ldr	r0, [pc, #336]	; (e404 <main+0x208>)
    e2b4:	f017 fc43 	bl	25b3e <printk>
    printk("Voltage mV returned : %d\n", bat_voltage());
    e2b8:	f001 f82c 	bl	f314 <bat_voltage>
    e2bc:	4601      	mov	r1, r0
    e2be:	4852      	ldr	r0, [pc, #328]	; (e408 <main+0x20c>)
    e2c0:	f017 fc3d 	bl	25b3e <printk>
    printk("FCC    mAh returned : %d\n", bat_FCC());
    e2c4:	f001 f82e 	bl	f324 <bat_FCC>
    e2c8:	4601      	mov	r1, r0
    e2ca:	4850      	ldr	r0, [pc, #320]	; (e40c <main+0x210>)
    e2cc:	f017 fc37 	bl	25b3e <printk>
    //printk("SOCUF test returned : %d\n", bat_SOCUF());
    printk("avgCurrent returned : %d\n", bat_AverageCurrent());
    e2d0:	f001 f840 	bl	f354 <bat_AverageCurrent>
    e2d4:	4601      	mov	r1, r0
    e2d6:	484e      	ldr	r0, [pc, #312]	; (e410 <main+0x214>)
    e2d8:	f017 fc31 	bl	25b3e <printk>
    printk("SOC   test returned : %d\n", bat_SOC());
    e2dc:	f001 f82a 	bl	f334 <bat_SOC>
    e2e0:	4601      	mov	r1, r0
    e2e2:	484c      	ldr	r0, [pc, #304]	; (e414 <main+0x218>)
    e2e4:	f017 fc2b 	bl	25b3e <printk>
    printk("OpConfig   returned : %d\n", bat_OpConfig());
    e2e8:	f001 f83c 	bl	f364 <bat_OpConfig>
    e2ec:	4601      	mov	r1, r0
    e2ee:	484a      	ldr	r0, [pc, #296]	; (e418 <main+0x21c>)
    e2f0:	f017 fc25 	bl	25b3e <printk>

    /*--Initialize battery monitor and haptic driver (I2C).--*/
     
    /*--Initialize and test timer.--*/
    k_timer_init(&time_sub, expiry_function_sub, NULL);  //Timer
    e2f4:	4622      	mov	r2, r4
    e2f6:	4949      	ldr	r1, [pc, #292]	; (e41c <main+0x220>)
    e2f8:	4849      	ldr	r0, [pc, #292]	; (e420 <main+0x224>)
    e2fa:	f019 fa3b 	bl	27774 <k_timer_init>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    e2fe:	f64e 2260 	movw	r2, #60000	; 0xea60
    e302:	4847      	ldr	r0, [pc, #284]	; (e420 <main+0x224>)
    e304:	4611      	mov	r1, r2
    e306:	f016 f931 	bl	2456c <z_impl_k_timer_start>
    k_timer_start(&time_sub, K_SECONDS(TIMER_INTERVAL_SUB), K_SECONDS(TIMER_INTERVAL_SUB)); //execute every minute

    k_timer_init(&time_sec, expiry_function_second, NULL);  //Timer
    e30a:	4622      	mov	r2, r4
    e30c:	4945      	ldr	r1, [pc, #276]	; (e424 <main+0x228>)
    e30e:	4846      	ldr	r0, [pc, #280]	; (e428 <main+0x22c>)
    e310:	f019 fa30 	bl	27774 <k_timer_init>
    e314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e318:	4843      	ldr	r0, [pc, #268]	; (e428 <main+0x22c>)
    e31a:	4611      	mov	r1, r2
    e31c:	f016 f926 	bl	2456c <z_impl_k_timer_start>
    k_timer_start(&time_sec, K_SECONDS(TIMER_INTERVAL_SEC), K_SECONDS(TIMER_INTERVAL_SEC)); //execute every second

    k_timer_init(&time_min, expiry_function_minute, NULL);  //Timer
    e320:	4622      	mov	r2, r4
    e322:	4942      	ldr	r1, [pc, #264]	; (e42c <main+0x230>)
    e324:	4842      	ldr	r0, [pc, #264]	; (e430 <main+0x234>)
    e326:	f019 fa25 	bl	27774 <k_timer_init>
    e32a:	f64e 2260 	movw	r2, #60000	; 0xea60
    e32e:	4840      	ldr	r0, [pc, #256]	; (e430 <main+0x234>)
    e330:	4611      	mov	r1, r2
    e332:	f016 f91b 	bl	2456c <z_impl_k_timer_start>
    
    /*-- --*/
    static u32_t button_A_state;   
    int n = 0;

    printk("elva starting\n");
    e336:	483f      	ldr	r0, [pc, #252]	; (e434 <main+0x238>)
    e338:	f017 fc01 	bl	25b3e <printk>

    gpio_pin_write(dev, LED_RED, 0);
    e33c:	4622      	mov	r2, r4
    e33e:	2111      	movs	r1, #17
    e340:	6828      	ldr	r0, [r5, #0]
    e342:	f016 fffe 	bl	25342 <gpio_pin_write>
    gpio_pin_write(dev, LED_GRN, 0);
    e346:	4622      	mov	r2, r4
    e348:	2110      	movs	r1, #16
    e34a:	6828      	ldr	r0, [r5, #0]
    e34c:	f016 fff9 	bl	25342 <gpio_pin_write>
    gpio_pin_write(dev, SCANNER, 1);
    e350:	2201      	movs	r2, #1
    e352:	2115      	movs	r1, #21
    e354:	6828      	ldr	r0, [r5, #0]
    e356:	f016 fff4 	bl	25342 <gpio_pin_write>
    gpio_pin_write(dev, DISPLAY, 1);
    e35a:	2201      	movs	r2, #1
    e35c:	211b      	movs	r1, #27
    e35e:	6828      	ldr	r0, [r5, #0]
    e360:	f016 ffef 	bl	25342 <gpio_pin_write>

    for(int i = 0 ; i <= 10000 ; i++){
    e364:	f242 7611 	movw	r6, #10001	; 0x2711
        gpio_pin_write(dev, 19, i % 2);
    e368:	f004 0201 	and.w	r2, r4, #1
    e36c:	2113      	movs	r1, #19
    e36e:	6828      	ldr	r0, [r5, #0]
    for(int i = 0 ; i <= 10000 ; i++){
    e370:	3401      	adds	r4, #1
        gpio_pin_write(dev, 19, i % 2);
    e372:	f016 ffe6 	bl	25342 <gpio_pin_write>
    for(int i = 0 ; i <= 10000 ; i++){
    e376:	42b4      	cmp	r4, r6
    e378:	d1f6      	bne.n	e368 <main+0x16c>
        /*--LTE functions--*/
        reconnect();
        maintain_connection();

        /*--Enter this function when connection is lost.--*/
        switch(dev_condition){
    e37a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; e444 <main+0x248>
                break;


            case score_board:

                if(update_display == true){
    e37e:	4c2e      	ldr	r4, [pc, #184]	; (e438 <main+0x23c>)
    e380:	464e      	mov	r6, r9
        reconnect();
    e382:	f7ff fca5 	bl	dcd0 <reconnect>
        maintain_connection();
    e386:	f7ff fe29 	bl	dfdc <maintain_connection>
        switch(dev_condition){
    e38a:	f899 3000 	ldrb.w	r3, [r9]
    e38e:	3b01      	subs	r3, #1
    e390:	2b06      	cmp	r3, #6
    e392:	d8f6      	bhi.n	e382 <main+0x186>
    e394:	a201      	add	r2, pc, #4	; (adr r2, e39c <main+0x1a0>)
    e396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e39a:	bf00      	nop
    e39c:	0000e3b9 	.word	0x0000e3b9
    e3a0:	0000e449 	.word	0x0000e449
    e3a4:	0000e611 	.word	0x0000e611
    e3a8:	0000e383 	.word	0x0000e383
    e3ac:	0000eadf 	.word	0x0000eadf
    e3b0:	0000eb4d 	.word	0x0000eb4d
    e3b4:	0000eba1 	.word	0x0000eba1
                if(update_display == true){
    e3b8:	7823      	ldrb	r3, [r4, #0]
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d0e1      	beq.n	e382 <main+0x186>
                    update_display = false;
    e3be:	2300      	movs	r3, #0
    e3c0:	7023      	strb	r3, [r4, #0]
                    clearDisplay();
    e3c2:	f000 fcd5 	bl	ed70 <clearDisplay>
                    small_print(1, 100, "CONNECTING...");
    e3c6:	4a1d      	ldr	r2, [pc, #116]	; (e43c <main+0x240>)
    e3c8:	2164      	movs	r1, #100	; 0x64
    e3ca:	2001      	movs	r0, #1
    e3cc:	f000 fd1e 	bl	ee0c <small_print>
                    small_print(1, 80 , "0");
    e3d0:	4a1b      	ldr	r2, [pc, #108]	; (e440 <main+0x244>)
    e3d2:	2150      	movs	r1, #80	; 0x50
    e3d4:	2001      	movs	r0, #1
    e3d6:	f000 fd19 	bl	ee0c <small_print>
                    reconnect();
    e3da:	f7ff fc79 	bl	dcd0 <reconnect>
    e3de:	e7d0      	b.n	e382 <main+0x186>
    e3e0:	0002a775 	.word	0x0002a775
    e3e4:	0002a77c 	.word	0x0002a77c
    e3e8:	0000d64d 	.word	0x0000d64d
    e3ec:	0002a783 	.word	0x0002a783
    e3f0:	0002a790 	.word	0x0002a790
    e3f4:	0002a7a4 	.word	0x0002a7a4
    e3f8:	20020090 	.word	0x20020090
    e3fc:	0002a7ab 	.word	0x0002a7ab
    e400:	0002a7b1 	.word	0x0002a7b1
    e404:	0002a7d1 	.word	0x0002a7d1
    e408:	0002a7eb 	.word	0x0002a7eb
    e40c:	0002a805 	.word	0x0002a805
    e410:	0002a81f 	.word	0x0002a81f
    e414:	0002a839 	.word	0x0002a839
    e418:	0002a853 	.word	0x0002a853
    e41c:	0000d2d9 	.word	0x0000d2d9
    e420:	20020104 	.word	0x20020104
    e424:	0000d365 	.word	0x0000d365
    e428:	200200d8 	.word	0x200200d8
    e42c:	0000d309 	.word	0x0000d309
    e430:	200200ac 	.word	0x200200ac
    e434:	0002a86d 	.word	0x0002a86d
    e438:	20028355 	.word	0x20028355
    e43c:	0002adca 	.word	0x0002adca
    e440:	0002c399 	.word	0x0002c399
    e444:	2002240e 	.word	0x2002240e
                if(update_display == true){
    e448:	7823      	ldrb	r3, [r4, #0]
    e44a:	2b00      	cmp	r3, #0
    e44c:	f000 809b 	beq.w	e586 <main+0x38a>
                    update_display = false;
    e450:	2700      	movs	r7, #0
    e452:	7027      	strb	r7, [r4, #0]
                    btn_a_init();
    e454:	f7ff fe34 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    e458:	f7ff fe62 	bl	e120 <btn_b_init>
                    gpio_pin_write(dev, DISPLAY, 1);
    e45c:	2201      	movs	r2, #1
    e45e:	211b      	movs	r1, #27
    e460:	6828      	ldr	r0, [r5, #0]
    e462:	f016 ff6e 	bl	25342 <gpio_pin_write>
                    gpio_pin_write(dev, SCANNER, 1);
    e466:	2201      	movs	r2, #1
    e468:	2115      	movs	r1, #21
    e46a:	6828      	ldr	r0, [r5, #0]
    e46c:	f016 ff69 	bl	25342 <gpio_pin_write>
                    evaluate_med_list();
    e470:	f001 f9d8 	bl	f824 <evaluate_med_list>
                    clearDisplay();
    e474:	f000 fc7c 	bl	ed70 <clearDisplay>
                    ct_f = currentTime / 60; 
    e478:	213c      	movs	r1, #60	; 0x3c
    e47a:	4b4e      	ldr	r3, [pc, #312]	; (e5b4 <main+0x3b8>)
                    clockHrs_i = ct_f; //hrs
    e47c:	f8df c188 	ldr.w	ip, [pc, #392]	; e608 <main+0x40c>
                    ct_f = currentTime / 60; 
    e480:	6818      	ldr	r0, [r3, #0]
    e482:	4b4d      	ldr	r3, [pc, #308]	; (e5b8 <main+0x3bc>)
    e484:	fb90 f2f1 	sdiv	r2, r0, r1
    e488:	ee07 2a90 	vmov	s15, r2
    e48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    e490:	edc3 7a00 	vstr	s15, [r3]
                    clockHrs_i = ct_f; //hrs
    e494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    clockMin_i = currentTime % 60;
    e498:	fb01 0212 	mls	r2, r1, r2, r0
                    clockHrs_i = ct_f; //hrs
    e49c:	ee17 3a90 	vmov	r3, s15
                    itoa(clockHrs_i % 12, clockHrs_c, 10);
    e4a0:	200c      	movs	r0, #12
                    clockHrs_i = ct_f; //hrs
    e4a2:	edcc 7a00 	vstr	s15, [ip]
                    itoa(clockHrs_i % 12, clockHrs_c, 10);
    e4a6:	fb93 fcf0 	sdiv	ip, r3, r0
                    clockMin_i = currentTime % 60;
    e4aa:	f8df 8160 	ldr.w	r8, [pc, #352]	; e60c <main+0x410>
                    itoa(clockHrs_i % 12, clockHrs_c, 10);
    e4ae:	fb00 301c 	mls	r0, r0, ip, r3
                    clockMin_i = currentTime % 60;
    e4b2:	f8c8 2000 	str.w	r2, [r8]
                    itoa(clockHrs_i % 12, clockHrs_c, 10);
    e4b6:	4941      	ldr	r1, [pc, #260]	; (e5bc <main+0x3c0>)
    e4b8:	220a      	movs	r2, #10
    e4ba:	f016 fefd 	bl	252b8 <itoa>
                    itoa(clockMin_i, clockMin_c, 10);
    e4be:	220a      	movs	r2, #10
    e4c0:	493f      	ldr	r1, [pc, #252]	; (e5c0 <main+0x3c4>)
    e4c2:	f8d8 0000 	ldr.w	r0, [r8]
    e4c6:	f016 fef7 	bl	252b8 <itoa>
                    memset(clock,  0, sizeof(clock));
    e4ca:	220a      	movs	r2, #10
    e4cc:	4639      	mov	r1, r7
    e4ce:	483d      	ldr	r0, [pc, #244]	; (e5c4 <main+0x3c8>)
    e4d0:	f017 fcf6 	bl	25ec0 <memset>
                    strcat(clock, clockHrs_c);
    e4d4:	4939      	ldr	r1, [pc, #228]	; (e5bc <main+0x3c0>)
    e4d6:	483b      	ldr	r0, [pc, #236]	; (e5c4 <main+0x3c8>)
    e4d8:	f017 fc7e 	bl	25dd8 <strcat>
                    strcat(clock, ":");
    e4dc:	493a      	ldr	r1, [pc, #232]	; (e5c8 <main+0x3cc>)
    e4de:	4839      	ldr	r0, [pc, #228]	; (e5c4 <main+0x3c8>)
    e4e0:	f017 fc7a 	bl	25dd8 <strcat>
                    strcat(clock, clockMin_c);
    e4e4:	4936      	ldr	r1, [pc, #216]	; (e5c0 <main+0x3c4>)
    e4e6:	4837      	ldr	r0, [pc, #220]	; (e5c4 <main+0x3c8>)
    e4e8:	f017 fc76 	bl	25dd8 <strcat>
                    large_print(1, 145, clockHrs_c);
    e4ec:	4a33      	ldr	r2, [pc, #204]	; (e5bc <main+0x3c0>)
    e4ee:	2191      	movs	r1, #145	; 0x91
    e4f0:	2001      	movs	r0, #1
    e4f2:	f000 fd83 	bl	effc <large_print>
                    large_print(1,  90, clockMin_c);
    e4f6:	4a32      	ldr	r2, [pc, #200]	; (e5c0 <main+0x3c4>)
    e4f8:	215a      	movs	r1, #90	; 0x5a
    e4fa:	2001      	movs	r0, #1
    e4fc:	f000 fd7e 	bl	effc <large_print>
                    memset(batVoltage,  0, sizeof(batVoltage));
    e500:	220a      	movs	r2, #10
    e502:	4639      	mov	r1, r7
    e504:	4831      	ldr	r0, [pc, #196]	; (e5cc <main+0x3d0>)
    e506:	f017 fcdb 	bl	25ec0 <memset>
                    memset(batSocuf,  0, sizeof(batSocuf));
    e50a:	220a      	movs	r2, #10
    e50c:	4639      	mov	r1, r7
    e50e:	4830      	ldr	r0, [pc, #192]	; (e5d0 <main+0x3d4>)
    e510:	f017 fcd6 	bl	25ec0 <memset>
                    itoa(bat_voltage(), batVoltage, 10);
    e514:	f000 fefe 	bl	f314 <bat_voltage>
    e518:	220a      	movs	r2, #10
    e51a:	492c      	ldr	r1, [pc, #176]	; (e5cc <main+0x3d0>)
    e51c:	f016 fecc 	bl	252b8 <itoa>
                    itoa(bat_SOCUF(), batSocuf, 10);
    e520:	f000 ff10 	bl	f344 <bat_SOCUF>
    e524:	220a      	movs	r2, #10
    e526:	492a      	ldr	r1, [pc, #168]	; (e5d0 <main+0x3d4>)
    e528:	f016 fec6 	bl	252b8 <itoa>
                    strcat(batVoltage, " mV ");
    e52c:	4929      	ldr	r1, [pc, #164]	; (e5d4 <main+0x3d8>)
    e52e:	4827      	ldr	r0, [pc, #156]	; (e5cc <main+0x3d0>)
    e530:	f017 fc52 	bl	25dd8 <strcat>
                    strcat(batVoltage, batSocuf);
    e534:	4926      	ldr	r1, [pc, #152]	; (e5d0 <main+0x3d4>)
    e536:	4825      	ldr	r0, [pc, #148]	; (e5cc <main+0x3d0>)
    e538:	f017 fc4e 	bl	25dd8 <strcat>
                    strcat(batVoltage, "%");
    e53c:	4926      	ldr	r1, [pc, #152]	; (e5d8 <main+0x3dc>)
    e53e:	4823      	ldr	r0, [pc, #140]	; (e5cc <main+0x3d0>)
    e540:	f017 fc4a 	bl	25dd8 <strcat>
                    update_battery_life();
    e544:	f7ff fe1c 	bl	e180 <update_battery_life>
                    small_print(17 - strlen(batLife_c), 160, batLife_c);
    e548:	4824      	ldr	r0, [pc, #144]	; (e5dc <main+0x3e0>)
    e54a:	f017 fc21 	bl	25d90 <strlen>
    e54e:	4a23      	ldr	r2, [pc, #140]	; (e5dc <main+0x3e0>)
    e550:	21a0      	movs	r1, #160	; 0xa0
    e552:	f1c0 0011 	rsb	r0, r0, #17
    e556:	f000 fc59 	bl	ee0c <small_print>
                    itoa(tickMins, minsCount, 10);
    e55a:	4b21      	ldr	r3, [pc, #132]	; (e5e0 <main+0x3e4>)
    e55c:	220a      	movs	r2, #10
    e55e:	6818      	ldr	r0, [r3, #0]
    e560:	4920      	ldr	r1, [pc, #128]	; (e5e4 <main+0x3e8>)
    e562:	f016 fea9 	bl	252b8 <itoa>
                    strcat(minsCount, "mins ");
    e566:	4920      	ldr	r1, [pc, #128]	; (e5e8 <main+0x3ec>)
    e568:	481e      	ldr	r0, [pc, #120]	; (e5e4 <main+0x3e8>)
    e56a:	f017 fc35 	bl	25dd8 <strcat>
                    strcat(minsCount, CONFIG_MQTT_CLIENT_ID);
    e56e:	491f      	ldr	r1, [pc, #124]	; (e5ec <main+0x3f0>)
    e570:	481c      	ldr	r0, [pc, #112]	; (e5e4 <main+0x3e8>)
    e572:	f017 fc31 	bl	25dd8 <strcat>
                    small_print(1, 20, CONFIG_MQTT_CLIENT_ID);
    e576:	2001      	movs	r0, #1
    e578:	4a1c      	ldr	r2, [pc, #112]	; (e5ec <main+0x3f0>)
    e57a:	2114      	movs	r1, #20
    e57c:	f000 fc46 	bl	ee0c <small_print>
                    printk("Device Condition: standby (home screen).\n");
    e580:	481b      	ldr	r0, [pc, #108]	; (e5f0 <main+0x3f4>)
    e582:	f017 fadc 	bl	25b3e <printk>
                if(med_count > 0 && tfmwTimeStamp != "OOB"){
    e586:	4b1b      	ldr	r3, [pc, #108]	; (e5f4 <main+0x3f8>)
    e588:	681b      	ldr	r3, [r3, #0]
    e58a:	2b00      	cmp	r3, #0
    e58c:	dd0f      	ble.n	e5ae <main+0x3b2>
    e58e:	4a1a      	ldr	r2, [pc, #104]	; (e5f8 <main+0x3fc>)
    e590:	4b1a      	ldr	r3, [pc, #104]	; (e5fc <main+0x400>)
    e592:	429a      	cmp	r2, r3
    e594:	d00b      	beq.n	e5ae <main+0x3b2>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    e596:	f44f 7280 	mov.w	r2, #256	; 0x100
    e59a:	2100      	movs	r1, #0
    e59c:	4818      	ldr	r0, [pc, #96]	; (e600 <main+0x404>)
    e59e:	f017 fc8f 	bl	25ec0 <memset>
                    update_display = true;
    e5a2:	2301      	movs	r3, #1
                    publish_message = true;
    e5a4:	4a17      	ldr	r2, [pc, #92]	; (e604 <main+0x408>)
                    update_display = true;
    e5a6:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    e5a8:	7013      	strb	r3, [r2, #0]
                    dev_condition  = time_for_med;
    e5aa:	2303      	movs	r3, #3
    e5ac:	7033      	strb	r3, [r6, #0]
                k_cpu_idle();
    e5ae:	f002 fcab 	bl	10f08 <k_cpu_idle>
                break;
    e5b2:	e6e6      	b.n	e382 <main+0x186>
    e5b4:	20020144 	.word	0x20020144
    e5b8:	2002008c 	.word	0x2002008c
    e5bc:	20022407 	.word	0x20022407
    e5c0:	2002240a 	.word	0x2002240a
    e5c4:	200223fd 	.word	0x200223fd
    e5c8:	0002a909 	.word	0x0002a909
    e5cc:	200223f3 	.word	0x200223f3
    e5d0:	200223e9 	.word	0x200223e9
    e5d4:	0002a87c 	.word	0x0002a87c
    e5d8:	0002af6f 	.word	0x0002af6f
    e5dc:	200223df 	.word	0x200223df
    e5e0:	200200a0 	.word	0x200200a0
    e5e4:	20022812 	.word	0x20022812
    e5e8:	0002a881 	.word	0x0002a881
    e5ec:	0002a9e8 	.word	0x0002a9e8
    e5f0:	0002a887 	.word	0x0002a887
    e5f4:	20020148 	.word	0x20020148
    e5f8:	20023cee 	.word	0x20023cee
    e5fc:	0002aa7c 	.word	0x0002aa7c
    e600:	200222df 	.word	0x200222df
    e604:	20022c24 	.word	0x20022c24
    e608:	20020080 	.word	0x20020080
    e60c:	20020084 	.word	0x20020084
                if(publish_message == true){
    e610:	4fb7      	ldr	r7, [pc, #732]	; (e8f0 <main+0x6f4>)
    e612:	f8df a36c 	ldr.w	sl, [pc, #876]	; e980 <main+0x784>
    e616:	783b      	ldrb	r3, [r7, #0]
    e618:	b143      	cbz	r3, e62c <main+0x430>
                    publish_message = false;
    e61a:	2300      	movs	r3, #0
    e61c:	703b      	strb	r3, [r7, #0]
                    btn_a_init();
    e61e:	f7ff fd4f 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    e622:	f7ff fd7d 	bl	e120 <btn_b_init>
                    alarm = true;
    e626:	2301      	movs	r3, #1
    e628:	f88a 3000 	strb.w	r3, [sl]
                btn_a_toggle();
    e62c:	f7ff fd58 	bl	e0e0 <btn_a_toggle>
                btn_b_toggle();
    e630:	f7ff fd86 	bl	e140 <btn_b_toggle>
                gpio_pin_write(dev, DISPLAY, btnAtoggle);
    e634:	4baf      	ldr	r3, [pc, #700]	; (e8f4 <main+0x6f8>)
    e636:	211b      	movs	r1, #27
    e638:	781a      	ldrb	r2, [r3, #0]
    e63a:	6828      	ldr	r0, [r5, #0]
    e63c:	f016 fe81 	bl	25342 <gpio_pin_write>
                if(alarm == false){
    e640:	f89a 3000 	ldrb.w	r3, [sl]
    e644:	f8df 833c 	ldr.w	r8, [pc, #828]	; e984 <main+0x788>
    e648:	b92b      	cbnz	r3, e656 <main+0x45a>
                    gpio_pin_write(dev, SCANNER, btnBtoggle);
    e64a:	f898 2000 	ldrb.w	r2, [r8]
    e64e:	2115      	movs	r1, #21
    e650:	6828      	ldr	r0, [r5, #0]
    e652:	f016 fe76 	bl	25342 <gpio_pin_write>
                if(btnBtoggle == false && alarm == true){
    e656:	f898 3000 	ldrb.w	r3, [r8]
    e65a:	b943      	cbnz	r3, e66e <main+0x472>
    e65c:	f89a 2000 	ldrb.w	r2, [sl]
    e660:	b12a      	cbz	r2, e66e <main+0x472>
                    alarm = false;
    e662:	f88a 3000 	strb.w	r3, [sl]
                    btn_a_init();
    e666:	f7ff fd2b 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    e66a:	f7ff fd59 	bl	e120 <btn_b_init>
                if(update_display == true){
    e66e:	7823      	ldrb	r3, [r4, #0]
    e670:	f8df 8314 	ldr.w	r8, [pc, #788]	; e988 <main+0x78c>
    e674:	2b00      	cmp	r3, #0
    e676:	f000 808a 	beq.w	e78e <main+0x592>
                    update_display = false;
    e67a:	f04f 0a00 	mov.w	sl, #0
    e67e:	f884 a000 	strb.w	sl, [r4]
                    evaluate_med_list(); 
    e682:	f001 f8cf 	bl	f824 <evaluate_med_list>
                    clearDisplay();
    e686:	f000 fb73 	bl	ed70 <clearDisplay>
                    memset(batVoltage,  0, sizeof(batVoltage));
    e68a:	4651      	mov	r1, sl
    e68c:	220a      	movs	r2, #10
    e68e:	489a      	ldr	r0, [pc, #616]	; (e8f8 <main+0x6fc>)
    e690:	f017 fc16 	bl	25ec0 <memset>
                    itoa(bat_voltage(), batVoltage, 10);
    e694:	f000 fe3e 	bl	f314 <bat_voltage>
    e698:	220a      	movs	r2, #10
    e69a:	4997      	ldr	r1, [pc, #604]	; (e8f8 <main+0x6fc>)
    e69c:	f016 fe0c 	bl	252b8 <itoa>
                    strcat(batVoltage, " mV");
    e6a0:	4996      	ldr	r1, [pc, #600]	; (e8fc <main+0x700>)
    e6a2:	4895      	ldr	r0, [pc, #596]	; (e8f8 <main+0x6fc>)
    e6a4:	f017 fb98 	bl	25dd8 <strcat>
                    update_battery_life();
    e6a8:	f7ff fd6a 	bl	e180 <update_battery_life>
                    small_print(17 - strlen(batLife_c), 160, batLife_c);
    e6ac:	4894      	ldr	r0, [pc, #592]	; (e900 <main+0x704>)
    e6ae:	f017 fb6f 	bl	25d90 <strlen>
    e6b2:	4a93      	ldr	r2, [pc, #588]	; (e900 <main+0x704>)
    e6b4:	21a0      	movs	r1, #160	; 0xa0
    e6b6:	f1c0 0011 	rsb	r0, r0, #17
    e6ba:	f000 fba7 	bl	ee0c <small_print>
                    medium_print(0, 140, "SCAN:");
    e6be:	4650      	mov	r0, sl
    e6c0:	4a90      	ldr	r2, [pc, #576]	; (e904 <main+0x708>)
    e6c2:	218c      	movs	r1, #140	; 0x8c
    e6c4:	f000 fc1e 	bl	ef04 <medium_print>
                    if(strcmp("pending", medAStatus) == 0 && strcmp("empty", medAName) != 0){
    e6c8:	498f      	ldr	r1, [pc, #572]	; (e908 <main+0x70c>)
    e6ca:	4890      	ldr	r0, [pc, #576]	; (e90c <main+0x710>)
    e6cc:	f017 fb68 	bl	25da0 <strcmp>
    e6d0:	4682      	mov	sl, r0
    e6d2:	b948      	cbnz	r0, e6e8 <main+0x4ec>
    e6d4:	498e      	ldr	r1, [pc, #568]	; (e910 <main+0x714>)
    e6d6:	488f      	ldr	r0, [pc, #572]	; (e914 <main+0x718>)
    e6d8:	f017 fb62 	bl	25da0 <strcmp>
    e6dc:	b120      	cbz	r0, e6e8 <main+0x4ec>
                        medium_print(0, 110, medAName);
    e6de:	4a8c      	ldr	r2, [pc, #560]	; (e910 <main+0x714>)
    e6e0:	216e      	movs	r1, #110	; 0x6e
    e6e2:	4650      	mov	r0, sl
    e6e4:	f000 fc0e 	bl	ef04 <medium_print>
                    if(strcmp("pending", medBStatus) == 0 && strcmp("empty", medBName) != 0){
    e6e8:	498b      	ldr	r1, [pc, #556]	; (e918 <main+0x71c>)
    e6ea:	4888      	ldr	r0, [pc, #544]	; (e90c <main+0x710>)
    e6ec:	f017 fb58 	bl	25da0 <strcmp>
    e6f0:	4682      	mov	sl, r0
    e6f2:	b948      	cbnz	r0, e708 <main+0x50c>
    e6f4:	4989      	ldr	r1, [pc, #548]	; (e91c <main+0x720>)
    e6f6:	4887      	ldr	r0, [pc, #540]	; (e914 <main+0x718>)
    e6f8:	f017 fb52 	bl	25da0 <strcmp>
    e6fc:	b120      	cbz	r0, e708 <main+0x50c>
                        medium_print(0, 80,  medBName);
    e6fe:	4a87      	ldr	r2, [pc, #540]	; (e91c <main+0x720>)
    e700:	2150      	movs	r1, #80	; 0x50
    e702:	4650      	mov	r0, sl
    e704:	f000 fbfe 	bl	ef04 <medium_print>
                    if(strcmp("pending", medCStatus) == 0 && strcmp("empty", medCName) != 0){
    e708:	4985      	ldr	r1, [pc, #532]	; (e920 <main+0x724>)
    e70a:	4880      	ldr	r0, [pc, #512]	; (e90c <main+0x710>)
    e70c:	f017 fb48 	bl	25da0 <strcmp>
    e710:	4682      	mov	sl, r0
    e712:	b948      	cbnz	r0, e728 <main+0x52c>
    e714:	4983      	ldr	r1, [pc, #524]	; (e924 <main+0x728>)
    e716:	487f      	ldr	r0, [pc, #508]	; (e914 <main+0x718>)
    e718:	f017 fb42 	bl	25da0 <strcmp>
    e71c:	b120      	cbz	r0, e728 <main+0x52c>
                        medium_print(0, 50,  medCName);
    e71e:	4a81      	ldr	r2, [pc, #516]	; (e924 <main+0x728>)
    e720:	2132      	movs	r1, #50	; 0x32
    e722:	4650      	mov	r0, sl
    e724:	f000 fbee 	bl	ef04 <medium_print>
                    if(strcmp("pending", medDStatus) == 0 && strcmp("empty", medDName) != 0){
    e728:	497f      	ldr	r1, [pc, #508]	; (e928 <main+0x72c>)
    e72a:	4878      	ldr	r0, [pc, #480]	; (e90c <main+0x710>)
    e72c:	f017 fb38 	bl	25da0 <strcmp>
    e730:	4682      	mov	sl, r0
    e732:	b948      	cbnz	r0, e748 <main+0x54c>
    e734:	497d      	ldr	r1, [pc, #500]	; (e92c <main+0x730>)
    e736:	4877      	ldr	r0, [pc, #476]	; (e914 <main+0x718>)
    e738:	f017 fb32 	bl	25da0 <strcmp>
    e73c:	b120      	cbz	r0, e748 <main+0x54c>
                        medium_print(0, 20,  medDName);
    e73e:	4a7b      	ldr	r2, [pc, #492]	; (e92c <main+0x730>)
    e740:	2114      	movs	r1, #20
    e742:	4650      	mov	r0, sl
    e744:	f000 fbde 	bl	ef04 <medium_print>
                    if(strcmp("pending", medEStatus) == 0 && strcmp("empty", medEName) != 0){
    e748:	4979      	ldr	r1, [pc, #484]	; (e930 <main+0x734>)
    e74a:	4870      	ldr	r0, [pc, #448]	; (e90c <main+0x710>)
    e74c:	f017 fb28 	bl	25da0 <strcmp>
    e750:	4682      	mov	sl, r0
    e752:	b948      	cbnz	r0, e768 <main+0x56c>
    e754:	4977      	ldr	r1, [pc, #476]	; (e934 <main+0x738>)
    e756:	486f      	ldr	r0, [pc, #444]	; (e914 <main+0x718>)
    e758:	f017 fb22 	bl	25da0 <strcmp>
    e75c:	b120      	cbz	r0, e768 <main+0x56c>
                        small_print(0, 10 , medEName);
    e75e:	4a75      	ldr	r2, [pc, #468]	; (e934 <main+0x738>)
    e760:	210a      	movs	r1, #10
    e762:	4650      	mov	r0, sl
    e764:	f000 fb52 	bl	ee0c <small_print>
                    itoa(med_count, medCount, 10);
    e768:	220a      	movs	r2, #10
    e76a:	4973      	ldr	r1, [pc, #460]	; (e938 <main+0x73c>)
    e76c:	f8d8 0000 	ldr.w	r0, [r8]
    e770:	f016 fda2 	bl	252b8 <itoa>
                    small_print(1, 15 , medCount);
    e774:	4a70      	ldr	r2, [pc, #448]	; (e938 <main+0x73c>)
    e776:	210f      	movs	r1, #15
    e778:	2001      	movs	r0, #1
    e77a:	f000 fb47 	bl	ee0c <small_print>
                    printk("Med count: %d\n", med_count);
    e77e:	486f      	ldr	r0, [pc, #444]	; (e93c <main+0x740>)
    e780:	f8d8 1000 	ldr.w	r1, [r8]
    e784:	f017 f9db 	bl	25b3e <printk>
                    printk("Device Condition: time_for_med.\n");
    e788:	486d      	ldr	r0, [pc, #436]	; (e940 <main+0x744>)
    e78a:	f017 f9d8 	bl	25b3e <printk>
                evaluate_med_list(); 
    e78e:	f001 f849 	bl	f824 <evaluate_med_list>
                if(med_count == 0 || currentTime >= tfmwEnd){
    e792:	f8d8 3000 	ldr.w	r3, [r8]
    e796:	b12b      	cbz	r3, e7a4 <main+0x5a8>
    e798:	4b6a      	ldr	r3, [pc, #424]	; (e944 <main+0x748>)
    e79a:	681a      	ldr	r2, [r3, #0]
    e79c:	4b6a      	ldr	r3, [pc, #424]	; (e948 <main+0x74c>)
    e79e:	681b      	ldr	r3, [r3, #0]
    e7a0:	429a      	cmp	r2, r3
    e7a2:	db04      	blt.n	e7ae <main+0x5b2>
                    update_display = true;
    e7a4:	2301      	movs	r3, #1
    e7a6:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    e7a8:	703b      	strb	r3, [r7, #0]
                    dev_condition  = score_board;
    e7aa:	2307      	movs	r3, #7
    e7ac:	7033      	strb	r3, [r6, #0]
                if(strcmp(barcode_buffer, medABarcode) == 0){
    e7ae:	4967      	ldr	r1, [pc, #412]	; (e94c <main+0x750>)
    e7b0:	4867      	ldr	r0, [pc, #412]	; (e950 <main+0x754>)
    e7b2:	f017 faf5 	bl	25da0 <strcmp>
    e7b6:	4680      	mov	r8, r0
    e7b8:	2800      	cmp	r0, #0
    e7ba:	d139      	bne.n	e830 <main+0x634>
                    memset(DOSE, 0, sizeof(DOSE));
    e7bc:	4601      	mov	r1, r0
    e7be:	2220      	movs	r2, #32
    e7c0:	4864      	ldr	r0, [pc, #400]	; (e954 <main+0x758>)
    e7c2:	f017 fb7d 	bl	25ec0 <memset>
                    memset(FORM, 0, sizeof(FORM));
    e7c6:	2220      	movs	r2, #32
    e7c8:	4641      	mov	r1, r8
    e7ca:	4863      	ldr	r0, [pc, #396]	; (e958 <main+0x75c>)
    e7cc:	f017 fb78 	bl	25ec0 <memset>
                    memset(NAME, 0, sizeof(NAME));
    e7d0:	2220      	movs	r2, #32
    e7d2:	4641      	mov	r1, r8
    e7d4:	4861      	ldr	r0, [pc, #388]	; (e95c <main+0x760>)
    e7d6:	f017 fb73 	bl	25ec0 <memset>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    e7da:	f44f 7280 	mov.w	r2, #256	; 0x100
    e7de:	4641      	mov	r1, r8
    e7e0:	485b      	ldr	r0, [pc, #364]	; (e950 <main+0x754>)
    e7e2:	f017 fb6d 	bl	25ec0 <memset>
                    strcat(DOSE, medADose);
    e7e6:	495e      	ldr	r1, [pc, #376]	; (e960 <main+0x764>)
    e7e8:	485a      	ldr	r0, [pc, #360]	; (e954 <main+0x758>)
    e7ea:	f017 faf5 	bl	25dd8 <strcat>
                    strcat(FORM, medAFormat);
    e7ee:	495d      	ldr	r1, [pc, #372]	; (e964 <main+0x768>)
    e7f0:	4859      	ldr	r0, [pc, #356]	; (e958 <main+0x75c>)
    e7f2:	f017 faf1 	bl	25dd8 <strcat>
                    strcat(NAME, medAName);
    e7f6:	4946      	ldr	r1, [pc, #280]	; (e910 <main+0x714>)
    e7f8:	4858      	ldr	r0, [pc, #352]	; (e95c <main+0x760>)
    e7fa:	f017 faed 	bl	25dd8 <strcat>
                    memset(medAStatus, 0, sizeof(medAStatus));
    e7fe:	2245      	movs	r2, #69	; 0x45
    e800:	4641      	mov	r1, r8
    e802:	4841      	ldr	r0, [pc, #260]	; (e908 <main+0x70c>)
    e804:	f017 fb5c 	bl	25ec0 <memset>
                    strcat(medAStatus, "scanned");
    e808:	4957      	ldr	r1, [pc, #348]	; (e968 <main+0x76c>)
    e80a:	483f      	ldr	r0, [pc, #252]	; (e908 <main+0x70c>)
    e80c:	f017 fae4 	bl	25dd8 <strcat>
                    memset(STAT, 0, sizeof(STAT));
    e810:	2220      	movs	r2, #32
    e812:	4641      	mov	r1, r8
    e814:	4855      	ldr	r0, [pc, #340]	; (e96c <main+0x770>)
    e816:	f017 fb53 	bl	25ec0 <memset>
                    strcat(STAT, medAStatus);
    e81a:	493b      	ldr	r1, [pc, #236]	; (e908 <main+0x70c>)
    e81c:	4853      	ldr	r0, [pc, #332]	; (e96c <main+0x770>)
    e81e:	f017 fadb 	bl	25dd8 <strcat>
                    update_display = true;
    e822:	2301      	movs	r3, #1
    e824:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    e826:	703b      	strb	r3, [r7, #0]
                    evaluate_med_list();
    e828:	f000 fffc 	bl	f824 <evaluate_med_list>
                    dev_condition  = med_directions;
    e82c:	2305      	movs	r3, #5
    e82e:	7033      	strb	r3, [r6, #0]
                if(strcmp(barcode_buffer, medBBarcode) == 0){
    e830:	494f      	ldr	r1, [pc, #316]	; (e970 <main+0x774>)
    e832:	4847      	ldr	r0, [pc, #284]	; (e950 <main+0x754>)
    e834:	f017 fab4 	bl	25da0 <strcmp>
    e838:	4680      	mov	r8, r0
    e83a:	2800      	cmp	r0, #0
    e83c:	d139      	bne.n	e8b2 <main+0x6b6>
                    memset(DOSE, 0, sizeof(DOSE));
    e83e:	4601      	mov	r1, r0
    e840:	2220      	movs	r2, #32
    e842:	4844      	ldr	r0, [pc, #272]	; (e954 <main+0x758>)
    e844:	f017 fb3c 	bl	25ec0 <memset>
                    memset(FORM, 0, sizeof(FORM));
    e848:	2220      	movs	r2, #32
    e84a:	4641      	mov	r1, r8
    e84c:	4842      	ldr	r0, [pc, #264]	; (e958 <main+0x75c>)
    e84e:	f017 fb37 	bl	25ec0 <memset>
                    memset(NAME, 0, sizeof(NAME));
    e852:	2220      	movs	r2, #32
    e854:	4641      	mov	r1, r8
    e856:	4841      	ldr	r0, [pc, #260]	; (e95c <main+0x760>)
    e858:	f017 fb32 	bl	25ec0 <memset>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    e85c:	f44f 7280 	mov.w	r2, #256	; 0x100
    e860:	4641      	mov	r1, r8
    e862:	483b      	ldr	r0, [pc, #236]	; (e950 <main+0x754>)
    e864:	f017 fb2c 	bl	25ec0 <memset>
                    strcat(DOSE, medBDose);
    e868:	4942      	ldr	r1, [pc, #264]	; (e974 <main+0x778>)
    e86a:	483a      	ldr	r0, [pc, #232]	; (e954 <main+0x758>)
    e86c:	f017 fab4 	bl	25dd8 <strcat>
                    strcat(FORM, medBFormat);
    e870:	4941      	ldr	r1, [pc, #260]	; (e978 <main+0x77c>)
    e872:	4839      	ldr	r0, [pc, #228]	; (e958 <main+0x75c>)
    e874:	f017 fab0 	bl	25dd8 <strcat>
                    strcat(NAME, medBName);
    e878:	4928      	ldr	r1, [pc, #160]	; (e91c <main+0x720>)
    e87a:	4838      	ldr	r0, [pc, #224]	; (e95c <main+0x760>)
    e87c:	f017 faac 	bl	25dd8 <strcat>
                    memset(medBStatus, 0, sizeof(medBStatus));
    e880:	2245      	movs	r2, #69	; 0x45
    e882:	4641      	mov	r1, r8
    e884:	4824      	ldr	r0, [pc, #144]	; (e918 <main+0x71c>)
    e886:	f017 fb1b 	bl	25ec0 <memset>
                    strcat(medBStatus, "scanned");
    e88a:	4937      	ldr	r1, [pc, #220]	; (e968 <main+0x76c>)
    e88c:	4822      	ldr	r0, [pc, #136]	; (e918 <main+0x71c>)
    e88e:	f017 faa3 	bl	25dd8 <strcat>
                    memset(STAT, 0, sizeof(STAT));
    e892:	2220      	movs	r2, #32
    e894:	4641      	mov	r1, r8
    e896:	4835      	ldr	r0, [pc, #212]	; (e96c <main+0x770>)
    e898:	f017 fb12 	bl	25ec0 <memset>
                    strcat(STAT, medBStatus);
    e89c:	491e      	ldr	r1, [pc, #120]	; (e918 <main+0x71c>)
    e89e:	4833      	ldr	r0, [pc, #204]	; (e96c <main+0x770>)
    e8a0:	f017 fa9a 	bl	25dd8 <strcat>
                    update_display = true;
    e8a4:	2301      	movs	r3, #1
    e8a6:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    e8a8:	703b      	strb	r3, [r7, #0]
                    evaluate_med_list();
    e8aa:	f000 ffbb 	bl	f824 <evaluate_med_list>
                    dev_condition  = med_directions;
    e8ae:	2305      	movs	r3, #5
    e8b0:	7033      	strb	r3, [r6, #0]
                if(strcmp(barcode_buffer, medCBarcode) == 0){
    e8b2:	4932      	ldr	r1, [pc, #200]	; (e97c <main+0x780>)
    e8b4:	4826      	ldr	r0, [pc, #152]	; (e950 <main+0x754>)
    e8b6:	f017 fa73 	bl	25da0 <strcmp>
    e8ba:	4680      	mov	r8, r0
    e8bc:	2800      	cmp	r0, #0
    e8be:	f040 808a 	bne.w	e9d6 <main+0x7da>
                    memset(DOSE, 0, sizeof(DOSE));
    e8c2:	4601      	mov	r1, r0
    e8c4:	2220      	movs	r2, #32
    e8c6:	4823      	ldr	r0, [pc, #140]	; (e954 <main+0x758>)
    e8c8:	f017 fafa 	bl	25ec0 <memset>
                    memset(FORM, 0, sizeof(FORM));
    e8cc:	2220      	movs	r2, #32
    e8ce:	4641      	mov	r1, r8
    e8d0:	4821      	ldr	r0, [pc, #132]	; (e958 <main+0x75c>)
    e8d2:	f017 faf5 	bl	25ec0 <memset>
                    memset(NAME, 0, sizeof(NAME));
    e8d6:	2220      	movs	r2, #32
    e8d8:	4641      	mov	r1, r8
    e8da:	4820      	ldr	r0, [pc, #128]	; (e95c <main+0x760>)
    e8dc:	f017 faf0 	bl	25ec0 <memset>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    e8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    e8e4:	4641      	mov	r1, r8
    e8e6:	481a      	ldr	r0, [pc, #104]	; (e950 <main+0x754>)
    e8e8:	f017 faea 	bl	25ec0 <memset>
    e8ec:	e04e      	b.n	e98c <main+0x790>
    e8ee:	bf00      	nop
    e8f0:	20022c24 	.word	0x20022c24
    e8f4:	20028351 	.word	0x20028351
    e8f8:	200223f3 	.word	0x200223f3
    e8fc:	0002a8b1 	.word	0x0002a8b1
    e900:	200223df 	.word	0x200223df
    e904:	0002a8b5 	.word	0x0002a8b5
    e908:	20023745 	.word	0x20023745
    e90c:	0002a8bb 	.word	0x0002a8bb
    e910:	20023700 	.word	0x20023700
    e914:	0002a8c3 	.word	0x0002a8c3
    e918:	2002389e 	.word	0x2002389e
    e91c:	20023859 	.word	0x20023859
    e920:	200239f7 	.word	0x200239f7
    e924:	200239b2 	.word	0x200239b2
    e928:	20023b50 	.word	0x20023b50
    e92c:	20023b0b 	.word	0x20023b0b
    e930:	20023ca9 	.word	0x20023ca9
    e934:	20023c64 	.word	0x20023c64
    e938:	2002240f 	.word	0x2002240f
    e93c:	0002a8c9 	.word	0x0002a8c9
    e940:	0002a8d8 	.word	0x0002a8d8
    e944:	20020144 	.word	0x20020144
    e948:	2002014c 	.word	0x2002014c
    e94c:	20023631 	.word	0x20023631
    e950:	200222df 	.word	0x200222df
    e954:	2002225e 	.word	0x2002225e
    e958:	2002227e 	.word	0x2002227e
    e95c:	2002229e 	.word	0x2002229e
    e960:	20023676 	.word	0x20023676
    e964:	200236bb 	.word	0x200236bb
    e968:	0002a8fd 	.word	0x0002a8fd
    e96c:	200222be 	.word	0x200222be
    e970:	2002378a 	.word	0x2002378a
    e974:	200237cf 	.word	0x200237cf
    e978:	20023814 	.word	0x20023814
    e97c:	200238e3 	.word	0x200238e3
    e980:	200222de 	.word	0x200222de
    e984:	20028352 	.word	0x20028352
    e988:	20020148 	.word	0x20020148
                    strcat(DOSE, medCDose);
    e98c:	499b      	ldr	r1, [pc, #620]	; (ebfc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x19c>)
    e98e:	489c      	ldr	r0, [pc, #624]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    e990:	f017 fa22 	bl	25dd8 <strcat>
                    strcat(FORM, medCFormat);
    e994:	499b      	ldr	r1, [pc, #620]	; (ec04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a4>)
    e996:	489c      	ldr	r0, [pc, #624]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    e998:	f017 fa1e 	bl	25dd8 <strcat>
                    strcat(NAME, medCName);
    e99c:	499b      	ldr	r1, [pc, #620]	; (ec0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ac>)
    e99e:	489c      	ldr	r0, [pc, #624]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    e9a0:	f017 fa1a 	bl	25dd8 <strcat>
                    memset(medCStatus, 0, sizeof(medCStatus));
    e9a4:	2245      	movs	r2, #69	; 0x45
    e9a6:	4641      	mov	r1, r8
    e9a8:	489a      	ldr	r0, [pc, #616]	; (ec14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b4>)
    e9aa:	f017 fa89 	bl	25ec0 <memset>
                    strcat(medCStatus, "scanned");
    e9ae:	499a      	ldr	r1, [pc, #616]	; (ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>)
    e9b0:	4898      	ldr	r0, [pc, #608]	; (ec14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b4>)
    e9b2:	f017 fa11 	bl	25dd8 <strcat>
                    memset(STAT, 0, sizeof(STAT));
    e9b6:	2220      	movs	r2, #32
    e9b8:	4641      	mov	r1, r8
    e9ba:	4898      	ldr	r0, [pc, #608]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    e9bc:	f017 fa80 	bl	25ec0 <memset>
                    strcat(STAT, medCStatus);
    e9c0:	4994      	ldr	r1, [pc, #592]	; (ec14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b4>)
    e9c2:	4896      	ldr	r0, [pc, #600]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    e9c4:	f017 fa08 	bl	25dd8 <strcat>
                    update_display = true;
    e9c8:	2301      	movs	r3, #1
    e9ca:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    e9cc:	703b      	strb	r3, [r7, #0]
                    evaluate_med_list();
    e9ce:	f000 ff29 	bl	f824 <evaluate_med_list>
                    dev_condition  = med_directions;
    e9d2:	2305      	movs	r3, #5
    e9d4:	7033      	strb	r3, [r6, #0]
                if(strcmp(barcode_buffer, medDBarcode) == 0){
    e9d6:	4992      	ldr	r1, [pc, #584]	; (ec20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c0>)
    e9d8:	4892      	ldr	r0, [pc, #584]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    e9da:	f017 f9e1 	bl	25da0 <strcmp>
    e9de:	4680      	mov	r8, r0
    e9e0:	2800      	cmp	r0, #0
    e9e2:	d139      	bne.n	ea58 <main+0x85c>
                    memset(DOSE, 0, sizeof(DOSE));
    e9e4:	4601      	mov	r1, r0
    e9e6:	2220      	movs	r2, #32
    e9e8:	4885      	ldr	r0, [pc, #532]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    e9ea:	f017 fa69 	bl	25ec0 <memset>
                    memset(FORM, 0, sizeof(FORM));
    e9ee:	2220      	movs	r2, #32
    e9f0:	4641      	mov	r1, r8
    e9f2:	4885      	ldr	r0, [pc, #532]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    e9f4:	f017 fa64 	bl	25ec0 <memset>
                    memset(NAME, 0, sizeof(NAME));
    e9f8:	2220      	movs	r2, #32
    e9fa:	4641      	mov	r1, r8
    e9fc:	4884      	ldr	r0, [pc, #528]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    e9fe:	f017 fa5f 	bl	25ec0 <memset>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    ea02:	f44f 7280 	mov.w	r2, #256	; 0x100
    ea06:	4641      	mov	r1, r8
    ea08:	4886      	ldr	r0, [pc, #536]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    ea0a:	f017 fa59 	bl	25ec0 <memset>
                    strcat(DOSE, medDDose);
    ea0e:	4986      	ldr	r1, [pc, #536]	; (ec28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c8>)
    ea10:	487b      	ldr	r0, [pc, #492]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    ea12:	f017 f9e1 	bl	25dd8 <strcat>
                    strcat(FORM, medDFormat);
    ea16:	4985      	ldr	r1, [pc, #532]	; (ec2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1cc>)
    ea18:	487b      	ldr	r0, [pc, #492]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    ea1a:	f017 f9dd 	bl	25dd8 <strcat>
                    strcat(NAME, medDName);
    ea1e:	4984      	ldr	r1, [pc, #528]	; (ec30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d0>)
    ea20:	487b      	ldr	r0, [pc, #492]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    ea22:	f017 f9d9 	bl	25dd8 <strcat>
                    memset(medDStatus, 0, sizeof(medDStatus));
    ea26:	2245      	movs	r2, #69	; 0x45
    ea28:	4641      	mov	r1, r8
    ea2a:	4882      	ldr	r0, [pc, #520]	; (ec34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d4>)
    ea2c:	f017 fa48 	bl	25ec0 <memset>
                    strcat(medDStatus, "scanned");
    ea30:	4979      	ldr	r1, [pc, #484]	; (ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>)
    ea32:	4880      	ldr	r0, [pc, #512]	; (ec34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d4>)
    ea34:	f017 f9d0 	bl	25dd8 <strcat>
                    memset(STAT, 0, sizeof(STAT));
    ea38:	2220      	movs	r2, #32
    ea3a:	4641      	mov	r1, r8
    ea3c:	4877      	ldr	r0, [pc, #476]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    ea3e:	f017 fa3f 	bl	25ec0 <memset>
                    strcat(STAT, medDStatus);
    ea42:	497c      	ldr	r1, [pc, #496]	; (ec34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d4>)
    ea44:	4875      	ldr	r0, [pc, #468]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    ea46:	f017 f9c7 	bl	25dd8 <strcat>
                    update_display = true;
    ea4a:	2301      	movs	r3, #1
    ea4c:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    ea4e:	703b      	strb	r3, [r7, #0]
                    evaluate_med_list();
    ea50:	f000 fee8 	bl	f824 <evaluate_med_list>
                    dev_condition  = med_directions;
    ea54:	2305      	movs	r3, #5
    ea56:	7033      	strb	r3, [r6, #0]
                if(strcmp(barcode_buffer, medEBarcode) == 0){
    ea58:	4977      	ldr	r1, [pc, #476]	; (ec38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1d8>)
    ea5a:	4872      	ldr	r0, [pc, #456]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    ea5c:	f017 f9a0 	bl	25da0 <strcmp>
    ea60:	4680      	mov	r8, r0
    ea62:	2800      	cmp	r0, #0
    ea64:	f47f ac8d 	bne.w	e382 <main+0x186>
                    memset(DOSE, 0, sizeof(DOSE));
    ea68:	4601      	mov	r1, r0
    ea6a:	2220      	movs	r2, #32
    ea6c:	4864      	ldr	r0, [pc, #400]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    ea6e:	f017 fa27 	bl	25ec0 <memset>
                    memset(FORM, 0, sizeof(FORM));
    ea72:	2220      	movs	r2, #32
    ea74:	4641      	mov	r1, r8
    ea76:	4864      	ldr	r0, [pc, #400]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    ea78:	f017 fa22 	bl	25ec0 <memset>
                    memset(NAME, 0, sizeof(NAME));
    ea7c:	2220      	movs	r2, #32
    ea7e:	4641      	mov	r1, r8
    ea80:	4863      	ldr	r0, [pc, #396]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    ea82:	f017 fa1d 	bl	25ec0 <memset>
                    memset(barcode_buffer, 0, sizeof(barcode_buffer));
    ea86:	f44f 7280 	mov.w	r2, #256	; 0x100
    ea8a:	4641      	mov	r1, r8
    ea8c:	4865      	ldr	r0, [pc, #404]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    ea8e:	f017 fa17 	bl	25ec0 <memset>
                    strcat(DOSE, medEDose);
    ea92:	496a      	ldr	r1, [pc, #424]	; (ec3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1dc>)
    ea94:	485a      	ldr	r0, [pc, #360]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    ea96:	f017 f99f 	bl	25dd8 <strcat>
                    strcat(FORM, medEFormat);
    ea9a:	4969      	ldr	r1, [pc, #420]	; (ec40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e0>)
    ea9c:	485a      	ldr	r0, [pc, #360]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    ea9e:	f017 f99b 	bl	25dd8 <strcat>
                    strcat(NAME, medEName);
    eaa2:	4968      	ldr	r1, [pc, #416]	; (ec44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e4>)
    eaa4:	485a      	ldr	r0, [pc, #360]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    eaa6:	f017 f997 	bl	25dd8 <strcat>
                    memset(medEStatus, 0, sizeof(medEStatus));
    eaaa:	2245      	movs	r2, #69	; 0x45
    eaac:	4641      	mov	r1, r8
    eaae:	4866      	ldr	r0, [pc, #408]	; (ec48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e8>)
    eab0:	f017 fa06 	bl	25ec0 <memset>
                    strcat(medEStatus, "scanned");
    eab4:	4958      	ldr	r1, [pc, #352]	; (ec18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b8>)
    eab6:	4864      	ldr	r0, [pc, #400]	; (ec48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e8>)
    eab8:	f017 f98e 	bl	25dd8 <strcat>
                    memset(STAT, 0, sizeof(STAT));
    eabc:	2220      	movs	r2, #32
    eabe:	4641      	mov	r1, r8
    eac0:	4856      	ldr	r0, [pc, #344]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    eac2:	f017 f9fd 	bl	25ec0 <memset>
                    strcat(STAT, medEStatus);
    eac6:	4960      	ldr	r1, [pc, #384]	; (ec48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e8>)
    eac8:	4854      	ldr	r0, [pc, #336]	; (ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>)
    eaca:	f017 f985 	bl	25dd8 <strcat>
                    update_display = true;
    eace:	2301      	movs	r3, #1
    ead0:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    ead2:	703b      	strb	r3, [r7, #0]
                    evaluate_med_list();
    ead4:	f000 fea6 	bl	f824 <evaluate_med_list>
                    dev_condition  = med_directions;
    ead8:	2305      	movs	r3, #5
                btn_a_toggle();
                btn_b_toggle();

                if(btnBtoggle == false){
                    update_display = true;
                    dev_condition = standby;
    eada:	7033      	strb	r3, [r6, #0]
    eadc:	e451      	b.n	e382 <main+0x186>
                if(publish_message == true){
    eade:	4f5b      	ldr	r7, [pc, #364]	; (ec4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ec>)
    eae0:	783b      	ldrb	r3, [r7, #0]
    eae2:	b143      	cbz	r3, eaf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x96>
                    publish_message = false;
    eae4:	2300      	movs	r3, #0
                    pub_settings_packet("med_scanned");
    eae6:	485a      	ldr	r0, [pc, #360]	; (ec50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f0>)
                    publish_message = false;
    eae8:	703b      	strb	r3, [r7, #0]
                    pub_settings_packet("med_scanned");
    eaea:	f7fe fe3d 	bl	d768 <pub_settings_packet>
                    btn_a_init();
    eaee:	f7ff fae7 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    eaf2:	f7ff fb15 	bl	e120 <btn_b_init>
                if(update_display == true){
    eaf6:	7823      	ldrb	r3, [r4, #0]
    eaf8:	b1d3      	cbz	r3, eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
                    update_display = false;
    eafa:	2300      	movs	r3, #0
    eafc:	7023      	strb	r3, [r4, #0]
                    clearDisplay();
    eafe:	f000 f937 	bl	ed70 <clearDisplay>
                    medium_print(1, 140, "TAKE:");
    eb02:	4a54      	ldr	r2, [pc, #336]	; (ec54 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f4>)
    eb04:	218c      	movs	r1, #140	; 0x8c
    eb06:	2001      	movs	r0, #1
    eb08:	f000 f9fc 	bl	ef04 <medium_print>
                    large_print(1, 110, DOSE);
    eb0c:	4a3c      	ldr	r2, [pc, #240]	; (ec00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a0>)
    eb0e:	216e      	movs	r1, #110	; 0x6e
    eb10:	2001      	movs	r0, #1
    eb12:	f000 fa73 	bl	effc <large_print>
                    medium_print(1,  60, FORM);
    eb16:	4a3c      	ldr	r2, [pc, #240]	; (ec08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a8>)
    eb18:	213c      	movs	r1, #60	; 0x3c
    eb1a:	2001      	movs	r0, #1
    eb1c:	f000 f9f2 	bl	ef04 <medium_print>
                    medium_print(1,  30, NAME);
    eb20:	2001      	movs	r0, #1
    eb22:	4a3b      	ldr	r2, [pc, #236]	; (ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>)
    eb24:	211e      	movs	r1, #30
    eb26:	f000 f9ed 	bl	ef04 <medium_print>
                    printk("Device Condition: med_directions.\n");
    eb2a:	484b      	ldr	r0, [pc, #300]	; (ec58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1f8>)
    eb2c:	f017 f807 	bl	25b3e <printk>
                btn_a_toggle();
    eb30:	f7ff fad6 	bl	e0e0 <btn_a_toggle>
                btn_b_toggle();
    eb34:	f7ff fb04 	bl	e140 <btn_b_toggle>
                if(btnBtoggle == false){
    eb38:	4b48      	ldr	r3, [pc, #288]	; (ec5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1fc>)
    eb3a:	781b      	ldrb	r3, [r3, #0]
    eb3c:	2b00      	cmp	r3, #0
    eb3e:	f47f ac20 	bne.w	e382 <main+0x186>
                    update_display = true;
    eb42:	2301      	movs	r3, #1
    eb44:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    eb46:	703b      	strb	r3, [r7, #0]
                    dev_condition = med_taken;
    eb48:	2306      	movs	r3, #6
    eb4a:	e7c6      	b.n	eada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a>
                if(publish_message == true){ 
    eb4c:	4f3f      	ldr	r7, [pc, #252]	; (ec4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ec>)
    eb4e:	783b      	ldrb	r3, [r7, #0]
    eb50:	b12b      	cbz	r3, eb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe>
                    publish_message = false;
    eb52:	2300      	movs	r3, #0
    eb54:	703b      	strb	r3, [r7, #0]
                    btn_a_init();
    eb56:	f7ff fab3 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    eb5a:	f7ff fae1 	bl	e120 <btn_b_init>
                if(update_display == true){
    eb5e:	7823      	ldrb	r3, [r4, #0]
    eb60:	b183      	cbz	r3, eb84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x124>
                    update_display = false;
    eb62:	2300      	movs	r3, #0
    eb64:	7023      	strb	r3, [r4, #0]
                    clearDisplay();
    eb66:	f000 f903 	bl	ed70 <clearDisplay>
                    medium_print(1, 112, "GREAT");
    eb6a:	4a3d      	ldr	r2, [pc, #244]	; (ec60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x200>)
    eb6c:	2170      	movs	r1, #112	; 0x70
    eb6e:	2001      	movs	r0, #1
    eb70:	f000 f9c8 	bl	ef04 <medium_print>
                    medium_print(2,  82, "JOB");
    eb74:	2002      	movs	r0, #2
    eb76:	4a3b      	ldr	r2, [pc, #236]	; (ec64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x204>)
    eb78:	2152      	movs	r1, #82	; 0x52
    eb7a:	f000 f9c3 	bl	ef04 <medium_print>
                    printk("Device Condition: med_taken.\n");
    eb7e:	483a      	ldr	r0, [pc, #232]	; (ec68 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x208>)
    eb80:	f016 ffdd 	bl	25b3e <printk>
                btn_a_toggle();
    eb84:	f7ff faac 	bl	e0e0 <btn_a_toggle>
                btn_b_toggle();
    eb88:	f7ff fada 	bl	e140 <btn_b_toggle>
                if(btnBtoggle == false){
    eb8c:	4b33      	ldr	r3, [pc, #204]	; (ec5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1fc>)
    eb8e:	781b      	ldrb	r3, [r3, #0]
    eb90:	2b00      	cmp	r3, #0
    eb92:	f47f abf6 	bne.w	e382 <main+0x186>
                    update_display = true;
    eb96:	2301      	movs	r3, #1
    eb98:	7023      	strb	r3, [r4, #0]
                    publish_message = true;
    eb9a:	703b      	strb	r3, [r7, #0]
                    dev_condition = time_for_med;
    eb9c:	2303      	movs	r3, #3
    eb9e:	e79c      	b.n	eada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a>
                if(update_display == true){
    eba0:	7823      	ldrb	r3, [r4, #0]
    eba2:	b1b3      	cbz	r3, ebd2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x172>
                    update_display = false;
    eba4:	2700      	movs	r7, #0
    eba6:	7027      	strb	r7, [r4, #0]
                    clearDisplay();
    eba8:	f000 f8e2 	bl	ed70 <clearDisplay>
                    alarm = false;
    ebac:	4b2f      	ldr	r3, [pc, #188]	; (ec6c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20c>)
                    medium_print(2, 112, "ALL");
    ebae:	4a30      	ldr	r2, [pc, #192]	; (ec70 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x210>)
    ebb0:	2170      	movs	r1, #112	; 0x70
    ebb2:	2002      	movs	r0, #2
                    alarm = false;
    ebb4:	701f      	strb	r7, [r3, #0]
                    medium_print(2, 112, "ALL");
    ebb6:	f000 f9a5 	bl	ef04 <medium_print>
                    medium_print(2,  82, "DONE");
    ebba:	4a2e      	ldr	r2, [pc, #184]	; (ec74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x214>)
    ebbc:	2152      	movs	r1, #82	; 0x52
    ebbe:	2002      	movs	r0, #2
    ebc0:	f000 f9a0 	bl	ef04 <medium_print>
                    printk("Device Condition: SCORE BOARD.\n");
    ebc4:	482c      	ldr	r0, [pc, #176]	; (ec78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x218>)
    ebc6:	f016 ffba 	bl	25b3e <printk>
                    btn_a_init();
    ebca:	f7ff fa79 	bl	e0c0 <btn_a_init>
                    btn_b_init();
    ebce:	f7ff faa7 	bl	e120 <btn_b_init>
                if(publish_message == true){ 
    ebd2:	4b1e      	ldr	r3, [pc, #120]	; (ec4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ec>)
    ebd4:	781a      	ldrb	r2, [r3, #0]
    ebd6:	b122      	cbz	r2, ebe2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x182>
                    publish_message = false;
    ebd8:	2200      	movs	r2, #0
                    pub_settings_packet("tfm_score");
    ebda:	4828      	ldr	r0, [pc, #160]	; (ec7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x21c>)
                    publish_message = false;
    ebdc:	701a      	strb	r2, [r3, #0]
                    pub_settings_packet("tfm_score");
    ebde:	f7fe fdc3 	bl	d768 <pub_settings_packet>
                btn_a_toggle();
    ebe2:	f7ff fa7d 	bl	e0e0 <btn_a_toggle>
                btn_b_toggle();
    ebe6:	f7ff faab 	bl	e140 <btn_b_toggle>
                if(btnBtoggle == false){
    ebea:	4b1c      	ldr	r3, [pc, #112]	; (ec5c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1fc>)
    ebec:	781b      	ldrb	r3, [r3, #0]
    ebee:	2b00      	cmp	r3, #0
    ebf0:	f47f abc7 	bne.w	e382 <main+0x186>
                    update_display = true;
    ebf4:	2301      	movs	r3, #1
    ebf6:	7023      	strb	r3, [r4, #0]
                    dev_condition = standby;
    ebf8:	2302      	movs	r3, #2
    ebfa:	e76e      	b.n	eada <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7a>
    ebfc:	20023928 	.word	0x20023928
    ec00:	2002225e 	.word	0x2002225e
    ec04:	2002396d 	.word	0x2002396d
    ec08:	2002227e 	.word	0x2002227e
    ec0c:	200239b2 	.word	0x200239b2
    ec10:	2002229e 	.word	0x2002229e
    ec14:	200239f7 	.word	0x200239f7
    ec18:	0002a8fd 	.word	0x0002a8fd
    ec1c:	200222be 	.word	0x200222be
    ec20:	20023a3c 	.word	0x20023a3c
    ec24:	200222df 	.word	0x200222df
    ec28:	20023a81 	.word	0x20023a81
    ec2c:	20023ac6 	.word	0x20023ac6
    ec30:	20023b0b 	.word	0x20023b0b
    ec34:	20023b50 	.word	0x20023b50
    ec38:	20023b95 	.word	0x20023b95
    ec3c:	20023bda 	.word	0x20023bda
    ec40:	20023c1f 	.word	0x20023c1f
    ec44:	20023c64 	.word	0x20023c64
    ec48:	20023ca9 	.word	0x20023ca9
    ec4c:	20022c24 	.word	0x20022c24
    ec50:	0002a8f9 	.word	0x0002a8f9
    ec54:	0002a905 	.word	0x0002a905
    ec58:	0002a90b 	.word	0x0002a90b
    ec5c:	20028352 	.word	0x20028352
    ec60:	0002a92e 	.word	0x0002a92e
    ec64:	0002a934 	.word	0x0002a934
    ec68:	0002a938 	.word	0x0002a938
    ec6c:	200222de 	.word	0x200222de
    ec70:	0002a956 	.word	0x0002a956
    ec74:	0002a95a 	.word	0x0002a95a
    ec78:	0002a95f 	.word	0x0002a95f
    ec7c:	0002a97f 	.word	0x0002a97f

0000ec80 <TOGGLE_VCOM>:
//////////////////////////////////////
// VCOM toggle required if EXTMODE = L 
//////////////////////////////////////
uint8_t _sharpmem_vcom; //uint32_t _sharpmem_vcom;
u8_t TOGGLE_VCOM(void) {
  do { _sharpmem_vcom = _sharpmem_vcom ? 0x01 : SHARPMEM_BIT_VCOM; } while(0);
    ec80:	4b03      	ldr	r3, [pc, #12]	; (ec90 <TOGGLE_VCOM+0x10>)
    ec82:	781a      	ldrb	r2, [r3, #0]
    ec84:	2a00      	cmp	r2, #0
    ec86:	bf14      	ite	ne
    ec88:	2001      	movne	r0, #1
    ec8a:	2040      	moveq	r0, #64	; 0x40
    ec8c:	7018      	strb	r0, [r3, #0]
  return _sharpmem_vcom;
  };
    ec8e:	4770      	bx	lr
    ec90:	20023627 	.word	0x20023627

0000ec94 <spi_init>:
};


//const char* const spiName = "SPI_2";
void spi_init(void) //(struct device* spi_port)
{
    ec94:	b508      	push	{r3, lr}
    ec96:	4806      	ldr	r0, [pc, #24]	; (ecb0 <spi_init+0x1c>)
    ec98:	f012 ffa4 	bl	21be4 <z_impl_device_get_binding>
        
//	const char* const spiName = "SPI_3";//"SPI_3";
	spi_dev = device_get_binding(spiName);
    ec9c:	4b05      	ldr	r3, [pc, #20]	; (ecb4 <spi_init+0x20>)
    ec9e:	6018      	str	r0, [r3, #0]

//spi_dev = device_get_binding(spiName);
	if (spi_dev == NULL) {
    eca0:	b928      	cbnz	r0, ecae <spi_init+0x1a>
//        if (spi_port == NULL) {
		printk("Could not get %s device\n", spiName);
//                printk("Could not get %s device\n", spi_port);
		return;
	}
};
    eca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Could not get %s device\n", spiName);
    eca6:	4902      	ldr	r1, [pc, #8]	; (ecb0 <spi_init+0x1c>)
    eca8:	4803      	ldr	r0, [pc, #12]	; (ecb8 <spi_init+0x24>)
    ecaa:	f016 bf48 	b.w	25b3e <printk>
};
    ecae:	bd08      	pop	{r3, pc}
    ecb0:	0002b000 	.word	0x0002b000
    ecb4:	20020134 	.word	0x20020134
    ecb8:	0002b006 	.word	0x0002b006

0000ecbc <dispBegin>:


void dispBegin(void) {
    ecbc:	b510      	push	{r4, lr}
    ecbe:	481c      	ldr	r0, [pc, #112]	; (ed30 <dispBegin+0x74>)
    ecc0:	f012 ff90 	bl	21be4 <z_impl_device_get_binding>
    dev = device_get_binding("GPIO_0");
    ecc4:	4c1b      	ldr	r4, [pc, #108]	; (ed34 <dispBegin+0x78>)
    gpio_pin_configure(dev, 0, GPIO_DIR_OUT); //p0.10 == sck ==> p0.00/
    ecc6:	2100      	movs	r1, #0
    dev = device_get_binding("GPIO_0");
    ecc8:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev, 0, GPIO_DIR_OUT); //p0.10 == sck ==> p0.00/
    ecca:	f016 fb4e 	bl	2536a <gpio_pin_configure.constprop.0>
    gpio_pin_configure(dev, 30, GPIO_DIR_OUT); //p0.11 == mosi ==> p0.30/
    ecce:	211e      	movs	r1, #30
    ecd0:	6820      	ldr	r0, [r4, #0]
    ecd2:	f016 fb4a 	bl	2536a <gpio_pin_configure.constprop.0>
    gpio_pin_configure(dev, 29, GPIO_DIR_OUT); //p0.13 == cs ==> p0.29/
    ecd6:	211d      	movs	r1, #29
    ecd8:	6820      	ldr	r0, [r4, #0]
    ecda:	f016 fb46 	bl	2536a <gpio_pin_configure.constprop.0>
    gpio_pin_write(dev, 29, 1);	//p0.13 == cs/
    ecde:	2201      	movs	r2, #1
    ece0:	211d      	movs	r1, #29
    ece2:	6820      	ldr	r0, [r4, #0]
    ece4:	f016 fb37 	bl	25356 <gpio_pin_write>
    gpio_pin_write(dev, 0, 0);	//p0.10 == sck/
    ece8:	2200      	movs	r2, #0
    ecea:	6820      	ldr	r0, [r4, #0]
    ecec:	4611      	mov	r1, r2
    ecee:	f016 fb32 	bl	25356 <gpio_pin_write>
    gpio_pin_write(dev, 30, 1);	//p0.11 == mosi/
    ecf2:	2201      	movs	r2, #1
    ecf4:	211e      	movs	r1, #30
    ecf6:	6820      	ldr	r0, [r4, #0]
    ecf8:	f016 fb2d 	bl	25356 <gpio_pin_write>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, ms)
    ecfc:	200a      	movs	r0, #10
    ecfe:	f014 fe65 	bl	239cc <z_impl_k_sleep>
    k_sleep(10);

    gpio_pin_write(dev, 29, 0);	//p0.13 == cs/
    ed02:	2200      	movs	r2, #0
    ed04:	211d      	movs	r1, #29
    ed06:	6820      	ldr	r0, [r4, #0]
    ed08:	f016 fb25 	bl	25356 <gpio_pin_write>
    gpio_pin_write(dev, 0, 0);	//p0.10 == sck/
    ed0c:	2200      	movs	r2, #0
    ed0e:	6820      	ldr	r0, [r4, #0]
    ed10:	4611      	mov	r1, r2
    ed12:	f016 fb20 	bl	25356 <gpio_pin_write>
    gpio_pin_write(dev, 30, 0);	//p0.11 == mosi/
    ed16:	2200      	movs	r2, #0
    ed18:	211e      	movs	r1, #30
    ed1a:	6820      	ldr	r0, [r4, #0]
    ed1c:	f016 fb1b 	bl	25356 <gpio_pin_write>
    ed20:	200a      	movs	r0, #10
    ed22:	f014 fe53 	bl	239cc <z_impl_k_sleep>
    k_sleep(10);
    // Set the vcom bit to a defined state
    _sharpmem_vcom = SHARPMEM_BIT_VCOM;
    ed26:	2240      	movs	r2, #64	; 0x40
    ed28:	4b03      	ldr	r3, [pc, #12]	; (ed38 <dispBegin+0x7c>)
    ed2a:	701a      	strb	r2, [r3, #0]
}
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	bf00      	nop
    ed30:	0002a7a4 	.word	0x0002a7a4
    ed34:	20020130 	.word	0x20020130
    ed38:	20023627 	.word	0x20023627

0000ed3c <send_byte>:

void send_byte(u8_t *byte){
    ed3c:	b510      	push	{r4, lr}
    ed3e:	b086      	sub	sp, #24
  
  u8_t byte_buffer[1] = {byte};
    ed40:	ab06      	add	r3, sp, #24
    ed42:	f803 0d14 	strb.w	r0, [r3, #-20]!
  const struct spi_buf byte_buf = {
    ed46:	9302      	str	r3, [sp, #8]
    ed48:	2301      	movs	r3, #1
          .buf = byte_buffer,
          .len = sizeof(byte_buffer)
  };
  const struct spi_buf_set bt = {
    ed4a:	aa02      	add	r2, sp, #8
    ed4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  const struct spi_buf byte_buf = {
    ed50:	9303      	str	r3, [sp, #12]
          .buffers = &byte_buf,
          .count = 1
  };
  spi_write(spi_dev, &spi_cfg, &bt);
    ed52:	4b05      	ldr	r3, [pc, #20]	; (ed68 <send_byte+0x2c>)
				       const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->driver_api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    ed54:	aa04      	add	r2, sp, #16
    ed56:	6818      	ldr	r0, [r3, #0]
    ed58:	4904      	ldr	r1, [pc, #16]	; (ed6c <send_byte+0x30>)
    ed5a:	6843      	ldr	r3, [r0, #4]
    ed5c:	681c      	ldr	r4, [r3, #0]
    ed5e:	2300      	movs	r3, #0
    ed60:	47a0      	blx	r4
}
    ed62:	b006      	add	sp, #24
    ed64:	bd10      	pop	{r4, pc}
    ed66:	bf00      	nop
    ed68:	20020134 	.word	0x20020134
    ed6c:	00027b68 	.word	0x00027b68

0000ed70 <clearDisplay>:
    out = (out & 0xcc) >> 2 | (out & 0x33) << 2;
    out = (out & 0xf0) >> 4 | (out & 0x0f) << 4;
    return out;
};     

void clearDisplay(void){ 
    ed70:	b510      	push	{r4, lr}

  gpio_pin_write(dev, 29, 1);	//p0.13 == cs/
    ed72:	4c0c      	ldr	r4, [pc, #48]	; (eda4 <clearDisplay+0x34>)
    ed74:	2201      	movs	r2, #1
    ed76:	211d      	movs	r1, #29
    ed78:	6820      	ldr	r0, [r4, #0]
    ed7a:	f016 faec 	bl	25356 <gpio_pin_write>
  send_byte(SHARPMEM_BIT_CLEAR | _sharpmem_vcom);
    ed7e:	4b0a      	ldr	r3, [pc, #40]	; (eda8 <clearDisplay+0x38>)
    ed80:	7818      	ldrb	r0, [r3, #0]
    ed82:	f040 0020 	orr.w	r0, r0, #32
    ed86:	f7ff ffd9 	bl	ed3c <send_byte>
  send_byte(0x00);
    ed8a:	2000      	movs	r0, #0
    ed8c:	f7ff ffd6 	bl	ed3c <send_byte>

  TOGGLE_VCOM;
    ed90:	f7ff ff76 	bl	ec80 <TOGGLE_VCOM>
  
  gpio_pin_write(dev, 29, 0);	//p0.13 == cs/
    ed94:	6820      	ldr	r0, [r4, #0]
    ed96:	2200      	movs	r2, #0

};
    ed98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_write(dev, 29, 0);	//p0.13 == cs/
    ed9c:	211d      	movs	r1, #29
    ed9e:	f016 bada 	b.w	25356 <gpio_pin_write>
    eda2:	bf00      	nop
    eda4:	20020130 	.word	0x20020130
    eda8:	20023627 	.word	0x20023627

0000edac <write_line>:



void write_line(u8_t line, u8_t *data){ //(u8_t line, u8_t *data){
    edac:	b570      	push	{r4, r5, r6, lr}
    edae:	4606      	mov	r6, r0

  gpio_pin_write(dev, 29, 1);	//p0.13 == cs/
    edb0:	4c14      	ldr	r4, [pc, #80]	; (ee04 <write_line+0x58>)
    edb2:	2201      	movs	r2, #1
void write_line(u8_t line, u8_t *data){ //(u8_t line, u8_t *data){
    edb4:	460d      	mov	r5, r1
  gpio_pin_write(dev, 29, 1);	//p0.13 == cs/
    edb6:	6820      	ldr	r0, [r4, #0]
    edb8:	211d      	movs	r1, #29
    edba:	f016 facc 	bl	25356 <gpio_pin_write>
  /*Send write command byte. */
  send_byte(SHARPMEM_BIT_WRITECMD | _sharpmem_vcom);
    edbe:	4b12      	ldr	r3, [pc, #72]	; (ee08 <write_line+0x5c>)
    edc0:	7818      	ldrb	r0, [r3, #0]
    edc2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    edc6:	f7ff ffb9 	bl	ed3c <send_byte>
  TOGGLE_VCOM;
    edca:	f7ff ff59 	bl	ec80 <TOGGLE_VCOM>

  /*Send line select byte. */
  send_byte(reversebits8(line));
    edce:	b270      	sxtb	r0, r6
    edd0:	f016 fad5 	bl	2537e <reversebits8>
    edd4:	f7ff ffb2 	bl	ed3c <send_byte>
    edd8:	f105 0612 	add.w	r6, r5, #18

  /*Send data array of pixels to draw on selected line. */
  for(int i = 0; i < DISPLAY_WIDTH / 8; i++){
    send_byte(*data);
    eddc:	f815 0b01 	ldrb.w	r0, [r5], #1
    ede0:	f7ff ffac 	bl	ed3c <send_byte>
  for(int i = 0; i < DISPLAY_WIDTH / 8; i++){
    ede4:	42ae      	cmp	r6, r5
    ede6:	d1f9      	bne.n	eddc <write_line+0x30>
    data++;
  }

  /*Send trailing 16 bits to end drawing to line.*/
  send_byte(0x00);
    ede8:	2000      	movs	r0, #0
    edea:	f7ff ffa7 	bl	ed3c <send_byte>
  send_byte(0x00);
    edee:	2000      	movs	r0, #0
    edf0:	f7ff ffa4 	bl	ed3c <send_byte>
  gpio_pin_write(dev, 29, 0);   //p0.13 == cs/
    edf4:	6820      	ldr	r0, [r4, #0]
    edf6:	2200      	movs	r2, #0
};
    edf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  gpio_pin_write(dev, 29, 0);   //p0.13 == cs/
    edfc:	211d      	movs	r1, #29
    edfe:	f016 baaa 	b.w	25356 <gpio_pin_write>
    ee02:	bf00      	nop
    ee04:	20020130 	.word	0x20020130
    ee08:	20023627 	.word	0x20023627

0000ee0c <small_print>:
      j = 0;
      break;
      }
  };

void small_print(unsigned int column, unsigned int row, unsigned char message[36]){
    ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee10:	b094      	sub	sp, #80	; 0x50
    ee12:	4614      	mov	r4, r2
    int difference;
    char spc[36] = "                  "; 
    ee14:	aa02      	add	r2, sp, #8
void small_print(unsigned int column, unsigned int row, unsigned char message[36]){
    ee16:	4680      	mov	r8, r0
    ee18:	460d      	mov	r5, r1
    ee1a:	4617      	mov	r7, r2
    char spc[36] = "                  "; 
    ee1c:	4b33      	ldr	r3, [pc, #204]	; (eeec <small_print+0xe0>)
    ee1e:	f103 0c10 	add.w	ip, r3, #16
    ee22:	4616      	mov	r6, r2
    ee24:	6818      	ldr	r0, [r3, #0]
    ee26:	6859      	ldr	r1, [r3, #4]
    ee28:	3308      	adds	r3, #8
    ee2a:	c603      	stmia	r6!, {r0, r1}
    ee2c:	4563      	cmp	r3, ip
    ee2e:	4632      	mov	r2, r6
    ee30:	d1f7      	bne.n	ee22 <small_print+0x16>
    ee32:	8819      	ldrh	r1, [r3, #0]
    ee34:	789b      	ldrb	r3, [r3, #2]
    ee36:	8031      	strh	r1, [r6, #0]
    ee38:	70b3      	strb	r3, [r6, #2]
    ee3a:	2211      	movs	r2, #17
    ee3c:	2100      	movs	r1, #0
    ee3e:	f10d 001b 	add.w	r0, sp, #27
    ee42:	f017 f83d 	bl	25ec0 <memset>
    char printBuff[36] = "";
    ee46:	2100      	movs	r1, #0
    ee48:	2220      	movs	r2, #32
    ee4a:	a80c      	add	r0, sp, #48	; 0x30
    ee4c:	910b      	str	r1, [sp, #44]	; 0x2c
    ee4e:	f017 f837 	bl	25ec0 <memset>
    if(strlen(message) > 18){
    ee52:	4620      	mov	r0, r4
    ee54:	f016 ff9c 	bl	25d90 <strlen>
    ee58:	2812      	cmp	r0, #18
    ee5a:	b2ed      	uxtb	r5, r5
    ee5c:	d90f      	bls.n	ee7e <small_print+0x72>
        display_println(row, " Too Long         ", Font8Bit, 12, 1, 8);  
    ee5e:	2301      	movs	r3, #1
    ee60:	2008      	movs	r0, #8
    ee62:	4a23      	ldr	r2, [pc, #140]	; (eef0 <small_print+0xe4>)
    ee64:	e9cd 3000 	strd	r3, r0, [sp]
    ee68:	4922      	ldr	r1, [pc, #136]	; (eef4 <small_print+0xe8>)
    ee6a:	4628      	mov	r0, r5
    ee6c:	230c      	movs	r3, #12
    ee6e:	f016 faa9 	bl	253c4 <display_println>
        printk("THIS: TOO LONG\n");
    ee72:	4821      	ldr	r0, [pc, #132]	; (eef8 <small_print+0xec>)
    ee74:	f016 fe63 	bl	25b3e <printk>
            display_println(row, printBuff, Font8Bit, 12, 1, 8);
            } else {
                printk("THIS: Just Right.\n");
                display_println(row, message, Font8Bit, 12, 1, 8);
                }
    };
    ee78:	b014      	add	sp, #80	; 0x50
    ee7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if(strlen(message) < 18){
    ee7e:	4620      	mov	r0, r4
    ee80:	f016 ff86 	bl	25d90 <strlen>
    ee84:	2811      	cmp	r0, #17
    ee86:	d825      	bhi.n	eed4 <small_print+0xc8>
            strncat(printBuff, spc, column);
    ee88:	4642      	mov	r2, r8
    ee8a:	4639      	mov	r1, r7
    ee8c:	a80b      	add	r0, sp, #44	; 0x2c
    ee8e:	f016 ffae 	bl	25dee <strncat>
            strncat(printBuff, message, strlen(message));
    ee92:	4620      	mov	r0, r4
    ee94:	f016 ff7c 	bl	25d90 <strlen>
    ee98:	4621      	mov	r1, r4
    ee9a:	4602      	mov	r2, r0
    ee9c:	a80b      	add	r0, sp, #44	; 0x2c
    ee9e:	f016 ffa6 	bl	25dee <strncat>
            difference = 18 - strlen(printBuff);
    eea2:	a80b      	add	r0, sp, #44	; 0x2c
    eea4:	f016 ff74 	bl	25d90 <strlen>
            strncat(printBuff, spc, difference);
    eea8:	4639      	mov	r1, r7
    eeaa:	f1c0 0212 	rsb	r2, r0, #18
    eeae:	a80b      	add	r0, sp, #44	; 0x2c
    eeb0:	f016 ff9d 	bl	25dee <strncat>
            printk("small_print: %s  -- %s\n", message, printBuff);
    eeb4:	aa0b      	add	r2, sp, #44	; 0x2c
    eeb6:	4621      	mov	r1, r4
    eeb8:	4810      	ldr	r0, [pc, #64]	; (eefc <small_print+0xf0>)
    eeba:	f016 fe40 	bl	25b3e <printk>
            display_println(row, printBuff, Font8Bit, 12, 1, 8);
    eebe:	2301      	movs	r3, #1
    eec0:	2108      	movs	r1, #8
    eec2:	e9cd 3100 	strd	r3, r1, [sp]
    eec6:	230c      	movs	r3, #12
    eec8:	4a09      	ldr	r2, [pc, #36]	; (eef0 <small_print+0xe4>)
    eeca:	a90b      	add	r1, sp, #44	; 0x2c
                display_println(row, message, Font8Bit, 12, 1, 8);
    eecc:	4628      	mov	r0, r5
    eece:	f016 fa79 	bl	253c4 <display_println>
    };
    eed2:	e7d1      	b.n	ee78 <small_print+0x6c>
                printk("THIS: Just Right.\n");
    eed4:	480a      	ldr	r0, [pc, #40]	; (ef00 <small_print+0xf4>)
    eed6:	f016 fe32 	bl	25b3e <printk>
                display_println(row, message, Font8Bit, 12, 1, 8);
    eeda:	2301      	movs	r3, #1
    eedc:	2208      	movs	r2, #8
    eede:	4621      	mov	r1, r4
    eee0:	e9cd 3200 	strd	r3, r2, [sp]
    eee4:	230c      	movs	r3, #12
    eee6:	4a02      	ldr	r2, [pc, #8]	; (eef0 <small_print+0xe4>)
    eee8:	e7f0      	b.n	eecc <small_print+0xc0>
    eeea:	bf00      	nop
    eeec:	00027b30 	.word	0x00027b30
    eef0:	2002b5ee 	.word	0x2002b5ee
    eef4:	0002afb2 	.word	0x0002afb2
    eef8:	0002afc5 	.word	0x0002afc5
    eefc:	0002afd5 	.word	0x0002afd5
    ef00:	0002afed 	.word	0x0002afed

0000ef04 <medium_print>:

void medium_print(unsigned int column, unsigned int row, unsigned char message[36]){
    ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef08:	b094      	sub	sp, #80	; 0x50
    ef0a:	4614      	mov	r4, r2
    int difference;
    char spc[36] = "                  "; 
    ef0c:	aa02      	add	r2, sp, #8
void medium_print(unsigned int column, unsigned int row, unsigned char message[36]){
    ef0e:	4680      	mov	r8, r0
    ef10:	460d      	mov	r5, r1
    ef12:	4617      	mov	r7, r2
    char spc[36] = "                  "; 
    ef14:	4b33      	ldr	r3, [pc, #204]	; (efe4 <medium_print+0xe0>)
    ef16:	f103 0c10 	add.w	ip, r3, #16
    ef1a:	4616      	mov	r6, r2
    ef1c:	6818      	ldr	r0, [r3, #0]
    ef1e:	6859      	ldr	r1, [r3, #4]
    ef20:	3308      	adds	r3, #8
    ef22:	c603      	stmia	r6!, {r0, r1}
    ef24:	4563      	cmp	r3, ip
    ef26:	4632      	mov	r2, r6
    ef28:	d1f7      	bne.n	ef1a <medium_print+0x16>
    ef2a:	8819      	ldrh	r1, [r3, #0]
    ef2c:	789b      	ldrb	r3, [r3, #2]
    ef2e:	8031      	strh	r1, [r6, #0]
    ef30:	70b3      	strb	r3, [r6, #2]
    ef32:	2211      	movs	r2, #17
    ef34:	2100      	movs	r1, #0
    ef36:	f10d 001b 	add.w	r0, sp, #27
    ef3a:	f016 ffc1 	bl	25ec0 <memset>
    char printBuff[36] = "";
    ef3e:	2100      	movs	r1, #0
    ef40:	2220      	movs	r2, #32
    ef42:	a80c      	add	r0, sp, #48	; 0x30
    ef44:	910b      	str	r1, [sp, #44]	; 0x2c
    ef46:	f016 ffbb 	bl	25ec0 <memset>
    if(strlen(message) > 9){
    ef4a:	4620      	mov	r0, r4
    ef4c:	f016 ff20 	bl	25d90 <strlen>
    ef50:	2809      	cmp	r0, #9
    ef52:	b2ed      	uxtb	r5, r5
    ef54:	d90f      	bls.n	ef76 <medium_print+0x72>
        display_println(row, "Too Long0", Font16Bit, 32, 2, 16);  
    ef56:	2302      	movs	r3, #2
    ef58:	2010      	movs	r0, #16
    ef5a:	4a23      	ldr	r2, [pc, #140]	; (efe8 <medium_print+0xe4>)
    ef5c:	e9cd 3000 	strd	r3, r0, [sp]
    ef60:	4922      	ldr	r1, [pc, #136]	; (efec <medium_print+0xe8>)
    ef62:	4628      	mov	r0, r5
    ef64:	2320      	movs	r3, #32
    ef66:	f016 fa2d 	bl	253c4 <display_println>
        printk("THIS: TOO LONG\n");
    ef6a:	4821      	ldr	r0, [pc, #132]	; (eff0 <medium_print+0xec>)
    ef6c:	f016 fde7 	bl	25b3e <printk>
            display_println(row, printBuff, Font16Bit, 32, 2, 16);
            } else {
                printk("THIS: Just Right.\n");
                display_println(row, message, Font16Bit, 32, 2, 16);
                }
    };
    ef70:	b014      	add	sp, #80	; 0x50
    ef72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if(strlen(message) < 9){
    ef76:	4620      	mov	r0, r4
    ef78:	f016 ff0a 	bl	25d90 <strlen>
    ef7c:	2808      	cmp	r0, #8
    ef7e:	d825      	bhi.n	efcc <medium_print+0xc8>
            strncat(printBuff, spc, column);
    ef80:	4642      	mov	r2, r8
    ef82:	4639      	mov	r1, r7
    ef84:	a80b      	add	r0, sp, #44	; 0x2c
    ef86:	f016 ff32 	bl	25dee <strncat>
            strncat(printBuff, message, strlen(message));
    ef8a:	4620      	mov	r0, r4
    ef8c:	f016 ff00 	bl	25d90 <strlen>
    ef90:	4621      	mov	r1, r4
    ef92:	4602      	mov	r2, r0
    ef94:	a80b      	add	r0, sp, #44	; 0x2c
    ef96:	f016 ff2a 	bl	25dee <strncat>
            difference = 9 - strlen(printBuff);
    ef9a:	a80b      	add	r0, sp, #44	; 0x2c
    ef9c:	f016 fef8 	bl	25d90 <strlen>
            strncat(printBuff, spc, difference);
    efa0:	4639      	mov	r1, r7
    efa2:	f1c0 0209 	rsb	r2, r0, #9
    efa6:	a80b      	add	r0, sp, #44	; 0x2c
    efa8:	f016 ff21 	bl	25dee <strncat>
            printk("medium_print: %s  -- %s\n", message, printBuff);
    efac:	aa0b      	add	r2, sp, #44	; 0x2c
    efae:	4621      	mov	r1, r4
    efb0:	4810      	ldr	r0, [pc, #64]	; (eff4 <medium_print+0xf0>)
    efb2:	f016 fdc4 	bl	25b3e <printk>
            display_println(row, printBuff, Font16Bit, 32, 2, 16);
    efb6:	2302      	movs	r3, #2
    efb8:	2110      	movs	r1, #16
    efba:	e9cd 3100 	strd	r3, r1, [sp]
    efbe:	2320      	movs	r3, #32
    efc0:	4a09      	ldr	r2, [pc, #36]	; (efe8 <medium_print+0xe4>)
    efc2:	a90b      	add	r1, sp, #44	; 0x2c
                display_println(row, message, Font16Bit, 32, 2, 16);
    efc4:	4628      	mov	r0, r5
    efc6:	f016 f9fd 	bl	253c4 <display_println>
    };
    efca:	e7d1      	b.n	ef70 <medium_print+0x6c>
                printk("THIS: Just Right.\n");
    efcc:	480a      	ldr	r0, [pc, #40]	; (eff8 <medium_print+0xf4>)
    efce:	f016 fdb6 	bl	25b3e <printk>
                display_println(row, message, Font16Bit, 32, 2, 16);
    efd2:	2302      	movs	r3, #2
    efd4:	2210      	movs	r2, #16
    efd6:	4621      	mov	r1, r4
    efd8:	e9cd 3200 	strd	r3, r2, [sp]
    efdc:	2320      	movs	r3, #32
    efde:	4a02      	ldr	r2, [pc, #8]	; (efe8 <medium_print+0xe4>)
    efe0:	e7f0      	b.n	efc4 <medium_print+0xc0>
    efe2:	bf00      	nop
    efe4:	00027b30 	.word	0x00027b30
    efe8:	20028356 	.word	0x20028356
    efec:	0002af8f 	.word	0x0002af8f
    eff0:	0002afc5 	.word	0x0002afc5
    eff4:	0002af99 	.word	0x0002af99
    eff8:	0002afed 	.word	0x0002afed

0000effc <large_print>:

void large_print(unsigned int column, unsigned int row, unsigned char message[36]){
    effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f000:	b094      	sub	sp, #80	; 0x50
    f002:	4614      	mov	r4, r2
    int difference;
    char spc[36] = "                  "; 
    f004:	aa02      	add	r2, sp, #8
void large_print(unsigned int column, unsigned int row, unsigned char message[36]){
    f006:	4680      	mov	r8, r0
    f008:	460d      	mov	r5, r1
    f00a:	4617      	mov	r7, r2
    char spc[36] = "                  "; 
    f00c:	4b33      	ldr	r3, [pc, #204]	; (f0dc <large_print+0xe0>)
    f00e:	f103 0c10 	add.w	ip, r3, #16
    f012:	4616      	mov	r6, r2
    f014:	6818      	ldr	r0, [r3, #0]
    f016:	6859      	ldr	r1, [r3, #4]
    f018:	3308      	adds	r3, #8
    f01a:	c603      	stmia	r6!, {r0, r1}
    f01c:	4563      	cmp	r3, ip
    f01e:	4632      	mov	r2, r6
    f020:	d1f7      	bne.n	f012 <large_print+0x16>
    f022:	8819      	ldrh	r1, [r3, #0]
    f024:	789b      	ldrb	r3, [r3, #2]
    f026:	8031      	strh	r1, [r6, #0]
    f028:	70b3      	strb	r3, [r6, #2]
    f02a:	2211      	movs	r2, #17
    f02c:	2100      	movs	r1, #0
    f02e:	f10d 001b 	add.w	r0, sp, #27
    f032:	f016 ff45 	bl	25ec0 <memset>
    char printBuff[36] = "";
    f036:	2100      	movs	r1, #0
    f038:	2220      	movs	r2, #32
    f03a:	a80c      	add	r0, sp, #48	; 0x30
    f03c:	910b      	str	r1, [sp, #44]	; 0x2c
    f03e:	f016 ff3f 	bl	25ec0 <memset>
    if(strlen(message) > 5){
    f042:	4620      	mov	r0, r4
    f044:	f016 fea4 	bl	25d90 <strlen>
    f048:	2805      	cmp	r0, #5
    f04a:	b2ed      	uxtb	r5, r5
    f04c:	d90f      	bls.n	f06e <large_print+0x72>
        display_println(row, "LONG ", Font32Bit, 64, 4, 28);  
    f04e:	2304      	movs	r3, #4
    f050:	201c      	movs	r0, #28
    f052:	4a23      	ldr	r2, [pc, #140]	; (f0e0 <large_print+0xe4>)
    f054:	e9cd 3000 	strd	r3, r0, [sp]
    f058:	4922      	ldr	r1, [pc, #136]	; (f0e4 <large_print+0xe8>)
    f05a:	4628      	mov	r0, r5
    f05c:	2340      	movs	r3, #64	; 0x40
    f05e:	f016 f9b1 	bl	253c4 <display_println>
        printk("THIS: TOO LONG\n");
    f062:	4821      	ldr	r0, [pc, #132]	; (f0e8 <large_print+0xec>)
    f064:	f016 fd6b 	bl	25b3e <printk>
            display_println(row, printBuff, Font32Bit, 64, 4, 28);
            } else {
                printk("THIS: Just Right.\n");
                display_println(row, message, Font32Bit, 64, 4, 28);
                }
    };
    f068:	b014      	add	sp, #80	; 0x50
    f06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if(strlen(message) < 5){
    f06e:	4620      	mov	r0, r4
    f070:	f016 fe8e 	bl	25d90 <strlen>
    f074:	2804      	cmp	r0, #4
    f076:	d825      	bhi.n	f0c4 <large_print+0xc8>
            strncat(printBuff, spc, column);
    f078:	4642      	mov	r2, r8
    f07a:	4639      	mov	r1, r7
    f07c:	a80b      	add	r0, sp, #44	; 0x2c
    f07e:	f016 feb6 	bl	25dee <strncat>
            strncat(printBuff, message, strlen(message));
    f082:	4620      	mov	r0, r4
    f084:	f016 fe84 	bl	25d90 <strlen>
    f088:	4621      	mov	r1, r4
    f08a:	4602      	mov	r2, r0
    f08c:	a80b      	add	r0, sp, #44	; 0x2c
    f08e:	f016 feae 	bl	25dee <strncat>
            difference = 9 - strlen(printBuff);
    f092:	a80b      	add	r0, sp, #44	; 0x2c
    f094:	f016 fe7c 	bl	25d90 <strlen>
            strncat(printBuff, spc, difference);
    f098:	4639      	mov	r1, r7
    f09a:	f1c0 0209 	rsb	r2, r0, #9
    f09e:	a80b      	add	r0, sp, #44	; 0x2c
    f0a0:	f016 fea5 	bl	25dee <strncat>
            printk("large_print: %s  -- %s\n", message, printBuff);
    f0a4:	aa0b      	add	r2, sp, #44	; 0x2c
    f0a6:	4621      	mov	r1, r4
    f0a8:	4810      	ldr	r0, [pc, #64]	; (f0ec <large_print+0xf0>)
    f0aa:	f016 fd48 	bl	25b3e <printk>
            display_println(row, printBuff, Font32Bit, 64, 4, 28);
    f0ae:	2304      	movs	r3, #4
    f0b0:	211c      	movs	r1, #28
    f0b2:	e9cd 3100 	strd	r3, r1, [sp]
    f0b6:	2340      	movs	r3, #64	; 0x40
    f0b8:	4a09      	ldr	r2, [pc, #36]	; (f0e0 <large_print+0xe4>)
    f0ba:	a90b      	add	r1, sp, #44	; 0x2c
                display_println(row, message, Font32Bit, 64, 4, 28);
    f0bc:	4628      	mov	r0, r5
    f0be:	f016 f981 	bl	253c4 <display_println>
    };
    f0c2:	e7d1      	b.n	f068 <large_print+0x6c>
                printk("THIS: Just Right.\n");
    f0c4:	480a      	ldr	r0, [pc, #40]	; (f0f0 <large_print+0xf4>)
    f0c6:	f016 fd3a 	bl	25b3e <printk>
                display_println(row, message, Font32Bit, 64, 4, 28);
    f0ca:	2304      	movs	r3, #4
    f0cc:	221c      	movs	r2, #28
    f0ce:	4621      	mov	r1, r4
    f0d0:	e9cd 3200 	strd	r3, r2, [sp]
    f0d4:	2340      	movs	r3, #64	; 0x40
    f0d6:	4a02      	ldr	r2, [pc, #8]	; (f0e0 <large_print+0xe4>)
    f0d8:	e7f0      	b.n	f0bc <large_print+0xc0>
    f0da:	bf00      	nop
    f0dc:	00027b30 	.word	0x00027b30
    f0e0:	20029a16 	.word	0x20029a16
    f0e4:	0002af71 	.word	0x0002af71
    f0e8:	0002afc5 	.word	0x0002afc5
    f0ec:	0002af77 	.word	0x0002af77
    f0f0:	0002afed 	.word	0x0002afed

0000f0f4 <init_MT15>:
    uart_poll_out(uart_port, message[i]);
    }
}


void init_MT15(struct device *uart_port){ 
    f0f4:	b510      	push	{r4, lr}
    f0f6:	4604      	mov	r4, r0
  elva_uart_transmit(uart_port, "{M VERR}", 8); //firmware version
    f0f8:	2208      	movs	r2, #8
    f0fa:	490c      	ldr	r1, [pc, #48]	; (f12c <init_MT15+0x38>)
    f0fc:	f016 f9a7 	bl	2544e <elva_uart_transmit>
  elva_uart_transmit(uart_port, "{MR001W2}", 9); //Reading Mode: Trigger mode. LED active LOW
    f100:	4620      	mov	r0, r4
    f102:	2209      	movs	r2, #9
    f104:	490a      	ldr	r1, [pc, #40]	; (f130 <init_MT15+0x3c>)
    f106:	f016 f9a2 	bl	2544e <elva_uart_transmit>
  elva_uart_transmit(uart_port, "{MG015W1,#5B}", 13); //set Preamble byte '['.   
    f10a:	4620      	mov	r0, r4
    f10c:	220d      	movs	r2, #13
    f10e:	4909      	ldr	r1, [pc, #36]	; (f134 <init_MT15+0x40>)
    f110:	f016 f99d 	bl	2544e <elva_uart_transmit>
  elva_uart_transmit(uart_port, "{MG017W1,#5D}", 13); //set end byte ']'. 
    f114:	4620      	mov	r0, r4
    f116:	220d      	movs	r2, #13
    f118:	4907      	ldr	r1, [pc, #28]	; (f138 <init_MT15+0x44>)
    f11a:	f016 f998 	bl	2544e <elva_uart_transmit>
  elva_uart_transmit(uart_port, "{MT007W0,1}", 11); //time to sleep mode (1 secs) . 
    f11e:	4620      	mov	r0, r4
}
    f120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  elva_uart_transmit(uart_port, "{MT007W0,1}", 11); //time to sleep mode (1 secs) . 
    f124:	220b      	movs	r2, #11
    f126:	4905      	ldr	r1, [pc, #20]	; (f13c <init_MT15+0x48>)
    f128:	f016 b991 	b.w	2544e <elva_uart_transmit>
    f12c:	0002b01f 	.word	0x0002b01f
    f130:	0002b028 	.word	0x0002b028
    f134:	0002b032 	.word	0x0002b032
    f138:	0002b040 	.word	0x0002b040
    f13c:	0002b04e 	.word	0x0002b04e

0000f140 <init_elva_gpio>:

void sayHello2(void){
  printk("\nhello from elva initilaizer\n");
  }

void init_elva_gpio(void){ //(struct device* gpio_port){
    f140:	b510      	push	{r4, lr}
    f142:	4826      	ldr	r0, [pc, #152]	; (f1dc <init_elva_gpio+0x9c>)
    f144:	f012 fd4e 	bl	21be4 <z_impl_device_get_binding>
  dev = device_get_binding("GPIO_0");
    f148:	4c25      	ldr	r4, [pc, #148]	; (f1e0 <init_elva_gpio+0xa0>)

  /*--Set LED pin as output--*/
  gpio_pin_configure(dev, 6, GPIO_DIR_IN); //p0.27 ==> BUTTON A
    f14a:	2200      	movs	r2, #0
    f14c:	2106      	movs	r1, #6
  dev = device_get_binding("GPIO_0");
    f14e:	6020      	str	r0, [r4, #0]
  gpio_pin_configure(dev, 6, GPIO_DIR_IN); //p0.27 ==> BUTTON A
    f150:	f016 f998 	bl	25484 <gpio_pin_configure>
  gpio_pin_configure(dev, 7, GPIO_DIR_IN); //p0.07 ==> BUTTON B
    f154:	2200      	movs	r2, #0
    f156:	2107      	movs	r1, #7
    f158:	6820      	ldr	r0, [r4, #0]
    f15a:	f016 f993 	bl	25484 <gpio_pin_configure>

  gpio_pin_configure(dev, DISPLAY, GPIO_DIR_OUT); //p0.27 ==> display on/off
    f15e:	2201      	movs	r2, #1
    f160:	211b      	movs	r1, #27
    f162:	6820      	ldr	r0, [r4, #0]
    f164:	f016 f98e 	bl	25484 <gpio_pin_configure>

  gpio_pin_configure(dev, SCANNER, GPIO_DIR_OUT); //p0.21 ==> Scanner trigger
    f168:	2201      	movs	r2, #1
    f16a:	2115      	movs	r1, #21
    f16c:	6820      	ldr	r0, [r4, #0]
    f16e:	f016 f989 	bl	25484 <gpio_pin_configure>

  gpio_pin_configure(dev, LED_GRN, GPIO_DIR_OUT); //p0.16 ==> LED1
    f172:	2201      	movs	r2, #1
    f174:	2110      	movs	r1, #16
    f176:	6820      	ldr	r0, [r4, #0]
    f178:	f016 f984 	bl	25484 <gpio_pin_configure>
  gpio_pin_configure(dev, 17, GPIO_DIR_OUT); //p0.17 ==> LED2
    f17c:	2201      	movs	r2, #1
    f17e:	2111      	movs	r1, #17
    f180:	6820      	ldr	r0, [r4, #0]
    f182:	f016 f97f 	bl	25484 <gpio_pin_configure>

  gpio_pin_configure(dev, 19, GPIO_DIR_OUT); //p0.19 ==> Buzzer
    f186:	2201      	movs	r2, #1
    f188:	2113      	movs	r1, #19
    f18a:	6820      	ldr	r0, [r4, #0]
    f18c:	f016 f97a 	bl	25484 <gpio_pin_configure>

  gpio_pin_configure(dev, 12, GPIO_DIR_OUT); //p0.12 ==> vibrator trigger
    f190:	2201      	movs	r2, #1
    f192:	210c      	movs	r1, #12
    f194:	6820      	ldr	r0, [r4, #0]
    f196:	f016 f975 	bl	25484 <gpio_pin_configure>

  gpio_pin_write(dev, DISPLAY, 1); //p0.27 ==> display on/off
    f19a:	2201      	movs	r2, #1
    f19c:	211b      	movs	r1, #27
    f19e:	6820      	ldr	r0, [r4, #0]
    f1a0:	f016 f966 	bl	25470 <gpio_pin_write>
  gpio_pin_write(dev, SCANNER, 1);
    f1a4:	2201      	movs	r2, #1
    f1a6:	2115      	movs	r1, #21
    f1a8:	6820      	ldr	r0, [r4, #0]
    f1aa:	f016 f961 	bl	25470 <gpio_pin_write>
  gpio_pin_write(dev, 16, 1); //p0.03 == LED2
    f1ae:	2201      	movs	r2, #1
    f1b0:	2110      	movs	r1, #16
    f1b2:	6820      	ldr	r0, [r4, #0]
    f1b4:	f016 f95c 	bl	25470 <gpio_pin_write>
  gpio_pin_write(dev, 17, 1); //p0.03 == LED2
    f1b8:	2201      	movs	r2, #1
    f1ba:	2111      	movs	r1, #17
    f1bc:	6820      	ldr	r0, [r4, #0]
    f1be:	f016 f957 	bl	25470 <gpio_pin_write>
  gpio_pin_write(dev, 19, 0); //p0.19 == Buzzer
    f1c2:	2200      	movs	r2, #0
    f1c4:	2113      	movs	r1, #19
    f1c6:	6820      	ldr	r0, [r4, #0]
    f1c8:	f016 f952 	bl	25470 <gpio_pin_write>
  gpio_pin_write(dev, 12, 0); //p0.12 ==> vibrator trigger
    f1cc:	6820      	ldr	r0, [r4, #0]
    f1ce:	2200      	movs	r2, #0
}
    f1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_write(dev, 12, 0); //p0.12 ==> vibrator trigger
    f1d4:	210c      	movs	r1, #12
    f1d6:	f016 b94b 	b.w	25470 <gpio_pin_write>
    f1da:	bf00      	nop
    f1dc:	0002a7a4 	.word	0x0002a7a4
    f1e0:	20020138 	.word	0x20020138

0000f1e4 <vibrate>:


void vibrate(bool toggle){
    gpio_pin_write(dev, 12, toggle);
    f1e4:	4b02      	ldr	r3, [pc, #8]	; (f1f0 <vibrate+0xc>)
    f1e6:	4602      	mov	r2, r0
    f1e8:	210c      	movs	r1, #12
    f1ea:	6818      	ldr	r0, [r3, #0]
    f1ec:	f016 b940 	b.w	25470 <gpio_pin_write>
    f1f0:	20020138 	.word	0x20020138

0000f1f4 <init_elva_i2c>:
};


void init_elva_i2c(void){
    f1f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f1f8:	481c      	ldr	r0, [pc, #112]	; (f26c <init_elva_i2c+0x78>)
    f1fa:	b085      	sub	sp, #20
    f1fc:	f012 fcf2 	bl	21be4 <z_impl_device_get_binding>
	return api->configure(dev, dev_config);
    f200:	6843      	ldr	r3, [r0, #4]
        i2c_dev = device_get_binding(I2C_DEV);
    f202:	4d1b      	ldr	r5, [pc, #108]	; (f270 <init_elva_i2c+0x7c>)
    f204:	681b      	ldr	r3, [r3, #0]
    f206:	2102      	movs	r1, #2
    f208:	6028      	str	r0, [r5, #0]
    f20a:	4798      	blx	r3
    f20c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    f210:	f014 fbdc 	bl	239cc <z_impl_k_sleep>
        i2c_configure(i2c_dev, I2C_SPEED_SET(I2C_SPEED_STANDARD));
        //scan for i2c devices.
        k_sleep(500);
	printk("Starting i2c scanner...\n");
    f214:	4817      	ldr	r0, [pc, #92]	; (f274 <init_elva_i2c+0x80>)
    f216:	f016 fc92 	bl	25b3e <printk>

	if (!i2c_dev) {
    f21a:	682b      	ldr	r3, [r5, #0]
    f21c:	b92b      	cbnz	r3, f22a <init_elva_i2c+0x36>
		printk("I2C: Device driver not found.\n");
    f21e:	4816      	ldr	r0, [pc, #88]	; (f278 <init_elva_i2c+0x84>)
    f220:	f016 fc8d 	bl	25b3e <printk>
                  printk("0x%2x FOUND\n", i);
		} else {

		}
	}
}
    f224:	b005      	add	sp, #20
    f226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f22a:	2404      	movs	r4, #4
		u8_t dst = 1;
    f22c:	2601      	movs	r6, #1
                  printk("0x%2x FOUND\n", i);
    f22e:	f8df 804c 	ldr.w	r8, [pc, #76]	; f27c <init_elva_i2c+0x88>
		msgs[0].buf = &dst;
    f232:	f10d 0703 	add.w	r7, sp, #3
		msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    f236:	2302      	movs	r3, #2
		error = i2c_transfer(i2c_dev, &msgs[0], 1, i);
    f238:	6828      	ldr	r0, [r5, #0]
		msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    f23a:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    f23e:	6843      	ldr	r3, [r0, #4]
		u8_t dst = 1;
    f240:	f88d 6003 	strb.w	r6, [sp, #3]
    f244:	f8d3 9004 	ldr.w	r9, [r3, #4]
		msgs[0].len = 1U;
    f248:	e9cd 7601 	strd	r7, r6, [sp, #4]
    f24c:	b2a3      	uxth	r3, r4
    f24e:	2201      	movs	r2, #1
    f250:	a901      	add	r1, sp, #4
    f252:	47c8      	blx	r9
		if (error == 0) {
    f254:	f010 0fff 	tst.w	r0, #255	; 0xff
    f258:	d103      	bne.n	f262 <init_elva_i2c+0x6e>
                  printk("0x%2x FOUND\n", i);
    f25a:	4621      	mov	r1, r4
    f25c:	4640      	mov	r0, r8
    f25e:	f016 fc6e 	bl	25b3e <printk>
    f262:	3401      	adds	r4, #1
	for (u8_t i = 4; i <= 0x77; i++) {
    f264:	2c78      	cmp	r4, #120	; 0x78
    f266:	d1e6      	bne.n	f236 <init_elva_i2c+0x42>
    f268:	e7dc      	b.n	f224 <init_elva_i2c+0x30>
    f26a:	bf00      	nop
    f26c:	0002a7ab 	.word	0x0002a7ab
    f270:	2002013c 	.word	0x2002013c
    f274:	0002b05a 	.word	0x0002b05a
    f278:	0002b073 	.word	0x0002b073
    f27c:	0002b092 	.word	0x0002b092

0000f280 <write_command>:
/*global variables. */
char write_byte = 9;
char read_byte  = 9; 
uint8_t error = 0u;

int write_command(char *send_bytes[3], int num_bytes){ 
    f280:	b530      	push	{r4, r5, lr}
    f282:	4605      	mov	r5, r0
    f284:	b085      	sub	sp, #20
    f286:	480c      	ldr	r0, [pc, #48]	; (f2b8 <write_command+0x38>)
    f288:	460c      	mov	r4, r1
    f28a:	f012 fcab 	bl	21be4 <z_impl_device_get_binding>
    i2c_dev = device_get_binding(I2C_DEV);
    f28e:	4a0b      	ldr	r2, [pc, #44]	; (f2bc <write_command+0x3c>)
	msg.len = num_bytes;
    f290:	e9cd 5401 	strd	r5, r4, [sp, #4]
    f294:	6010      	str	r0, [r2, #0]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    f296:	2202      	movs	r2, #2
    f298:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    f29c:	6843      	ldr	r3, [r0, #4]
    f29e:	2201      	movs	r2, #1
    f2a0:	685c      	ldr	r4, [r3, #4]
    f2a2:	a901      	add	r1, sp, #4
    f2a4:	2355      	movs	r3, #85	; 0x55
    f2a6:	47a0      	blx	r4
    i2c_write(i2c_dev, &send_bytes[0], num_bytes, ADDRESS);
    if(error == 0){
    f2a8:	4b05      	ldr	r3, [pc, #20]	; (f2c0 <write_command+0x40>)
    f2aa:	7818      	ldrb	r0, [r3, #0]
        return error; //i2c write success.
        } else {
              return 1; //i2c write fail.
              }
    }
    f2ac:	3000      	adds	r0, #0
    f2ae:	bf18      	it	ne
    f2b0:	2001      	movne	r0, #1
    f2b2:	b005      	add	sp, #20
    f2b4:	bd30      	pop	{r4, r5, pc}
    f2b6:	bf00      	nop
    f2b8:	0002a7ab 	.word	0x0002a7ab
    f2bc:	20020140 	.word	0x20020140
    f2c0:	2002362b 	.word	0x2002362b

0000f2c4 <read_command>:


int read_command(char *command_bytes[2], int num_command_bytes, int num_read_bytes){
    f2c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    char incoming_bytes[2] = {NULL, NULL};
    f2c6:	2300      	movs	r3, #0
int read_command(char *command_bytes[2], int num_command_bytes, int num_read_bytes){
    f2c8:	4616      	mov	r6, r2
    char incoming_bytes[2] = {NULL, NULL};
    f2ca:	f8ad 3000 	strh.w	r3, [sp]
    int read_data = NULL;
    //send command byte(s) to battery BQ27441.
    error = write_command(&command_bytes[0], num_command_bytes);
    f2ce:	f7ff ffd7 	bl	f280 <write_command>
    f2d2:	4d0e      	ldr	r5, [pc, #56]	; (f30c <read_command+0x48>)
    f2d4:	b2c4      	uxtb	r4, r0
    f2d6:	702c      	strb	r4, [r5, #0]
    if(error == 0){
    f2d8:	b9a4      	cbnz	r4, f304 <read_command+0x40>
        //read incoming byte(s) from BQ27441.
        error = i2c_read(i2c_dev, &incoming_bytes[0], num_read_bytes, ADDRESS); //read bytes
    f2da:	4b0d      	ldr	r3, [pc, #52]	; (f310 <read_command+0x4c>)
			   u32_t num_bytes, u16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
    f2dc:	9602      	str	r6, [sp, #8]
    f2de:	6818      	ldr	r0, [r3, #0]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    f2e0:	2303      	movs	r3, #3
    f2e2:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    f2e6:	6843      	ldr	r3, [r0, #4]
	msg.buf = buf;
    f2e8:	f8cd d004 	str.w	sp, [sp, #4]
	return api->transfer(dev, msgs, num_msgs, addr);
    f2ec:	685e      	ldr	r6, [r3, #4]
    f2ee:	2201      	movs	r2, #1
    f2f0:	2355      	movs	r3, #85	; 0x55
    f2f2:	a901      	add	r1, sp, #4
    f2f4:	47b0      	blx	r6
    f2f6:	b2c0      	uxtb	r0, r0
    f2f8:	7028      	strb	r0, [r5, #0]
        if(error == 0){
    f2fa:	b928      	cbnz	r0, f308 <read_command+0x44>
            //Return read data as interger (16bit) variable.
            read_data = (incoming_bytes[1] << 8);
            read_data = (incoming_bytes[0] | read_data);
    f2fc:	f8bd 0000 	ldrh.w	r0, [sp]
                  }
        //write failure report
        } else {
              return 1; //i2c write failed.
              }
    }
    f300:	b004      	add	sp, #16
    f302:	bd70      	pop	{r4, r5, r6, pc}
              return 1; //i2c write failed.
    f304:	2001      	movs	r0, #1
    f306:	e7fb      	b.n	f300 <read_command+0x3c>
                  return 0; //i2c read failed.
    f308:	4620      	mov	r0, r4
    f30a:	e7f9      	b.n	f300 <read_command+0x3c>
    f30c:	2002362b 	.word	0x2002362b
    f310:	20020140 	.word	0x20020140

0000f314 <bat_voltage>:
    return read_command(&byte, 1, 1);
    }


int bat_voltage(void){
    return read_command(&Voltage, 1, 2);
    f314:	2202      	movs	r2, #2
    f316:	2101      	movs	r1, #1
    f318:	4801      	ldr	r0, [pc, #4]	; (f320 <bat_voltage+0xc>)
    f31a:	f7ff bfd3 	b.w	f2c4 <read_command>
    f31e:	bf00      	nop
    f320:	2002ba3c 	.word	0x2002ba3c

0000f324 <bat_FCC>:
    }

int bat_FCC(void){
    return read_command(&FullChargeCapacity, 1, 2);
    f324:	2202      	movs	r2, #2
    f326:	2101      	movs	r1, #1
    f328:	4801      	ldr	r0, [pc, #4]	; (f330 <bat_FCC+0xc>)
    f32a:	f7ff bfcb 	b.w	f2c4 <read_command>
    f32e:	bf00      	nop
    f330:	2002ba38 	.word	0x2002ba38

0000f334 <bat_SOC>:
    }

int bat_SOC(void){
    return read_command(&StateOfCharge, 1, 1);
    f334:	2201      	movs	r2, #1
    f336:	4802      	ldr	r0, [pc, #8]	; (f340 <bat_SOC+0xc>)
    f338:	4611      	mov	r1, r2
    f33a:	f7ff bfc3 	b.w	f2c4 <read_command>
    f33e:	bf00      	nop
    f340:	2002ba3a 	.word	0x2002ba3a

0000f344 <bat_SOCUF>:
    }


int bat_SOCUF(void){
    return read_command(&StateOfChargeUnfiltered, 1, 1);
    f344:	2201      	movs	r2, #1
    f346:	4802      	ldr	r0, [pc, #8]	; (f350 <bat_SOCUF+0xc>)
    f348:	4611      	mov	r1, r2
    f34a:	f7ff bfbb 	b.w	f2c4 <read_command>
    f34e:	bf00      	nop
    f350:	2002ba3b 	.word	0x2002ba3b

0000f354 <bat_AverageCurrent>:
    }
        
int bat_AverageCurrent(void){    
    return read_command(&AverageCurrent, 1, 1);
    f354:	2201      	movs	r2, #1
    f356:	4802      	ldr	r0, [pc, #8]	; (f360 <bat_AverageCurrent+0xc>)
    f358:	4611      	mov	r1, r2
    f35a:	f7ff bfb3 	b.w	f2c4 <read_command>
    f35e:	bf00      	nop
    f360:	2002ba32 	.word	0x2002ba32

0000f364 <bat_OpConfig>:
    }
       

int bat_OpConfig(void){
    return read_command(&OpConfig, 1, 1);
    f364:	2201      	movs	r2, #1
    f366:	4802      	ldr	r0, [pc, #8]	; (f370 <bat_OpConfig+0xc>)
    f368:	4611      	mov	r1, r2
    f36a:	f7ff bfab 	b.w	f2c4 <read_command>
    f36e:	bf00      	nop
    f370:	2002ba39 	.word	0x2002ba39

0000f374 <blockDataControl>:
////////////////////////////
/* EXTENDED DATA COMMANDS */
////////////////////////////

/* Issue a BlockDataControl() command to enable BlockData access. */
bool blockDataControl(void){
    f374:	b507      	push	{r0, r1, r2, lr}
    //char sub_address = BlockDataControl; 
    char enable_byte = 0x00;         
    char bytes[2] = {BlockDataControl, enable_byte};
    f376:	4b08      	ldr	r3, [pc, #32]	; (f398 <blockDataControl+0x24>)
    return write_command(&bytes[0], 2);
    f378:	2102      	movs	r1, #2
    char bytes[2] = {BlockDataControl, enable_byte};
    f37a:	781b      	ldrb	r3, [r3, #0]
    return write_command(&bytes[0], 2);
    f37c:	a801      	add	r0, sp, #4
    char bytes[2] = {BlockDataControl, enable_byte};
    f37e:	f88d 3004 	strb.w	r3, [sp, #4]
    f382:	2300      	movs	r3, #0
    f384:	f88d 3005 	strb.w	r3, [sp, #5]
    return write_command(&bytes[0], 2);
    f388:	f7ff ff7a 	bl	f280 <write_command>
    }
    f38c:	3000      	adds	r0, #0
    f38e:	bf18      	it	ne
    f390:	2001      	movne	r0, #1
    f392:	b003      	add	sp, #12
    f394:	f85d fb04 	ldr.w	pc, [sp], #4
    f398:	2002ba35 	.word	0x2002ba35

0000f39c <blockDataClass>:

/* Issue a DataClass() command to set the data class to be accessed. */
bool blockDataClass(char id){
    f39c:	b507      	push	{r0, r1, r2, lr}
    char bytes[2] = {DataBlock, id};
    f39e:	4b08      	ldr	r3, [pc, #32]	; (f3c0 <blockDataClass+0x24>)
    f3a0:	f88d 0005 	strb.w	r0, [sp, #5]
    f3a4:	781b      	ldrb	r3, [r3, #0]
    return write_command(&bytes[0], 2);
    f3a6:	2102      	movs	r1, #2
    f3a8:	a801      	add	r0, sp, #4
    char bytes[2] = {DataBlock, id};
    f3aa:	f88d 3004 	strb.w	r3, [sp, #4]
    return write_command(&bytes[0], 2);
    f3ae:	f7ff ff67 	bl	f280 <write_command>
    }
    f3b2:	3000      	adds	r0, #0
    f3b4:	bf18      	it	ne
    f3b6:	2001      	movne	r0, #1
    f3b8:	b003      	add	sp, #12
    f3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f3be:	bf00      	nop
    f3c0:	2002ba36 	.word	0x2002ba36

0000f3c4 <blockDataChecksum>:
    }

/* Read the current checksum using BlockDataCheckSum(). */
char blockDataChecksum(void){
    char csum;
    csum = read_command(&BlockDataCheckSum, 1, 1);
    f3c4:	2201      	movs	r2, #1
char blockDataChecksum(void){
    f3c6:	b508      	push	{r3, lr}
    csum = read_command(&BlockDataCheckSum, 1, 1);
    f3c8:	4611      	mov	r1, r2
    f3ca:	4802      	ldr	r0, [pc, #8]	; (f3d4 <blockDataChecksum+0x10>)
    f3cc:	f7ff ff7a 	bl	f2c4 <read_command>
    return csum;
    }
    f3d0:	b2c0      	uxtb	r0, r0
    f3d2:	bd08      	pop	{r3, pc}
    f3d4:	2002ba34 	.word	0x2002ba34

0000f3d8 <writeBlockData>:
    char address = offset + BlockData;
    ret = read_command(&address, 1, 1);
    }

/* Use BlockData() to write a byte to an offset of the loaded data. */
bool writeBlockData(char offset, char data){
    f3d8:	b507      	push	{r0, r1, r2, lr}
    char address = offset + BlockData;
    f3da:	4b08      	ldr	r3, [pc, #32]	; (f3fc <writeBlockData+0x24>)
    char bytes[2] = {address, data};
    f3dc:	f88d 1005 	strb.w	r1, [sp, #5]
    char address = offset + BlockData;
    f3e0:	781b      	ldrb	r3, [r3, #0]
    return write_command(&bytes, 2);
    f3e2:	2102      	movs	r1, #2
    char address = offset + BlockData;
    f3e4:	4418      	add	r0, r3
    char bytes[2] = {address, data};
    f3e6:	f88d 0004 	strb.w	r0, [sp, #4]
    return write_command(&bytes, 2);
    f3ea:	a801      	add	r0, sp, #4
    f3ec:	f7ff ff48 	bl	f280 <write_command>
    }
    f3f0:	3000      	adds	r0, #0
    f3f2:	bf18      	it	ne
    f3f4:	2001      	movne	r0, #1
    f3f6:	b003      	add	sp, #12
    f3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fc:	2002ba33 	.word	0x2002ba33

0000f400 <computeBlockCheckSum>:

/* Read all 32 bytes of the loaded extended data and compute a
   checksum based on the values. */
char computeBlockCheckSum(void){
    f400:	b530      	push	{r4, r5, lr}
    char data[32];
    //char bytes[2] = {BlockData, data}; 
    //I2C read wrtire.
    error = write_command(&BlockData, 1);
    f402:	2101      	movs	r1, #1
char computeBlockCheckSum(void){
    f404:	b08d      	sub	sp, #52	; 0x34
    error = write_command(&BlockData, 1);
    f406:	4811      	ldr	r0, [pc, #68]	; (f44c <computeBlockCheckSum+0x4c>)
    f408:	f7ff ff3a 	bl	f280 <write_command>
    f40c:	4b10      	ldr	r3, [pc, #64]	; (f450 <computeBlockCheckSum+0x50>)
    f40e:	b2c0      	uxtb	r0, r0
    f410:	7018      	strb	r0, [r3, #0]
    f412:	ac04      	add	r4, sp, #16
    if(error == 0){
    f414:	b968      	cbnz	r0, f432 <computeBlockCheckSum+0x32>
        //read incoming byte(s) from BQ27441.
        i2c_read(i2c_dev, &data[0], 32, ADDRESS); //read bytes
    f416:	4b0f      	ldr	r3, [pc, #60]	; (f454 <computeBlockCheckSum+0x54>)
	msg.buf = buf;
    f418:	9401      	str	r4, [sp, #4]
    f41a:	6818      	ldr	r0, [r3, #0]
	msg.len = num_bytes;
    f41c:	2320      	movs	r3, #32
    f41e:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    f420:	2303      	movs	r3, #3
    f422:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    f426:	6843      	ldr	r3, [r0, #4]
    f428:	2201      	movs	r2, #1
    f42a:	685d      	ldr	r5, [r3, #4]
    f42c:	a901      	add	r1, sp, #4
    f42e:	2355      	movs	r3, #85	; 0x55
    f430:	47a8      	blx	r5
        }

    char csum = 0;
    for (int i=0; i<32; i++){
    f432:	2300      	movs	r3, #0
    char csum = 0;
    f434:	4618      	mov	r0, r3
        csum += data[i];
    f436:	5ce2      	ldrb	r2, [r4, r3]
    for (int i=0; i<32; i++){
    f438:	3301      	adds	r3, #1
        csum += data[i];
    f43a:	4410      	add	r0, r2
    for (int i=0; i<32; i++){
    f43c:	2b20      	cmp	r3, #32
        csum += data[i];
    f43e:	b2c0      	uxtb	r0, r0
    for (int i=0; i<32; i++){
    f440:	d1f9      	bne.n	f436 <computeBlockCheckSum+0x36>
        }
    csum = 255 - csum;
    f442:	43c0      	mvns	r0, r0
    return csum;
    }
    f444:	b2c0      	uxtb	r0, r0
    f446:	b00d      	add	sp, #52	; 0x34
    f448:	bd30      	pop	{r4, r5, pc}
    f44a:	bf00      	nop
    f44c:	2002ba33 	.word	0x2002ba33
    f450:	2002362b 	.word	0x2002362b
    f454:	20020140 	.word	0x20020140

0000f458 <writeBlockChecksum>:

/* Use the BlockDataCheckSum() command to write a checksum value. */
bool writeBlockChecksum(char csum){
    f458:	b507      	push	{r0, r1, r2, lr}
    char bytes[2] = {BlockDataCheckSum, csum};
    f45a:	4b08      	ldr	r3, [pc, #32]	; (f47c <writeBlockChecksum+0x24>)
    f45c:	f88d 0005 	strb.w	r0, [sp, #5]
    f460:	781b      	ldrb	r3, [r3, #0]
    return write_command(&bytes[0], 2); 
    f462:	2102      	movs	r1, #2
    f464:	a801      	add	r0, sp, #4
    char bytes[2] = {BlockDataCheckSum, csum};
    f466:	f88d 3004 	strb.w	r3, [sp, #4]
    return write_command(&bytes[0], 2); 
    f46a:	f7ff ff09 	bl	f280 <write_command>
    }
    f46e:	3000      	adds	r0, #0
    f470:	bf18      	it	ne
    f472:	2001      	movne	r0, #1
    f474:	b003      	add	sp, #12
    f476:	f85d fb04 	ldr.w	pc, [sp], #4
    f47a:	bf00      	nop
    f47c:	2002ba34 	.word	0x2002ba34

0000f480 <flags>:
            }	
    }

// Read the flags() command
int flags(void){
    return read_command(&Flags, 1, 2);
    f480:	2202      	movs	r2, #2
    f482:	2101      	movs	r1, #1
    f484:	4801      	ldr	r0, [pc, #4]	; (f48c <flags+0xc>)
    f486:	f7ff bf1d 	b.w	f2c4 <read_command>
    f48a:	bf00      	nop
    f48c:	2002ba37 	.word	0x2002ba37

0000f490 <status>:
}

/* Read the control status (char Control) subcommand of control(). */
int status(void){
    return readControlWord(&Control);
    f490:	4801      	ldr	r0, [pc, #4]	; (f498 <status+0x8>)
    f492:	f016 b80d 	b.w	254b0 <readControlWord>
    f496:	bf00      	nop
    f498:	20023628 	.word	0x20023628

0000f49c <exitConfig>:
bool exitConfig(bool resim){
    f49c:	b538      	push	{r3, r4, r5, lr}
    if (resim){
    f49e:	b1e8      	cbz	r0, f4dc <exitConfig+0x40>
        if (softReset()){
    f4a0:	f016 f830 	bl	25504 <softReset>
    f4a4:	4604      	mov	r4, r0
    f4a6:	b9b0      	cbnz	r0, f4d6 <exitConfig+0x3a>
	return false;
    f4a8:	2400      	movs	r4, #0
    }
    f4aa:	4620      	mov	r0, r4
    f4ac:	bd38      	pop	{r3, r4, r5, pc}
    f4ae:	2001      	movs	r0, #1
    f4b0:	f014 fa8c 	bl	239cc <z_impl_k_sleep>
            while ((timeout--) && ((flags() & FLAG_CFGUPMODE))) k_sleep(1);
    f4b4:	f115 35ff 	adds.w	r5, r5, #4294967295
    f4b8:	d3f6      	bcc.n	f4a8 <exitConfig+0xc>
    f4ba:	f7ff ffe1 	bl	f480 <flags>
    f4be:	06c3      	lsls	r3, r0, #27
    f4c0:	d4f5      	bmi.n	f4ae <exitConfig+0x12>
                if (timeout > 0){
    f4c2:	2d00      	cmp	r5, #0
    f4c4:	d0f0      	beq.n	f4a8 <exitConfig+0xc>
                    if (SEAL_FLAG) seal(); // Seal back up if we IC was sealed coming in
    f4c6:	4b08      	ldr	r3, [pc, #32]	; (f4e8 <exitConfig+0x4c>)
    f4c8:	781d      	ldrb	r5, [r3, #0]
    f4ca:	2d00      	cmp	r5, #0
    f4cc:	d0ed      	beq.n	f4aa <exitConfig+0xe>
    f4ce:	f016 f822 	bl	25516 <seal>
    f4d2:	462c      	mov	r4, r5
    f4d4:	e7e9      	b.n	f4aa <exitConfig+0xe>
            int timeout = I2C_TIMEOUT;
    f4d6:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    f4da:	e7eb      	b.n	f4b4 <exitConfig+0x18>
            return executeControlWord(CONTROL_EXIT_CFGUPDATE);
    f4dc:	2043      	movs	r0, #67	; 0x43
    }
    f4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return executeControlWord(CONTROL_EXIT_CFGUPDATE);
    f4e2:	f015 bffc 	b.w	254de <executeControlWord>
    f4e6:	bf00      	nop
    f4e8:	20023629 	.word	0x20023629

0000f4ec <enterConfig>:
bool enterConfig(bool userControl){
    f4ec:	b510      	push	{r4, lr}
    if(userControl) USER_CONFIG_CONTROL = true;
    f4ee:	b110      	cbz	r0, f4f6 <enterConfig+0xa>
    f4f0:	2201      	movs	r2, #1
    f4f2:	4b11      	ldr	r3, [pc, #68]	; (f538 <enterConfig+0x4c>)
    f4f4:	701a      	strb	r2, [r3, #0]
    if (sealed()){
    f4f6:	f016 f808 	bl	2550a <sealed>
    f4fa:	b120      	cbz	r0, f506 <enterConfig+0x1a>
        SEAL_FLAG = true;
    f4fc:	2201      	movs	r2, #1
    f4fe:	4b0f      	ldr	r3, [pc, #60]	; (f53c <enterConfig+0x50>)
    f500:	701a      	strb	r2, [r3, #0]
        unseal(); //must be unsealed beforemaking changes.
    f502:	f016 f810 	bl	25526 <unseal>
    if(executeControlWord(CONTROL_SET_CFGUPDATE)){
    f506:	2013      	movs	r0, #19
    f508:	f015 ffe9 	bl	254de <executeControlWord>
    f50c:	b980      	cbnz	r0, f530 <enterConfig+0x44>
    return false;
    f50e:	2000      	movs	r0, #0
    }
    f510:	bd10      	pop	{r4, pc}
    f512:	2001      	movs	r0, #1
    f514:	f014 fa5a 	bl	239cc <z_impl_k_sleep>
	while ((timeout--) && (!(status() & FLAG_CFGUPMODE)))
    f518:	f114 34ff 	adds.w	r4, r4, #4294967295
    f51c:	d3f7      	bcc.n	f50e <enterConfig+0x22>
    f51e:	f7ff ffb7 	bl	f490 <status>
    f522:	06c3      	lsls	r3, r0, #27
    f524:	d5f5      	bpl.n	f512 <enterConfig+0x26>
	if (timeout > 0)
    f526:	2c00      	cmp	r4, #0
    f528:	bfd4      	ite	le
    f52a:	2000      	movle	r0, #0
    f52c:	2001      	movgt	r0, #1
    f52e:	e7ef      	b.n	f510 <enterConfig+0x24>
        int timeout = I2C_TIMEOUT;
    f530:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    f534:	e7f0      	b.n	f518 <enterConfig+0x2c>
    f536:	bf00      	nop
    f538:	2002362a 	.word	0x2002362a
    f53c:	20023629 	.word	0x20023629

0000f540 <writeExtendedData>:
    if(len > 32) return false;
    f540:	2b20      	cmp	r3, #32
bool writeExtendedData(char classID, char offset, char *data, char len){
    f542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f546:	4604      	mov	r4, r0
    f548:	460d      	mov	r5, r1
    f54a:	4690      	mov	r8, r2
    f54c:	461f      	mov	r7, r3
    if(len > 32) return false;
    f54e:	d902      	bls.n	f556 <writeExtendedData+0x16>
    f550:	2000      	movs	r0, #0
    }
    f552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(!USER_CONFIG_CONTROL) enterConfig(false);
    f556:	4b18      	ldr	r3, [pc, #96]	; (f5b8 <writeExtendedData+0x78>)
    f558:	7818      	ldrb	r0, [r3, #0]
    f55a:	4699      	mov	r9, r3
    f55c:	b908      	cbnz	r0, f562 <writeExtendedData+0x22>
    f55e:	f7ff ffc5 	bl	f4ec <enterConfig>
    if(!blockDataControl()) // enable block data memory control
    f562:	f7ff ff07 	bl	f374 <blockDataControl>
    f566:	2800      	cmp	r0, #0
    f568:	d0f2      	beq.n	f550 <writeExtendedData+0x10>
    if(!blockDataClass(classID)) // Write class ID using DataBlockClass()
    f56a:	4620      	mov	r0, r4
    f56c:	f7ff ff16 	bl	f39c <blockDataClass>
    f570:	4606      	mov	r6, r0
    f572:	2800      	cmp	r0, #0
    f574:	d0ec      	beq.n	f550 <writeExtendedData+0x10>
    blockDataOffset(offset / 32); // Write 32-bit block offset (usually 0)
    f576:	0968      	lsrs	r0, r5, #5
    f578:	f7ff ff10 	bl	f39c <blockDataClass>
    for (int i = 0; i < len; i++){
    f57c:	2400      	movs	r4, #0
    computeBlockCheckSum(); // Compute checksum going in
    f57e:	f7ff ff3f 	bl	f400 <computeBlockCheckSum>
    uint8_t oldCsum = blockDataChecksum();
    f582:	f7ff ff1f 	bl	f3c4 <blockDataChecksum>
    	writeBlockData((offset % 32) + i, data[i]);
    f586:	f005 051f 	and.w	r5, r5, #31
    for (int i = 0; i < len; i++){
    f58a:	42bc      	cmp	r4, r7
    f58c:	db0c      	blt.n	f5a8 <writeExtendedData+0x68>
    uint8_t newCsum = computeBlockCheckSum(); // Compute the new checksum
    f58e:	f7ff ff37 	bl	f400 <computeBlockCheckSum>
    writeBlockChecksum(newCsum);
    f592:	f7ff ff61 	bl	f458 <writeBlockChecksum>
    if (!USER_CONFIG_CONTROL) exitConfig(true);
    f596:	f899 0000 	ldrb.w	r0, [r9]
    f59a:	2800      	cmp	r0, #0
    f59c:	d1d9      	bne.n	f552 <writeExtendedData+0x12>
    f59e:	2001      	movs	r0, #1
    f5a0:	f7ff ff7c 	bl	f49c <exitConfig>
    f5a4:	4630      	mov	r0, r6
    f5a6:	e7d4      	b.n	f552 <writeExtendedData+0x12>
    	writeBlockData((offset % 32) + i, data[i]);
    f5a8:	1928      	adds	r0, r5, r4
    f5aa:	f818 1004 	ldrb.w	r1, [r8, r4]
    f5ae:	b2c0      	uxtb	r0, r0
    f5b0:	f7ff ff12 	bl	f3d8 <writeBlockData>
    for (int i = 0; i < len; i++){
    f5b4:	3401      	adds	r4, #1
    f5b6:	e7e8      	b.n	f58a <writeExtendedData+0x4a>
    f5b8:	2002362a 	.word	0x2002362a

0000f5bc <unpack>:
                          >medCbarcode >medCdose >medCformat >medCname >medCstatus 
                          >medDbarcode >medDdose >medDformat >medDname >medDstatus 
                          >medEbarcode >medEdose >medEformat >medAname >medEstatus 
*/

int unpack(char package[512]){
    f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5c0:	4605      	mov	r5, r0
    int itemIndex = 0;
    char itemBuffer[128]; 
    int n;
    
    /*--clear all registers before unpacking.--*/
    memset(tfmwTimeStamp, 0, sizeof(tfmwTimeStamp));
    f5c2:	220c      	movs	r2, #12
    f5c4:	2100      	movs	r1, #0
    f5c6:	487a      	ldr	r0, [pc, #488]	; (f7b0 <unpack+0x1f4>)
    f5c8:	f016 fc7a 	bl	25ec0 <memset>
    memset(ctHrsMins,     0, sizeof(ctHrsMins));
    f5cc:	2205      	movs	r2, #5
    f5ce:	2100      	movs	r1, #0
    f5d0:	4878      	ldr	r0, [pc, #480]	; (f7b4 <unpack+0x1f8>)
    f5d2:	f016 fc75 	bl	25ec0 <memset>

    memset(medABarcode, 0, sizeof(medABarcode));
    f5d6:	2245      	movs	r2, #69	; 0x45
    f5d8:	2100      	movs	r1, #0
    f5da:	4877      	ldr	r0, [pc, #476]	; (f7b8 <unpack+0x1fc>)
    f5dc:	f016 fc70 	bl	25ec0 <memset>
    memset(medADose,    0, sizeof(medADose));
    f5e0:	2245      	movs	r2, #69	; 0x45
    f5e2:	2100      	movs	r1, #0
    f5e4:	4875      	ldr	r0, [pc, #468]	; (f7bc <unpack+0x200>)
    f5e6:	f016 fc6b 	bl	25ec0 <memset>
    memset(medAFormat,  0, sizeof(medAFormat));
    f5ea:	2245      	movs	r2, #69	; 0x45
    f5ec:	2100      	movs	r1, #0
    f5ee:	4874      	ldr	r0, [pc, #464]	; (f7c0 <unpack+0x204>)
    f5f0:	f016 fc66 	bl	25ec0 <memset>
    memset(medAName,    0, sizeof(medAName));
    f5f4:	2245      	movs	r2, #69	; 0x45
    f5f6:	2100      	movs	r1, #0
    f5f8:	4872      	ldr	r0, [pc, #456]	; (f7c4 <unpack+0x208>)
    f5fa:	f016 fc61 	bl	25ec0 <memset>
    memset(medAStatus,  0, sizeof(medAStatus));
    f5fe:	2245      	movs	r2, #69	; 0x45
    f600:	2100      	movs	r1, #0
    f602:	4871      	ldr	r0, [pc, #452]	; (f7c8 <unpack+0x20c>)
    f604:	f016 fc5c 	bl	25ec0 <memset>

    memset(medBBarcode, 0, sizeof(medBBarcode));
    f608:	2245      	movs	r2, #69	; 0x45
    f60a:	2100      	movs	r1, #0
    f60c:	486f      	ldr	r0, [pc, #444]	; (f7cc <unpack+0x210>)
    f60e:	f016 fc57 	bl	25ec0 <memset>
    memset(medBDose,    0, sizeof(medBDose));
    f612:	2245      	movs	r2, #69	; 0x45
    f614:	2100      	movs	r1, #0
    f616:	486e      	ldr	r0, [pc, #440]	; (f7d0 <unpack+0x214>)
    f618:	f016 fc52 	bl	25ec0 <memset>
    memset(medBFormat,  0, sizeof(medBFormat));
    f61c:	2245      	movs	r2, #69	; 0x45
    f61e:	2100      	movs	r1, #0
    f620:	486c      	ldr	r0, [pc, #432]	; (f7d4 <unpack+0x218>)
    f622:	f016 fc4d 	bl	25ec0 <memset>
    memset(medBName,    0, sizeof(medBName));
    f626:	2245      	movs	r2, #69	; 0x45
    f628:	2100      	movs	r1, #0
    f62a:	486b      	ldr	r0, [pc, #428]	; (f7d8 <unpack+0x21c>)
    f62c:	f016 fc48 	bl	25ec0 <memset>
    memset(medBStatus,  0, sizeof(medBStatus));
    f630:	2245      	movs	r2, #69	; 0x45
    f632:	2100      	movs	r1, #0
    f634:	4869      	ldr	r0, [pc, #420]	; (f7dc <unpack+0x220>)
    f636:	f016 fc43 	bl	25ec0 <memset>

    memset(medCBarcode, 0, sizeof(medCBarcode));
    f63a:	2245      	movs	r2, #69	; 0x45
    f63c:	2100      	movs	r1, #0
    f63e:	4868      	ldr	r0, [pc, #416]	; (f7e0 <unpack+0x224>)
    f640:	f016 fc3e 	bl	25ec0 <memset>
    memset(medCDose,    0, sizeof(medCDose));
    f644:	2245      	movs	r2, #69	; 0x45
    f646:	2100      	movs	r1, #0
    f648:	4866      	ldr	r0, [pc, #408]	; (f7e4 <unpack+0x228>)
    f64a:	f016 fc39 	bl	25ec0 <memset>
    memset(medCFormat,  0, sizeof(medCFormat));
    f64e:	2245      	movs	r2, #69	; 0x45
    f650:	2100      	movs	r1, #0
    f652:	4865      	ldr	r0, [pc, #404]	; (f7e8 <unpack+0x22c>)
    f654:	f016 fc34 	bl	25ec0 <memset>
    memset(medCName,    0, sizeof(medCName));
    f658:	2245      	movs	r2, #69	; 0x45
    f65a:	2100      	movs	r1, #0
    f65c:	4863      	ldr	r0, [pc, #396]	; (f7ec <unpack+0x230>)
    f65e:	f016 fc2f 	bl	25ec0 <memset>
    memset(medCStatus,  0, sizeof(medCStatus));
    f662:	2245      	movs	r2, #69	; 0x45
    f664:	2100      	movs	r1, #0
    f666:	4862      	ldr	r0, [pc, #392]	; (f7f0 <unpack+0x234>)
    f668:	f016 fc2a 	bl	25ec0 <memset>

    memset(medDBarcode, 0, sizeof(medDBarcode));
    f66c:	2245      	movs	r2, #69	; 0x45
    f66e:	2100      	movs	r1, #0
    f670:	4860      	ldr	r0, [pc, #384]	; (f7f4 <unpack+0x238>)
    f672:	f016 fc25 	bl	25ec0 <memset>
    memset(medDDose,    0, sizeof(medDDose));
    f676:	2245      	movs	r2, #69	; 0x45
    f678:	2100      	movs	r1, #0
    f67a:	485f      	ldr	r0, [pc, #380]	; (f7f8 <unpack+0x23c>)
    f67c:	f016 fc20 	bl	25ec0 <memset>
    memset(medDFormat,  0, sizeof(medDFormat));
    f680:	2245      	movs	r2, #69	; 0x45
    f682:	2100      	movs	r1, #0
    f684:	485d      	ldr	r0, [pc, #372]	; (f7fc <unpack+0x240>)
    f686:	f016 fc1b 	bl	25ec0 <memset>
    memset(medDName,    0, sizeof(medDName));
    f68a:	2245      	movs	r2, #69	; 0x45
    f68c:	2100      	movs	r1, #0
    f68e:	485c      	ldr	r0, [pc, #368]	; (f800 <unpack+0x244>)
    f690:	f016 fc16 	bl	25ec0 <memset>
    memset(medDStatus,  0, sizeof(medDStatus));
    f694:	2245      	movs	r2, #69	; 0x45
    f696:	2100      	movs	r1, #0
    f698:	485a      	ldr	r0, [pc, #360]	; (f804 <unpack+0x248>)
    f69a:	f016 fc11 	bl	25ec0 <memset>

    memset(medEBarcode, 0, sizeof(medEBarcode));
    f69e:	2245      	movs	r2, #69	; 0x45
    f6a0:	2100      	movs	r1, #0
    f6a2:	4859      	ldr	r0, [pc, #356]	; (f808 <unpack+0x24c>)
    f6a4:	f016 fc0c 	bl	25ec0 <memset>
    memset(medEDose,    0, sizeof(medEDose));
    f6a8:	2245      	movs	r2, #69	; 0x45
    f6aa:	2100      	movs	r1, #0
    f6ac:	4857      	ldr	r0, [pc, #348]	; (f80c <unpack+0x250>)
    f6ae:	f016 fc07 	bl	25ec0 <memset>
    memset(medEFormat,  0, sizeof(medEFormat));
    f6b2:	2245      	movs	r2, #69	; 0x45
    f6b4:	2100      	movs	r1, #0
    f6b6:	4856      	ldr	r0, [pc, #344]	; (f810 <unpack+0x254>)
    f6b8:	f016 fc02 	bl	25ec0 <memset>
    memset(medEName,    0, sizeof(medEName));
    f6bc:	2245      	movs	r2, #69	; 0x45
    f6be:	2100      	movs	r1, #0
    f6c0:	4854      	ldr	r0, [pc, #336]	; (f814 <unpack+0x258>)
    f6c2:	f016 fbfd 	bl	25ec0 <memset>
    memset(medEStatus,  0, sizeof(medEStatus));
    f6c6:	2245      	movs	r2, #69	; 0x45
    f6c8:	2100      	movs	r1, #0
    f6ca:	4853      	ldr	r0, [pc, #332]	; (f818 <unpack+0x25c>)
    f6cc:	f016 fbf8 	bl	25ec0 <memset>

    for(i ; i <= strlen(package) - 1 ; i++){
    f6d0:	462e      	mov	r6, r5
    int itemIndex = 0;
    f6d2:	2700      	movs	r7, #0
                        //medE.status[n] = package[i];
                        n++;
                        break;

                    case 28: //Parsing done
                        printk("Done parsing med reminder package.\n");
    f6d4:	f8df 8148 	ldr.w	r8, [pc, #328]	; f820 <unpack+0x264>
                        medEStatus[n] = package[i];
    f6d8:	f8df 913c 	ldr.w	r9, [pc, #316]	; f818 <unpack+0x25c>
                        medEName[n] = package[i];
    f6dc:	f8df a134 	ldr.w	sl, [pc, #308]	; f814 <unpack+0x258>
    for(i ; i <= strlen(package) - 1 ; i++){
    f6e0:	4628      	mov	r0, r5
    f6e2:	f016 fb55 	bl	25d90 <strlen>
    f6e6:	1b73      	subs	r3, r6, r5
    f6e8:	3801      	subs	r0, #1
    f6ea:	4298      	cmp	r0, r3
    f6ec:	da01      	bge.n	f6f2 <unpack+0x136>
////        printk("Dose     E : %s\n", medEDose);
////        printk("Format   E : %s\n", medEFormat);
////        printk("Name     E : %s\n", medEName);
////        printk("Status   E : %s\n", medEStatus);

        return 0;
    f6ee:	2000      	movs	r0, #0
    f6f0:	e05b      	b.n	f7aa <unpack+0x1ee>
        if(package[i] == '>'){ 
    f6f2:	f816 3b01 	ldrb.w	r3, [r6], #1
    f6f6:	2b3e      	cmp	r3, #62	; 0x3e
    f6f8:	d102      	bne.n	f700 <unpack+0x144>
            itemIndex++;  //Start depositting into next item.
    f6fa:	3701      	adds	r7, #1
            n = 0;
    f6fc:	2400      	movs	r4, #0
    f6fe:	e7ef      	b.n	f6e0 <unpack+0x124>
                switch(itemIndex){ //select location to append string.
    f700:	1e7a      	subs	r2, r7, #1
    f702:	2a1b      	cmp	r2, #27
    f704:	d84d      	bhi.n	f7a2 <unpack+0x1e6>
    f706:	e8df f002 	tbb	[pc, r2]
    f70a:	120e      	.short	0x120e
    f70c:	1a181614 	.word	0x1a181614
    f710:	22201e1c 	.word	0x22201e1c
    f714:	2a282624 	.word	0x2a282624
    f718:	32302e2c 	.word	0x32302e2c
    f71c:	3a383634 	.word	0x3a383634
    f720:	42403e3c 	.word	0x42403e3c
    f724:	4845      	.short	0x4845
                        tfmwTimeStamp[n] = package[i];
    f726:	4a22      	ldr	r2, [pc, #136]	; (f7b0 <unpack+0x1f4>)
                        medEFormat[n] = package[i];
    f728:	5513      	strb	r3, [r2, r4]
                        n++;
    f72a:	3401      	adds	r4, #1
                        break;
    f72c:	e7d8      	b.n	f6e0 <unpack+0x124>
                        ctHrsMins[n] = package[i];
    f72e:	4a21      	ldr	r2, [pc, #132]	; (f7b4 <unpack+0x1f8>)
    f730:	e7fa      	b.n	f728 <unpack+0x16c>
                        medABarcode[n] = package[i];
    f732:	4a21      	ldr	r2, [pc, #132]	; (f7b8 <unpack+0x1fc>)
    f734:	e7f8      	b.n	f728 <unpack+0x16c>
                        medADose[n] = package[i];
    f736:	4a21      	ldr	r2, [pc, #132]	; (f7bc <unpack+0x200>)
    f738:	e7f6      	b.n	f728 <unpack+0x16c>
                        medAFormat[n] = package[i];
    f73a:	4a21      	ldr	r2, [pc, #132]	; (f7c0 <unpack+0x204>)
    f73c:	e7f4      	b.n	f728 <unpack+0x16c>
                        medAName[n] = package[i];
    f73e:	4a21      	ldr	r2, [pc, #132]	; (f7c4 <unpack+0x208>)
    f740:	e7f2      	b.n	f728 <unpack+0x16c>
                        medAStatus[n] = package[i];
    f742:	4a21      	ldr	r2, [pc, #132]	; (f7c8 <unpack+0x20c>)
    f744:	e7f0      	b.n	f728 <unpack+0x16c>
                        medBBarcode[n] = package[i];
    f746:	4a21      	ldr	r2, [pc, #132]	; (f7cc <unpack+0x210>)
    f748:	e7ee      	b.n	f728 <unpack+0x16c>
                        medBDose[n] = package[i];
    f74a:	4a21      	ldr	r2, [pc, #132]	; (f7d0 <unpack+0x214>)
    f74c:	e7ec      	b.n	f728 <unpack+0x16c>
                        medBFormat[n] = package[i];
    f74e:	4a21      	ldr	r2, [pc, #132]	; (f7d4 <unpack+0x218>)
    f750:	e7ea      	b.n	f728 <unpack+0x16c>
                        medBName[n] = package[i];
    f752:	4a21      	ldr	r2, [pc, #132]	; (f7d8 <unpack+0x21c>)
    f754:	e7e8      	b.n	f728 <unpack+0x16c>
                        medBStatus[n] = package[i];
    f756:	4a21      	ldr	r2, [pc, #132]	; (f7dc <unpack+0x220>)
    f758:	e7e6      	b.n	f728 <unpack+0x16c>
                        medCBarcode[n] = package[i];
    f75a:	4a21      	ldr	r2, [pc, #132]	; (f7e0 <unpack+0x224>)
    f75c:	e7e4      	b.n	f728 <unpack+0x16c>
                        medCDose[n] = package[i];
    f75e:	4a21      	ldr	r2, [pc, #132]	; (f7e4 <unpack+0x228>)
    f760:	e7e2      	b.n	f728 <unpack+0x16c>
                        medCFormat[n] = package[i];
    f762:	4a21      	ldr	r2, [pc, #132]	; (f7e8 <unpack+0x22c>)
    f764:	e7e0      	b.n	f728 <unpack+0x16c>
                        medCName[n] = package[i];
    f766:	4a21      	ldr	r2, [pc, #132]	; (f7ec <unpack+0x230>)
    f768:	e7de      	b.n	f728 <unpack+0x16c>
                        medCStatus[n] = package[i];
    f76a:	4a21      	ldr	r2, [pc, #132]	; (f7f0 <unpack+0x234>)
    f76c:	e7dc      	b.n	f728 <unpack+0x16c>
                        medDBarcode[n] = package[i];
    f76e:	4a21      	ldr	r2, [pc, #132]	; (f7f4 <unpack+0x238>)
    f770:	e7da      	b.n	f728 <unpack+0x16c>
                        medDDose[n] = package[i];
    f772:	4a21      	ldr	r2, [pc, #132]	; (f7f8 <unpack+0x23c>)
    f774:	e7d8      	b.n	f728 <unpack+0x16c>
                        medDFormat[n] = package[i];
    f776:	4a21      	ldr	r2, [pc, #132]	; (f7fc <unpack+0x240>)
    f778:	e7d6      	b.n	f728 <unpack+0x16c>
                        medDName[n] = package[i];
    f77a:	4a21      	ldr	r2, [pc, #132]	; (f800 <unpack+0x244>)
    f77c:	e7d4      	b.n	f728 <unpack+0x16c>
                        medDStatus[n] = package[i];
    f77e:	4a21      	ldr	r2, [pc, #132]	; (f804 <unpack+0x248>)
    f780:	e7d2      	b.n	f728 <unpack+0x16c>
                        medEBarcode[n] = package[i];
    f782:	4a21      	ldr	r2, [pc, #132]	; (f808 <unpack+0x24c>)
    f784:	e7d0      	b.n	f728 <unpack+0x16c>
                        medEDose[n] = package[i];
    f786:	4a21      	ldr	r2, [pc, #132]	; (f80c <unpack+0x250>)
    f788:	e7ce      	b.n	f728 <unpack+0x16c>
                        medEFormat[n] = package[i];
    f78a:	4a21      	ldr	r2, [pc, #132]	; (f810 <unpack+0x254>)
    f78c:	e7cc      	b.n	f728 <unpack+0x16c>
                        medEName[n] = package[i];
    f78e:	f80a 3004 	strb.w	r3, [sl, r4]
    f792:	e7ca      	b.n	f72a <unpack+0x16e>
                        medEStatus[n] = package[i];
    f794:	f809 3004 	strb.w	r3, [r9, r4]
    f798:	e7c7      	b.n	f72a <unpack+0x16e>
                        printk("Done parsing med reminder package.\n");
    f79a:	4640      	mov	r0, r8
    f79c:	f016 f9cf 	bl	25b3e <printk>
                        break;
    f7a0:	e79e      	b.n	f6e0 <unpack+0x124>
                        printk("ERROR: Data not usable. loop end.\n");
    f7a2:	481e      	ldr	r0, [pc, #120]	; (f81c <unpack+0x260>)
    f7a4:	f016 f9cb 	bl	25b3e <printk>
                        return 1;
    f7a8:	2001      	movs	r0, #1
    }
    f7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7ae:	bf00      	nop
    f7b0:	20023cee 	.word	0x20023cee
    f7b4:	2002362c 	.word	0x2002362c
    f7b8:	20023631 	.word	0x20023631
    f7bc:	20023676 	.word	0x20023676
    f7c0:	200236bb 	.word	0x200236bb
    f7c4:	20023700 	.word	0x20023700
    f7c8:	20023745 	.word	0x20023745
    f7cc:	2002378a 	.word	0x2002378a
    f7d0:	200237cf 	.word	0x200237cf
    f7d4:	20023814 	.word	0x20023814
    f7d8:	20023859 	.word	0x20023859
    f7dc:	2002389e 	.word	0x2002389e
    f7e0:	200238e3 	.word	0x200238e3
    f7e4:	20023928 	.word	0x20023928
    f7e8:	2002396d 	.word	0x2002396d
    f7ec:	200239b2 	.word	0x200239b2
    f7f0:	200239f7 	.word	0x200239f7
    f7f4:	20023a3c 	.word	0x20023a3c
    f7f8:	20023a81 	.word	0x20023a81
    f7fc:	20023ac6 	.word	0x20023ac6
    f800:	20023b0b 	.word	0x20023b0b
    f804:	20023b50 	.word	0x20023b50
    f808:	20023b95 	.word	0x20023b95
    f80c:	20023bda 	.word	0x20023bda
    f810:	20023c1f 	.word	0x20023c1f
    f814:	20023c64 	.word	0x20023c64
    f818:	20023ca9 	.word	0x20023ca9
    f81c:	0002b0c3 	.word	0x0002b0c3
    f820:	0002b09f 	.word	0x0002b09f

0000f824 <evaluate_med_list>:

int med_count;

int evaluate_med_list(){
    
    med_count = 0;
    f824:	2300      	movs	r3, #0
int evaluate_med_list(){
    f826:	b510      	push	{r4, lr}
    med_count = 0;
    f828:	4c47      	ldr	r4, [pc, #284]	; (f948 <evaluate_med_list+0x124>)
    //Create Med A:
    if(strcmp(medABarcode , "empty")   != 0 &&
    f82a:	4948      	ldr	r1, [pc, #288]	; (f94c <evaluate_med_list+0x128>)
    f82c:	4848      	ldr	r0, [pc, #288]	; (f950 <evaluate_med_list+0x12c>)
    med_count = 0;
    f82e:	6023      	str	r3, [r4, #0]
    if(strcmp(medABarcode , "empty")   != 0 &&
    f830:	f016 fab6 	bl	25da0 <strcmp>
    f834:	b1b0      	cbz	r0, f864 <evaluate_med_list+0x40>
       strcmp(medADose    , "empty")   != 0 &&
    f836:	4945      	ldr	r1, [pc, #276]	; (f94c <evaluate_med_list+0x128>)
    f838:	4846      	ldr	r0, [pc, #280]	; (f954 <evaluate_med_list+0x130>)
    f83a:	f016 fab1 	bl	25da0 <strcmp>
    if(strcmp(medABarcode , "empty")   != 0 &&
    f83e:	b188      	cbz	r0, f864 <evaluate_med_list+0x40>
       strcmp(medAFormat  , "empty")   != 0 &&
    f840:	4942      	ldr	r1, [pc, #264]	; (f94c <evaluate_med_list+0x128>)
    f842:	4845      	ldr	r0, [pc, #276]	; (f958 <evaluate_med_list+0x134>)
    f844:	f016 faac 	bl	25da0 <strcmp>
       strcmp(medADose    , "empty")   != 0 &&
    f848:	b160      	cbz	r0, f864 <evaluate_med_list+0x40>
       strcmp(medAName    , "empty")   != 0 &&
    f84a:	4940      	ldr	r1, [pc, #256]	; (f94c <evaluate_med_list+0x128>)
    f84c:	4843      	ldr	r0, [pc, #268]	; (f95c <evaluate_med_list+0x138>)
    f84e:	f016 faa7 	bl	25da0 <strcmp>
       strcmp(medAFormat  , "empty")   != 0 &&
    f852:	b138      	cbz	r0, f864 <evaluate_med_list+0x40>
       strcmp(medAStatus  , "pending") == 0 ){ 
    f854:	4942      	ldr	r1, [pc, #264]	; (f960 <evaluate_med_list+0x13c>)
    f856:	4843      	ldr	r0, [pc, #268]	; (f964 <evaluate_med_list+0x140>)
    f858:	f016 faa2 	bl	25da0 <strcmp>
       strcmp(medAName    , "empty")   != 0 &&
    f85c:	b910      	cbnz	r0, f864 <evaluate_med_list+0x40>
        med_count++;
    f85e:	6823      	ldr	r3, [r4, #0]
    f860:	3301      	adds	r3, #1
    f862:	6023      	str	r3, [r4, #0]
        } else {
            //Do Nothing
            };
    
    //Create Med B
    if(strcmp(medBBarcode , "empty")   != 0 &&
    f864:	4939      	ldr	r1, [pc, #228]	; (f94c <evaluate_med_list+0x128>)
    f866:	4840      	ldr	r0, [pc, #256]	; (f968 <evaluate_med_list+0x144>)
    f868:	f016 fa9a 	bl	25da0 <strcmp>
    f86c:	b1b0      	cbz	r0, f89c <evaluate_med_list+0x78>
       strcmp(medBDose    , "empty")   != 0 &&
    f86e:	4937      	ldr	r1, [pc, #220]	; (f94c <evaluate_med_list+0x128>)
    f870:	483e      	ldr	r0, [pc, #248]	; (f96c <evaluate_med_list+0x148>)
    f872:	f016 fa95 	bl	25da0 <strcmp>
    if(strcmp(medBBarcode , "empty")   != 0 &&
    f876:	b188      	cbz	r0, f89c <evaluate_med_list+0x78>
       strcmp(medBFormat  , "empty")   != 0 &&
    f878:	4934      	ldr	r1, [pc, #208]	; (f94c <evaluate_med_list+0x128>)
    f87a:	483d      	ldr	r0, [pc, #244]	; (f970 <evaluate_med_list+0x14c>)
    f87c:	f016 fa90 	bl	25da0 <strcmp>
       strcmp(medBDose    , "empty")   != 0 &&
    f880:	b160      	cbz	r0, f89c <evaluate_med_list+0x78>
       strcmp(medBName    , "empty")   != 0 &&
    f882:	4932      	ldr	r1, [pc, #200]	; (f94c <evaluate_med_list+0x128>)
    f884:	483b      	ldr	r0, [pc, #236]	; (f974 <evaluate_med_list+0x150>)
    f886:	f016 fa8b 	bl	25da0 <strcmp>
       strcmp(medBFormat  , "empty")   != 0 &&
    f88a:	b138      	cbz	r0, f89c <evaluate_med_list+0x78>
       strcmp(medBStatus  , "pending") == 0 ){ 
    f88c:	4934      	ldr	r1, [pc, #208]	; (f960 <evaluate_med_list+0x13c>)
    f88e:	483a      	ldr	r0, [pc, #232]	; (f978 <evaluate_med_list+0x154>)
    f890:	f016 fa86 	bl	25da0 <strcmp>
       strcmp(medBName    , "empty")   != 0 &&
    f894:	b910      	cbnz	r0, f89c <evaluate_med_list+0x78>
        med_count++;
    f896:	6823      	ldr	r3, [r4, #0]
    f898:	3301      	adds	r3, #1
    f89a:	6023      	str	r3, [r4, #0]
        } else {
            //Do Nothing
            };

    //Create Med C
    if(strcmp(medCBarcode , "empty")   != 0 &&
    f89c:	492b      	ldr	r1, [pc, #172]	; (f94c <evaluate_med_list+0x128>)
    f89e:	4837      	ldr	r0, [pc, #220]	; (f97c <evaluate_med_list+0x158>)
    f8a0:	f016 fa7e 	bl	25da0 <strcmp>
    f8a4:	b1b0      	cbz	r0, f8d4 <evaluate_med_list+0xb0>
       strcmp(medCDose    , "empty")   != 0 &&
    f8a6:	4929      	ldr	r1, [pc, #164]	; (f94c <evaluate_med_list+0x128>)
    f8a8:	4835      	ldr	r0, [pc, #212]	; (f980 <evaluate_med_list+0x15c>)
    f8aa:	f016 fa79 	bl	25da0 <strcmp>
    if(strcmp(medCBarcode , "empty")   != 0 &&
    f8ae:	b188      	cbz	r0, f8d4 <evaluate_med_list+0xb0>
       strcmp(medCFormat  , "empty")   != 0 &&
    f8b0:	4926      	ldr	r1, [pc, #152]	; (f94c <evaluate_med_list+0x128>)
    f8b2:	4834      	ldr	r0, [pc, #208]	; (f984 <evaluate_med_list+0x160>)
    f8b4:	f016 fa74 	bl	25da0 <strcmp>
       strcmp(medCDose    , "empty")   != 0 &&
    f8b8:	b160      	cbz	r0, f8d4 <evaluate_med_list+0xb0>
       strcmp(medCName    , "empty")   != 0 &&
    f8ba:	4924      	ldr	r1, [pc, #144]	; (f94c <evaluate_med_list+0x128>)
    f8bc:	4832      	ldr	r0, [pc, #200]	; (f988 <evaluate_med_list+0x164>)
    f8be:	f016 fa6f 	bl	25da0 <strcmp>
       strcmp(medCFormat  , "empty")   != 0 &&
    f8c2:	b138      	cbz	r0, f8d4 <evaluate_med_list+0xb0>
       strcmp(medCStatus  , "pending") == 0 ){ 
    f8c4:	4926      	ldr	r1, [pc, #152]	; (f960 <evaluate_med_list+0x13c>)
    f8c6:	4831      	ldr	r0, [pc, #196]	; (f98c <evaluate_med_list+0x168>)
    f8c8:	f016 fa6a 	bl	25da0 <strcmp>
       strcmp(medCName    , "empty")   != 0 &&
    f8cc:	b910      	cbnz	r0, f8d4 <evaluate_med_list+0xb0>
        med_count++;
    f8ce:	6823      	ldr	r3, [r4, #0]
    f8d0:	3301      	adds	r3, #1
    f8d2:	6023      	str	r3, [r4, #0]
        } else {
            //Do Nothing
            };

    //Create Med D
    if(strcmp(medDBarcode , "empty")   != 0 &&
    f8d4:	491d      	ldr	r1, [pc, #116]	; (f94c <evaluate_med_list+0x128>)
    f8d6:	482e      	ldr	r0, [pc, #184]	; (f990 <evaluate_med_list+0x16c>)
    f8d8:	f016 fa62 	bl	25da0 <strcmp>
    f8dc:	b1b0      	cbz	r0, f90c <evaluate_med_list+0xe8>
       strcmp(medDDose    , "empty")   != 0 &&
    f8de:	491b      	ldr	r1, [pc, #108]	; (f94c <evaluate_med_list+0x128>)
    f8e0:	482c      	ldr	r0, [pc, #176]	; (f994 <evaluate_med_list+0x170>)
    f8e2:	f016 fa5d 	bl	25da0 <strcmp>
    if(strcmp(medDBarcode , "empty")   != 0 &&
    f8e6:	b188      	cbz	r0, f90c <evaluate_med_list+0xe8>
       strcmp(medDFormat  , "empty")   != 0 &&
    f8e8:	4918      	ldr	r1, [pc, #96]	; (f94c <evaluate_med_list+0x128>)
    f8ea:	482b      	ldr	r0, [pc, #172]	; (f998 <evaluate_med_list+0x174>)
    f8ec:	f016 fa58 	bl	25da0 <strcmp>
       strcmp(medDDose    , "empty")   != 0 &&
    f8f0:	b160      	cbz	r0, f90c <evaluate_med_list+0xe8>
       strcmp(medDName    , "empty")   != 0 &&
    f8f2:	4916      	ldr	r1, [pc, #88]	; (f94c <evaluate_med_list+0x128>)
    f8f4:	4829      	ldr	r0, [pc, #164]	; (f99c <evaluate_med_list+0x178>)
    f8f6:	f016 fa53 	bl	25da0 <strcmp>
       strcmp(medDFormat  , "empty")   != 0 &&
    f8fa:	b138      	cbz	r0, f90c <evaluate_med_list+0xe8>
       strcmp(medDStatus  , "pending") == 0 ){ 
    f8fc:	4918      	ldr	r1, [pc, #96]	; (f960 <evaluate_med_list+0x13c>)
    f8fe:	4828      	ldr	r0, [pc, #160]	; (f9a0 <evaluate_med_list+0x17c>)
    f900:	f016 fa4e 	bl	25da0 <strcmp>
       strcmp(medDName    , "empty")   != 0 &&
    f904:	b910      	cbnz	r0, f90c <evaluate_med_list+0xe8>
        med_count++;
    f906:	6823      	ldr	r3, [r4, #0]
    f908:	3301      	adds	r3, #1
    f90a:	6023      	str	r3, [r4, #0]
        } else {
            //Do Nothing
            };

    //Create Med E
    if(strcmp(medEBarcode , "empty")   != 0 &&
    f90c:	490f      	ldr	r1, [pc, #60]	; (f94c <evaluate_med_list+0x128>)
    f90e:	4825      	ldr	r0, [pc, #148]	; (f9a4 <evaluate_med_list+0x180>)
    f910:	f016 fa46 	bl	25da0 <strcmp>
    f914:	b1b0      	cbz	r0, f944 <evaluate_med_list+0x120>
       strcmp(medEDose    , "empty")   != 0 &&
    f916:	490d      	ldr	r1, [pc, #52]	; (f94c <evaluate_med_list+0x128>)
    f918:	4823      	ldr	r0, [pc, #140]	; (f9a8 <evaluate_med_list+0x184>)
    f91a:	f016 fa41 	bl	25da0 <strcmp>
    if(strcmp(medEBarcode , "empty")   != 0 &&
    f91e:	b188      	cbz	r0, f944 <evaluate_med_list+0x120>
       strcmp(medEFormat  , "empty")   != 0 &&
    f920:	490a      	ldr	r1, [pc, #40]	; (f94c <evaluate_med_list+0x128>)
    f922:	4822      	ldr	r0, [pc, #136]	; (f9ac <evaluate_med_list+0x188>)
    f924:	f016 fa3c 	bl	25da0 <strcmp>
       strcmp(medEDose    , "empty")   != 0 &&
    f928:	b160      	cbz	r0, f944 <evaluate_med_list+0x120>
       strcmp(medEName    , "empty")   != 0 &&
    f92a:	4908      	ldr	r1, [pc, #32]	; (f94c <evaluate_med_list+0x128>)
    f92c:	4820      	ldr	r0, [pc, #128]	; (f9b0 <evaluate_med_list+0x18c>)
    f92e:	f016 fa37 	bl	25da0 <strcmp>
       strcmp(medEFormat  , "empty")   != 0 &&
    f932:	b138      	cbz	r0, f944 <evaluate_med_list+0x120>
       strcmp(medEStatus  , "pending") == 0 ){ 
    f934:	490a      	ldr	r1, [pc, #40]	; (f960 <evaluate_med_list+0x13c>)
    f936:	481f      	ldr	r0, [pc, #124]	; (f9b4 <evaluate_med_list+0x190>)
    f938:	f016 fa32 	bl	25da0 <strcmp>
       strcmp(medEName    , "empty")   != 0 &&
    f93c:	b910      	cbnz	r0, f944 <evaluate_med_list+0x120>
        med_count++;
    f93e:	6823      	ldr	r3, [r4, #0]
    f940:	3301      	adds	r3, #1
    f942:	6023      	str	r3, [r4, #0]
        } else {
            //Do Nothing
            };

    return 0;
    };
    f944:	2000      	movs	r0, #0
    f946:	bd10      	pop	{r4, pc}
    f948:	20020148 	.word	0x20020148
    f94c:	0002a8c3 	.word	0x0002a8c3
    f950:	20023631 	.word	0x20023631
    f954:	20023676 	.word	0x20023676
    f958:	200236bb 	.word	0x200236bb
    f95c:	20023700 	.word	0x20023700
    f960:	0002a8bb 	.word	0x0002a8bb
    f964:	20023745 	.word	0x20023745
    f968:	2002378a 	.word	0x2002378a
    f96c:	200237cf 	.word	0x200237cf
    f970:	20023814 	.word	0x20023814
    f974:	20023859 	.word	0x20023859
    f978:	2002389e 	.word	0x2002389e
    f97c:	200238e3 	.word	0x200238e3
    f980:	20023928 	.word	0x20023928
    f984:	2002396d 	.word	0x2002396d
    f988:	200239b2 	.word	0x200239b2
    f98c:	200239f7 	.word	0x200239f7
    f990:	20023a3c 	.word	0x20023a3c
    f994:	20023a81 	.word	0x20023a81
    f998:	20023ac6 	.word	0x20023ac6
    f99c:	20023b0b 	.word	0x20023b0b
    f9a0:	20023b50 	.word	0x20023b50
    f9a4:	20023b95 	.word	0x20023b95
    f9a8:	20023bda 	.word	0x20023bda
    f9ac:	20023c1f 	.word	0x20023c1f
    f9b0:	20023c64 	.word	0x20023c64
    f9b4:	20023ca9 	.word	0x20023ca9

0000f9b8 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9bc:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    f9be:	7a83      	ldrb	r3, [r0, #10]
{
    f9c0:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    f9c2:	009b      	lsls	r3, r3, #2
    f9c4:	330a      	adds	r3, #10
    f9c6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    f9ca:	ebad 0d03 	sub.w	sp, sp, r3
{
    f9ce:	4605      	mov	r5, r0
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
    f9d0:	6843      	ldr	r3, [r0, #4]
    f9d2:	4668      	mov	r0, sp
    f9d4:	3303      	adds	r3, #3
    f9d6:	f023 0303 	bic.w	r3, r3, #3
    f9da:	6003      	str	r3, [r0, #0]
    f9dc:	4604      	mov	r4, r0
	for (i = 1; i <= level; i++) {
    f9de:	2001      	movs	r0, #1
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    f9e0:	f8c7 d00c 	str.w	sp, [r7, #12]
	for (i = 1; i <= level; i++) {
    f9e4:	4281      	cmp	r1, r0
    f9e6:	d221      	bcs.n	fa2c <z_sys_mem_pool_block_free+0x74>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f9e8:	7c28      	ldrb	r0, [r5, #16]
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
    f9ea:	460e      	mov	r6, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f9ec:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
    f9f0:	4690      	mov	r8, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f9f2:	d001      	beq.n	f9f8 <z_sys_mem_pool_block_free+0x40>
    f9f4:	f015 fdf0 	bl	255d8 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
    f9f8:	4604      	mov	r4, r0
	while (level >= 0) {
    f9fa:	2e00      	cmp	r6, #0
    f9fc:	da1f      	bge.n	fa3e <z_sys_mem_pool_block_free+0x86>
	__ASSERT(0, "out of levels");
    f9fe:	23c0      	movs	r3, #192	; 0xc0
    fa00:	4a51      	ldr	r2, [pc, #324]	; (fb48 <z_sys_mem_pool_block_free+0x190>)
    fa02:	4952      	ldr	r1, [pc, #328]	; (fb4c <z_sys_mem_pool_block_free+0x194>)
    fa04:	4852      	ldr	r0, [pc, #328]	; (fb50 <z_sys_mem_pool_block_free+0x198>)
    fa06:	f016 f89a 	bl	25b3e <printk>
    fa0a:	4852      	ldr	r0, [pc, #328]	; (fb54 <z_sys_mem_pool_block_free+0x19c>)
    fa0c:	f016 f897 	bl	25b3e <printk>
    fa10:	21c0      	movs	r1, #192	; 0xc0
    fa12:	484d      	ldr	r0, [pc, #308]	; (fb48 <z_sys_mem_pool_block_free+0x190>)
    fa14:	f016 f8a0 	bl	25b58 <assert_post_action>
	return -1;
    fa18:	f04f 34ff 	mov.w	r4, #4294967295
	pool_irq_unlock(p, key);
    fa1c:	4621      	mov	r1, r4
    fa1e:	7c28      	ldrb	r0, [r5, #16]
    fa20:	f015 fde3 	bl	255ea <pool_irq_unlock.isra.4>
}
    fa24:	371c      	adds	r7, #28
    fa26:	46bd      	mov	sp, r7
    fa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
    fa2c:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
    fa2e:	3001      	adds	r0, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
    fa30:	089b      	lsrs	r3, r3, #2
    fa32:	3303      	adds	r3, #3
    fa34:	f023 0303 	bic.w	r3, r3, #3
    fa38:	f844 3f04 	str.w	r3, [r4, #4]!
    fa3c:	e7d2      	b.n	f9e4 <z_sys_mem_pool_block_free+0x2c>
		int i, lsz = lsizes[level];
    fa3e:	68fb      	ldr	r3, [r7, #12]
	return p->n_max * p->max_sz;
    fa40:	8929      	ldrh	r1, [r5, #8]
		int i, lsz = lsizes[level];
    fa42:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
		void *block = block_ptr(p, lsz, bn);
    fa46:	f8d5 b000 	ldr.w	fp, [r5]
	return (u8_t *)p->buf + lsz * block;
    fa4a:	fb03 fa08 	mul.w	sl, r3, r8
		int i, lsz = lsizes[level];
    fa4e:	60bb      	str	r3, [r7, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    fa50:	3b01      	subs	r3, #1
    fa52:	eb03 020a 	add.w	r2, r3, sl
    fa56:	607b      	str	r3, [r7, #4]
	return p->n_max * p->max_sz;
    fa58:	686b      	ldr	r3, [r5, #4]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    fa5a:	eb0b 090a 	add.w	r9, fp, sl
	return p->n_max * p->max_sz;
    fa5e:	434b      	muls	r3, r1
		__ASSERT(block_fits(p, block, lsz), "");
    fa60:	429a      	cmp	r2, r3
    fa62:	d30c      	bcc.n	fa7e <z_sys_mem_pool_block_free+0xc6>
    fa64:	493c      	ldr	r1, [pc, #240]	; (fb58 <z_sys_mem_pool_block_free+0x1a0>)
    fa66:	23a4      	movs	r3, #164	; 0xa4
    fa68:	4a37      	ldr	r2, [pc, #220]	; (fb48 <z_sys_mem_pool_block_free+0x190>)
    fa6a:	4839      	ldr	r0, [pc, #228]	; (fb50 <z_sys_mem_pool_block_free+0x198>)
    fa6c:	f016 f867 	bl	25b3e <printk>
    fa70:	483a      	ldr	r0, [pc, #232]	; (fb5c <z_sys_mem_pool_block_free+0x1a4>)
    fa72:	f016 f864 	bl	25b3e <printk>
    fa76:	21a4      	movs	r1, #164	; 0xa4
    fa78:	4833      	ldr	r0, [pc, #204]	; (fb48 <z_sys_mem_pool_block_free+0x190>)
    fa7a:	f016 f86d 	bl	25b58 <assert_post_action>
		set_free_bit(p, level, bn);
    fa7e:	4642      	mov	r2, r8
    fa80:	4631      	mov	r1, r6
    fa82:	4628      	mov	r0, r5
    fa84:	f015 fd8b 	bl	2559e <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
    fa88:	230c      	movs	r3, #12
    fa8a:	68ea      	ldr	r2, [r5, #12]
		pool_irq_unlock(p, key);
    fa8c:	4621      	mov	r1, r4
		sys_dlist_append(&p->levels[level].free_list, block);
    fa8e:	fb03 2306 	mla	r3, r3, r6, r2
    fa92:	1d1a      	adds	r2, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    fa94:	f84b 200a 	str.w	r2, [fp, sl]
	node->prev = list->tail;
    fa98:	689a      	ldr	r2, [r3, #8]
    fa9a:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
    fa9e:	689a      	ldr	r2, [r3, #8]
    faa0:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
    faa4:	f8c3 9008 	str.w	r9, [r3, #8]
		pool_irq_unlock(p, key);
    faa8:	7c28      	ldrb	r0, [r5, #16]
    faaa:	f015 fd9e 	bl	255ea <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    faae:	7c28      	ldrb	r0, [r5, #16]
    fab0:	f010 0001 	ands.w	r0, r0, #1
    fab4:	d001      	beq.n	faba <z_sys_mem_pool_block_free+0x102>
    fab6:	f015 fd8f 	bl	255d8 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
    faba:	4604      	mov	r4, r0
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
    fabc:	2e00      	cmp	r6, #0
    fabe:	d0ad      	beq.n	fa1c <z_sys_mem_pool_block_free+0x64>
	int bit = get_bit_ptr(p, level, bn, &word);
    fac0:	f107 0314 	add.w	r3, r7, #20
    fac4:	4642      	mov	r2, r8
    fac6:	4631      	mov	r1, r6
    fac8:	4628      	mov	r0, r5
    faca:	f015 fd52 	bl	25572 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    face:	2304      	movs	r3, #4
    fad0:	fb90 f3f3 	sdiv	r3, r0, r3
    fad4:	697a      	ldr	r2, [r7, #20]
    fad6:	009b      	lsls	r3, r3, #2
    fad8:	6810      	ldr	r0, [r2, #0]
    fada:	40d8      	lsrs	r0, r3
    fadc:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
    fae0:	280f      	cmp	r0, #15
    fae2:	d19b      	bne.n	fa1c <z_sys_mem_pool_block_free+0x64>
		for (i = 0; i < 4; i++) {
    fae4:	f04f 0900 	mov.w	r9, #0
	node->next = NULL;
    fae8:	46cb      	mov	fp, r9
			int b = (bn & ~3) + i;
    faea:	f028 0303 	bic.w	r3, r8, #3
    faee:	603b      	str	r3, [r7, #0]
    faf0:	683b      	ldr	r3, [r7, #0]
	return p->n_max * p->max_sz;
    faf2:	f8b5 c008 	ldrh.w	ip, [r5, #8]
			int b = (bn & ~3) + i;
    faf6:	eb03 0209 	add.w	r2, r3, r9
	return (u8_t *)p->buf + lsz * block;
    fafa:	68bb      	ldr	r3, [r7, #8]
	return p->n_max * p->max_sz;
    fafc:	6869      	ldr	r1, [r5, #4]
	return (u8_t *)p->buf + lsz * block;
    fafe:	fb03 fa02 	mul.w	sl, r3, r2
	return p->n_max * p->max_sz;
    fb02:	fb01 f10c 	mul.w	r1, r1, ip
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
    fb06:	687b      	ldr	r3, [r7, #4]
    fb08:	eb0a 0003 	add.w	r0, sl, r3
    fb0c:	4288      	cmp	r0, r1
    fb0e:	d211      	bcs.n	fb34 <z_sys_mem_pool_block_free+0x17c>
				clear_free_bit(p, level, b);
    fb10:	4631      	mov	r1, r6
    fb12:	4628      	mov	r0, r5
    fb14:	f015 fd51 	bl	255ba <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
    fb18:	682a      	ldr	r2, [r5, #0]
    fb1a:	eb02 010a 	add.w	r1, r2, sl
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fb1e:	f852 000a 	ldr.w	r0, [r2, sl]
    fb22:	684b      	ldr	r3, [r1, #4]
    fb24:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
    fb26:	f852 000a 	ldr.w	r0, [r2, sl]
    fb2a:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    fb2c:	f842 b00a 	str.w	fp, [r2, sl]
	node->prev = NULL;
    fb30:	f8c1 b004 	str.w	fp, [r1, #4]
		for (i = 0; i < 4; i++) {
    fb34:	f109 0901 	add.w	r9, r9, #1
    fb38:	f1b9 0f04 	cmp.w	r9, #4
    fb3c:	d1d8      	bne.n	faf0 <z_sys_mem_pool_block_free+0x138>
		level = level - 1;
    fb3e:	3e01      	subs	r6, #1
		bn = bn / 4;
    fb40:	fb98 f8f9 	sdiv	r8, r8, r9
    fb44:	e759      	b.n	f9fa <z_sys_mem_pool_block_free+0x42>
    fb46:	bf00      	nop
    fb48:	0002b0e6 	.word	0x0002b0e6
    fb4c:	0002c399 	.word	0x0002c399
    fb50:	0002abaa 	.word	0x0002abaa
    fb54:	0002b129 	.word	0x0002b129
    fb58:	0002b10c 	.word	0x0002b10c
    fb5c:	0002b126 	.word	0x0002b126

0000fb60 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fb60:	680b      	ldr	r3, [r1, #0]
    fb62:	3301      	adds	r3, #1
    fb64:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fb66:	4b01      	ldr	r3, [pc, #4]	; (fb6c <char_out+0xc>)
    fb68:	681b      	ldr	r3, [r3, #0]
    fb6a:	4718      	bx	r3
    fb6c:	20028240 	.word	0x20028240

0000fb70 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb74:	b085      	sub	sp, #20
    fb76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    fb78:	469b      	mov	fp, r3
    fb7a:	2c01      	cmp	r4, #1
    fb7c:	bfb8      	it	lt
    fb7e:	2401      	movlt	r4, #1
    fb80:	2b01      	cmp	r3, #1
    fb82:	bf0c      	ite	eq
    fb84:	2330      	moveq	r3, #48	; 0x30
    fb86:	2320      	movne	r3, #32
    fb88:	4615      	mov	r5, r2
    fb8a:	4680      	mov	r8, r0
    fb8c:	4689      	mov	r9, r1
    fb8e:	2601      	movs	r6, #1
    fb90:	270a      	movs	r7, #10
    fb92:	2200      	movs	r2, #0
    fb94:	f8df a070 	ldr.w	sl, [pc, #112]	; fc08 <_printk_dec_ulong+0x98>
    fb98:	9401      	str	r4, [sp, #4]
    fb9a:	9302      	str	r3, [sp, #8]
    fb9c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
    fba0:	b90a      	cbnz	r2, fba6 <_printk_dec_ulong+0x36>
    fba2:	45aa      	cmp	sl, r5
    fba4:	d21e      	bcs.n	fbe4 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    fba6:	fbb5 f0f4 	udiv	r0, r5, r4
    fbaa:	4649      	mov	r1, r9
    fbac:	3030      	adds	r0, #48	; 0x30
    fbae:	47c0      	blx	r8
			found_largest_digit = 1;
    fbb0:	2201      	movs	r2, #1
			digits++;
    fbb2:	3601      	adds	r6, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    fbb4:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    fbb8:	230a      	movs	r3, #10
		remaining--;
    fbba:	3f01      	subs	r7, #1
	while (pos >= 9) {
    fbbc:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    fbbe:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    fbc2:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    fbc6:	d1e9      	bne.n	fb9c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    fbc8:	4649      	mov	r1, r9
    fbca:	f105 0030 	add.w	r0, r5, #48	; 0x30
    fbce:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    fbd0:	f1bb 0f03 	cmp.w	fp, #3
    fbd4:	d103      	bne.n	fbde <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
    fbd6:	9b01      	ldr	r3, [sp, #4]
    fbd8:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    fbda:	2c00      	cmp	r4, #0
    fbdc:	dc0f      	bgt.n	fbfe <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
    fbde:	b005      	add	sp, #20
    fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    fbe4:	9b01      	ldr	r3, [sp, #4]
    fbe6:	42bb      	cmp	r3, r7
    fbe8:	dbe4      	blt.n	fbb4 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    fbea:	f1bb 0f02 	cmp.w	fp, #2
    fbee:	d8e1      	bhi.n	fbb4 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    fbf0:	4649      	mov	r1, r9
    fbf2:	9802      	ldr	r0, [sp, #8]
    fbf4:	9203      	str	r2, [sp, #12]
			digits++;
    fbf6:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    fbf8:	47c0      	blx	r8
			digits++;
    fbfa:	9a03      	ldr	r2, [sp, #12]
    fbfc:	e7da      	b.n	fbb4 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    fbfe:	4649      	mov	r1, r9
    fc00:	2020      	movs	r0, #32
    fc02:	47c0      	blx	r8
    fc04:	3c01      	subs	r4, #1
    fc06:	e7e8      	b.n	fbda <_printk_dec_ulong+0x6a>
    fc08:	3b9ac9ff 	.word	0x3b9ac9ff

0000fc0c <__printk_hook_install>:
	_char_out = fn;
    fc0c:	4b01      	ldr	r3, [pc, #4]	; (fc14 <__printk_hook_install+0x8>)
    fc0e:	6018      	str	r0, [r3, #0]
}
    fc10:	4770      	bx	lr
    fc12:	bf00      	nop
    fc14:	20028240 	.word	0x20028240

0000fc18 <vprintk>:
	struct out_context ctx = { 0 };
    fc18:	2300      	movs	r3, #0
{
    fc1a:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    fc1c:	ac02      	add	r4, sp, #8
    fc1e:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
    fc22:	4602      	mov	r2, r0
    fc24:	460b      	mov	r3, r1
    fc26:	4803      	ldr	r0, [pc, #12]	; (fc34 <vprintk+0x1c>)
    fc28:	4621      	mov	r1, r4
    fc2a:	f015 fe2c 	bl	25886 <z_vprintk>
}
    fc2e:	b002      	add	sp, #8
    fc30:	bd10      	pop	{r4, pc}
    fc32:	bf00      	nop
    fc34:	0000fb61 	.word	0x0000fb61

0000fc38 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    fc38:	f04f 0220 	mov.w	r2, #32
    fc3c:	f3ef 8311 	mrs	r3, BASEPRI
    fc40:	f382 8811 	msr	BASEPRI, r2
    fc44:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    fc48:	2101      	movs	r1, #1
    fc4a:	4a04      	ldr	r2, [pc, #16]	; (fc5c <nordicsemi_nrf91_init+0x24>)
    fc4c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fc50:	f383 8811 	msr	BASEPRI, r3
    fc54:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    fc58:	2000      	movs	r0, #0
    fc5a:	4770      	bx	lr
    fc5c:	40039000 	.word	0x40039000

0000fc60 <z_arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    fc60:	b120      	cbz	r0, fc6c <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    fc62:	4b03      	ldr	r3, [pc, #12]	; (fc70 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    fc64:	0180      	lsls	r0, r0, #6
    fc66:	f043 0301 	orr.w	r3, r3, #1
    fc6a:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    fc6c:	4770      	bx	lr
    fc6e:	bf00      	nop
    fc70:	00027b60 	.word	0x00027b60

0000fc74 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    fc74:	4a07      	ldr	r2, [pc, #28]	; (fc94 <SystemInit+0x20>)
    fc76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    fc7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    fc7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fc82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fc86:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    fc8a:	4b03      	ldr	r3, [pc, #12]	; (fc98 <SystemInit+0x24>)
    fc8c:	4a03      	ldr	r2, [pc, #12]	; (fc9c <SystemInit+0x28>)
    fc8e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    fc90:	4770      	bx	lr
    fc92:	bf00      	nop
    fc94:	e000ed00 	.word	0xe000ed00
    fc98:	20028244 	.word	0x20028244
    fc9c:	03d09000 	.word	0x03d09000

0000fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
    fca0:	b510      	push	{r4, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fca2:	4c07      	ldr	r4, [pc, #28]	; (fcc0 <nrf_gpio_pin_port_decode.isra.0.part.1+0x20>)
    fca4:	4907      	ldr	r1, [pc, #28]	; (fcc4 <nrf_gpio_pin_port_decode.isra.0.part.1+0x24>)
    fca6:	4622      	mov	r2, r4
    fca8:	4807      	ldr	r0, [pc, #28]	; (fcc8 <nrf_gpio_pin_port_decode.isra.0.part.1+0x28>)
    fcaa:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    fcae:	f015 ff46 	bl	25b3e <printk>
    fcb2:	4620      	mov	r0, r4
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
    fcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fcb8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    fcbc:	f015 bf4c 	b.w	25b58 <assert_post_action>
    fcc0:	0002b148 	.word	0x0002b148
    fcc4:	0002b180 	.word	0x0002b180
    fcc8:	0002abaa 	.word	0x0002abaa

0000fccc <nrf_gpio_pin_clear>:
    fccc:	281f      	cmp	r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    fcce:	b510      	push	{r4, lr}
    fcd0:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fcd2:	d901      	bls.n	fcd8 <nrf_gpio_pin_clear+0xc>
    fcd4:	f7ff ffe4 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    fcd8:	2301      	movs	r3, #1
    fcda:	fa03 f404 	lsl.w	r4, r3, r4
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    fcde:	4b01      	ldr	r3, [pc, #4]	; (fce4 <nrf_gpio_pin_clear+0x18>)
    fce0:	60dc      	str	r4, [r3, #12]
}
    fce2:	bd10      	pop	{r4, pc}
    fce4:	40842500 	.word	0x40842500

0000fce8 <nrf_gpio_pin_set>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fce8:	281f      	cmp	r0, #31
{
    fcea:	b510      	push	{r4, lr}
    fcec:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fcee:	d901      	bls.n	fcf4 <nrf_gpio_pin_set+0xc>
    fcf0:	f7ff ffd6 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    fcf4:	2301      	movs	r3, #1
    fcf6:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTSET = set_mask;
    fcfa:	4b01      	ldr	r3, [pc, #4]	; (fd00 <nrf_gpio_pin_set+0x18>)
    fcfc:	609c      	str	r4, [r3, #8]
}
    fcfe:	bd10      	pop	{r4, pc}
    fd00:	40842500 	.word	0x40842500

0000fd04 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t  const * const p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void                     * p_context)
{
    fd04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd08:	4681      	mov	r9, r0
    fd0a:	4692      	mov	sl, r2
    fd0c:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    fd0e:	460c      	mov	r4, r1
    fd10:	b949      	cbnz	r1, fd26 <nrfx_spim_init+0x22>
    fd12:	495d      	ldr	r1, [pc, #372]	; (fe88 <nrfx_spim_init+0x184>)
    fd14:	485d      	ldr	r0, [pc, #372]	; (fe8c <nrfx_spim_init+0x188>)
    fd16:	23a4      	movs	r3, #164	; 0xa4
    fd18:	4a5d      	ldr	r2, [pc, #372]	; (fe90 <nrfx_spim_init+0x18c>)
    fd1a:	f015 ff10 	bl	25b3e <printk>
    fd1e:	21a4      	movs	r1, #164	; 0xa4
    fd20:	485b      	ldr	r0, [pc, #364]	; (fe90 <nrfx_spim_init+0x18c>)
    fd22:	f015 ff19 	bl	25b58 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fd26:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    fd28:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    fd2c:	4e59      	ldr	r6, [pc, #356]	; (fe94 <nrfx_spim_init+0x190>)
    fd2e:	436b      	muls	r3, r5
    fd30:	18f2      	adds	r2, r6, r3
    fd32:	7f11      	ldrb	r1, [r2, #28]
    fd34:	2900      	cmp	r1, #0
    fd36:	f040 80a5 	bne.w	fe84 <nrfx_spim_init+0x180>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    fd3a:	f8d9 7000 	ldr.w	r7, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    fd3e:	f846 a003 	str.w	sl, [r6, r3]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    fd42:	7b23      	ldrb	r3, [r4, #12]
    p_cb->p_context = p_context;
    fd44:	f8c2 8004 	str.w	r8, [r2, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
    fd48:	2b01      	cmp	r3, #1
    fd4a:	7820      	ldrb	r0, [r4, #0]
    fd4c:	f200 8088 	bhi.w	fe60 <nrfx_spim_init+0x15c>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    fd50:	f7ff ffbc 	bl	fccc <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    fd54:	f894 8000 	ldrb.w	r8, [r4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fd58:	f1b8 0f1f 	cmp.w	r8, #31
    fd5c:	d901      	bls.n	fd62 <nrfx_spim_init+0x5e>
    fd5e:	f7ff ff9f 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd62:	2201      	movs	r2, #1
    fd64:	4b4c      	ldr	r3, [pc, #304]	; (fe98 <nrfx_spim_init+0x194>)
    fd66:	f108 0880 	add.w	r8, r8, #128	; 0x80
    fd6a:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    fd6e:	f894 8001 	ldrb.w	r8, [r4, #1]
    fd72:	469a      	mov	sl, r3
    fd74:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    fd78:	d075      	beq.n	fe66 <nrfx_spim_init+0x162>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    fd7a:	4640      	mov	r0, r8
    fd7c:	f7ff ffa6 	bl	fccc <nrf_gpio_pin_clear>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fd80:	f1b8 0f1f 	cmp.w	r8, #31
        mosi_pin = p_config->mosi_pin;
    fd84:	46c3      	mov	fp, r8
    fd86:	d901      	bls.n	fd8c <nrfx_spim_init+0x88>
    fd88:	f7ff ff8a 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fd8c:	2303      	movs	r3, #3
    fd8e:	f108 0880 	add.w	r8, r8, #128	; 0x80
    fd92:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    fd96:	78a3      	ldrb	r3, [r4, #2]
    fd98:	2bff      	cmp	r3, #255	; 0xff
    fd9a:	d067      	beq.n	fe6c <nrfx_spim_init+0x168>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fd9c:	2b1f      	cmp	r3, #31
    {
        miso_pin = p_config->miso_pin;
    fd9e:	4698      	mov	r8, r3
    fda0:	d903      	bls.n	fdaa <nrfx_spim_init+0xa6>
    fda2:	9301      	str	r3, [sp, #4]
    fda4:	f7ff ff7c 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    fda8:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fdaa:	2204      	movs	r2, #4
    fdac:	3380      	adds	r3, #128	; 0x80
    fdae:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    }
    else
    {
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    p_cb->miso_pin = p_config->miso_pin;
    fdb2:	2324      	movs	r3, #36	; 0x24
    fdb4:	fb03 6305 	mla	r3, r3, r5, r6
    fdb8:	78a2      	ldrb	r2, [r4, #2]
    fdba:	f883 2020 	strb.w	r2, [r3, #32]
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    fdbe:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fdc0:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    fdc2:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    fdc4:	d014      	beq.n	fdf0 <nrfx_spim_init+0xec>
    {
        if (p_config->ss_active_high)
    fdc6:	7923      	ldrb	r3, [r4, #4]
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d052      	beq.n	fe72 <nrfx_spim_init+0x16e>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
    fdcc:	f7ff ff7e 	bl	fccc <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
    fdd0:	78e3      	ldrb	r3, [r4, #3]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    fdd2:	2b1f      	cmp	r3, #31
    fdd4:	d903      	bls.n	fdde <nrfx_spim_init+0xda>
    fdd6:	9301      	str	r3, [sp, #4]
    fdd8:	f7ff ff62 	bl	fca0 <nrf_gpio_pin_port_decode.isra.0.part.1>
    fddc:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    fdde:	2203      	movs	r2, #3
    fde0:	3380      	adds	r3, #128	; 0x80
    fde2:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    fde6:	2324      	movs	r3, #36	; 0x24
    fde8:	fb03 6305 	mla	r3, r3, r5, r6
    fdec:	7922      	ldrb	r2, [r4, #4]
    fdee:	779a      	strb	r2, [r3, #30]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    fdf0:	7823      	ldrb	r3, [r4, #0]
                                        nrf_spim_mode_t      spi_mode,
                                        nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    fdf2:	7b22      	ldrb	r2, [r4, #12]
    p_reg->PSEL.SCK  = sck_pin;
    fdf4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    fdf8:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    fdfa:	f8c7 b50c 	str.w	fp, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    fdfe:	f8c7 8510 	str.w	r8, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    fe02:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    fe06:	7b63      	ldrb	r3, [r4, #13]
    fe08:	3300      	adds	r3, #0
    fe0a:	bf18      	it	ne
    fe0c:	2301      	movne	r3, #1
    switch (spi_mode)
    fe0e:	2a02      	cmp	r2, #2
    fe10:	d032      	beq.n	fe78 <nrfx_spim_init+0x174>
    fe12:	2a03      	cmp	r2, #3
    fe14:	d033      	beq.n	fe7e <nrfx_spim_init+0x17a>
    fe16:	2a01      	cmp	r2, #1
    fe18:	d101      	bne.n	fe1e <nrfx_spim_init+0x11a>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    fe1a:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    fe1e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

__STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                      uint8_t         orc)
{
    p_reg->ORC = orc;
    fe22:	79a3      	ldrb	r3, [r4, #6]
    fe24:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);

    nrf_spim_orc_set(p_spim, p_config->orc);

    if (p_cb->handler)
    fe28:	2324      	movs	r3, #36	; 0x24
    fe2a:	436b      	muls	r3, r5
    fe2c:	58f3      	ldr	r3, [r6, r3]
    fe2e:	b113      	cbz	r3, fe36 <nrfx_spim_init+0x132>
    p_reg->INTENSET = mask;
    fe30:	2240      	movs	r2, #64	; 0x40
    fe32:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    fe36:	2207      	movs	r2, #7
    fe38:	f8c7 2500 	str.w	r2, [r7, #1280]	; 0x500
        nrf_spim_int_enable(p_spim, NRF_SPIM_INT_END_MASK);
    }

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    fe3c:	b12b      	cbz	r3, fe4a <nrfx_spim_init+0x146>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    fe3e:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    fe42:	f340 3007 	sbfx	r0, r0, #12, #8
    fe46:	f001 fa37 	bl	112b8 <z_arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    fe4a:	2324      	movs	r3, #36	; 0x24
    fe4c:	fb03 6505 	mla	r5, r3, r5, r6
    fe50:	2300      	movs	r3, #0
    fe52:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fe54:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    fe56:	4811      	ldr	r0, [pc, #68]	; (fe9c <nrfx_spim_init+0x198>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    fe58:	772b      	strb	r3, [r5, #28]
}
    fe5a:	b003      	add	sp, #12
    fe5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    fe60:	f7ff ff42 	bl	fce8 <nrf_gpio_pin_set>
    fe64:	e776      	b.n	fd54 <nrfx_spim_init+0x50>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    fe66:	f04f 3bff 	mov.w	fp, #4294967295
    fe6a:	e794      	b.n	fd96 <nrfx_spim_init+0x92>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    fe6c:	f04f 38ff 	mov.w	r8, #4294967295
    fe70:	e79f      	b.n	fdb2 <nrfx_spim_init+0xae>
            nrf_gpio_pin_set(p_config->ss_pin);
    fe72:	f7ff ff39 	bl	fce8 <nrf_gpio_pin_set>
    fe76:	e7ab      	b.n	fdd0 <nrfx_spim_init+0xcc>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fe78:	f043 0304 	orr.w	r3, r3, #4
    fe7c:	e7cf      	b.n	fe1e <nrfx_spim_init+0x11a>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    fe7e:	f043 0306 	orr.w	r3, r3, #6
    fe82:	e7cc      	b.n	fe1e <nrfx_spim_init+0x11a>
        return err_code;
    fe84:	4806      	ldr	r0, [pc, #24]	; (fea0 <nrfx_spim_init+0x19c>)
    fe86:	e7e8      	b.n	fe5a <nrfx_spim_init+0x156>
    fe88:	0002b1dd 	.word	0x0002b1dd
    fe8c:	0002abaa 	.word	0x0002abaa
    fe90:	0002b19c 	.word	0x0002b19c
    fe94:	20020150 	.word	0x20020150
    fe98:	40842500 	.word	0x40842500
    fe9c:	0bad0000 	.word	0x0bad0000
    fea0:	0bad0005 	.word	0x0bad0005

0000fea4 <nrfx_spim_xfer>:
nrfx_err_t nrfx_spim_xfer(nrfx_spim_t     const * const p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    fea4:	2324      	movs	r3, #36	; 0x24
{
    fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    feaa:	4e63      	ldr	r6, [pc, #396]	; (10038 <nrfx_spim_xfer+0x194>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    feac:	7905      	ldrb	r5, [r0, #4]
{
    feae:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    feb0:	fb03 6305 	mla	r3, r3, r5, r6
    feb4:	7f1b      	ldrb	r3, [r3, #28]
{
    feb6:	460c      	mov	r4, r1
    feb8:	4617      	mov	r7, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    feba:	b95b      	cbnz	r3, fed4 <nrfx_spim_xfer+0x30>
    febc:	495f      	ldr	r1, [pc, #380]	; (1003c <nrfx_spim_xfer+0x198>)
    febe:	4860      	ldr	r0, [pc, #384]	; (10040 <nrfx_spim_xfer+0x19c>)
    fec0:	f240 2329 	movw	r3, #553	; 0x229
    fec4:	4a5f      	ldr	r2, [pc, #380]	; (10044 <nrfx_spim_xfer+0x1a0>)
    fec6:	f015 fe3a 	bl	25b3e <printk>
    feca:	f240 2129 	movw	r1, #553	; 0x229
    fece:	485d      	ldr	r0, [pc, #372]	; (10044 <nrfx_spim_xfer+0x1a0>)
    fed0:	f015 fe42 	bl	25b58 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    fed4:	6823      	ldr	r3, [r4, #0]
    fed6:	b96b      	cbnz	r3, fef4 <nrfx_spim_xfer+0x50>
    fed8:	6863      	ldr	r3, [r4, #4]
    feda:	b15b      	cbz	r3, fef4 <nrfx_spim_xfer+0x50>
    fedc:	495a      	ldr	r1, [pc, #360]	; (10048 <nrfx_spim_xfer+0x1a4>)
    fede:	4858      	ldr	r0, [pc, #352]	; (10040 <nrfx_spim_xfer+0x19c>)
    fee0:	f240 232a 	movw	r3, #554	; 0x22a
    fee4:	4a57      	ldr	r2, [pc, #348]	; (10044 <nrfx_spim_xfer+0x1a0>)
    fee6:	f015 fe2a 	bl	25b3e <printk>
    feea:	f240 212a 	movw	r1, #554	; 0x22a
    feee:	4855      	ldr	r0, [pc, #340]	; (10044 <nrfx_spim_xfer+0x1a0>)
    fef0:	f015 fe32 	bl	25b58 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
    fef4:	68a3      	ldr	r3, [r4, #8]
    fef6:	b96b      	cbnz	r3, ff14 <nrfx_spim_xfer+0x70>
    fef8:	68e3      	ldr	r3, [r4, #12]
    fefa:	b15b      	cbz	r3, ff14 <nrfx_spim_xfer+0x70>
    fefc:	4953      	ldr	r1, [pc, #332]	; (1004c <nrfx_spim_xfer+0x1a8>)
    fefe:	4850      	ldr	r0, [pc, #320]	; (10040 <nrfx_spim_xfer+0x19c>)
    ff00:	f240 232b 	movw	r3, #555	; 0x22b
    ff04:	4a4f      	ldr	r2, [pc, #316]	; (10044 <nrfx_spim_xfer+0x1a0>)
    ff06:	f015 fe1a 	bl	25b3e <printk>
    ff0a:	f240 212b 	movw	r1, #555	; 0x22b
    ff0e:	484d      	ldr	r0, [pc, #308]	; (10044 <nrfx_spim_xfer+0x1a0>)
    ff10:	f015 fe22 	bl	25b58 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    ff14:	f898 3004 	ldrb.w	r3, [r8, #4]
    ff18:	b93b      	cbnz	r3, ff2a <nrfx_spim_xfer+0x86>
    ff1a:	68e3      	ldr	r3, [r4, #12]
    ff1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ff20:	d203      	bcs.n	ff2a <nrfx_spim_xfer+0x86>
    ff22:	6863      	ldr	r3, [r4, #4]
    ff24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ff28:	d30b      	bcc.n	ff42 <nrfx_spim_xfer+0x9e>
    ff2a:	4949      	ldr	r1, [pc, #292]	; (10050 <nrfx_spim_xfer+0x1ac>)
    ff2c:	4844      	ldr	r0, [pc, #272]	; (10040 <nrfx_spim_xfer+0x19c>)
    ff2e:	f240 232e 	movw	r3, #558	; 0x22e
    ff32:	4a44      	ldr	r2, [pc, #272]	; (10044 <nrfx_spim_xfer+0x1a0>)
    ff34:	f015 fe03 	bl	25b3e <printk>
    ff38:	f240 212e 	movw	r1, #558	; 0x22e
    ff3c:	4841      	ldr	r0, [pc, #260]	; (10044 <nrfx_spim_xfer+0x1a0>)
    ff3e:	f015 fe0b 	bl	25b58 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    ff42:	2324      	movs	r3, #36	; 0x24
    ff44:	436b      	muls	r3, r5
    ff46:	18f2      	adds	r2, r6, r3
    ff48:	7f51      	ldrb	r1, [r2, #29]
    ff4a:	2900      	cmp	r1, #0
    ff4c:	d171      	bne.n	10032 <nrfx_spim_xfer+0x18e>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    ff4e:	58f3      	ldr	r3, [r6, r3]
    ff50:	b123      	cbz	r3, ff5c <nrfx_spim_xfer+0xb8>
    ff52:	f017 0f14 	tst.w	r7, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    ff56:	bf04      	itt	eq
    ff58:	2301      	moveq	r3, #1
    ff5a:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    ff5c:	f04f 0c24 	mov.w	ip, #36	; 0x24
    ff60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    ff64:	fb0c 6c05 	mla	ip, ip, r5, r6
    ff68:	f10c 0e0c 	add.w	lr, ip, #12
    ff6c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    ff70:	f89c 001f 	ldrb.w	r0, [ip, #31]
    ff74:	28ff      	cmp	r0, #255	; 0xff
    ff76:	d004      	beq.n	ff82 <nrfx_spim_xfer+0xde>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    ff78:	f89c 301e 	ldrb.w	r3, [ip, #30]
    ff7c:	b1bb      	cbz	r3, ffae <nrfx_spim_xfer+0x10a>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
    ff7e:	f7ff feb3 	bl	fce8 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    ff82:	6821      	ldr	r1, [r4, #0]
    ff84:	b121      	cbz	r1, ff90 <nrfx_spim_xfer+0xec>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ff86:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    ff8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ff8e:	d106      	bne.n	ff9e <nrfx_spim_xfer+0xfa>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    ff90:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    ff92:	b17a      	cbz	r2, ffb4 <nrfx_spim_xfer+0x110>
    ff94:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    ff98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ff9c:	d00a      	beq.n	ffb4 <nrfx_spim_xfer+0x110>
        p_cb->transfer_in_progress = false;
    ff9e:	2324      	movs	r3, #36	; 0x24
    ffa0:	fb03 6505 	mla	r5, r3, r5, r6
    ffa4:	2300      	movs	r3, #0
        return err_code;
    ffa6:	482b      	ldr	r0, [pc, #172]	; (10054 <nrfx_spim_xfer+0x1b0>)
        p_cb->transfer_in_progress = false;
    ffa8:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    ffaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
    ffae:	f7ff fe8d 	bl	fccc <nrf_gpio_pin_clear>
    ffb2:	e7e6      	b.n	ff82 <nrfx_spim_xfer+0xde>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    ffb4:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    ffb8:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ffba:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ffbe:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    ffc2:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ffc4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ffc8:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    ffca:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ffce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    ffd2:	f017 0201 	ands.w	r2, r7, #1
}


__STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    ffd6:	bf18      	it	ne
    ffd8:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
    ffda:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    ffde:	f017 0202 	ands.w	r2, r7, #2
}

__STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    ffe2:	bf18      	it	ne
    ffe4:	2201      	movne	r2, #1
}

__STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    ffe6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    ffea:	073a      	lsls	r2, r7, #28
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ffec:	bf5c      	itt	pl
    ffee:	2201      	movpl	r2, #1
    fff0:	611a      	strpl	r2, [r3, #16]
    if (!p_cb->handler)
    fff2:	2224      	movs	r2, #36	; 0x24
    fff4:	436a      	muls	r2, r5
    fff6:	58b2      	ldr	r2, [r6, r2]
    fff8:	b992      	cbnz	r2, 10020 <nrfx_spim_xfer+0x17c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fffa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END)){}
    fffe:	2a00      	cmp	r2, #0
   10000:	d0fb      	beq.n	fffa <nrfx_spim_xfer+0x156>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10002:	2324      	movs	r3, #36	; 0x24
   10004:	fb03 6505 	mla	r5, r3, r5, r6
   10008:	7fe8      	ldrb	r0, [r5, #31]
   1000a:	28ff      	cmp	r0, #255	; 0xff
   1000c:	d003      	beq.n	10016 <nrfx_spim_xfer+0x172>
                if (p_cb->ss_active_high)
   1000e:	7fab      	ldrb	r3, [r5, #30]
   10010:	b11b      	cbz	r3, 1001a <nrfx_spim_xfer+0x176>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   10012:	f7ff fe5b 	bl	fccc <nrf_gpio_pin_clear>
    return err_code;
   10016:	4810      	ldr	r0, [pc, #64]	; (10058 <nrfx_spim_xfer+0x1b4>)
   10018:	e7c7      	b.n	ffaa <nrfx_spim_xfer+0x106>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   1001a:	f7ff fe65 	bl	fce8 <nrf_gpio_pin_set>
   1001e:	e7fa      	b.n	10016 <nrfx_spim_xfer+0x172>
   10020:	2240      	movs	r2, #64	; 0x40
    if (!enable)
   10022:	f017 0f04 	tst.w	r7, #4
    p_reg->INTENCLR = mask;
   10026:	bf14      	ite	ne
   10028:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   1002c:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   10030:	e7f1      	b.n	10016 <nrfx_spim_xfer+0x172>
        return err_code;
   10032:	480a      	ldr	r0, [pc, #40]	; (1005c <nrfx_spim_xfer+0x1b8>)
   10034:	e7b9      	b.n	ffaa <nrfx_spim_xfer+0x106>
   10036:	bf00      	nop
   10038:	20020150 	.word	0x20020150
   1003c:	0002b1e6 	.word	0x0002b1e6
   10040:	0002abaa 	.word	0x0002abaa
   10044:	0002b19c 	.word	0x0002b19c
   10048:	0002b212 	.word	0x0002b212
   1004c:	0002b259 	.word	0x0002b259
   10050:	0002b2a0 	.word	0x0002b2a0
   10054:	0bad000a 	.word	0x0bad000a
   10058:	0bad0000 	.word	0x0bad0000
   1005c:	0bad000b 	.word	0x0bad000b

00010060 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10060:	4b15      	ldr	r3, [pc, #84]	; (100b8 <nrfx_spim_3_irq_handler+0x58>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   10062:	b510      	push	{r4, lr}
   10064:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   10068:	b322      	cbz	r2, 100b4 <nrfx_spim_3_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1006a:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   1006c:	4c13      	ldr	r4, [pc, #76]	; (100bc <nrfx_spim_3_irq_handler+0x5c>)
   1006e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10072:	6823      	ldr	r3, [r4, #0]
   10074:	b95b      	cbnz	r3, 1008e <nrfx_spim_3_irq_handler+0x2e>
   10076:	4912      	ldr	r1, [pc, #72]	; (100c0 <nrfx_spim_3_irq_handler+0x60>)
   10078:	4812      	ldr	r0, [pc, #72]	; (100c4 <nrfx_spim_3_irq_handler+0x64>)
   1007a:	f240 2393 	movw	r3, #659	; 0x293
   1007e:	4a12      	ldr	r2, [pc, #72]	; (100c8 <nrfx_spim_3_irq_handler+0x68>)
   10080:	f015 fd5d 	bl	25b3e <printk>
   10084:	f240 2193 	movw	r1, #659	; 0x293
   10088:	480f      	ldr	r0, [pc, #60]	; (100c8 <nrfx_spim_3_irq_handler+0x68>)
   1008a:	f015 fd65 	bl	25b58 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1008e:	7fe0      	ldrb	r0, [r4, #31]
   10090:	28ff      	cmp	r0, #255	; 0xff
   10092:	d003      	beq.n	1009c <nrfx_spim_3_irq_handler+0x3c>
            if (p_cb->ss_active_high)
   10094:	7fa3      	ldrb	r3, [r4, #30]
   10096:	b153      	cbz	r3, 100ae <nrfx_spim_3_irq_handler+0x4e>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   10098:	f7ff fe18 	bl	fccc <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   1009c:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1009e:	480b      	ldr	r0, [pc, #44]	; (100cc <nrfx_spim_3_irq_handler+0x6c>)
    p_cb->transfer_in_progress = false;
   100a0:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   100a2:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   100a4:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   100a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   100ac:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   100ae:	f7ff fe1b 	bl	fce8 <nrf_gpio_pin_set>
   100b2:	e7f3      	b.n	1009c <nrfx_spim_3_irq_handler+0x3c>
}
   100b4:	bd10      	pop	{r4, pc}
   100b6:	bf00      	nop
   100b8:	4000b000 	.word	0x4000b000
   100bc:	20020150 	.word	0x20020150
   100c0:	0002b18e 	.word	0x0002b18e
   100c4:	0002abaa 	.word	0x0002abaa
   100c8:	0002b19c 	.word	0x0002b19c
   100cc:	20020158 	.word	0x20020158

000100d0 <nrf_gpio_pin_port_decode.isra.0>:
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   100d0:	281f      	cmp	r0, #31
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   100d2:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   100d4:	d90b      	bls.n	100ee <nrf_gpio_pin_port_decode.isra.0+0x1e>
   100d6:	4907      	ldr	r1, [pc, #28]	; (100f4 <nrf_gpio_pin_port_decode.isra.0+0x24>)
   100d8:	4807      	ldr	r0, [pc, #28]	; (100f8 <nrf_gpio_pin_port_decode.isra.0+0x28>)
   100da:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   100de:	4a07      	ldr	r2, [pc, #28]	; (100fc <nrf_gpio_pin_port_decode.isra.0+0x2c>)
   100e0:	f015 fd2d 	bl	25b3e <printk>
   100e4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   100e8:	4804      	ldr	r0, [pc, #16]	; (100fc <nrf_gpio_pin_port_decode.isra.0+0x2c>)
   100ea:	f015 fd35 	bl	25b58 <assert_post_action>
}
   100ee:	4804      	ldr	r0, [pc, #16]	; (10100 <nrf_gpio_pin_port_decode.isra.0+0x30>)
   100f0:	bd08      	pop	{r3, pc}
   100f2:	bf00      	nop
   100f4:	0002b180 	.word	0x0002b180
   100f8:	0002abaa 	.word	0x0002abaa
   100fc:	0002b148 	.word	0x0002b148
   10100:	40842500 	.word	0x40842500

00010104 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   10104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10108:	4681      	mov	r9, r0
   1010a:	4692      	mov	sl, r2
   1010c:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   1010e:	460c      	mov	r4, r1
   10110:	b949      	cbnz	r1, 10126 <nrfx_twim_init+0x22>
   10112:	492e      	ldr	r1, [pc, #184]	; (101cc <nrfx_twim_init+0xc8>)
   10114:	482e      	ldr	r0, [pc, #184]	; (101d0 <nrfx_twim_init+0xcc>)
   10116:	23a0      	movs	r3, #160	; 0xa0
   10118:	4a2e      	ldr	r2, [pc, #184]	; (101d4 <nrfx_twim_init+0xd0>)
   1011a:	f015 fd10 	bl	25b3e <printk>
   1011e:	21a0      	movs	r1, #160	; 0xa0
   10120:	482c      	ldr	r0, [pc, #176]	; (101d4 <nrfx_twim_init+0xd0>)
   10122:	f015 fd19 	bl	25b58 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   10126:	e9d4 2300 	ldrd	r2, r3, [r4]
   1012a:	429a      	cmp	r2, r3
   1012c:	d109      	bne.n	10142 <nrfx_twim_init+0x3e>
   1012e:	492a      	ldr	r1, [pc, #168]	; (101d8 <nrfx_twim_init+0xd4>)
   10130:	4827      	ldr	r0, [pc, #156]	; (101d0 <nrfx_twim_init+0xcc>)
   10132:	23a1      	movs	r3, #161	; 0xa1
   10134:	4a27      	ldr	r2, [pc, #156]	; (101d4 <nrfx_twim_init+0xd0>)
   10136:	f015 fd02 	bl	25b3e <printk>
   1013a:	21a1      	movs	r1, #161	; 0xa1
   1013c:	4825      	ldr	r0, [pc, #148]	; (101d4 <nrfx_twim_init+0xd0>)
   1013e:	f015 fd0b 	bl	25b58 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10142:	2634      	movs	r6, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   10144:	f899 7004 	ldrb.w	r7, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10148:	4d24      	ldr	r5, [pc, #144]	; (101dc <nrfx_twim_init+0xd8>)
   1014a:	437e      	muls	r6, r7
   1014c:	19ab      	adds	r3, r5, r6
   1014e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   10152:	bbca      	cbnz	r2, 101c8 <nrfx_twim_init+0xc4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   10154:	609a      	str	r2, [r3, #8]
    p_cb->p_context       = p_context;
   10156:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->repeated        = false;
   1015a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
   1015e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   10162:	f8d4 8000 	ldr.w	r8, [r4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   10166:	7b62      	ldrb	r2, [r4, #13]
    p_cb->handler         = event_handler;
   10168:	f845 a006 	str.w	sl, [r5, r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1016c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10170:	4640      	mov	r0, r8
   10172:	f7ff ffad 	bl	100d0 <nrf_gpio_pin_port_decode.isra.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10176:	f240 6a0c 	movw	sl, #1548	; 0x60c
   1017a:	f108 0880 	add.w	r8, r8, #128	; 0x80
   1017e:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   10182:	f8d4 8004 	ldr.w	r8, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10186:	4640      	mov	r0, r8
   10188:	f7ff ffa2 	bl	100d0 <nrf_gpio_pin_port_decode.isra.0>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1018c:	e9d4 2300 	ldrd	r2, r3, [r4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10190:	f108 0880 	add.w	r8, r8, #128	; 0x80
   10194:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   10198:	f8d9 0000 	ldr.w	r0, [r9]

__STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                       uint32_t scl_pin,
                                       uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   1019c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   101a0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   101a4:	68a3      	ldr	r3, [r4, #8]
}

__STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                            nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   101a6:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   101aa:	59ab      	ldr	r3, [r5, r6]
   101ac:	b11b      	cbz	r3, 101b6 <nrfx_twim_init+0xb2>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   101ae:	f340 3007 	sbfx	r0, r0, #12, #8
   101b2:	f001 f881 	bl	112b8 <z_arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   101b6:	2334      	movs	r3, #52	; 0x34
   101b8:	fb03 5507 	mla	r5, r3, r7, r5
   101bc:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   101be:	4808      	ldr	r0, [pc, #32]	; (101e0 <nrfx_twim_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   101c0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   101c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   101c8:	4806      	ldr	r0, [pc, #24]	; (101e4 <nrfx_twim_init+0xe0>)
   101ca:	e7fb      	b.n	101c4 <nrfx_twim_init+0xc0>
   101cc:	0002b1dd 	.word	0x0002b1dd
   101d0:	0002abaa 	.word	0x0002abaa
   101d4:	0002b369 	.word	0x0002b369
   101d8:	0002b3aa 	.word	0x0002b3aa
   101dc:	20020174 	.word	0x20020174
   101e0:	0bad0000 	.word	0x0bad0000
   101e4:	0bad0005 	.word	0x0bad0005

000101e8 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   101e8:	2234      	movs	r2, #52	; 0x34
{
   101ea:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   101ec:	4d0f      	ldr	r5, [pc, #60]	; (1022c <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   101ee:	7904      	ldrb	r4, [r0, #4]
{
   101f0:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   101f2:	fb02 5204 	mla	r2, r2, r4, r5
   101f6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   101fa:	2a01      	cmp	r2, #1
   101fc:	d00b      	beq.n	10216 <nrfx_twim_enable+0x2e>
   101fe:	490c      	ldr	r1, [pc, #48]	; (10230 <nrfx_twim_enable+0x48>)
   10200:	480c      	ldr	r0, [pc, #48]	; (10234 <nrfx_twim_enable+0x4c>)
   10202:	f44f 7384 	mov.w	r3, #264	; 0x108
   10206:	4a0c      	ldr	r2, [pc, #48]	; (10238 <nrfx_twim_enable+0x50>)
   10208:	f015 fc99 	bl	25b3e <printk>
   1020c:	f44f 7184 	mov.w	r1, #264	; 0x108
   10210:	4809      	ldr	r0, [pc, #36]	; (10238 <nrfx_twim_enable+0x50>)
   10212:	f015 fca1 	bl	25b58 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   10216:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   10218:	6833      	ldr	r3, [r6, #0]
   1021a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1021e:	2334      	movs	r3, #52	; 0x34
   10220:	fb03 5404 	mla	r4, r3, r4, r5
   10224:	2302      	movs	r3, #2
   10226:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1022a:	bd70      	pop	{r4, r5, r6, pc}
   1022c:	20020174 	.word	0x20020174
   10230:	0002b33f 	.word	0x0002b33f
   10234:	0002abaa 	.word	0x0002abaa
   10238:	0002b369 	.word	0x0002b369

0001023c <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1023c:	2234      	movs	r2, #52	; 0x34
{
   1023e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   10240:	4d14      	ldr	r5, [pc, #80]	; (10294 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10242:	7904      	ldrb	r4, [r0, #4]
{
   10244:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   10246:	fb02 5204 	mla	r2, r2, r4, r5
   1024a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   1024e:	b95a      	cbnz	r2, 10268 <nrfx_twim_disable+0x2c>
   10250:	4911      	ldr	r1, [pc, #68]	; (10298 <nrfx_twim_disable+0x5c>)
   10252:	4812      	ldr	r0, [pc, #72]	; (1029c <nrfx_twim_disable+0x60>)
   10254:	f240 1313 	movw	r3, #275	; 0x113
   10258:	4a11      	ldr	r2, [pc, #68]	; (102a0 <nrfx_twim_disable+0x64>)
   1025a:	f015 fc70 	bl	25b3e <printk>
   1025e:	f240 1113 	movw	r1, #275	; 0x113
   10262:	480f      	ldr	r0, [pc, #60]	; (102a0 <nrfx_twim_disable+0x64>)
   10264:	f015 fc78 	bl	25b58 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   10268:	2234      	movs	r2, #52	; 0x34
   1026a:	2100      	movs	r1, #0
   1026c:	fb02 5404 	mla	r4, r2, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   10270:	6833      	ldr	r3, [r6, #0]
    p_reg->INTENCLR = mask;
   10272:	4a0c      	ldr	r2, [pc, #48]	; (102a4 <nrfx_twim_disable+0x68>)
    p_cb->int_mask = 0;
   10274:	60a1      	str	r1, [r4, #8]
   10276:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1027a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1027e:	f422 52bc 	bic.w	r2, r2, #6016	; 0x1780
   10282:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   10286:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1028a:	2301      	movs	r3, #1
   1028c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   10290:	bd70      	pop	{r4, r5, r6, pc}
   10292:	bf00      	nop
   10294:	20020174 	.word	0x20020174
   10298:	0002b1e6 	.word	0x0002b1e6
   1029c:	0002abaa 	.word	0x0002abaa
   102a0:	0002b369 	.word	0x0002b369
   102a4:	019c0202 	.word	0x019c0202

000102a8 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   102a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   102ac:	7903      	ldrb	r3, [r0, #4]
{
   102ae:	4604      	mov	r4, r0
   102b0:	460d      	mov	r5, r1
   102b2:	4690      	mov	r8, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   102b4:	b93b      	cbnz	r3, 102c6 <nrfx_twim_xfer+0x1e>
   102b6:	684b      	ldr	r3, [r1, #4]
   102b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   102bc:	d203      	bcs.n	102c6 <nrfx_twim_xfer+0x1e>
   102be:	688b      	ldr	r3, [r1, #8]
   102c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   102c4:	d30b      	bcc.n	102de <nrfx_twim_xfer+0x36>
   102c6:	49bc      	ldr	r1, [pc, #752]	; (105b8 <nrfx_twim_xfer+0x310>)
   102c8:	48bc      	ldr	r0, [pc, #752]	; (105bc <nrfx_twim_xfer+0x314>)
   102ca:	f240 13e7 	movw	r3, #487	; 0x1e7
   102ce:	4abc      	ldr	r2, [pc, #752]	; (105c0 <nrfx_twim_xfer+0x318>)
   102d0:	f015 fc35 	bl	25b3e <printk>
   102d4:	f240 11e7 	movw	r1, #487	; 0x1e7
   102d8:	48b9      	ldr	r0, [pc, #740]	; (105c0 <nrfx_twim_xfer+0x318>)
   102da:	f015 fc3d 	bl	25b58 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   102de:	2334      	movs	r3, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   102e0:	7927      	ldrb	r7, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   102e2:	4eb8      	ldr	r6, [pc, #736]	; (105c4 <nrfx_twim_xfer+0x31c>)
   102e4:	437b      	muls	r3, r7
   102e6:	58f3      	ldr	r3, [r6, r3]
   102e8:	b973      	cbnz	r3, 10308 <nrfx_twim_xfer+0x60>
   102ea:	782b      	ldrb	r3, [r5, #0]
   102ec:	2b02      	cmp	r3, #2
   102ee:	d10b      	bne.n	10308 <nrfx_twim_xfer+0x60>
   102f0:	49b5      	ldr	r1, [pc, #724]	; (105c8 <nrfx_twim_xfer+0x320>)
   102f2:	48b2      	ldr	r0, [pc, #712]	; (105bc <nrfx_twim_xfer+0x314>)
   102f4:	f240 13ed 	movw	r3, #493	; 0x1ed
   102f8:	4ab1      	ldr	r2, [pc, #708]	; (105c0 <nrfx_twim_xfer+0x318>)
   102fa:	f015 fc20 	bl	25b3e <printk>
   102fe:	f240 11ed 	movw	r1, #493	; 0x1ed
   10302:	48af      	ldr	r0, [pc, #700]	; (105c0 <nrfx_twim_xfer+0x318>)
   10304:	f015 fc28 	bl	25b58 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   10308:	2334      	movs	r3, #52	; 0x34
   1030a:	437b      	muls	r3, r7
   1030c:	58f3      	ldr	r3, [r6, r3]
   1030e:	b973      	cbnz	r3, 1032e <nrfx_twim_xfer+0x86>
   10310:	782b      	ldrb	r3, [r5, #0]
   10312:	2b03      	cmp	r3, #3
   10314:	d10b      	bne.n	1032e <nrfx_twim_xfer+0x86>
   10316:	49ad      	ldr	r1, [pc, #692]	; (105cc <nrfx_twim_xfer+0x324>)
   10318:	48a8      	ldr	r0, [pc, #672]	; (105bc <nrfx_twim_xfer+0x314>)
   1031a:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   1031e:	4aa8      	ldr	r2, [pc, #672]	; (105c0 <nrfx_twim_xfer+0x318>)
   10320:	f015 fc0d 	bl	25b3e <printk>
   10324:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   10328:	48a5      	ldr	r0, [pc, #660]	; (105c0 <nrfx_twim_xfer+0x318>)
   1032a:	f015 fc15 	bl	25b58 <assert_post_action>
   1032e:	68eb      	ldr	r3, [r5, #12]
   10330:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   10334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   10338:	d002      	beq.n	10340 <nrfx_twim_xfer+0x98>
        return err_code;
   1033a:	48a5      	ldr	r0, [pc, #660]	; (105d0 <nrfx_twim_xfer+0x328>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1033c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   10340:	f04f 0c34 	mov.w	ip, #52	; 0x34
   10344:	fb0c 6c07 	mla	ip, ip, r7, r6
    p_reg->INTENCLR = mask;
   10348:	4ba2      	ldr	r3, [pc, #648]	; (105d4 <nrfx_twim_xfer+0x32c>)
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1034a:	6824      	ldr	r4, [r4, #0]
   1034c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   10350:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   10354:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   10358:	b12b      	cbz	r3, 10366 <nrfx_twim_xfer+0xbe>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1035a:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   1035e:	489e      	ldr	r0, [pc, #632]	; (105d8 <nrfx_twim_xfer+0x330>)
    p_reg->INTENSET = mask;
   10360:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   10364:	e7ea      	b.n	1033c <nrfx_twim_xfer+0x94>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   10366:	f018 0f14 	tst.w	r8, #20
   1036a:	bf0c      	ite	eq
   1036c:	2301      	moveq	r3, #1
   1036e:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   10370:	46a9      	mov	r9, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   10372:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   10376:	f10c 0e0c 	add.w	lr, ip, #12
   1037a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1037e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10382:	f8d9 3000 	ldr.w	r3, [r9]
   10386:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1038a:	f3c8 1300 	ubfx	r3, r8, #4, #1
   1038e:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

__STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                          uint8_t address)
{
    p_reg->ADDRESS = address;
   10392:	786b      	ldrb	r3, [r5, #1]
   10394:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   10398:	f018 0301 	ands.w	r3, r8, #1
    return p_reg->RXD.AMOUNT;
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
   1039c:	bf18      	it	ne
   1039e:	2301      	movne	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   103a0:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   103a4:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
}

__STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 0;
   103a8:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   103ac:	f018 0302 	ands.w	r3, r8, #2
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
   103b0:	bf18      	it	ne
   103b2:	2301      	movne	r3, #1
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
   103b4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   103b8:	782b      	ldrb	r3, [r5, #0]
   103ba:	2b03      	cmp	r3, #3
   103bc:	f200 80ea 	bhi.w	10594 <nrfx_twim_xfer+0x2ec>
   103c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   103c4:	00d200ab 	.word	0x00d200ab
   103c8:	0004008c 	.word	0x0004008c
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   103cc:	f018 0f10 	tst.w	r8, #16
   103d0:	d00b      	beq.n	103ea <nrfx_twim_xfer+0x142>
   103d2:	4982      	ldr	r1, [pc, #520]	; (105dc <nrfx_twim_xfer+0x334>)
   103d4:	4879      	ldr	r0, [pc, #484]	; (105bc <nrfx_twim_xfer+0x314>)
   103d6:	f44f 73b4 	mov.w	r3, #360	; 0x168
   103da:	4a79      	ldr	r2, [pc, #484]	; (105c0 <nrfx_twim_xfer+0x318>)
   103dc:	f015 fbaf 	bl	25b3e <printk>
   103e0:	f44f 71b4 	mov.w	r1, #360	; 0x168
   103e4:	4876      	ldr	r0, [pc, #472]	; (105c0 <nrfx_twim_xfer+0x318>)
   103e6:	f015 fbb7 	bl	25b58 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   103ea:	f018 0f08 	tst.w	r8, #8
   103ee:	d00b      	beq.n	10408 <nrfx_twim_xfer+0x160>
   103f0:	497b      	ldr	r1, [pc, #492]	; (105e0 <nrfx_twim_xfer+0x338>)
   103f2:	4872      	ldr	r0, [pc, #456]	; (105bc <nrfx_twim_xfer+0x314>)
   103f4:	f240 1369 	movw	r3, #361	; 0x169
   103f8:	4a71      	ldr	r2, [pc, #452]	; (105c0 <nrfx_twim_xfer+0x318>)
   103fa:	f015 fba0 	bl	25b3e <printk>
   103fe:	f240 1169 	movw	r1, #361	; 0x169
   10402:	486f      	ldr	r0, [pc, #444]	; (105c0 <nrfx_twim_xfer+0x318>)
   10404:	f015 fba8 	bl	25b58 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   10408:	f018 0f04 	tst.w	r8, #4
   1040c:	d00b      	beq.n	10426 <nrfx_twim_xfer+0x17e>
   1040e:	4975      	ldr	r1, [pc, #468]	; (105e4 <nrfx_twim_xfer+0x33c>)
   10410:	486a      	ldr	r0, [pc, #424]	; (105bc <nrfx_twim_xfer+0x314>)
   10412:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   10416:	4a6a      	ldr	r2, [pc, #424]	; (105c0 <nrfx_twim_xfer+0x318>)
   10418:	f015 fb91 	bl	25b3e <printk>
   1041c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   10420:	4867      	ldr	r0, [pc, #412]	; (105c0 <nrfx_twim_xfer+0x318>)
   10422:	f015 fb99 	bl	25b58 <assert_post_action>
   10426:	692a      	ldr	r2, [r5, #16]
   10428:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1042c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   10430:	d183      	bne.n	1033a <nrfx_twim_xfer+0x92>
    p_reg->SHORTS = mask;
   10432:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10436:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   10438:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1043c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1043e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10442:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10446:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10448:	2300      	movs	r3, #0
   1044a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1044e:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   10452:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10456:	6221      	str	r1, [r4, #32]
   10458:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1045a:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1045e:	2900      	cmp	r1, #0
   10460:	d0fb      	beq.n	1045a <nrfx_twim_xfer+0x1b2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10462:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   10466:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10468:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1046c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   10470:	2334      	movs	r3, #52	; 0x34
   10472:	fb03 6307 	mla	r3, r3, r7, r6
   10476:	4a5c      	ldr	r2, [pc, #368]	; (105e8 <nrfx_twim_xfer+0x340>)
   10478:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1047a:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1047e:	2208      	movs	r2, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   10480:	485a      	ldr	r0, [pc, #360]	; (105ec <nrfx_twim_xfer+0x344>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   10482:	f018 0f08 	tst.w	r8, #8
   10486:	d104      	bne.n	10492 <nrfx_twim_xfer+0x1ea>
   10488:	7829      	ldrb	r1, [r5, #0]
   1048a:	2903      	cmp	r1, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1048c:	bf1c      	itt	ne
   1048e:	2101      	movne	r1, #1
   10490:	50a1      	strne	r1, [r4, r2]
    if (p_cb->handler)
   10492:	2234      	movs	r2, #52	; 0x34
   10494:	437a      	muls	r2, r7
   10496:	18b1      	adds	r1, r6, r2
   10498:	58b2      	ldr	r2, [r6, r2]
   1049a:	2a00      	cmp	r2, #0
   1049c:	d17f      	bne.n	1059e <nrfx_twim_xfer+0x2f6>
   1049e:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   104a0:	4423      	add	r3, r4
   104a2:	681a      	ldr	r2, [r3, #0]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
   104a4:	2a00      	cmp	r2, #0
   104a6:	f000 80ab 	beq.w	10600 <nrfx_twim_xfer+0x358>
        p_cb->busy = false;
   104aa:	2234      	movs	r2, #52	; 0x34
   104ac:	fb02 6607 	mla	r6, r2, r7, r6
   104b0:	2200      	movs	r2, #0
    uint32_t error_source = p_reg->ERRORSRC;
   104b2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   104b6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   104ba:	f886 202f 	strb.w	r2, [r6, #47]	; 0x2f
        if (errorsrc)
   104be:	2b00      	cmp	r3, #0
   104c0:	f43f af3c 	beq.w	1033c <nrfx_twim_xfer+0x94>
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   104c4:	4a4a      	ldr	r2, [pc, #296]	; (105f0 <nrfx_twim_xfer+0x348>)
   104c6:	f013 0f02 	tst.w	r3, #2
   104ca:	484a      	ldr	r0, [pc, #296]	; (105f4 <nrfx_twim_xfer+0x34c>)
   104cc:	bf08      	it	eq
   104ce:	4610      	moveq	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   104d0:	f013 0f04 	tst.w	r3, #4
   104d4:	4b48      	ldr	r3, [pc, #288]	; (105f8 <nrfx_twim_xfer+0x350>)
   104d6:	bf18      	it	ne
   104d8:	4618      	movne	r0, r3
   104da:	e72f      	b.n	1033c <nrfx_twim_xfer+0x94>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   104dc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   104de:	68ea      	ldr	r2, [r5, #12]
   104e0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   104e4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   104e8:	692b      	ldr	r3, [r5, #16]
   104ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   104ee:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   104f2:	f47f af22 	bne.w	1033a <nrfx_twim_xfer+0x92>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   104f6:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   104f8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   104fc:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   10500:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   10504:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   10508:	2334      	movs	r3, #52	; 0x34
   1050a:	f240 2202 	movw	r2, #514	; 0x202
   1050e:	fb03 6307 	mla	r3, r3, r7, r6
   10512:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10514:	2301      	movs	r3, #1
   10516:	6223      	str	r3, [r4, #32]
   10518:	e7af      	b.n	1047a <nrfx_twim_xfer+0x1d2>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1051a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1051c:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1051e:	f018 0f20 	tst.w	r8, #32
   10522:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10526:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1052a:	f04f 0334 	mov.w	r3, #52	; 0x34
   1052e:	d00f      	beq.n	10550 <nrfx_twim_xfer+0x2a8>
    p_reg->SHORTS = mask;
   10530:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
   10534:	fb03 6307 	mla	r3, r3, r7, r6
   10538:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   1053c:	4a2a      	ldr	r2, [pc, #168]	; (105e8 <nrfx_twim_xfer+0x340>)
   1053e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10540:	2300      	movs	r3, #0
   10542:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
   10546:	f44f 73a4 	mov.w	r3, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1054a:	2201      	movs	r2, #1
   1054c:	6222      	str	r2, [r4, #32]
   1054e:	e796      	b.n	1047e <nrfx_twim_xfer+0x1d6>
    p_reg->SHORTS = mask;
   10550:	f44f 7200 	mov.w	r2, #512	; 0x200
   10554:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   10558:	f240 2202 	movw	r2, #514	; 0x202
   1055c:	fb03 6307 	mla	r3, r3, r7, r6
   10560:	609a      	str	r2, [r3, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   10562:	f44f 7382 	mov.w	r3, #260	; 0x104
   10566:	e7f0      	b.n	1054a <nrfx_twim_xfer+0x2a2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   10568:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1056a:	68ea      	ldr	r2, [r5, #12]
   1056c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10570:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   10574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10578:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1057c:	2334      	movs	r3, #52	; 0x34
   1057e:	f240 2202 	movw	r2, #514	; 0x202
   10582:	fb03 6307 	mla	r3, r3, r7, r6
   10586:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10588:	2301      	movs	r3, #1
        start_task = NRF_TWIM_TASK_STARTRX;
   1058a:	2200      	movs	r2, #0
   1058c:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1058e:	f44f 7382 	mov.w	r3, #260	; 0x104
   10592:	e775      	b.n	10480 <nrfx_twim_xfer+0x1d8>
   10594:	f44f 7382 	mov.w	r3, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   10598:	2208      	movs	r2, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
   1059a:	4818      	ldr	r0, [pc, #96]	; (105fc <nrfx_twim_xfer+0x354>)
   1059c:	e771      	b.n	10482 <nrfx_twim_xfer+0x1da>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1059e:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
   105a2:	bf1c      	itt	ne
   105a4:	f44f 7300 	movne.w	r3, #512	; 0x200
   105a8:	608b      	strne	r3, [r1, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   105aa:	2334      	movs	r3, #52	; 0x34
   105ac:	fb03 6607 	mla	r6, r3, r7, r6
   105b0:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   105b2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   105b6:	e6c1      	b.n	1033c <nrfx_twim_xfer+0x94>
   105b8:	0002b3c9 	.word	0x0002b3c9
   105bc:	0002abaa 	.word	0x0002abaa
   105c0:	0002b369 	.word	0x0002b369
   105c4:	20020174 	.word	0x20020174
   105c8:	0002b474 	.word	0x0002b474
   105cc:	0002b4c4 	.word	0x0002b4c4
   105d0:	0bad000a 	.word	0x0bad000a
   105d4:	019c0202 	.word	0x019c0202
   105d8:	0bad000b 	.word	0x0bad000b
   105dc:	0002b514 	.word	0x0002b514
   105e0:	0002b52a 	.word	0x0002b52a
   105e4:	0002b540 	.word	0x0002b540
   105e8:	00040200 	.word	0x00040200
   105ec:	0bad0000 	.word	0x0bad0000
   105f0:	0bad0001 	.word	0x0bad0001
   105f4:	0bae0001 	.word	0x0bae0001
   105f8:	0bae0002 	.word	0x0bae0002
   105fc:	0bad0004 	.word	0x0bad0004
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10600:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   10604:	2d00      	cmp	r5, #0
   10606:	f43f af4c 	beq.w	104a2 <nrfx_twim_xfer+0x1fa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1060a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
   1060e:	f44f 7382 	mov.w	r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10612:	6221      	str	r1, [r4, #32]
   10614:	6161      	str	r1, [r4, #20]
   10616:	e743      	b.n	104a0 <nrfx_twim_xfer+0x1f8>

00010618 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   10618:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   1061a:	4c4c      	ldr	r4, [pc, #304]	; (1074c <nrfx_twim_2_irq_handler+0x134>)
{
   1061c:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   1061e:	6823      	ldr	r3, [r4, #0]
   10620:	b95b      	cbnz	r3, 1063a <nrfx_twim_2_irq_handler+0x22>
   10622:	494b      	ldr	r1, [pc, #300]	; (10750 <nrfx_twim_2_irq_handler+0x138>)
   10624:	484b      	ldr	r0, [pc, #300]	; (10754 <nrfx_twim_2_irq_handler+0x13c>)
   10626:	f44f 730f 	mov.w	r3, #572	; 0x23c
   1062a:	4a4b      	ldr	r2, [pc, #300]	; (10758 <nrfx_twim_2_irq_handler+0x140>)
   1062c:	f015 fa87 	bl	25b3e <printk>
   10630:	f44f 710f 	mov.w	r1, #572	; 0x23c
   10634:	4848      	ldr	r0, [pc, #288]	; (10758 <nrfx_twim_2_irq_handler+0x140>)
   10636:	f015 fa8f 	bl	25b58 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1063a:	4b48      	ldr	r3, [pc, #288]	; (1075c <nrfx_twim_2_irq_handler+0x144>)
   1063c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   10640:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   10642:	b192      	cbz	r2, 1066a <nrfx_twim_2_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10644:	2200      	movs	r2, #0
   10646:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1064a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1064e:	b962      	cbnz	r2, 1066a <nrfx_twim_2_irq_handler+0x52>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   10650:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   10652:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   10656:	2202      	movs	r2, #2
   10658:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1065a:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   1065c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10660:	2201      	movs	r2, #1
   10662:	621a      	str	r2, [r3, #32]
   10664:	615a      	str	r2, [r3, #20]
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   10666:	b007      	add	sp, #28
   10668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1066a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1066e:	2b00      	cmp	r3, #0
   10670:	d03f      	beq.n	106f2 <nrfx_twim_2_irq_handler+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10672:	2300      	movs	r3, #0
        event.xfer_desc = p_cb->xfer_desc;
   10674:	4f3a      	ldr	r7, [pc, #232]	; (10760 <nrfx_twim_2_irq_handler+0x148>)
   10676:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1067a:	ae01      	add	r6, sp, #4
   1067c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1067e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   10680:	683b      	ldr	r3, [r7, #0]
        if (p_cb->error)
   10682:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        event.xfer_desc = p_cb->xfer_desc;
   10686:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
   10688:	b179      	cbz	r1, 106aa <nrfx_twim_2_irq_handler+0x92>
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   1068a:	7b23      	ldrb	r3, [r4, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   1068c:	2b01      	cmp	r3, #1
    return p_reg->RXD.AMOUNT;
   1068e:	bf0c      	ite	eq
   10690:	f8d5 253c 	ldreq.w	r2, [r5, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   10694:	f8d5 254c 	ldrne.w	r2, [r5, #1356]	; 0x54c
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
   10698:	2b02      	cmp	r3, #2
   1069a:	4b30      	ldr	r3, [pc, #192]	; (1075c <nrfx_twim_2_irq_handler+0x144>)
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
   1069c:	9202      	str	r2, [sp, #8]
    return p_reg->RXD.AMOUNT;
   1069e:	bf0c      	ite	eq
   106a0:	f8d3 353c 	ldreq.w	r3, [r3, #1340]	; 0x53c
    return p_reg->TXD.AMOUNT;
   106a4:	f8d3 354c 	ldrne.w	r3, [r3, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
   106a8:	9303      	str	r3, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106aa:	2200      	movs	r2, #0
   106ac:	4b2b      	ldr	r3, [pc, #172]	; (1075c <nrfx_twim_2_irq_handler+0x144>)
        if (!p_cb->repeated || p_cb->error)
   106ae:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   106b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   106b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   106ba:	b100      	cbz	r0, 106be <nrfx_twim_2_irq_handler+0xa6>
   106bc:	b129      	cbz	r1, 106ca <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   106be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            p_cb->int_mask = 0;
   106c2:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   106c4:	4a27      	ldr	r2, [pc, #156]	; (10764 <nrfx_twim_2_irq_handler+0x14c>)
   106c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
   106ca:	4a24      	ldr	r2, [pc, #144]	; (1075c <nrfx_twim_2_irq_handler+0x144>)
   106cc:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   106d0:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   106d4:	079a      	lsls	r2, r3, #30
   106d6:	d533      	bpl.n	10740 <nrfx_twim_2_irq_handler+0x128>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   106d8:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   106da:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   106de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   106e2:	b90b      	cbnz	r3, 106e8 <nrfx_twim_2_irq_handler+0xd0>
        p_cb->busy = false;
   106e4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    p_cb->handler(&event, p_cb->p_context);
   106e8:	e9d4 3100 	ldrd	r3, r1, [r4]
   106ec:	4668      	mov	r0, sp
   106ee:	4798      	blx	r3
   106f0:	e7b9      	b.n	10666 <nrfx_twim_2_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106f2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   106f6:	7b23      	ldrb	r3, [r4, #12]
   106f8:	b983      	cbnz	r3, 1071c <nrfx_twim_2_irq_handler+0x104>
            event.xfer_desc = p_cb->xfer_desc;
   106fa:	4f19      	ldr	r7, [pc, #100]	; (10760 <nrfx_twim_2_irq_handler+0x148>)
   106fc:	ae01      	add	r6, sp, #4
   106fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10700:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   10702:	683b      	ldr	r3, [r7, #0]
   10704:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   10706:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1070a:	2b00      	cmp	r3, #0
   1070c:	d1dd      	bne.n	106ca <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   1070e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   10712:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   10714:	4b13      	ldr	r3, [pc, #76]	; (10764 <nrfx_twim_2_irq_handler+0x14c>)
   10716:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1071a:	e7d6      	b.n	106ca <nrfx_twim_2_irq_handler+0xb2>
    p_reg->SHORTS = mask;
   1071c:	f44f 7300 	mov.w	r3, #512	; 0x200
   10720:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   10724:	f240 2302 	movw	r3, #514	; 0x202
   10728:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1072a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1072e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   10732:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   10734:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10738:	2301      	movs	r3, #1
   1073a:	60ab      	str	r3, [r5, #8]
   1073c:	622b      	str	r3, [r5, #32]
   1073e:	e792      	b.n	10666 <nrfx_twim_2_irq_handler+0x4e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   10740:	f013 0304 	ands.w	r3, r3, #4
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   10744:	bf18      	it	ne
   10746:	2302      	movne	r3, #2
   10748:	e7c7      	b.n	106da <nrfx_twim_2_irq_handler+0xc2>
   1074a:	bf00      	nop
   1074c:	20020174 	.word	0x20020174
   10750:	0002b18e 	.word	0x0002b18e
   10754:	0002abaa 	.word	0x0002abaa
   10758:	0002b369 	.word	0x0002b369
   1075c:	4000a000 	.word	0x4000a000
   10760:	20020180 	.word	0x20020180
   10764:	019c0202 	.word	0x019c0202

00010768 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   10768:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1076a:	4605      	mov	r5, r0
   1076c:	b948      	cbnz	r0, 10782 <socket_offload_register+0x1a>
   1076e:	490c      	ldr	r1, [pc, #48]	; (107a0 <socket_offload_register+0x38>)
   10770:	480c      	ldr	r0, [pc, #48]	; (107a4 <socket_offload_register+0x3c>)
   10772:	2311      	movs	r3, #17
   10774:	4a0c      	ldr	r2, [pc, #48]	; (107a8 <socket_offload_register+0x40>)
   10776:	f015 f9e2 	bl	25b3e <printk>
   1077a:	2111      	movs	r1, #17
   1077c:	480a      	ldr	r0, [pc, #40]	; (107a8 <socket_offload_register+0x40>)
   1077e:	f015 f9eb 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   10782:	4c0a      	ldr	r4, [pc, #40]	; (107ac <socket_offload_register+0x44>)
   10784:	6822      	ldr	r2, [r4, #0]
   10786:	b14a      	cbz	r2, 1079c <socket_offload_register+0x34>
   10788:	4909      	ldr	r1, [pc, #36]	; (107b0 <socket_offload_register+0x48>)
   1078a:	4806      	ldr	r0, [pc, #24]	; (107a4 <socket_offload_register+0x3c>)
   1078c:	2312      	movs	r3, #18
   1078e:	4a06      	ldr	r2, [pc, #24]	; (107a8 <socket_offload_register+0x40>)
   10790:	f015 f9d5 	bl	25b3e <printk>
   10794:	2112      	movs	r1, #18
   10796:	4804      	ldr	r0, [pc, #16]	; (107a8 <socket_offload_register+0x40>)
   10798:	f015 f9de 	bl	25b58 <assert_post_action>

	socket_ops = ops;
   1079c:	6025      	str	r5, [r4, #0]
}
   1079e:	bd38      	pop	{r3, r4, r5, pc}
   107a0:	0002aba6 	.word	0x0002aba6
   107a4:	0002abaa 	.word	0x0002abaa
   107a8:	0002b556 	.word	0x0002b556
   107ac:	200201a8 	.word	0x200201a8
   107b0:	0002b593 	.word	0x0002b593

000107b4 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
   107b4:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
   107b6:	f000 fad9 	bl	10d6c <z_timer_cycle_get_32>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   107ba:	4b06      	ldr	r3, [pc, #24]	; (107d4 <sys_rand32_get+0x20>)
   107bc:	e8d3 2fef 	ldaex	r2, [r3]
   107c0:	4905      	ldr	r1, [pc, #20]	; (107d8 <sys_rand32_get+0x24>)
   107c2:	1851      	adds	r1, r2, r1
   107c4:	e8c3 1fec 	stlex	ip, r1, [r3]
   107c8:	f1bc 0f00 	cmp.w	ip, #0
   107cc:	d1f6      	bne.n	107bc <sys_rand32_get+0x8>
}
   107ce:	4410      	add	r0, r2
   107d0:	bd08      	pop	{r3, pc}
   107d2:	bf00      	nop
   107d4:	200201ac 	.word	0x200201ac
   107d8:	3b9aca0d 	.word	0x3b9aca0d

000107dc <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   107dc:	280a      	cmp	r0, #10
{
   107de:	b538      	push	{r3, r4, r5, lr}
   107e0:	4604      	mov	r4, r0
   107e2:	4d07      	ldr	r5, [pc, #28]	; (10800 <console_out+0x24>)
	if ('\n' == c) {
   107e4:	d104      	bne.n	107f0 <console_out+0x14>
   107e6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   107e8:	210d      	movs	r1, #13
   107ea:	6843      	ldr	r3, [r0, #4]
   107ec:	685b      	ldr	r3, [r3, #4]
   107ee:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   107f0:	6828      	ldr	r0, [r5, #0]
   107f2:	b2e1      	uxtb	r1, r4
   107f4:	6843      	ldr	r3, [r0, #4]
   107f6:	685b      	ldr	r3, [r3, #4]
   107f8:	4798      	blx	r3

	return c;
}
   107fa:	4620      	mov	r0, r4
   107fc:	bd38      	pop	{r3, r4, r5, pc}
   107fe:	bf00      	nop
   10800:	200201b0 	.word	0x200201b0

00010804 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   10804:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   10806:	4c04      	ldr	r4, [pc, #16]	; (10818 <uart_console_hook_install+0x14>)
   10808:	4620      	mov	r0, r4
   1080a:	f001 fcdf 	bl	121cc <__stdout_hook_install>
	__printk_hook_install(console_out);
   1080e:	4620      	mov	r0, r4
}
   10810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   10814:	f7ff b9fa 	b.w	fc0c <__printk_hook_install>
   10818:	000107dd 	.word	0x000107dd

0001081c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   1081c:	b508      	push	{r3, lr}
   1081e:	4804      	ldr	r0, [pc, #16]	; (10830 <uart_console_init+0x14>)
   10820:	f011 f9e0 	bl	21be4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10824:	4b03      	ldr	r3, [pc, #12]	; (10834 <uart_console_init+0x18>)
   10826:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   10828:	f7ff ffec 	bl	10804 <uart_console_hook_install>

	return 0;
}
   1082c:	2000      	movs	r0, #0
   1082e:	bd08      	pop	{r3, pc}
   10830:	0002a775 	.word	0x0002a775
   10834:	200201b0 	.word	0x200201b0

00010838 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
   10838:	b510      	push	{r4, lr}
	__asm__ volatile(
   1083a:	f04f 0320 	mov.w	r3, #32
   1083e:	f3ef 8211 	mrs	r2, BASEPRI
   10842:	f383 8811 	msr	BASEPRI, r3
   10846:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
   1084a:	4c15      	ldr	r4, [pc, #84]	; (108a0 <m16src_stop+0x68>)
   1084c:	7823      	ldrb	r3, [r4, #0]
   1084e:	b933      	cbnz	r3, 1085e <m16src_stop+0x26>
	__asm__ volatile(
   10850:	f382 8811 	msr	BASEPRI, r2
   10854:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
   10858:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
   1085c:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
   1085e:	3b01      	subs	r3, #1
   10860:	b2db      	uxtb	r3, r3
   10862:	7023      	strb	r3, [r4, #0]
   10864:	b133      	cbz	r3, 10874 <m16src_stop+0x3c>
   10866:	f382 8811 	msr	BASEPRI, r2
   1086a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1086e:	f06f 000f 	mvn.w	r0, #15
   10872:	e7f3      	b.n	1085c <m16src_stop+0x24>
	if (m16src_grd) {
   10874:	4b0b      	ldr	r3, [pc, #44]	; (108a4 <m16src_stop+0x6c>)
   10876:	2101      	movs	r1, #1
   10878:	7818      	ldrb	r0, [r3, #0]
   1087a:	b138      	cbz	r0, 1088c <m16src_stop+0x54>
		m16src_ref++;
   1087c:	7021      	strb	r1, [r4, #0]
   1087e:	f382 8811 	msr	BASEPRI, r2
   10882:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10886:	f06f 000a 	mvn.w	r0, #10
   1088a:	e7e7      	b.n	1085c <m16src_stop+0x24>
	m16src_grd = 1U;
   1088c:	7019      	strb	r1, [r3, #0]
   1088e:	f382 8811 	msr	BASEPRI, r2
   10892:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   10896:	4a04      	ldr	r2, [pc, #16]	; (108a8 <m16src_stop+0x70>)
   10898:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
   1089a:	7018      	strb	r0, [r3, #0]
	return 0;
   1089c:	e7de      	b.n	1085c <m16src_stop+0x24>
   1089e:	bf00      	nop
   108a0:	20023cfc 	.word	0x20023cfc
   108a4:	20023cfb 	.word	0x20023cfb
   108a8:	40005004 	.word	0x40005004

000108ac <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
   108ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   108ae:	f04f 0220 	mov.w	r2, #32
   108b2:	f3ef 8311 	mrs	r3, BASEPRI
   108b6:	f382 8811 	msr	BASEPRI, r2
   108ba:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
   108be:	4c13      	ldr	r4, [pc, #76]	; (1090c <k32src_start+0x60>)
   108c0:	7820      	ldrb	r0, [r4, #0]
   108c2:	b190      	cbz	r0, 108ea <k32src_start+0x3e>
	__asm__ volatile(
   108c4:	f383 8811 	msr	BASEPRI, r3
   108c8:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
   108cc:	4a10      	ldr	r2, [pc, #64]	; (10910 <k32src_start+0x64>)
   108ce:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
   108d2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
   108d6:	f003 0303 	and.w	r3, r3, #3
   108da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
   108de:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
   108e0:	bf14      	ite	ne
   108e2:	f06f 0043 	mvnne.w	r0, #67	; 0x43
   108e6:	2000      	moveq	r0, #0
   108e8:	bd10      	pop	{r4, pc}
	k32src_initialized = 1U;
   108ea:	2201      	movs	r2, #1
   108ec:	7022      	strb	r2, [r4, #0]
   108ee:	f383 8811 	msr	BASEPRI, r3
   108f2:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   108f6:	4b06      	ldr	r3, [pc, #24]	; (10910 <k32src_start+0x64>)
   108f8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
   108fc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   10900:	2102      	movs	r1, #2
   10902:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   10906:	609a      	str	r2, [r3, #8]
   10908:	e7e0      	b.n	108cc <k32src_start+0x20>
   1090a:	bf00      	nop
   1090c:	20023cfa 	.word	0x20023cfa
   10910:	40005000 	.word	0x40005000

00010914 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
   10914:	b538      	push	{r3, r4, r5, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
   10916:	4b20      	ldr	r3, [pc, #128]	; (10998 <nrf_power_clock_isr+0x84>)
   10918:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
   1091c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
   10920:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	hf_intenset = ((NRF_CLOCK->INTENSET &
   10924:	f002 0201 	and.w	r2, r2, #1

	lf_intenset = ((NRF_CLOCK->INTENSET &
   10928:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
   1092c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
	usb_detected = nrf_power_event_check(NRF_POWER_EVENT_USBDETECTED);
	usb_pwr_rdy = nrf_power_event_check(NRF_POWER_EVENT_USBPWRRDY);
	usb_removed = nrf_power_event_check(NRF_POWER_EVENT_USBREMOVED);
#endif

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
   10930:	bb1d      	cbnz	r5, 1097a <nrf_power_clock_isr+0x66>
   10932:	b978      	cbnz	r0, 10954 <nrf_power_clock_isr+0x40>
   10934:	bb42      	cbnz	r2, 10988 <nrf_power_clock_isr+0x74>
   10936:	b9b1      	cbnz	r1, 10966 <nrf_power_clock_isr+0x52>
   10938:	f240 1345 	movw	r3, #325	; 0x145
   1093c:	4917      	ldr	r1, [pc, #92]	; (1099c <nrf_power_clock_isr+0x88>)
   1093e:	4818      	ldr	r0, [pc, #96]	; (109a0 <nrf_power_clock_isr+0x8c>)
   10940:	4a18      	ldr	r2, [pc, #96]	; (109a4 <nrf_power_clock_isr+0x90>)
   10942:	f015 f8fc 	bl	25b3e <printk>
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
   10946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
   1094a:	f240 1145 	movw	r1, #325	; 0x145
   1094e:	4815      	ldr	r0, [pc, #84]	; (109a4 <nrf_power_clock_isr+0x90>)
   10950:	f015 b902 	b.w	25b58 <assert_post_action>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   10954:	2000      	movs	r0, #0
   10956:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
   1095a:	b11a      	cbz	r2, 10964 <nrf_power_clock_isr+0x50>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
   1095c:	2201      	movs	r2, #1
   1095e:	4b0e      	ldr	r3, [pc, #56]	; (10998 <nrf_power_clock_isr+0x84>)
   10960:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (lf) {
   10964:	b141      	cbz	r1, 10978 <nrf_power_clock_isr+0x64>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
   10966:	2200      	movs	r2, #0
   10968:	4b0b      	ldr	r3, [pc, #44]	; (10998 <nrf_power_clock_isr+0x84>)
   1096a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
   1096e:	07a2      	lsls	r2, r4, #30
   10970:	d502      	bpl.n	10978 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
   10972:	2202      	movs	r2, #2
   10974:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   10978:	bd38      	pop	{r3, r4, r5, pc}
		NRF_POWER->EVENTS_POFWARN = 0;
   1097a:	2500      	movs	r5, #0
   1097c:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	if (hf) {
   10980:	2800      	cmp	r0, #0
   10982:	d1e7      	bne.n	10954 <nrf_power_clock_isr+0x40>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
   10984:	2a00      	cmp	r2, #0
   10986:	d0ed      	beq.n	10964 <nrf_power_clock_isr+0x50>
   10988:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1098c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
   10990:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   10994:	d1e6      	bne.n	10964 <nrf_power_clock_isr+0x50>
   10996:	e7e1      	b.n	1095c <nrf_power_clock_isr+0x48>
   10998:	40005000 	.word	0x40005000
   1099c:	0002b5f5 	.word	0x0002b5f5
   109a0:	0002abaa 	.word	0x0002abaa
   109a4:	0002b5b8 	.word	0x0002b5b8

000109a8 <m16src_start>:
{
   109a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
   109ac:	f04f 0320 	mov.w	r3, #32
   109b0:	f3ef 8211 	mrs	r2, BASEPRI
   109b4:	f383 8811 	msr	BASEPRI, r3
   109b8:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
   109bc:	4b30      	ldr	r3, [pc, #192]	; (10a80 <m16src_start+0xd8>)
   109be:	7818      	ldrb	r0, [r3, #0]
   109c0:	461f      	mov	r7, r3
   109c2:	1c44      	adds	r4, r0, #1
   109c4:	701c      	strb	r4, [r3, #0]
   109c6:	b1d8      	cbz	r0, 10a00 <m16src_start+0x58>
	__asm__ volatile(
   109c8:	f382 8811 	msr	BASEPRI, r2
   109cc:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(m16src_ref);
   109d0:	783b      	ldrb	r3, [r7, #0]
   109d2:	b94b      	cbnz	r3, 109e8 <m16src_start+0x40>
   109d4:	492b      	ldr	r1, [pc, #172]	; (10a84 <m16src_start+0xdc>)
   109d6:	482c      	ldr	r0, [pc, #176]	; (10a88 <m16src_start+0xe0>)
   109d8:	2360      	movs	r3, #96	; 0x60
   109da:	4a2c      	ldr	r2, [pc, #176]	; (10a8c <m16src_start+0xe4>)
   109dc:	f015 f8af 	bl	25b3e <printk>
   109e0:	2160      	movs	r1, #96	; 0x60
   109e2:	482a      	ldr	r0, [pc, #168]	; (10a8c <m16src_start+0xe4>)
   109e4:	f015 f8b8 	bl	25b58 <assert_post_action>
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
   109e8:	4b29      	ldr	r3, [pc, #164]	; (10a90 <m16src_start+0xe8>)
   109ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   109ee:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
   109f2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   109f6:	bf0c      	ite	eq
   109f8:	2000      	moveq	r0, #0
   109fa:	f06f 0043 	mvnne.w	r0, #67	; 0x43
   109fe:	e00c      	b.n	10a1a <m16src_start+0x72>
	if (m16src_grd) {
   10a00:	4d24      	ldr	r5, [pc, #144]	; (10a94 <m16src_start+0xec>)
   10a02:	f895 8000 	ldrb.w	r8, [r5]
   10a06:	f1b8 0f00 	cmp.w	r8, #0
   10a0a:	d008      	beq.n	10a1e <m16src_start+0x76>
		m16src_ref--;
   10a0c:	7018      	strb	r0, [r3, #0]
   10a0e:	f382 8811 	msr	BASEPRI, r2
   10a12:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   10a16:	f06f 000a 	mvn.w	r0, #10
}
   10a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	m16src_grd = 1U;
   10a1e:	2601      	movs	r6, #1
   10a20:	702e      	strb	r6, [r5, #0]
   10a22:	f382 8811 	msr	BASEPRI, r2
   10a26:	f3bf 8f6f 	isb	sy
   10a2a:	4c19      	ldr	r4, [pc, #100]	; (10a90 <m16src_start+0xe8>)
	if (blocking) {
   10a2c:	b321      	cbz	r1, 10a78 <m16src_start+0xd0>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   10a2e:	2005      	movs	r0, #5
   10a30:	f000 fc52 	bl	112d8 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   10a34:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
   10a38:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
   10a3c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   10a40:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
   10a42:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   10a46:	b19a      	cbz	r2, 10a70 <m16src_start+0xc8>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   10a48:	2200      	movs	r2, #0
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
   10a4a:	07db      	lsls	r3, r3, #31
    NRF_CLOCK->INTENCLR = int_mask;
   10a4c:	bf58      	it	pl
   10a4e:	2301      	movpl	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   10a50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a54:	f04f 0220 	mov.w	r2, #32
   10a58:	bf58      	it	pl
   10a5a:	f8c4 3308 	strpl.w	r3, [r4, #776]	; 0x308
   10a5e:	4b0e      	ldr	r3, [pc, #56]	; (10a98 <m16src_start+0xf0>)
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   10a60:	2005      	movs	r0, #5
   10a62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   10a66:	f000 fc27 	bl	112b8 <z_arch_irq_enable>
	m16src_grd = 0U;
   10a6a:	2300      	movs	r3, #0
   10a6c:	702b      	strb	r3, [r5, #0]
   10a6e:	e7af      	b.n	109d0 <m16src_start+0x28>
			__WFE();
   10a70:	bf20      	wfe
			__SEV();
   10a72:	bf40      	sev
			__WFE();
   10a74:	bf20      	wfe
   10a76:	e7e4      	b.n	10a42 <m16src_start+0x9a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   10a78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   10a7c:	6026      	str	r6, [r4, #0]
   10a7e:	e7f4      	b.n	10a6a <m16src_start+0xc2>
   10a80:	20023cfc 	.word	0x20023cfc
   10a84:	0002b5ad 	.word	0x0002b5ad
   10a88:	0002abaa 	.word	0x0002abaa
   10a8c:	0002b5b8 	.word	0x0002b5b8
   10a90:	40005000 	.word	0x40005000
   10a94:	20023cfb 	.word	0x20023cfb
   10a98:	e000e100 	.word	0xe000e100

00010a9c <z_clock_isr>:
#include <drivers/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   10a9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   10a9e:	4c06      	ldr	r4, [pc, #24]	; (10ab8 <z_clock_isr+0x1c>)
   10aa0:	4906      	ldr	r1, [pc, #24]	; (10abc <z_clock_isr+0x20>)
   10aa2:	4622      	mov	r2, r4
   10aa4:	4806      	ldr	r0, [pc, #24]	; (10ac0 <z_clock_isr+0x24>)
   10aa6:	2317      	movs	r3, #23
   10aa8:	f015 f849 	bl	25b3e <printk>
   10aac:	4620      	mov	r0, r4
}
   10aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   10ab2:	2117      	movs	r1, #23
   10ab4:	f015 b850 	b.w	25b58 <assert_post_action>
   10ab8:	0002b632 	.word	0x0002b632
   10abc:	0002c399 	.word	0x0002c399
   10ac0:	0002abaa 	.word	0x0002abaa

00010ac4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   10ac4:	2200      	movs	r2, #0
{
   10ac6:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   10ac8:	4b23      	ldr	r3, [pc, #140]	; (10b58 <rtc1_nrf_isr+0x94>)
   10aca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   10ace:	f04f 0320 	mov.w	r3, #32
   10ad2:	f3ef 8511 	mrs	r5, BASEPRI
   10ad6:	f383 8811 	msr	BASEPRI, r3
   10ada:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   10ade:	481f      	ldr	r0, [pc, #124]	; (10b5c <rtc1_nrf_isr+0x98>)
   10ae0:	f013 f8fc 	bl	23cdc <z_spin_lock_valid>
   10ae4:	b960      	cbnz	r0, 10b00 <rtc1_nrf_isr+0x3c>
   10ae6:	491e      	ldr	r1, [pc, #120]	; (10b60 <rtc1_nrf_isr+0x9c>)
   10ae8:	234e      	movs	r3, #78	; 0x4e
   10aea:	4a1e      	ldr	r2, [pc, #120]	; (10b64 <rtc1_nrf_isr+0xa0>)
   10aec:	481e      	ldr	r0, [pc, #120]	; (10b68 <rtc1_nrf_isr+0xa4>)
   10aee:	f015 f826 	bl	25b3e <printk>
   10af2:	481e      	ldr	r0, [pc, #120]	; (10b6c <rtc1_nrf_isr+0xa8>)
   10af4:	f015 f823 	bl	25b3e <printk>
   10af8:	214e      	movs	r1, #78	; 0x4e
   10afa:	481a      	ldr	r0, [pc, #104]	; (10b64 <rtc1_nrf_isr+0xa0>)
   10afc:	f015 f82c 	bl	25b58 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   10b00:	4816      	ldr	r0, [pc, #88]	; (10b5c <rtc1_nrf_isr+0x98>)
   10b02:	f013 f909 	bl	23d18 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   10b06:	4a1a      	ldr	r2, [pc, #104]	; (10b70 <rtc1_nrf_isr+0xac>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   10b08:	4b13      	ldr	r3, [pc, #76]	; (10b58 <rtc1_nrf_isr+0x94>)
   10b0a:	6811      	ldr	r1, [r2, #0]
   10b0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   10b10:	4812      	ldr	r0, [pc, #72]	; (10b5c <rtc1_nrf_isr+0x98>)
	return (a - b) & COUNTER_MAX;
   10b12:	1a5b      	subs	r3, r3, r1
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   10b14:	f3c3 240f 	ubfx	r4, r3, #8, #16

	last_count += dticks * CYC_PER_TICK;
   10b18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10b1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   10b20:	440b      	add	r3, r1
   10b22:	6013      	str	r3, [r2, #0]
   10b24:	f013 f8e8 	bl	23cf8 <z_spin_unlock_valid>
   10b28:	b960      	cbnz	r0, 10b44 <rtc1_nrf_isr+0x80>
   10b2a:	4912      	ldr	r1, [pc, #72]	; (10b74 <rtc1_nrf_isr+0xb0>)
   10b2c:	2361      	movs	r3, #97	; 0x61
   10b2e:	4a0d      	ldr	r2, [pc, #52]	; (10b64 <rtc1_nrf_isr+0xa0>)
   10b30:	480d      	ldr	r0, [pc, #52]	; (10b68 <rtc1_nrf_isr+0xa4>)
   10b32:	f015 f804 	bl	25b3e <printk>
   10b36:	4810      	ldr	r0, [pc, #64]	; (10b78 <rtc1_nrf_isr+0xb4>)
   10b38:	f015 f801 	bl	25b3e <printk>
   10b3c:	2161      	movs	r1, #97	; 0x61
   10b3e:	4809      	ldr	r0, [pc, #36]	; (10b64 <rtc1_nrf_isr+0xa0>)
   10b40:	f015 f80a 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   10b44:	f385 8811 	msr	BASEPRI, r5
   10b48:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   10b4c:	4620      	mov	r0, r4
}
   10b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   10b52:	f013 bbe9 	b.w	24328 <z_clock_announce>
   10b56:	bf00      	nop
   10b58:	40015000 	.word	0x40015000
   10b5c:	200201b8 	.word	0x200201b8
   10b60:	0002b68e 	.word	0x0002b68e
   10b64:	0002b666 	.word	0x0002b666
   10b68:	0002abaa 	.word	0x0002abaa
   10b6c:	0002b6a3 	.word	0x0002b6a3
   10b70:	200201b4 	.word	0x200201b4
   10b74:	0002b6b8 	.word	0x0002b6b8
   10b78:	0002b6cf 	.word	0x0002b6cf

00010b7c <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   10b7c:	b538      	push	{r3, r4, r5, lr}
   10b7e:	481a      	ldr	r0, [pc, #104]	; (10be8 <z_clock_driver_init+0x6c>)
   10b80:	f011 f830 	bl	21be4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
   10b84:	b360      	cbz	r0, 10be0 <z_clock_driver_init+0x64>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   10b86:	6843      	ldr	r3, [r0, #4]
   10b88:	2102      	movs	r1, #2
   10b8a:	681b      	ldr	r3, [r3, #0]
   10b8c:	4798      	blx	r3
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   10b8e:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   10b90:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->PRESCALER = val;
   10b94:	4d15      	ldr	r5, [pc, #84]	; (10bec <z_clock_driver_init+0x70>)
   10b96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10b9a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   10b9e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   10ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   10ba6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10baa:	4b11      	ldr	r3, [pc, #68]	; (10bf0 <z_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   10bac:	2101      	movs	r1, #1
   10bae:	601c      	str	r4, [r3, #0]
   10bb0:	4b10      	ldr	r3, [pc, #64]	; (10bf4 <z_clock_driver_init+0x78>)
   10bb2:	2015      	movs	r0, #21
   10bb4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   10bb8:	4622      	mov	r2, r4
   10bba:	f000 fba1 	bl	11300 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
   10bbe:	2015      	movs	r0, #21
   10bc0:	f000 fb7a 	bl	112b8 <z_arch_irq_enable>
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10bc4:	2301      	movs	r3, #1

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   10bc6:	4620      	mov	r0, r4
   10bc8:	4a0b      	ldr	r2, [pc, #44]	; (10bf8 <z_clock_driver_init+0x7c>)
   10bca:	6013      	str	r3, [r2, #0]
   10bcc:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
   10bce:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   10bd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10bd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10bda:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   10bde:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   10be0:	f04f 30ff 	mov.w	r0, #4294967295
   10be4:	e7fb      	b.n	10bde <z_clock_driver_init+0x62>
   10be6:	bf00      	nop
   10be8:	0002b614 	.word	0x0002b614
   10bec:	40015000 	.word	0x40015000
   10bf0:	40015140 	.word	0x40015140
   10bf4:	e000e100 	.word	0xe000e100
   10bf8:	40015008 	.word	0x40015008

00010bfc <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   10bfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   10c00:	f1b0 3fff 	cmp.w	r0, #4294967295
   10c04:	bf08      	it	eq
   10c06:	4610      	moveq	r0, r2
{
   10c08:	b538      	push	{r3, r4, r5, lr}
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   10c0a:	1e45      	subs	r5, r0, #1
   10c0c:	4295      	cmp	r5, r2
   10c0e:	bfa8      	it	ge
   10c10:	4615      	movge	r5, r2
   10c12:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
	__asm__ volatile(
   10c16:	f04f 0320 	mov.w	r3, #32
   10c1a:	f3ef 8411 	mrs	r4, BASEPRI
   10c1e:	f383 8811 	msr	BASEPRI, r3
   10c22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   10c26:	4821      	ldr	r0, [pc, #132]	; (10cac <z_clock_set_timeout+0xb0>)
   10c28:	f013 f858 	bl	23cdc <z_spin_lock_valid>
   10c2c:	b960      	cbnz	r0, 10c48 <z_clock_set_timeout+0x4c>
   10c2e:	4920      	ldr	r1, [pc, #128]	; (10cb0 <z_clock_set_timeout+0xb4>)
   10c30:	234e      	movs	r3, #78	; 0x4e
   10c32:	4a20      	ldr	r2, [pc, #128]	; (10cb4 <z_clock_set_timeout+0xb8>)
   10c34:	4820      	ldr	r0, [pc, #128]	; (10cb8 <z_clock_set_timeout+0xbc>)
   10c36:	f014 ff82 	bl	25b3e <printk>
   10c3a:	4820      	ldr	r0, [pc, #128]	; (10cbc <z_clock_set_timeout+0xc0>)
   10c3c:	f014 ff7f 	bl	25b3e <printk>
   10c40:	214e      	movs	r1, #78	; 0x4e
   10c42:	481c      	ldr	r0, [pc, #112]	; (10cb4 <z_clock_set_timeout+0xb8>)
   10c44:	f014 ff88 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c48:	4818      	ldr	r0, [pc, #96]	; (10cac <z_clock_set_timeout+0xb0>)
   10c4a:	f013 f865 	bl	23d18 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   10c4e:	491c      	ldr	r1, [pc, #112]	; (10cc0 <z_clock_set_timeout+0xc4>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
   10c50:	4b1c      	ldr	r3, [pc, #112]	; (10cc4 <z_clock_set_timeout+0xc8>)
   10c52:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
   10c56:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10c58:	1ad0      	subs	r0, r2, r3
   10c5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
   10c5e:	30ff      	adds	r0, #255	; 0xff
   10c60:	eb00 2005 	add.w	r0, r0, r5, lsl #8
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
   10c64:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	cyc += last_count;
   10c68:	4403      	add	r3, r0
	return (a - b) & COUNTER_MAX;
   10c6a:	1a9a      	subs	r2, r3, r2
   10c6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
   10c70:	2a1f      	cmp	r2, #31
		cyc += CYC_PER_TICK;
   10c72:	bf98      	it	ls
   10c74:	f503 7380 	addls.w	r3, r3, #256	; 0x100
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10c7c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   10c80:	480a      	ldr	r0, [pc, #40]	; (10cac <z_clock_set_timeout+0xb0>)
   10c82:	f013 f839 	bl	23cf8 <z_spin_unlock_valid>
   10c86:	b960      	cbnz	r0, 10ca2 <z_clock_set_timeout+0xa6>
   10c88:	490f      	ldr	r1, [pc, #60]	; (10cc8 <z_clock_set_timeout+0xcc>)
   10c8a:	2361      	movs	r3, #97	; 0x61
   10c8c:	4a09      	ldr	r2, [pc, #36]	; (10cb4 <z_clock_set_timeout+0xb8>)
   10c8e:	480a      	ldr	r0, [pc, #40]	; (10cb8 <z_clock_set_timeout+0xbc>)
   10c90:	f014 ff55 	bl	25b3e <printk>
   10c94:	480d      	ldr	r0, [pc, #52]	; (10ccc <z_clock_set_timeout+0xd0>)
   10c96:	f014 ff52 	bl	25b3e <printk>
   10c9a:	2161      	movs	r1, #97	; 0x61
   10c9c:	4805      	ldr	r0, [pc, #20]	; (10cb4 <z_clock_set_timeout+0xb8>)
   10c9e:	f014 ff5b 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   10ca2:	f384 8811 	msr	BASEPRI, r4
   10ca6:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
   10caa:	bd38      	pop	{r3, r4, r5, pc}
   10cac:	200201b8 	.word	0x200201b8
   10cb0:	0002b68e 	.word	0x0002b68e
   10cb4:	0002b666 	.word	0x0002b666
   10cb8:	0002abaa 	.word	0x0002abaa
   10cbc:	0002b6a3 	.word	0x0002b6a3
   10cc0:	40015000 	.word	0x40015000
   10cc4:	200201b4 	.word	0x200201b4
   10cc8:	0002b6b8 	.word	0x0002b6b8
   10ccc:	0002b6cf 	.word	0x0002b6cf

00010cd0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   10cd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10cd2:	f04f 0320 	mov.w	r3, #32
   10cd6:	f3ef 8511 	mrs	r5, BASEPRI
   10cda:	f383 8811 	msr	BASEPRI, r3
   10cde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   10ce2:	4819      	ldr	r0, [pc, #100]	; (10d48 <z_clock_elapsed+0x78>)
   10ce4:	f012 fffa 	bl	23cdc <z_spin_lock_valid>
   10ce8:	b960      	cbnz	r0, 10d04 <z_clock_elapsed+0x34>
   10cea:	4918      	ldr	r1, [pc, #96]	; (10d4c <z_clock_elapsed+0x7c>)
   10cec:	234e      	movs	r3, #78	; 0x4e
   10cee:	4a18      	ldr	r2, [pc, #96]	; (10d50 <z_clock_elapsed+0x80>)
   10cf0:	4818      	ldr	r0, [pc, #96]	; (10d54 <z_clock_elapsed+0x84>)
   10cf2:	f014 ff24 	bl	25b3e <printk>
   10cf6:	4818      	ldr	r0, [pc, #96]	; (10d58 <z_clock_elapsed+0x88>)
   10cf8:	f014 ff21 	bl	25b3e <printk>
   10cfc:	214e      	movs	r1, #78	; 0x4e
   10cfe:	4814      	ldr	r0, [pc, #80]	; (10d50 <z_clock_elapsed+0x80>)
   10d00:	f014 ff2a 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   10d04:	4810      	ldr	r0, [pc, #64]	; (10d48 <z_clock_elapsed+0x78>)
   10d06:	f013 f807 	bl	23d18 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   10d0a:	4b14      	ldr	r3, [pc, #80]	; (10d5c <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   10d0c:	480e      	ldr	r0, [pc, #56]	; (10d48 <z_clock_elapsed+0x78>)
   10d0e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10d12:	4b13      	ldr	r3, [pc, #76]	; (10d60 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   10d14:	681b      	ldr	r3, [r3, #0]
   10d16:	1ae4      	subs	r4, r4, r3
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10d18:	f3c4 240f 	ubfx	r4, r4, #8, #16
   10d1c:	f012 ffec 	bl	23cf8 <z_spin_unlock_valid>
   10d20:	b960      	cbnz	r0, 10d3c <z_clock_elapsed+0x6c>
   10d22:	4910      	ldr	r1, [pc, #64]	; (10d64 <z_clock_elapsed+0x94>)
   10d24:	2361      	movs	r3, #97	; 0x61
   10d26:	4a0a      	ldr	r2, [pc, #40]	; (10d50 <z_clock_elapsed+0x80>)
   10d28:	480a      	ldr	r0, [pc, #40]	; (10d54 <z_clock_elapsed+0x84>)
   10d2a:	f014 ff08 	bl	25b3e <printk>
   10d2e:	480e      	ldr	r0, [pc, #56]	; (10d68 <z_clock_elapsed+0x98>)
   10d30:	f014 ff05 	bl	25b3e <printk>
   10d34:	2161      	movs	r1, #97	; 0x61
   10d36:	4806      	ldr	r0, [pc, #24]	; (10d50 <z_clock_elapsed+0x80>)
   10d38:	f014 ff0e 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   10d3c:	f385 8811 	msr	BASEPRI, r5
   10d40:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10d44:	4620      	mov	r0, r4
   10d46:	bd38      	pop	{r3, r4, r5, pc}
   10d48:	200201b8 	.word	0x200201b8
   10d4c:	0002b68e 	.word	0x0002b68e
   10d50:	0002b666 	.word	0x0002b666
   10d54:	0002abaa 	.word	0x0002abaa
   10d58:	0002b6a3 	.word	0x0002b6a3
   10d5c:	40015000 	.word	0x40015000
   10d60:	200201b4 	.word	0x200201b4
   10d64:	0002b6b8 	.word	0x0002b6b8
   10d68:	0002b6cf 	.word	0x0002b6cf

00010d6c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   10d6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10d6e:	f04f 0320 	mov.w	r3, #32
   10d72:	f3ef 8511 	mrs	r5, BASEPRI
   10d76:	f383 8811 	msr	BASEPRI, r3
   10d7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   10d7e:	481a      	ldr	r0, [pc, #104]	; (10de8 <z_timer_cycle_get_32+0x7c>)
   10d80:	f012 ffac 	bl	23cdc <z_spin_lock_valid>
   10d84:	b960      	cbnz	r0, 10da0 <z_timer_cycle_get_32+0x34>
   10d86:	4919      	ldr	r1, [pc, #100]	; (10dec <z_timer_cycle_get_32+0x80>)
   10d88:	234e      	movs	r3, #78	; 0x4e
   10d8a:	4a19      	ldr	r2, [pc, #100]	; (10df0 <z_timer_cycle_get_32+0x84>)
   10d8c:	4819      	ldr	r0, [pc, #100]	; (10df4 <z_timer_cycle_get_32+0x88>)
   10d8e:	f014 fed6 	bl	25b3e <printk>
   10d92:	4819      	ldr	r0, [pc, #100]	; (10df8 <z_timer_cycle_get_32+0x8c>)
   10d94:	f014 fed3 	bl	25b3e <printk>
   10d98:	214e      	movs	r1, #78	; 0x4e
   10d9a:	4815      	ldr	r0, [pc, #84]	; (10df0 <z_timer_cycle_get_32+0x84>)
   10d9c:	f014 fedc 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   10da0:	4811      	ldr	r0, [pc, #68]	; (10de8 <z_timer_cycle_get_32+0x7c>)
   10da2:	f012 ffb9 	bl	23d18 <z_spin_lock_set_owner>
   10da6:	4b15      	ldr	r3, [pc, #84]	; (10dfc <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   10da8:	480f      	ldr	r0, [pc, #60]	; (10de8 <z_timer_cycle_get_32+0x7c>)
   10daa:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   10dae:	4b14      	ldr	r3, [pc, #80]	; (10e00 <z_timer_cycle_get_32+0x94>)
   10db0:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10db2:	1ae4      	subs	r4, r4, r3
   10db4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   10db8:	441c      	add	r4, r3
   10dba:	f012 ff9d 	bl	23cf8 <z_spin_unlock_valid>
   10dbe:	b960      	cbnz	r0, 10dda <z_timer_cycle_get_32+0x6e>
   10dc0:	4910      	ldr	r1, [pc, #64]	; (10e04 <z_timer_cycle_get_32+0x98>)
   10dc2:	2361      	movs	r3, #97	; 0x61
   10dc4:	4a0a      	ldr	r2, [pc, #40]	; (10df0 <z_timer_cycle_get_32+0x84>)
   10dc6:	480b      	ldr	r0, [pc, #44]	; (10df4 <z_timer_cycle_get_32+0x88>)
   10dc8:	f014 feb9 	bl	25b3e <printk>
   10dcc:	480e      	ldr	r0, [pc, #56]	; (10e08 <z_timer_cycle_get_32+0x9c>)
   10dce:	f014 feb6 	bl	25b3e <printk>
   10dd2:	2161      	movs	r1, #97	; 0x61
   10dd4:	4806      	ldr	r0, [pc, #24]	; (10df0 <z_timer_cycle_get_32+0x84>)
   10dd6:	f014 febf 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   10dda:	f385 8811 	msr	BASEPRI, r5
   10dde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10de2:	4620      	mov	r0, r4
   10de4:	bd38      	pop	{r3, r4, r5, pc}
   10de6:	bf00      	nop
   10de8:	200201b8 	.word	0x200201b8
   10dec:	0002b68e 	.word	0x0002b68e
   10df0:	0002b666 	.word	0x0002b666
   10df4:	0002abaa 	.word	0x0002abaa
   10df8:	0002b6a3 	.word	0x0002b6a3
   10dfc:	40015000 	.word	0x40015000
   10e00:	200201b4 	.word	0x200201b4
   10e04:	0002b6b8 	.word	0x0002b6b8
   10e08:	0002b6cf 	.word	0x0002b6cf

00010e0c <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   10e0c:	4804      	ldr	r0, [pc, #16]	; (10e20 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   10e0e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   10e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   10e12:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   10e14:	d003      	beq.n	10e1e <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   10e16:	4903      	ldr	r1, [pc, #12]	; (10e24 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   10e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   10e1c:	600a      	str	r2, [r1, #0]

00010e1e <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
   10e1e:	4770      	bx	lr
    ldr r0, =_kernel
   10e20:	20022120 	.word	0x20022120
    ldr r1, =_SCS_ICSR
   10e24:	e000ed04 	.word	0xe000ed04

00010e28 <__pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10e28:	4929      	ldr	r1, [pc, #164]	; (10ed0 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10e2a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10e2c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   10e30:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   10e32:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10e36:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   10e3a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   10e3e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   10e42:	d004      	beq.n	10e4e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   10e44:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   10e48:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   10e4c:	e007      	b.n	10e5e <out_fp_endif>

00010e4e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   10e4e:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   10e52:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   10e56:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   10e5a:	f050 0004 	orrs.w	r0, r0, #4

00010e5e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   10e5e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10e62:	2020      	movs	r0, #32
    msr BASEPRI, r0
   10e64:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10e68:	f3bf 8f6f 	isb	sy
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   10e6c:	4f19      	ldr	r7, [pc, #100]	; (10ed4 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10e6e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10e72:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   10e74:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   10e76:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10e78:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
   10e7a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10e7c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10e7e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   10e82:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   10e86:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   10e8a:	d105      	bne.n	10e98 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   10e8c:	2300      	movs	r3, #0
    vmsr fpscr, r3
   10e8e:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   10e92:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   10e96:	e005      	b.n	10ea4 <in_fp_endif>

00010e98 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   10e98:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   10e9c:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   10ea0:	ec90 8a10 	vldmia	r0, {s16-s31}

00010ea4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   10ea4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   10ea8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   10eac:	f383 8814 	msr	CONTROL, r3
    isb
   10eb0:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   10eb4:	b504      	push	{r2, lr}
    ldr r0, =_kernel
   10eb6:	4806      	ldr	r0, [pc, #24]	; (10ed0 <in_fp_endif+0x2c>)
    ldr r0, [r0, #_kernel_offset_to_current]
   10eb8:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
   10eba:	f014 fe71 	bl	25ba0 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
   10ebe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10ec2:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   10ec6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
   10eca:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
   10ece:	4770      	bx	lr
    ldr r1, =_kernel
   10ed0:	20022120 	.word	0x20022120
    ldr v4, =_SCS_ICSR
   10ed4:	e000ed04 	.word	0xe000ed04

00010ed8 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
   10ed8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10edc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10ede:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10ee2:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10ee6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
   10ee8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   10eec:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
   10ef0:	2902      	cmp	r1, #2
    beq _oops
   10ef2:	d0ff      	beq.n	10ef4 <_oops>

00010ef4 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
   10ef4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   10ef6:	f014 fe48 	bl	25b8a <z_do_kernel_oops>
    pop {r0, pc}
   10efa:	bd01      	pop	{r0, pc}

00010efc <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
   10efc:	4901      	ldr	r1, [pc, #4]	; (10f04 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   10efe:	2210      	movs	r2, #16
	str r2, [r1]
   10f00:	600a      	str	r2, [r1, #0]
	bx lr
   10f02:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   10f04:	e000ed10 	.word	0xe000ed10

00010f08 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   10f08:	4040      	eors	r0, r0
	msr BASEPRI, r0
   10f0a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   10f0e:	bf30      	wfi

	bx lr
   10f10:	4770      	bx	lr
   10f12:	bf00      	nop

00010f14 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   10f14:	4040      	eors	r0, r0
	msr BASEPRI, r0
   10f16:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   10f1a:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   10f1e:	4671      	mov	r1, lr
	tst r1, r0
   10f20:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   10f22:	d002      	beq.n	10f2a <_s_stack_frame_msp>
	mrs r0, PSP
   10f24:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   10f28:	d101      	bne.n	10f2e <_s_stack_frame_endif>

00010f2a <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   10f2a:	f3ef 8008 	mrs	r0, MSP

00010f2e <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   10f2e:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   10f30:	b501      	push	{r0, lr}
	bl _Fault
   10f32:	f000 f945 	bl	111c0 <_Fault>

	pop {r0, pc}
   10f36:	bd01      	pop	{r0, pc}

00010f38 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10f38:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   10f3a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10f3c:	4a0b      	ldr	r2, [pc, #44]	; (10f6c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10f3e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   10f40:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10f42:	bf1e      	ittt	ne
	movne	r1, #0
   10f44:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10f46:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   10f48:	f016 fb42 	blne	275d0 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10f4c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   10f4e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10f52:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10f56:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   10f5a:	4905      	ldr	r1, [pc, #20]	; (10f70 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10f5c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10f5e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   10f60:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10f62:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
   10f66:	4803      	ldr	r0, [pc, #12]	; (10f74 <_isr_wrapper+0x3c>)
	bx r0
   10f68:	4700      	bx	r0
   10f6a:	0000      	.short	0x0000
	ldr r2, =_kernel
   10f6c:	20022120 	.word	0x20022120
	ldr r1, =_sw_isr_table
   10f70:	00027814 	.word	0x00027814
	ldr r0, =_IntExit
   10f74:	00010e0d 	.word	0x00010e0d

00010f78 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
   10f78:	2300      	movs	r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10f7a:	2120      	movs	r1, #32
   10f7c:	4803      	ldr	r0, [pc, #12]	; (10f8c <z_IntLibInit+0x14>)
   10f7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10f80:	3301      	adds	r3, #1
   10f82:	2b41      	cmp	r3, #65	; 0x41
   10f84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10f88:	d1f9      	bne.n	10f7e <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10f8a:	4770      	bx	lr
   10f8c:	e000e100 	.word	0xe000e100

00010f90 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   10f90:	4a09      	ldr	r2, [pc, #36]	; (10fb8 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10f92:	490a      	ldr	r1, [pc, #40]	; (10fbc <__swap+0x2c>)
	_current->arch.basepri = key;
   10f94:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10f96:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10f98:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   10f9a:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10f9c:	4908      	ldr	r1, [pc, #32]	; (10fc0 <__swap+0x30>)
   10f9e:	684b      	ldr	r3, [r1, #4]
   10fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10fa4:	604b      	str	r3, [r1, #4]
   10fa6:	2300      	movs	r3, #0
   10fa8:	f383 8811 	msr	BASEPRI, r3
   10fac:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10fb0:	6893      	ldr	r3, [r2, #8]
}
   10fb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   10fb4:	4770      	bx	lr
   10fb6:	bf00      	nop
   10fb8:	20022120 	.word	0x20022120
   10fbc:	0002a564 	.word	0x0002a564
   10fc0:	e000ed00 	.word	0xe000ed00

00010fc4 <BusFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
   10fc4:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10fc6:	4c1e      	ldr	r4, [pc, #120]	; (11040 <BusFault.isra.2+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
   10fc8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
   10fca:	481e      	ldr	r0, [pc, #120]	; (11044 <BusFault.isra.2+0x80>)
   10fcc:	f014 fdb7 	bl	25b3e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10fd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10fd2:	04d9      	lsls	r1, r3, #19
   10fd4:	d502      	bpl.n	10fdc <BusFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error\n");
   10fd6:	481c      	ldr	r0, [pc, #112]	; (11048 <BusFault.isra.2+0x84>)
   10fd8:	f014 fdb1 	bl	25b3e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10fdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10fde:	051a      	lsls	r2, r3, #20
   10fe0:	d502      	bpl.n	10fe8 <BusFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
   10fe2:	481a      	ldr	r0, [pc, #104]	; (1104c <BusFault.isra.2+0x88>)
   10fe4:	f014 fdab 	bl	25b3e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10fe8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10fea:	059b      	lsls	r3, r3, #22
   10fec:	d50e      	bpl.n	1100c <BusFault.isra.2+0x48>
		PR_FAULT_INFO("  Precise data bus error\n");
   10fee:	4818      	ldr	r0, [pc, #96]	; (11050 <BusFault.isra.2+0x8c>)
   10ff0:	f014 fda5 	bl	25b3e <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10ff4:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10ff8:	0418      	lsls	r0, r3, #16
   10ffa:	d507      	bpl.n	1100c <BusFault.isra.2+0x48>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
   10ffc:	4815      	ldr	r0, [pc, #84]	; (11054 <BusFault.isra.2+0x90>)
   10ffe:	f014 fd9e 	bl	25b3e <printk>
			if (fromHardFault) {
   11002:	b11d      	cbz	r5, 1100c <BusFault.isra.2+0x48>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1100a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1100c:	4c0c      	ldr	r4, [pc, #48]	; (11040 <BusFault.isra.2+0x7c>)
   1100e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11010:	0559      	lsls	r1, r3, #21
   11012:	d502      	bpl.n	1101a <BusFault.isra.2+0x56>
		PR_FAULT_INFO("  Imprecise data bus error\n");
   11014:	4810      	ldr	r0, [pc, #64]	; (11058 <BusFault.isra.2+0x94>)
   11016:	f014 fd92 	bl	25b3e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1101a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1101c:	05da      	lsls	r2, r3, #23
   1101e:	d509      	bpl.n	11034 <BusFault.isra.2+0x70>
		PR_FAULT_INFO("  Instruction bus error\n");
   11020:	480e      	ldr	r0, [pc, #56]	; (1105c <BusFault.isra.2+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
   11022:	f014 fd8c 	bl	25b3e <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11026:	4a06      	ldr	r2, [pc, #24]	; (11040 <BusFault.isra.2+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
   11028:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1102a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1102c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11030:	6293      	str	r3, [r2, #40]	; 0x28
}
   11032:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11036:	049b      	lsls	r3, r3, #18
   11038:	d5f5      	bpl.n	11026 <BusFault.isra.2+0x62>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
   1103a:	4809      	ldr	r0, [pc, #36]	; (11060 <BusFault.isra.2+0x9c>)
   1103c:	e7f1      	b.n	11022 <BusFault.isra.2+0x5e>
   1103e:	bf00      	nop
   11040:	e000ed00 	.word	0xe000ed00
   11044:	0002b6e2 	.word	0x0002b6e2
   11048:	0002b6f9 	.word	0x0002b6f9
   1104c:	0002b70b 	.word	0x0002b70b
   11050:	0002b71f 	.word	0x0002b71f
   11054:	0002b739 	.word	0x0002b739
   11058:	0002b74f 	.word	0x0002b74f
   1105c:	0002b76b 	.word	0x0002b76b
   11060:	0002b784 	.word	0x0002b784

00011064 <UsageFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
   11064:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11066:	4c1c      	ldr	r4, [pc, #112]	; (110d8 <UsageFault.isra.3+0x74>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
   11068:	481c      	ldr	r0, [pc, #112]	; (110dc <UsageFault.isra.3+0x78>)
   1106a:	f014 fd68 	bl	25b3e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1106e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11070:	019a      	lsls	r2, r3, #6
   11072:	d502      	bpl.n	1107a <UsageFault.isra.3+0x16>
		PR_FAULT_INFO("  Division by zero\n");
   11074:	481a      	ldr	r0, [pc, #104]	; (110e0 <UsageFault.isra.3+0x7c>)
   11076:	f014 fd62 	bl	25b3e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1107a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1107c:	01db      	lsls	r3, r3, #7
   1107e:	d502      	bpl.n	11086 <UsageFault.isra.3+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
   11080:	4818      	ldr	r0, [pc, #96]	; (110e4 <UsageFault.isra.3+0x80>)
   11082:	f014 fd5c 	bl	25b3e <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   11086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11088:	02dc      	lsls	r4, r3, #11
   1108a:	d502      	bpl.n	11092 <UsageFault.isra.3+0x2e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)\n");
   1108c:	4816      	ldr	r0, [pc, #88]	; (110e8 <UsageFault.isra.3+0x84>)
   1108e:	f014 fd56 	bl	25b3e <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11092:	4c11      	ldr	r4, [pc, #68]	; (110d8 <UsageFault.isra.3+0x74>)
   11094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11096:	0318      	lsls	r0, r3, #12
   11098:	d502      	bpl.n	110a0 <UsageFault.isra.3+0x3c>
		PR_FAULT_INFO("  No coprocessor instructions\n");
   1109a:	4814      	ldr	r0, [pc, #80]	; (110ec <UsageFault.isra.3+0x88>)
   1109c:	f014 fd4f 	bl	25b3e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   110a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   110a2:	0359      	lsls	r1, r3, #13
   110a4:	d502      	bpl.n	110ac <UsageFault.isra.3+0x48>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
   110a6:	4812      	ldr	r0, [pc, #72]	; (110f0 <UsageFault.isra.3+0x8c>)
   110a8:	f014 fd49 	bl	25b3e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   110ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   110ae:	039a      	lsls	r2, r3, #14
   110b0:	d502      	bpl.n	110b8 <UsageFault.isra.3+0x54>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
   110b2:	4810      	ldr	r0, [pc, #64]	; (110f4 <UsageFault.isra.3+0x90>)
   110b4:	f014 fd43 	bl	25b3e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   110b8:	4c07      	ldr	r4, [pc, #28]	; (110d8 <UsageFault.isra.3+0x74>)
   110ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   110bc:	03db      	lsls	r3, r3, #15
   110be:	d502      	bpl.n	110c6 <UsageFault.isra.3+0x62>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
   110c0:	480d      	ldr	r0, [pc, #52]	; (110f8 <UsageFault.isra.3+0x94>)
   110c2:	f014 fd3c 	bl	25b3e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   110c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	return reason;
}
   110c8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   110ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   110ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   110d2:	62a3      	str	r3, [r4, #40]	; 0x28
}
   110d4:	bd10      	pop	{r4, pc}
   110d6:	bf00      	nop
   110d8:	e000ed00 	.word	0xe000ed00
   110dc:	0002b8b4 	.word	0x0002b8b4
   110e0:	0002b8cd 	.word	0x0002b8cd
   110e4:	0002b8e1 	.word	0x0002b8e1
   110e8:	0002b8fc 	.word	0x0002b8fc
   110ec:	0002b927 	.word	0x0002b927
   110f0:	0002b946 	.word	0x0002b946
   110f4:	0002b96c 	.word	0x0002b96c
   110f8:	0002b987 	.word	0x0002b987

000110fc <MpuFault.isra.6>:
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
   110fc:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   110fe:	4c24      	ldr	r4, [pc, #144]	; (11190 <MpuFault.isra.6+0x94>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
   11100:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
   11102:	4824      	ldr	r0, [pc, #144]	; (11194 <MpuFault.isra.6+0x98>)
   11104:	f014 fd1b 	bl	25b3e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1110a:	06d9      	lsls	r1, r3, #27
   1110c:	d502      	bpl.n	11114 <MpuFault.isra.6+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1110e:	4822      	ldr	r0, [pc, #136]	; (11198 <MpuFault.isra.6+0x9c>)
   11110:	f014 fd15 	bl	25b3e <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11116:	071a      	lsls	r2, r3, #28
   11118:	d502      	bpl.n	11120 <MpuFault.isra.6+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
   1111a:	4820      	ldr	r0, [pc, #128]	; (1119c <MpuFault.isra.6+0xa0>)
   1111c:	f014 fd0f 	bl	25b3e <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11122:	079b      	lsls	r3, r3, #30
   11124:	d50e      	bpl.n	11144 <MpuFault.isra.6+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
   11126:	481e      	ldr	r0, [pc, #120]	; (111a0 <MpuFault.isra.6+0xa4>)
   11128:	f014 fd09 	bl	25b3e <printk>
		mmfar = SCB->MMFAR;
   1112c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1112e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11130:	0618      	lsls	r0, r3, #24
   11132:	d507      	bpl.n	11144 <MpuFault.isra.6+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
   11134:	481b      	ldr	r0, [pc, #108]	; (111a4 <MpuFault.isra.6+0xa8>)
   11136:	f014 fd02 	bl	25b3e <printk>
			if (fromHardFault) {
   1113a:	b11d      	cbz	r5, 11144 <MpuFault.isra.6+0x48>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1113c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1113e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11142:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11144:	4c12      	ldr	r4, [pc, #72]	; (11190 <MpuFault.isra.6+0x94>)
   11146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11148:	07d9      	lsls	r1, r3, #31
   1114a:	d502      	bpl.n	11152 <MpuFault.isra.6+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
   1114c:	4816      	ldr	r0, [pc, #88]	; (111a8 <MpuFault.isra.6+0xac>)
   1114e:	f014 fcf6 	bl	25b3e <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11154:	069a      	lsls	r2, r3, #26
   11156:	d502      	bpl.n	1115e <MpuFault.isra.6+0x62>
		PR_FAULT_INFO(
   11158:	4814      	ldr	r0, [pc, #80]	; (111ac <MpuFault.isra.6+0xb0>)
   1115a:	f014 fcf0 	bl	25b3e <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1115e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11160:	06db      	lsls	r3, r3, #27
   11162:	d50e      	bpl.n	11182 <MpuFault.isra.6+0x86>
	__ASSERT(0,
   11164:	4912      	ldr	r1, [pc, #72]	; (111b0 <MpuFault.isra.6+0xb4>)
   11166:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1116a:	4a12      	ldr	r2, [pc, #72]	; (111b4 <MpuFault.isra.6+0xb8>)
   1116c:	4812      	ldr	r0, [pc, #72]	; (111b8 <MpuFault.isra.6+0xbc>)
   1116e:	f014 fce6 	bl	25b3e <printk>
   11172:	4812      	ldr	r0, [pc, #72]	; (111bc <MpuFault.isra.6+0xc0>)
   11174:	f014 fce3 	bl	25b3e <printk>
   11178:	f44f 719e 	mov.w	r1, #316	; 0x13c
   1117c:	480d      	ldr	r0, [pc, #52]	; (111b4 <MpuFault.isra.6+0xb8>)
   1117e:	f014 fceb 	bl	25b58 <assert_post_action>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11182:	4a03      	ldr	r2, [pc, #12]	; (11190 <MpuFault.isra.6+0x94>)
}
   11184:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11186:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11188:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1118c:	6293      	str	r3, [r2, #40]	; 0x28
}
   1118e:	bd38      	pop	{r3, r4, r5, pc}
   11190:	e000ed00 	.word	0xe000ed00
   11194:	0002b7b4 	.word	0x0002b7b4
   11198:	0002b7cb 	.word	0x0002b7cb
   1119c:	0002b70b 	.word	0x0002b70b
   111a0:	0002b7ff 	.word	0x0002b7ff
   111a4:	0002b818 	.word	0x0002b818
   111a8:	0002b82f 	.word	0x0002b82f
   111ac:	0002b784 	.word	0x0002b784
   111b0:	0002c399 	.word	0x0002c399
   111b4:	0002b84f 	.word	0x0002b84f
   111b8:	0002abaa 	.word	0x0002abaa
   111bc:	0002b87a 	.word	0x0002b87a

000111c0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
   111c0:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   111c2:	4b2d      	ldr	r3, [pc, #180]	; (11278 <_Fault+0xb8>)
{
   111c4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   111c6:	685c      	ldr	r4, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   111c8:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   111cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   111d0:	d005      	beq.n	111de <_Fault+0x1e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   111d2:	2000      	movs	r0, #0

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
   111d4:	4629      	mov	r1, r5
}
   111d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_NanoFatalErrorHandler(reason, esf);
   111da:	f000 b923 	b.w	11424 <z_NanoFatalErrorHandler>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   111de:	07c8      	lsls	r0, r1, #31
   111e0:	d4f7      	bmi.n	111d2 <_Fault+0x12>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   111e2:	0649      	lsls	r1, r1, #25
   111e4:	d502      	bpl.n	111ec <_Fault+0x2c>
		PR_FAULT_INFO("Exception occurred in Secure State\n");
   111e6:	4825      	ldr	r0, [pc, #148]	; (1127c <_Fault+0xbc>)
   111e8:	f014 fca9 	bl	25b3e <printk>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   111ec:	f3c4 0408 	ubfx	r4, r4, #0, #9
	switch (fault) {
   111f0:	1ee2      	subs	r2, r4, #3
   111f2:	2a09      	cmp	r2, #9
   111f4:	d835      	bhi.n	11262 <_Fault+0xa2>
   111f6:	e8df f002 	tbb	[pc, r2]
   111fa:	2e05      	.short	0x2e05
   111fc:	34342b30 	.word	0x34342b30
   11200:	32343434 	.word	0x32343434
	PR_FAULT_INFO("***** HARD FAULT *****\n");
   11204:	481e      	ldr	r0, [pc, #120]	; (11280 <_Fault+0xc0>)
   11206:	f014 fc9a 	bl	25b3e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1120a:	4b1b      	ldr	r3, [pc, #108]	; (11278 <_Fault+0xb8>)
   1120c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1120e:	0792      	lsls	r2, r2, #30
   11210:	d503      	bpl.n	1121a <_Fault+0x5a>
		PR_EXC("  Bus fault on vector table read\n");
   11212:	481c      	ldr	r0, [pc, #112]	; (11284 <_Fault+0xc4>)
   11214:	f014 fc93 	bl	25b3e <printk>
   11218:	e7db      	b.n	111d2 <_Fault+0x12>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1121c:	005b      	lsls	r3, r3, #1
   1121e:	d5d8      	bpl.n	111d2 <_Fault+0x12>
		PR_EXC("  Fault escalation (see below)\n");
   11220:	4819      	ldr	r0, [pc, #100]	; (11288 <_Fault+0xc8>)
   11222:	f014 fc8c 	bl	25b3e <printk>
		if (SCB_MMFSR != 0) {
   11226:	4b19      	ldr	r3, [pc, #100]	; (1128c <_Fault+0xcc>)
   11228:	781b      	ldrb	r3, [r3, #0]
   1122a:	b12b      	cbz	r3, 11238 <_Fault+0x78>
			reason = MpuFault(esf, 1);
   1122c:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
   1122e:	f7ff ff65 	bl	110fc <MpuFault.isra.6>
	if (reason == _NANO_ERR_RECOVERABLE) {
   11232:	2806      	cmp	r0, #6
   11234:	d1ce      	bne.n	111d4 <_Fault+0x14>
}
   11236:	bd38      	pop	{r3, r4, r5, pc}
		} else if (SCB_BFSR != 0) {
   11238:	4b15      	ldr	r3, [pc, #84]	; (11290 <_Fault+0xd0>)
   1123a:	781b      	ldrb	r3, [r3, #0]
   1123c:	b11b      	cbz	r3, 11246 <_Fault+0x86>
			reason = BusFault(esf, 1);
   1123e:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
   11240:	f7ff fec0 	bl	10fc4 <BusFault.isra.2>
   11244:	e7f5      	b.n	11232 <_Fault+0x72>
		} else if (SCB_UFSR != 0) {
   11246:	4b13      	ldr	r3, [pc, #76]	; (11294 <_Fault+0xd4>)
   11248:	881b      	ldrh	r3, [r3, #0]
   1124a:	b29b      	uxth	r3, r3
   1124c:	2b00      	cmp	r3, #0
   1124e:	d0c0      	beq.n	111d2 <_Fault+0x12>
		reason = UsageFault(esf);
   11250:	f7ff ff08 	bl	11064 <UsageFault.isra.3>
   11254:	e7ed      	b.n	11232 <_Fault+0x72>
		reason = MpuFault(esf, 0);
   11256:	2000      	movs	r0, #0
   11258:	e7e9      	b.n	1122e <_Fault+0x6e>
		reason = BusFault(esf, 0);
   1125a:	2000      	movs	r0, #0
   1125c:	e7f0      	b.n	11240 <_Fault+0x80>
	PR_FAULT_INFO(
   1125e:	480e      	ldr	r0, [pc, #56]	; (11298 <_Fault+0xd8>)
   11260:	e7d8      	b.n	11214 <_Fault+0x54>
	PR_FAULT_INFO("***** %s %d) *****\n",
   11262:	480e      	ldr	r0, [pc, #56]	; (1129c <_Fault+0xdc>)
   11264:	490e      	ldr	r1, [pc, #56]	; (112a0 <_Fault+0xe0>)
   11266:	f1a4 0210 	sub.w	r2, r4, #16
   1126a:	2c0f      	cmp	r4, #15
   1126c:	bfd8      	it	le
   1126e:	4601      	movle	r1, r0
   11270:	480c      	ldr	r0, [pc, #48]	; (112a4 <_Fault+0xe4>)
   11272:	f014 fc64 	bl	25b3e <printk>
   11276:	e7ac      	b.n	111d2 <_Fault+0x12>
   11278:	e000ed00 	.word	0xe000ed00
   1127c:	0002b9e1 	.word	0x0002b9e1
   11280:	0002ba05 	.word	0x0002ba05
   11284:	0002ba1d 	.word	0x0002ba1d
   11288:	0002ba3f 	.word	0x0002ba3f
   1128c:	e000ed28 	.word	0xe000ed28
   11290:	e000ed29 	.word	0xe000ed29
   11294:	e000ed2a 	.word	0xe000ed2a
   11298:	0002ba5f 	.word	0x0002ba5f
   1129c:	0002b9b3 	.word	0x0002b9b3
   112a0:	0002b9c8 	.word	0x0002b9c8
   112a4:	0002ba96 	.word	0x0002ba96

000112a8 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   112a8:	4a02      	ldr	r2, [pc, #8]	; (112b4 <z_FaultInit+0xc>)
   112aa:	6953      	ldr	r3, [r2, #20]
   112ac:	f043 0310 	orr.w	r3, r3, #16
   112b0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   112b2:	4770      	bx	lr
   112b4:	e000ed00 	.word	0xe000ed00

000112b8 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   112b8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   112ba:	2b00      	cmp	r3, #0
   112bc:	db08      	blt.n	112d0 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   112be:	2201      	movs	r2, #1
   112c0:	f000 001f 	and.w	r0, r0, #31
   112c4:	fa02 f000 	lsl.w	r0, r2, r0
   112c8:	4a02      	ldr	r2, [pc, #8]	; (112d4 <z_arch_irq_enable+0x1c>)
   112ca:	095b      	lsrs	r3, r3, #5
   112cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   112d0:	4770      	bx	lr
   112d2:	bf00      	nop
   112d4:	e000e100 	.word	0xe000e100

000112d8 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   112d8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   112da:	2b00      	cmp	r3, #0
   112dc:	db0d      	blt.n	112fa <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   112de:	2201      	movs	r2, #1
   112e0:	f000 001f 	and.w	r0, r0, #31
   112e4:	fa02 f000 	lsl.w	r0, r2, r0
   112e8:	095b      	lsrs	r3, r3, #5
   112ea:	4a04      	ldr	r2, [pc, #16]	; (112fc <z_arch_irq_disable+0x24>)
   112ec:	3320      	adds	r3, #32
   112ee:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   112f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   112f6:	f3bf 8f6f 	isb	sy
}
   112fa:	4770      	bx	lr
   112fc:	e000e100 	.word	0xe000e100

00011300 <z_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   11300:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   11302:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   11304:	2c07      	cmp	r4, #7
{
   11306:	4605      	mov	r5, r0
   11308:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1130a:	d90e      	bls.n	1132a <z_irq_priority_set+0x2a>
   1130c:	2372      	movs	r3, #114	; 0x72
   1130e:	4a10      	ldr	r2, [pc, #64]	; (11350 <z_irq_priority_set+0x50>)
   11310:	4910      	ldr	r1, [pc, #64]	; (11354 <z_irq_priority_set+0x54>)
   11312:	4811      	ldr	r0, [pc, #68]	; (11358 <z_irq_priority_set+0x58>)
   11314:	f014 fc13 	bl	25b3e <printk>
   11318:	4631      	mov	r1, r6
   1131a:	4810      	ldr	r0, [pc, #64]	; (1135c <z_irq_priority_set+0x5c>)
   1131c:	2207      	movs	r2, #7
   1131e:	f014 fc0e 	bl	25b3e <printk>
   11322:	2172      	movs	r1, #114	; 0x72
   11324:	480a      	ldr	r0, [pc, #40]	; (11350 <z_irq_priority_set+0x50>)
   11326:	f014 fc17 	bl	25b58 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1132a:	b26b      	sxtb	r3, r5
  if ((int32_t)(IRQn) >= 0)
   1132c:	2b00      	cmp	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1132e:	bfa8      	it	ge
   11330:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   11334:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11338:	bfb8      	it	lt
   1133a:	4b09      	ldrlt	r3, [pc, #36]	; (11360 <z_irq_priority_set+0x60>)
   1133c:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1133e:	bfab      	itete	ge
   11340:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11344:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11348:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1134c:	555c      	strblt	r4, [r3, r5]
}
   1134e:	bd70      	pop	{r4, r5, r6, pc}
   11350:	0002baaa 	.word	0x0002baaa
   11354:	0002bada 	.word	0x0002bada
   11358:	0002abaa 	.word	0x0002abaa
   1135c:	0002baf5 	.word	0x0002baf5
   11360:	e000ed14 	.word	0xe000ed14

00011364 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   11364:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   11366:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   11368:	4b04      	ldr	r3, [pc, #16]	; (1137c <_arch_isr_direct_pm+0x18>)
   1136a:	6a18      	ldr	r0, [r3, #32]
   1136c:	b118      	cbz	r0, 11376 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1136e:	2200      	movs	r2, #0
   11370:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   11372:	f016 f92d 	bl	275d0 <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   11376:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   11378:	bd08      	pop	{r3, pc}
   1137a:	bf00      	nop
   1137c:	20022120 	.word	0x20022120

00011380 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   11380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11384:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11386:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   11388:	2e0f      	cmp	r6, #15
{
   1138a:	4689      	mov	r9, r1
   1138c:	4690      	mov	r8, r2
   1138e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   11390:	d102      	bne.n	11398 <z_new_thread+0x18>
   11392:	4b1e      	ldr	r3, [pc, #120]	; (1140c <z_new_thread+0x8c>)
   11394:	429f      	cmp	r7, r3
   11396:	d014      	beq.n	113c2 <z_new_thread+0x42>
   11398:	f106 0310 	add.w	r3, r6, #16
   1139c:	2b1e      	cmp	r3, #30
   1139e:	d910      	bls.n	113c2 <z_new_thread+0x42>
   113a0:	233f      	movs	r3, #63	; 0x3f
   113a2:	4a1b      	ldr	r2, [pc, #108]	; (11410 <z_new_thread+0x90>)
   113a4:	491b      	ldr	r1, [pc, #108]	; (11414 <z_new_thread+0x94>)
   113a6:	481c      	ldr	r0, [pc, #112]	; (11418 <z_new_thread+0x98>)
   113a8:	f014 fbc9 	bl	25b3e <printk>
   113ac:	4631      	mov	r1, r6
   113ae:	481b      	ldr	r0, [pc, #108]	; (1141c <z_new_thread+0x9c>)
   113b0:	f06f 030f 	mvn.w	r3, #15
   113b4:	220e      	movs	r2, #14
   113b6:	f014 fbc2 	bl	25b3e <printk>
   113ba:	213f      	movs	r1, #63	; 0x3f
   113bc:	4814      	ldr	r0, [pc, #80]	; (11410 <z_new_thread+0x90>)
   113be:	f014 fbcb 	bl	25b58 <assert_post_action>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   113c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   113c4:	2204      	movs	r2, #4
   113c6:	4631      	mov	r1, r6
   113c8:	4628      	mov	r0, r5
   113ca:	f016 f9ae 	bl	2772a <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   113ce:	2200      	movs	r2, #0
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
   113d0:	eb09 0408 	add.w	r4, r9, r8
#else
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   113d4:	4912      	ldr	r1, [pc, #72]	; (11420 <z_new_thread+0xa0>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   113d6:	f1a4 0320 	sub.w	r3, r4, #32
   113da:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   113de:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   113e2:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   113e6:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   113ea:	6199      	str	r1, [r3, #24]

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   113ec:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   113ee:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   113f0:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   113f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   113f4:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   113f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   113f8:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   113fa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   113fe:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   11400:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   11402:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   11404:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1140c:	00021c3d 	.word	0x00021c3d
   11410:	0002bb2a 	.word	0x0002bb2a
   11414:	0002bb56 	.word	0x0002bb56
   11418:	0002abaa 	.word	0x0002abaa
   1141c:	0002bbdd 	.word	0x0002bbdd
   11420:	0002581d 	.word	0x0002581d

00011424 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   11424:	b538      	push	{r3, r4, r5, lr}
   11426:	4604      	mov	r4, r0
   11428:	460d      	mov	r5, r1
	const char *thread_name = k_thread_name_get(k_current_get());
#endif

	LOG_PANIC();

	switch (reason) {
   1142a:	2805      	cmp	r0, #5
   1142c:	d81a      	bhi.n	11464 <z_NanoFatalErrorHandler+0x40>
   1142e:	e8df f000 	tbb	[pc, r0]
   11432:	1903      	.short	0x1903
   11434:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
   11438:	480d      	ldr	r0, [pc, #52]	; (11470 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   1143a:	f014 fb80 	bl	25b3e <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   1143e:	f012 faf7 	bl	23a30 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p"
   11442:	69aa      	ldr	r2, [r5, #24]
   11444:	4601      	mov	r1, r0
   11446:	480b      	ldr	r0, [pc, #44]	; (11474 <z_NanoFatalErrorHandler+0x50>)
   11448:	f014 fb79 	bl	25b3e <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
   1144c:	4629      	mov	r1, r5
   1144e:	4620      	mov	r0, r4
}
   11450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
   11454:	f000 b818 	b.w	11488 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
   11458:	4807      	ldr	r0, [pc, #28]	; (11478 <z_NanoFatalErrorHandler+0x54>)
   1145a:	e7ee      	b.n	1143a <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
   1145c:	4807      	ldr	r0, [pc, #28]	; (1147c <z_NanoFatalErrorHandler+0x58>)
   1145e:	e7ec      	b.n	1143a <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
   11460:	4807      	ldr	r0, [pc, #28]	; (11480 <z_NanoFatalErrorHandler+0x5c>)
   11462:	e7ea      	b.n	1143a <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   11464:	4601      	mov	r1, r0
   11466:	4807      	ldr	r0, [pc, #28]	; (11484 <z_NanoFatalErrorHandler+0x60>)
   11468:	f014 fb69 	bl	25b3e <printk>
		break;
   1146c:	e7e7      	b.n	1143e <z_NanoFatalErrorHandler+0x1a>
   1146e:	bf00      	nop
   11470:	0002bc0e 	.word	0x0002bc0e
   11474:	0002bcac 	.word	0x0002bcac
   11478:	0002bc2e 	.word	0x0002bc2e
   1147c:	0002bc54 	.word	0x0002bc54
   11480:	0002bc6e 	.word	0x0002bc6e
   11484:	0002bc89 	.word	0x0002bc89

00011488 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   11488:	2805      	cmp	r0, #5
{
   1148a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   1148c:	d00c      	beq.n	114a8 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
   1148e:	f012 fbf3 	bl	23c78 <k_is_in_isr>
   11492:	b160      	cbz	r0, 114ae <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   11494:	f012 fbf0 	bl	23c78 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   11498:	490c      	ldr	r1, [pc, #48]	; (114cc <z_SysFatalErrorHandler+0x44>)
   1149a:	4b0d      	ldr	r3, [pc, #52]	; (114d0 <z_SysFatalErrorHandler+0x48>)
   1149c:	2800      	cmp	r0, #0
   1149e:	bf08      	it	eq
   114a0:	4619      	moveq	r1, r3
   114a2:	480c      	ldr	r0, [pc, #48]	; (114d4 <z_SysFatalErrorHandler+0x4c>)
   114a4:	f014 fb4b 	bl	25b3e <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   114a8:	f7ff fd2e 	bl	10f08 <k_cpu_idle>
   114ac:	e7fc      	b.n	114a8 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
   114ae:	f012 fbf3 	bl	23c98 <z_is_thread_essential>
   114b2:	2800      	cmp	r0, #0
   114b4:	d1ee      	bne.n	11494 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   114b6:	4c08      	ldr	r4, [pc, #32]	; (114d8 <z_SysFatalErrorHandler+0x50>)
   114b8:	4808      	ldr	r0, [pc, #32]	; (114dc <z_SysFatalErrorHandler+0x54>)
   114ba:	68a1      	ldr	r1, [r4, #8]
   114bc:	f014 fb3f 	bl	25b3e <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   114c0:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
   114c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114c6:	f000 b80b 	b.w	114e0 <z_impl_k_thread_abort>
   114ca:	bf00      	nop
   114cc:	0002bce8 	.word	0x0002bce8
   114d0:	0002bcec 	.word	0x0002bcec
   114d4:	0002bcfd 	.word	0x0002bcfd
   114d8:	20022120 	.word	0x20022120
   114dc:	0002bd1d 	.word	0x0002bd1d

000114e0 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   114e0:	b538      	push	{r3, r4, r5, lr}
   114e2:	4604      	mov	r4, r0
	__asm__ volatile(
   114e4:	f04f 0320 	mov.w	r3, #32
   114e8:	f3ef 8511 	mrs	r5, BASEPRI
   114ec:	f383 8811 	msr	BASEPRI, r3
   114f0:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   114f4:	7b03      	ldrb	r3, [r0, #12]
   114f6:	07db      	lsls	r3, r3, #31
   114f8:	d50c      	bpl.n	11514 <z_impl_k_thread_abort+0x34>
   114fa:	4912      	ldr	r1, [pc, #72]	; (11544 <z_impl_k_thread_abort+0x64>)
   114fc:	2325      	movs	r3, #37	; 0x25
   114fe:	4a12      	ldr	r2, [pc, #72]	; (11548 <z_impl_k_thread_abort+0x68>)
   11500:	4812      	ldr	r0, [pc, #72]	; (1154c <z_impl_k_thread_abort+0x6c>)
   11502:	f014 fb1c 	bl	25b3e <printk>
   11506:	4812      	ldr	r0, [pc, #72]	; (11550 <z_impl_k_thread_abort+0x70>)
   11508:	f014 fb19 	bl	25b3e <printk>
   1150c:	2125      	movs	r1, #37	; 0x25
   1150e:	480e      	ldr	r0, [pc, #56]	; (11548 <z_impl_k_thread_abort+0x68>)
   11510:	f014 fb22 	bl	25b58 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   11514:	4620      	mov	r0, r4
   11516:	f016 f8e9 	bl	276ec <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   1151a:	4b0e      	ldr	r3, [pc, #56]	; (11554 <z_impl_k_thread_abort+0x74>)
   1151c:	689b      	ldr	r3, [r3, #8]
   1151e:	42a3      	cmp	r3, r4
   11520:	d10b      	bne.n	1153a <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   11522:	4b0d      	ldr	r3, [pc, #52]	; (11558 <z_impl_k_thread_abort+0x78>)
   11524:	685a      	ldr	r2, [r3, #4]
   11526:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1152a:	b912      	cbnz	r2, 11532 <z_impl_k_thread_abort+0x52>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
   1152c:	4628      	mov	r0, r5
   1152e:	f7ff fd2f 	bl	10f90 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11532:	685a      	ldr	r2, [r3, #4]
   11534:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11538:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   1153a:	4628      	mov	r0, r5
}
   1153c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   11540:	f016 b893 	b.w	2766a <z_reschedule_irqlock>
   11544:	0002bd74 	.word	0x0002bd74
   11548:	0002bd42 	.word	0x0002bd42
   1154c:	0002abaa 	.word	0x0002abaa
   11550:	0002bda2 	.word	0x0002bda2
   11554:	20022120 	.word	0x20022120
   11558:	e000ed00 	.word	0xe000ed00

0001155c <__reset>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1155c:	f014 fb03 	bl	25b66 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11560:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11562:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   11566:	4808      	ldr	r0, [pc, #32]	; (11588 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   11568:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1156c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1156e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11572:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11576:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11578:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1157a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1157e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
   11582:	f000 f807 	bl	11594 <_PrepC>
   11586:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   11588:	20026138 	.word	0x20026138

0001158c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1158c:	bf30      	wfi
    b z_SysNmiOnReset
   1158e:	f7ff bffd 	b.w	1158c <z_SysNmiOnReset>
   11592:	bf00      	nop

00011594 <_PrepC>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11594:	4a11      	ldr	r2, [pc, #68]	; (115dc <_PrepC+0x48>)

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   11596:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11598:	4b11      	ldr	r3, [pc, #68]	; (115e0 <_PrepC+0x4c>)
   1159a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1159e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   115a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   115a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   115a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   115ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   115b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   115b4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   115b8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   115bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   115c0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   115c4:	2300      	movs	r3, #0
   115c6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   115ca:	f010 fb51 	bl	21c70 <z_bss_zero>
	z_data_copy();
   115ce:	f010 fb59 	bl	21c84 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
   115d2:	f7ff fcd1 	bl	10f78 <z_IntLibInit>
	z_cstart();
   115d6:	f010 fb87 	bl	21ce8 <z_cstart>
   115da:	bf00      	nop
   115dc:	0000c000 	.word	0x0000c000
   115e0:	e000ed00 	.word	0xe000ed00

000115e4 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
   115e4:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   115e6:	4b0e      	ldr	r3, [pc, #56]	; (11620 <z_arch_configure_static_mpu_regions+0x3c>)
{
   115e8:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   115ea:	9302      	str	r3, [sp, #8]
   115ec:	4b0d      	ldr	r3, [pc, #52]	; (11624 <z_arch_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   115ee:	4c0e      	ldr	r4, [pc, #56]	; (11628 <z_arch_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   115f0:	9303      	str	r3, [sp, #12]
   115f2:	4b0e      	ldr	r3, [pc, #56]	; (1162c <z_arch_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
   115f4:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
   115f6:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   115f8:	ab02      	add	r3, sp, #8
   115fa:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   115fe:	4a0c      	ldr	r2, [pc, #48]	; (11630 <z_arch_configure_static_mpu_regions+0x4c>)
   11600:	4623      	mov	r3, r4
   11602:	2101      	movs	r1, #1
   11604:	f000 f934 	bl	11870 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   11608:	2300      	movs	r3, #0
   1160a:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1160c:	4b09      	ldr	r3, [pc, #36]	; (11634 <z_arch_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1160e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11610:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11612:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   11614:	9305      	str	r3, [sp, #20]
   11616:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11618:	f000 f94e 	bl	118b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1161c:	b008      	add	sp, #32
   1161e:	bd10      	pop	{r4, pc}
   11620:	20020000 	.word	0x20020000
   11624:	00000000 	.word	0x00000000
   11628:	20040000 	.word	0x20040000
   1162c:	00010006 	.word	0x00010006
   11630:	20020000 	.word	0x20020000
   11634:	20020000 	.word	0x20020000

00011638 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   11638:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1163a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1163c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1163e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11642:	f004 021f 	and.w	r2, r4, #31
   11646:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11648:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1164a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1164c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   11650:	4904      	ldr	r1, [pc, #16]	; (11664 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11652:	f043 0301 	orr.w	r3, r3, #1
   11656:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   1165a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1165c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1165e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11660:	bd10      	pop	{r4, pc}
   11662:	bf00      	nop
   11664:	e000ed90 	.word	0xe000ed90

00011668 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   11668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1166c:	4680      	mov	r8, r0
   1166e:	4689      	mov	r9, r1
   11670:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11672:	2700      	movs	r7, #0
	MPU->RNR = index;
   11674:	4d48      	ldr	r5, [pc, #288]	; (11798 <mpu_configure_regions.constprop.2+0x130>)
static int mpu_configure_regions(const struct k_mem_partition
   11676:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11678:	454f      	cmp	r7, r9
   1167a:	da07      	bge.n	1168c <mpu_configure_regions.constprop.2+0x24>
		if (regions[i]->size == 0U) {
   1167c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   11680:	685e      	ldr	r6, [r3, #4]
   11682:	b3c6      	cbz	r6, 116f6 <mpu_configure_regions.constprop.2+0x8e>
		&&
   11684:	2e1f      	cmp	r6, #31
   11686:	d805      	bhi.n	11694 <mpu_configure_regions.constprop.2+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11688:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1168c:	4620      	mov	r0, r4
   1168e:	b005      	add	sp, #20
   11690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   11694:	06f2      	lsls	r2, r6, #27
   11696:	d1f7      	bne.n	11688 <mpu_configure_regions.constprop.2+0x20>
		((part->start &
   11698:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1169c:	f01a 0f1f 	tst.w	sl, #31
   116a0:	d1f2      	bne.n	11688 <mpu_configure_regions.constprop.2+0x20>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   116a2:	4650      	mov	r0, sl
   116a4:	f013 ff5c 	bl	25560 <arm_cmse_mpu_region_get>
   116a8:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   116aa:	eb06 000a 	add.w	r0, r6, sl
   116ae:	3801      	subs	r0, #1
   116b0:	f013 ff56 	bl	25560 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   116b4:	4583      	cmp	fp, r0
   116b6:	d1e7      	bne.n	11688 <mpu_configure_regions.constprop.2+0x20>
		if ((u_reg_index == -EINVAL) ||
   116b8:	f11b 0f16 	cmn.w	fp, #22
   116bc:	d0e4      	beq.n	11688 <mpu_configure_regions.constprop.2+0x20>
			(u_reg_index > (reg_index - 1))) {
   116be:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   116c0:	455b      	cmp	r3, fp
   116c2:	dbe1      	blt.n	11688 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
   116c4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   116c8:	68e8      	ldr	r0, [r5, #12]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116ca:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   116ce:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   116d2:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   116d4:	f020 001f 	bic.w	r0, r0, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116d8:	e9d1 3200 	ldrd	r3, r2, [r1]
   116dc:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   116de:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   116e0:	f046 061f 	orr.w	r6, r6, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   116e4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   116e8:	d118      	bne.n	1171c <mpu_configure_regions.constprop.2+0xb4>
   116ea:	4556      	cmp	r6, sl
   116ec:	d105      	bne.n	116fa <mpu_configure_regions.constprop.2+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   116ee:	fa5f f08b 	uxtb.w	r0, fp
   116f2:	f014 fa5d 	bl	25bb0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   116f6:	3701      	adds	r7, #1
   116f8:	e7be      	b.n	11678 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   116fa:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   116fe:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   11700:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11704:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11708:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1170a:	60ea      	str	r2, [r5, #12]
			reg_index =
   1170c:	b2e0      	uxtb	r0, r4
			reg_index =
   1170e:	f014 fa4f 	bl	25bb0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11712:	f110 0f16 	cmn.w	r0, #22
   11716:	d0b7      	beq.n	11688 <mpu_configure_regions.constprop.2+0x20>
			reg_index++;
   11718:	1c44      	adds	r4, r0, #1
   1171a:	e7ec      	b.n	116f6 <mpu_configure_regions.constprop.2+0x8e>
	MPU->RNR = index;
   1171c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11720:	692a      	ldr	r2, [r5, #16]
   11722:	3b01      	subs	r3, #1
   11724:	f023 031f 	bic.w	r3, r3, #31
   11728:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1172c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1172e:	4556      	cmp	r6, sl
   11730:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11732:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   11734:	d0eb      	beq.n	1170e <mpu_configure_regions.constprop.2+0xa6>
			reg_index =
   11736:	f014 fa3b 	bl	25bb0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1173a:	f110 0f16 	cmn.w	r0, #22
   1173e:	d0a3      	beq.n	11688 <mpu_configure_regions.constprop.2+0x20>
	MPU->RNR = index;
   11740:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   11744:	68ea      	ldr	r2, [r5, #12]
   11746:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1174a:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   1174c:	f362 0304 	bfi	r3, r2, #0, #5
   11750:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11754:	692b      	ldr	r3, [r5, #16]
   11756:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1175a:	085b      	lsrs	r3, r3, #1
   1175c:	f363 1247 	bfi	r2, r3, #5, #3
   11760:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   11764:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   11768:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   1176a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1176e:	4413      	add	r3, r2
   11770:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   11772:	f023 031f 	bic.w	r3, r3, #31
   11776:	441e      	add	r6, r3
   11778:	eba6 060a 	sub.w	r6, r6, sl
   1177c:	b2c4      	uxtb	r4, r0
   1177e:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   11782:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   11784:	9603      	str	r6, [sp, #12]
   11786:	f63f af7f 	bhi.w	11688 <mpu_configure_regions.constprop.2+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1178a:	4620      	mov	r0, r4
   1178c:	4669      	mov	r1, sp
   1178e:	f7ff ff53 	bl	11638 <region_init>
			reg_index++;
   11792:	3401      	adds	r4, #1
   11794:	e7af      	b.n	116f6 <mpu_configure_regions.constprop.2+0x8e>
   11796:	bf00      	nop
   11798:	e000ed90 	.word	0xe000ed90

0001179c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1179c:	2205      	movs	r2, #5
   1179e:	4b03      	ldr	r3, [pc, #12]	; (117ac <arm_core_mpu_enable+0x10>)
   117a0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   117a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   117a6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   117aa:	4770      	bx	lr
   117ac:	e000ed90 	.word	0xe000ed90

000117b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   117b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   117b4:	2200      	movs	r2, #0
   117b6:	4b01      	ldr	r3, [pc, #4]	; (117bc <arm_core_mpu_disable+0xc>)
   117b8:	605a      	str	r2, [r3, #4]
}
   117ba:	4770      	bx	lr
   117bc:	e000ed90 	.word	0xe000ed90

000117c0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   117c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   117c2:	4f21      	ldr	r7, [pc, #132]	; (11848 <arm_mpu_init+0x88>)
   117c4:	683e      	ldr	r6, [r7, #0]
   117c6:	2e10      	cmp	r6, #16
   117c8:	d913      	bls.n	117f2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   117ca:	f240 1307 	movw	r3, #263	; 0x107
   117ce:	4a1f      	ldr	r2, [pc, #124]	; (1184c <arm_mpu_init+0x8c>)
   117d0:	491f      	ldr	r1, [pc, #124]	; (11850 <arm_mpu_init+0x90>)
   117d2:	4820      	ldr	r0, [pc, #128]	; (11854 <arm_mpu_init+0x94>)
   117d4:	f014 f9b3 	bl	25b3e <printk>
   117d8:	2210      	movs	r2, #16
   117da:	4631      	mov	r1, r6
   117dc:	481e      	ldr	r0, [pc, #120]	; (11858 <arm_mpu_init+0x98>)
   117de:	f014 f9ae 	bl	25b3e <printk>
   117e2:	481a      	ldr	r0, [pc, #104]	; (1184c <arm_mpu_init+0x8c>)
   117e4:	f240 1107 	movw	r1, #263	; 0x107
   117e8:	f014 f9b6 	bl	25b58 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   117ec:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   117f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   117f2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   117f4:	f7ff ffdc 	bl	117b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
   117f8:	4d18      	ldr	r5, [pc, #96]	; (1185c <arm_mpu_init+0x9c>)
   117fa:	4a19      	ldr	r2, [pc, #100]	; (11860 <arm_mpu_init+0xa0>)
   117fc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   117fe:	42a6      	cmp	r6, r4
   11800:	d119      	bne.n	11836 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   11802:	4b18      	ldr	r3, [pc, #96]	; (11864 <arm_mpu_init+0xa4>)
   11804:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   11806:	f7ff ffc9 	bl	1179c <arm_core_mpu_enable>
	__ASSERT(
   1180a:	682b      	ldr	r3, [r5, #0]
   1180c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11810:	2b10      	cmp	r3, #16
   11812:	d00e      	beq.n	11832 <arm_mpu_init+0x72>
   11814:	4914      	ldr	r1, [pc, #80]	; (11868 <arm_mpu_init+0xa8>)
   11816:	f44f 7394 	mov.w	r3, #296	; 0x128
   1181a:	4a0c      	ldr	r2, [pc, #48]	; (1184c <arm_mpu_init+0x8c>)
   1181c:	480d      	ldr	r0, [pc, #52]	; (11854 <arm_mpu_init+0x94>)
   1181e:	f014 f98e 	bl	25b3e <printk>
   11822:	4812      	ldr	r0, [pc, #72]	; (1186c <arm_mpu_init+0xac>)
   11824:	f014 f98b 	bl	25b3e <printk>
   11828:	f44f 7194 	mov.w	r1, #296	; 0x128
   1182c:	4807      	ldr	r0, [pc, #28]	; (1184c <arm_mpu_init+0x8c>)
   1182e:	f014 f993 	bl	25b58 <assert_post_action>
	return 0;
   11832:	2000      	movs	r0, #0
   11834:	e7dc      	b.n	117f0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11836:	6879      	ldr	r1, [r7, #4]
   11838:	4620      	mov	r0, r4
   1183a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1183e:	f7ff fefb 	bl	11638 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11842:	3401      	adds	r4, #1
   11844:	e7db      	b.n	117fe <arm_mpu_init+0x3e>
   11846:	bf00      	nop
   11848:	00027b74 	.word	0x00027b74
   1184c:	0002be45 	.word	0x0002be45
   11850:	0002c399 	.word	0x0002c399
   11854:	0002abaa 	.word	0x0002abaa
   11858:	0002be7f 	.word	0x0002be7f
   1185c:	e000ed90 	.word	0xe000ed90
   11860:	0044ffaa 	.word	0x0044ffaa
   11864:	20023cfd 	.word	0x20023cfd
   11868:	0002beb3 	.word	0x0002beb3
   1186c:	0002bf04 	.word	0x0002bf04

00011870 <arm_core_mpu_configure_static_mpu_regions>:
{
   11870:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11872:	4c0c      	ldr	r4, [pc, #48]	; (118a4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   11874:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11876:	7822      	ldrb	r2, [r4, #0]
   11878:	f7ff fef6 	bl	11668 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1187c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1187e:	3016      	adds	r0, #22
   11880:	d10f      	bne.n	118a2 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11882:	23cd      	movs	r3, #205	; 0xcd
   11884:	4a08      	ldr	r2, [pc, #32]	; (118a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   11886:	4909      	ldr	r1, [pc, #36]	; (118ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   11888:	4809      	ldr	r0, [pc, #36]	; (118b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1188a:	f014 f958 	bl	25b3e <printk>
   1188e:	4629      	mov	r1, r5
   11890:	4808      	ldr	r0, [pc, #32]	; (118b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11892:	f014 f954 	bl	25b3e <printk>
}
   11896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1189a:	21cd      	movs	r1, #205	; 0xcd
   1189c:	4802      	ldr	r0, [pc, #8]	; (118a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1189e:	f014 b95b 	b.w	25b58 <assert_post_action>
}
   118a2:	bd38      	pop	{r3, r4, r5, pc}
   118a4:	20023cfd 	.word	0x20023cfd
   118a8:	0002be45 	.word	0x0002be45
   118ac:	0002c399 	.word	0x0002c399
   118b0:	0002abaa 	.word	0x0002abaa
   118b4:	0002bdea 	.word	0x0002bdea

000118b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   118b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118bc:	460f      	mov	r7, r1
   118be:	4680      	mov	r8, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   118c0:	2600      	movs	r6, #0
   118c2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 11988 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   118c6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1198c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>
	MPU->RNR = index;
   118ca:	4c2a      	ldr	r4, [pc, #168]	; (11974 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   118cc:	42be      	cmp	r6, r7
   118ce:	db02      	blt.n	118d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   118d0:	b003      	add	sp, #12
   118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   118d6:	f8d8 b004 	ldr.w	fp, [r8, #4]
   118da:	f1bb 0f00 	cmp.w	fp, #0
   118de:	d045      	beq.n	1196c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>
			get_region_index(dyn_region_areas[i].start,
   118e0:	f8d8 3000 	ldr.w	r3, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   118e4:	4618      	mov	r0, r3
   118e6:	9301      	str	r3, [sp, #4]
   118e8:	f013 fe3a 	bl	25560 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   118ec:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   118ee:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   118f0:	eb0b 0003 	add.w	r0, fp, r3
   118f4:	3801      	subs	r0, #1
   118f6:	f013 fe33 	bl	25560 <arm_cmse_mpu_region_get>
   118fa:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
   118fc:	4285      	cmp	r5, r0
   118fe:	fb03 f306 	mul.w	r3, r3, r6
   11902:	d014      	beq.n	1192e <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   11904:	f06f 0215 	mvn.w	r2, #21
   11908:	f849 2003 	str.w	r2, [r9, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1190c:	23dd      	movs	r3, #221	; 0xdd
   1190e:	4a1a      	ldr	r2, [pc, #104]	; (11978 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   11910:	491a      	ldr	r1, [pc, #104]	; (1197c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   11912:	481b      	ldr	r0, [pc, #108]	; (11980 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   11914:	f014 f913 	bl	25b3e <printk>
   11918:	4639      	mov	r1, r7
   1191a:	481a      	ldr	r0, [pc, #104]	; (11984 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1191c:	f014 f90f 	bl	25b3e <printk>
   11920:	21dd      	movs	r1, #221	; 0xdd
   11922:	4815      	ldr	r0, [pc, #84]	; (11978 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
}
   11924:	b003      	add	sp, #12
   11926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1192a:	f014 b915 	b.w	25b58 <assert_post_action>
		if (dyn_reg_info[i].index == -EINVAL) {
   1192e:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
   11932:	f849 5003 	str.w	r5, [r9, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
   11936:	d0e9      	beq.n	1190c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		if (dyn_reg_info[i].index >= static_regions_num) {
   11938:	f89a 2000 	ldrb.w	r2, [sl]
   1193c:	42aa      	cmp	r2, r5
   1193e:	dde5      	ble.n	1190c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	MPU->RNR = index;
   11940:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   11942:	444b      	add	r3, r9
	MPU->RNR = index;
   11944:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
   11946:	68e0      	ldr	r0, [r4, #12]
   11948:	7b19      	ldrb	r1, [r3, #12]
   1194a:	f360 0104 	bfi	r1, r0, #0, #5
   1194e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11950:	6921      	ldr	r1, [r4, #16]
   11952:	7b18      	ldrb	r0, [r3, #12]
   11954:	0849      	lsrs	r1, r1, #1
   11956:	f361 1047 	bfi	r0, r1, #5, #3
   1195a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1195c:	68e2      	ldr	r2, [r4, #12]
   1195e:	f022 021f 	bic.w	r2, r2, #31
   11962:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   11964:	6922      	ldr	r2, [r4, #16]
   11966:	f022 021f 	bic.w	r2, r2, #31
   1196a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1196c:	3601      	adds	r6, #1
   1196e:	f108 080c 	add.w	r8, r8, #12
   11972:	e7ab      	b.n	118cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   11974:	e000ed90 	.word	0xe000ed90
   11978:	0002be45 	.word	0x0002be45
   1197c:	0002c399 	.word	0x0002c399
   11980:	0002abaa 	.word	0x0002abaa
   11984:	0002be16 	.word	0x0002be16
   11988:	200201bc 	.word	0x200201bc
   1198c:	20023cfd 	.word	0x20023cfd

00011990 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   11990:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   11992:	4b15      	ldr	r3, [pc, #84]	; (119e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   11994:	460c      	mov	r4, r1
   11996:	781d      	ldrb	r5, [r3, #0]
   11998:	4606      	mov	r6, r0
   1199a:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   1199c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   1199e:	4a13      	ldr	r2, [pc, #76]	; (119ec <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   119a0:	2b0f      	cmp	r3, #15
   119a2:	dd1b      	ble.n	119dc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   119a4:	4b12      	ldr	r3, [pc, #72]	; (119f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   119a6:	1d19      	adds	r1, r3, #4
   119a8:	6818      	ldr	r0, [r3, #0]
   119aa:	f7ff fe45 	bl	11638 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   119ae:	462a      	mov	r2, r5
   119b0:	4621      	mov	r1, r4
   119b2:	4630      	mov	r0, r6
   119b4:	f7ff fe58 	bl	11668 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   119b8:	3016      	adds	r0, #22
   119ba:	d113      	bne.n	119e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   119bc:	23ec      	movs	r3, #236	; 0xec
   119be:	4a0d      	ldr	r2, [pc, #52]	; (119f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   119c0:	490d      	ldr	r1, [pc, #52]	; (119f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   119c2:	480e      	ldr	r0, [pc, #56]	; (119fc <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   119c4:	f014 f8bb 	bl	25b3e <printk>
   119c8:	4621      	mov	r1, r4
   119ca:	480d      	ldr	r0, [pc, #52]	; (11a00 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   119cc:	f014 f8b7 	bl	25b3e <printk>
}
   119d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   119d4:	21ec      	movs	r1, #236	; 0xec
   119d6:	4807      	ldr	r0, [pc, #28]	; (119f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   119d8:	f014 b8be 	b.w	25b58 <assert_post_action>
   119dc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   119de:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   119e0:	3301      	adds	r3, #1
   119e2:	e7dd      	b.n	119a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   119e4:	bd70      	pop	{r4, r5, r6, pc}
   119e6:	bf00      	nop
   119e8:	20023cfd 	.word	0x20023cfd
   119ec:	e000ed90 	.word	0xe000ed90
   119f0:	200201bc 	.word	0x200201bc
   119f4:	0002be45 	.word	0x0002be45
   119f8:	0002c399 	.word	0x0002c399
   119fc:	0002abaa 	.word	0x0002abaa
   11a00:	0002bdbd 	.word	0x0002bdbd

00011a04 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, char *format, va_list vargs)
{
   11a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a08:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
   11a0a:	2300      	movs	r3, #0
{
   11a0c:	4693      	mov	fp, r2
   11a0e:	b0c9      	sub	sp, #292	; 0x124
   11a10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	count = 0;
   11a14:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
   11a16:	f89b 0000 	ldrb.w	r0, [fp]
   11a1a:	f10b 0501 	add.w	r5, fp, #1
   11a1e:	b148      	cbz	r0, 11a34 <z_prf+0x30>
		if (c != '%') {
   11a20:	2825      	cmp	r0, #37	; 0x25
   11a22:	d079      	beq.n	11b18 <z_prf+0x114>
			if ((*func) (c, dest) == EOF) {
   11a24:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
   11a28:	4798      	blx	r3
   11a2a:	3001      	adds	r0, #1
   11a2c:	d106      	bne.n	11a3c <z_prf+0x38>
				return EOF;
   11a2e:	f04f 33ff 	mov.w	r3, #4294967295
   11a32:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
   11a34:	9804      	ldr	r0, [sp, #16]
   11a36:	b049      	add	sp, #292	; 0x124
   11a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while ((c = *format++)) {
   11a3c:	46ab      	mov	fp, r5
			count++;
   11a3e:	9b04      	ldr	r3, [sp, #16]
   11a40:	3301      	adds	r3, #1
   11a42:	e9cd 3704 	strd	r3, r7, [sp, #16]
			if (c >= MAXFLD + 1) {
   11a46:	9f05      	ldr	r7, [sp, #20]
   11a48:	e7e5      	b.n	11a16 <z_prf+0x12>
				switch (c) {
   11a4a:	2c23      	cmp	r4, #35	; 0x23
   11a4c:	d05d      	beq.n	11b0a <z_prf+0x106>
   11a4e:	d852      	bhi.n	11af6 <z_prf+0xf2>
   11a50:	2c00      	cmp	r4, #0
   11a52:	d0ef      	beq.n	11a34 <z_prf+0x30>
					fspace = true;
   11a54:	2c20      	cmp	r4, #32
   11a56:	bf08      	it	eq
   11a58:	f04f 0901 	moveq.w	r9, #1
					fplus = true;
   11a5c:	465d      	mov	r5, fp
			while (strchr("-+ #0", (c = *format++)) != NULL) {
   11a5e:	46ab      	mov	fp, r5
   11a60:	f81b 4b01 	ldrb.w	r4, [fp], #1
   11a64:	48bd      	ldr	r0, [pc, #756]	; (11d5c <z_prf+0x358>)
   11a66:	4621      	mov	r1, r4
   11a68:	f014 f984 	bl	25d74 <strchr>
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d1ec      	bne.n	11a4a <z_prf+0x46>
			if (c == '*') {
   11a70:	2c2a      	cmp	r4, #42	; 0x2a
   11a72:	d159      	bne.n	11b28 <z_prf+0x124>
				width = (int32_t) va_arg(vargs, int32_t);
   11a74:	683a      	ldr	r2, [r7, #0]
   11a76:	1d3b      	adds	r3, r7, #4
				if (width < 0) {
   11a78:	2a00      	cmp	r2, #0
				width = (int32_t) va_arg(vargs, int32_t);
   11a7a:	9203      	str	r2, [sp, #12]
					width = -width;
   11a7c:	bfbe      	ittt	lt
   11a7e:	4252      	neglt	r2, r2
   11a80:	9203      	strlt	r2, [sp, #12]
					fminus = true;
   11a82:	2201      	movlt	r2, #1
				width = (int32_t) va_arg(vargs, int32_t);
   11a84:	461f      	mov	r7, r3
				c = *format++;
   11a86:	786c      	ldrb	r4, [r5, #1]
					fminus = true;
   11a88:	bfb8      	it	lt
   11a8a:	9206      	strlt	r2, [sp, #24]
				c = *format++;
   11a8c:	f105 0b02 	add.w	fp, r5, #2
				width = MAXFLD;
   11a90:	9b03      	ldr	r3, [sp, #12]
   11a92:	2bc9      	cmp	r3, #201	; 0xc9
   11a94:	bf28      	it	cs
   11a96:	23c8      	movcs	r3, #200	; 0xc8
   11a98:	9303      	str	r3, [sp, #12]
			if (c == '.') {
   11a9a:	2c2e      	cmp	r4, #46	; 0x2e
   11a9c:	d169      	bne.n	11b72 <z_prf+0x16e>
				if (c == '*') {
   11a9e:	f89b 3000 	ldrb.w	r3, [fp]
   11aa2:	2b2a      	cmp	r3, #42	; 0x2a
   11aa4:	d162      	bne.n	11b6c <z_prf+0x168>
					precision = (int32_t)
   11aa6:	683d      	ldr	r5, [r7, #0]
				c = *format++;
   11aa8:	f10b 0b01 	add.w	fp, fp, #1
					precision = (int32_t)
   11aac:	3704      	adds	r7, #4
					precision = -1;
   11aae:	2dc9      	cmp	r5, #201	; 0xc9
   11ab0:	bfa8      	it	ge
   11ab2:	f04f 35ff 	movge.w	r5, #4294967295
				c = *format++;
   11ab6:	f89b 4000 	ldrb.w	r4, [fp]
   11aba:	f10b 0b01 	add.w	fp, fp, #1
			if (strchr("hlLz", c) != NULL) {
   11abe:	4621      	mov	r1, r4
   11ac0:	48a7      	ldr	r0, [pc, #668]	; (11d60 <z_prf+0x35c>)
   11ac2:	f014 f957 	bl	25d74 <strchr>
   11ac6:	b118      	cbz	r0, 11ad0 <z_prf+0xcc>
				c = *format++;
   11ac8:	f89b 4000 	ldrb.w	r4, [fp]
   11acc:	f10b 0b01 	add.w	fp, fp, #1
			switch (c) {
   11ad0:	2c67      	cmp	r4, #103	; 0x67
   11ad2:	dc7c      	bgt.n	11bce <z_prf+0x1ca>
   11ad4:	2c65      	cmp	r4, #101	; 0x65
   11ad6:	f280 80e0 	bge.w	11c9a <z_prf+0x296>
   11ada:	2c47      	cmp	r4, #71	; 0x47
   11adc:	dc4c      	bgt.n	11b78 <z_prf+0x174>
   11ade:	2c45      	cmp	r4, #69	; 0x45
   11ae0:	f280 80db 	bge.w	11c9a <z_prf+0x296>
   11ae4:	2c00      	cmp	r4, #0
   11ae6:	d0a5      	beq.n	11a34 <z_prf+0x30>
   11ae8:	2c25      	cmp	r4, #37	; 0x25
   11aea:	f000 8335 	beq.w	12158 <z_prf+0x754>
			if (c >= MAXFLD + 1) {
   11aee:	2cc8      	cmp	r4, #200	; 0xc8
   11af0:	f340 833c 	ble.w	1216c <z_prf+0x768>
   11af4:	e79b      	b.n	11a2e <z_prf+0x2a>
				switch (c) {
   11af6:	2c2d      	cmp	r4, #45	; 0x2d
   11af8:	d00b      	beq.n	11b12 <z_prf+0x10e>
   11afa:	2c30      	cmp	r4, #48	; 0x30
   11afc:	d007      	beq.n	11b0e <z_prf+0x10a>
					fplus = true;
   11afe:	2c2b      	cmp	r4, #43	; 0x2b
   11b00:	9b07      	ldr	r3, [sp, #28]
   11b02:	bf08      	it	eq
   11b04:	2301      	moveq	r3, #1
   11b06:	9307      	str	r3, [sp, #28]
   11b08:	e7a8      	b.n	11a5c <z_prf+0x58>
					falt = true;
   11b0a:	2601      	movs	r6, #1
					break;
   11b0c:	e7a6      	b.n	11a5c <z_prf+0x58>
					pad = '0';
   11b0e:	9402      	str	r4, [sp, #8]
					break;
   11b10:	e7a4      	b.n	11a5c <z_prf+0x58>
					fminus = true;
   11b12:	2301      	movs	r3, #1
   11b14:	9306      	str	r3, [sp, #24]
   11b16:	e7a1      	b.n	11a5c <z_prf+0x58>
			fminus = fplus = fspace = falt = false;
   11b18:	f04f 0900 	mov.w	r9, #0
			pad = ' ';		/* Default pad character    */
   11b1c:	2320      	movs	r3, #32
			fminus = fplus = fspace = falt = false;
   11b1e:	e9cd 9906 	strd	r9, r9, [sp, #24]
			pad = ' ';		/* Default pad character    */
   11b22:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
   11b24:	464e      	mov	r6, r9
   11b26:	e79a      	b.n	11a5e <z_prf+0x5a>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11b28:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
   11b2c:	2b09      	cmp	r3, #9
				width = 0;
   11b2e:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c)) {
   11b30:	d8b3      	bhi.n	11a9a <z_prf+0x96>
		i = 10 * i + *p++ - '0';
   11b32:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
   11b34:	46ab      	mov	fp, r5
   11b36:	f81b 0b01 	ldrb.w	r0, [fp], #1
   11b3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11b3e:	2b09      	cmp	r3, #9
   11b40:	4604      	mov	r4, r0
   11b42:	d8a5      	bhi.n	11a90 <z_prf+0x8c>
		i = 10 * i + *p++ - '0';
   11b44:	9b03      	ldr	r3, [sp, #12]
   11b46:	465d      	mov	r5, fp
   11b48:	fb02 0003 	mla	r0, r2, r3, r0
   11b4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11b50:	9303      	str	r3, [sp, #12]
   11b52:	e7ef      	b.n	11b34 <z_prf+0x130>
   11b54:	4693      	mov	fp, r2
   11b56:	fb00 3505 	mla	r5, r0, r5, r3
   11b5a:	3d30      	subs	r5, #48	; 0x30
	while (isdigit(((int) *p))) {
   11b5c:	465a      	mov	r2, fp
   11b5e:	f812 3b01 	ldrb.w	r3, [r2], #1
   11b62:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11b66:	2909      	cmp	r1, #9
   11b68:	d9f4      	bls.n	11b54 <z_prf+0x150>
   11b6a:	e7a0      	b.n	11aae <z_prf+0xaa>
	i = 0;
   11b6c:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
   11b6e:	200a      	movs	r0, #10
   11b70:	e7f4      	b.n	11b5c <z_prf+0x158>
			precision = -1;	/* No precision specified   */
   11b72:	f04f 35ff 	mov.w	r5, #4294967295
   11b76:	e7a2      	b.n	11abe <z_prf+0xba>
			switch (c) {
   11b78:	2c63      	cmp	r4, #99	; 0x63
   11b7a:	d06f      	beq.n	11c5c <z_prf+0x258>
   11b7c:	dc32      	bgt.n	11be4 <z_prf+0x1e0>
   11b7e:	2c58      	cmp	r4, #88	; 0x58
   11b80:	d1b5      	bne.n	11aee <z_prf+0xea>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
   11b82:	1d3b      	adds	r3, r7, #4
   11b84:	9305      	str	r3, [sp, #20]
   11b86:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
   11b88:	2e00      	cmp	r6, #0
   11b8a:	f000 82dc 	beq.w	12146 <z_prf+0x742>
		*buf++ = '0';
   11b8e:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
   11b92:	f10d 0756 	add.w	r7, sp, #86	; 0x56
		*buf++ = '0';
   11b96:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16, precision);
   11b9a:	462b      	mov	r3, r5
   11b9c:	2210      	movs	r2, #16
   11b9e:	4638      	mov	r0, r7
   11ba0:	f014 f9af 	bl	25f02 <_to_x>
	if (prefix == 'X') {
   11ba4:	2c58      	cmp	r4, #88	; 0x58
   11ba6:	d106      	bne.n	11bb6 <z_prf+0x1b2>
   11ba8:	f10d 0253 	add.w	r2, sp, #83	; 0x53
	for (/**/; *buf; buf++) {
   11bac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	f040 82ca 	bne.w	1214a <z_prf+0x746>
	return len + (buf - buf0);
   11bb6:	f10d 0854 	add.w	r8, sp, #84	; 0x54
			prefix = 0;
   11bba:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
   11bbc:	eba7 0808 	sub.w	r8, r7, r8
   11bc0:	4440      	add	r0, r8
			prefix = 0;
   11bc2:	bf14      	ite	ne
   11bc4:	f04f 0902 	movne.w	r9, #2
   11bc8:	f04f 0900 	moveq.w	r9, #0
   11bcc:	e029      	b.n	11c22 <z_prf+0x21e>
			switch (c) {
   11bce:	2c70      	cmp	r4, #112	; 0x70
   11bd0:	f000 8294 	beq.w	120fc <z_prf+0x6f8>
   11bd4:	dc2b      	bgt.n	11c2e <z_prf+0x22a>
   11bd6:	2c6e      	cmp	r4, #110	; 0x6e
   11bd8:	f000 8253 	beq.w	12082 <z_prf+0x67e>
   11bdc:	f300 8257 	bgt.w	1208e <z_prf+0x68a>
   11be0:	2c69      	cmp	r4, #105	; 0x69
   11be2:	d184      	bne.n	11aee <z_prf+0xea>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
   11be4:	683c      	ldr	r4, [r7, #0]
   11be6:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
   11be8:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
   11bea:	9305      	str	r3, [sp, #20]
	if (value < 0) {
   11bec:	da42      	bge.n	11c74 <z_prf+0x270>
		*buf++ = '-';
   11bee:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000) {
   11bf0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
   11bf4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (value != 0x80000000) {
   11bf8:	d041      	beq.n	11c7e <z_prf+0x27a>
			value = -value;
   11bfa:	4261      	negs	r1, r4
		*buf++ = ' ';
   11bfc:	f10d 0855 	add.w	r8, sp, #85	; 0x55
	return _to_x(buf, value, 10, precision);
   11c00:	462b      	mov	r3, r5
   11c02:	4640      	mov	r0, r8
   11c04:	220a      	movs	r2, #10
   11c06:	f014 f97c 	bl	25f02 <_to_x>
				if (fplus || fspace || (int32_temp < 0)) {
   11c0a:	9b07      	ldr	r3, [sp, #28]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
   11c0c:	4480      	add	r8, r0
   11c0e:	a815      	add	r0, sp, #84	; 0x54
   11c10:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (int32_temp < 0)) {
   11c14:	2b00      	cmp	r3, #0
   11c16:	d13d      	bne.n	11c94 <z_prf+0x290>
   11c18:	f1b9 0f00 	cmp.w	r9, #0
   11c1c:	d101      	bne.n	11c22 <z_prf+0x21e>
   11c1e:	ea4f 79d4 	mov.w	r9, r4, lsr #31
			prefix = 0;
   11c22:	3501      	adds	r5, #1
   11c24:	9b02      	ldr	r3, [sp, #8]
   11c26:	bf18      	it	ne
   11c28:	2320      	movne	r3, #32
   11c2a:	9302      	str	r3, [sp, #8]
   11c2c:	e080      	b.n	11d30 <z_prf+0x32c>
			switch (c) {
   11c2e:	2c75      	cmp	r4, #117	; 0x75
   11c30:	f000 8280 	beq.w	12134 <z_prf+0x730>
   11c34:	2c78      	cmp	r4, #120	; 0x78
   11c36:	d0a4      	beq.n	11b82 <z_prf+0x17e>
   11c38:	2c73      	cmp	r4, #115	; 0x73
   11c3a:	f47f af58 	bne.w	11aee <z_prf+0xea>
				for (c = 0; c < MAXFLD; c++) {
   11c3e:	2600      	movs	r6, #0
				cptr_temp = (char *) va_arg(vargs, char *);
   11c40:	1d3b      	adds	r3, r7, #4
   11c42:	6839      	ldr	r1, [r7, #0]
   11c44:	9305      	str	r3, [sp, #20]
					if (cptr_temp[c] == '\0') {
   11c46:	5d8b      	ldrb	r3, [r1, r6]
   11c48:	2b00      	cmp	r3, #0
   11c4a:	f000 8266 	beq.w	1211a <z_prf+0x716>
				for (c = 0; c < MAXFLD; c++) {
   11c4e:	3601      	adds	r6, #1
   11c50:	2ec8      	cmp	r6, #200	; 0xc8
   11c52:	d1f8      	bne.n	11c46 <z_prf+0x242>
				if ((precision >= 0) && (precision < c)) {
   11c54:	2d00      	cmp	r5, #0
   11c56:	f280 8262 	bge.w	1211e <z_prf+0x71a>
   11c5a:	e266      	b.n	1212a <z_prf+0x726>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
   11c5c:	1d3b      	adds	r3, r7, #4
   11c5e:	9305      	str	r3, [sp, #20]
   11c60:	683b      	ldr	r3, [r7, #0]
				c = 1;
   11c62:	2601      	movs	r6, #1
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
   11c64:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				buf[1] = '\0';
   11c68:	2300      	movs	r3, #0
   11c6a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
					prefix = 2;
   11c6e:	f04f 0900 	mov.w	r9, #0
   11c72:	e21c      	b.n	120ae <z_prf+0x6aa>
	} else if (fplus) {
   11c74:	9b07      	ldr	r3, [sp, #28]
   11c76:	b123      	cbz	r3, 11c82 <z_prf+0x27e>
		*buf++ = '+';
   11c78:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
   11c7a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   11c7e:	4621      	mov	r1, r4
   11c80:	e7bc      	b.n	11bfc <z_prf+0x1f8>
	} else if (fspace) {
   11c82:	f1b9 0f00 	cmp.w	r9, #0
   11c86:	d001      	beq.n	11c8c <z_prf+0x288>
		*buf++ = ' ';
   11c88:	2320      	movs	r3, #32
   11c8a:	e7f6      	b.n	11c7a <z_prf+0x276>
	} else if (fspace) {
   11c8c:	4621      	mov	r1, r4
   11c8e:	f10d 0854 	add.w	r8, sp, #84	; 0x54
   11c92:	e7b5      	b.n	11c00 <z_prf+0x1fc>
					prefix = 1;
   11c94:	f8dd 901c 	ldr.w	r9, [sp, #28]
   11c98:	e7c3      	b.n	11c22 <z_prf+0x21e>
				u.d = (double) va_arg(vargs, double);
   11c9a:	3707      	adds	r7, #7
   11c9c:	f027 0707 	bic.w	r7, r7, #7
   11ca0:	f107 0308 	add.w	r3, r7, #8
   11ca4:	9305      	str	r3, [sp, #20]
				double_temp = u.i;
   11ca6:	e9d7 c700 	ldrd	ip, r7, [r7]
	fract = (double_temp << 11) & ~HIGHBIT64;
   11caa:	02fb      	lsls	r3, r7, #11
   11cac:	ea43 535c 	orr.w	r3, r3, ip, lsr #21
   11cb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   11cb4:	460b      	mov	r3, r1
   11cb6:	ea4f 22cc 	mov.w	r2, ip, lsl #11
   11cba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (exp == 0x7ff) {
   11cbe:	f240 73ff 	movw	r3, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
   11cc2:	4610      	mov	r0, r2
	exp = double_temp >> 52 & 0x7ff;
   11cc4:	f3c7 580a 	ubfx	r8, r7, #20, #11
	if (exp == 0x7ff) {
   11cc8:	4598      	cmp	r8, r3
	fract = (double_temp << 11) & ~HIGHBIT64;
   11cca:	e9cd 0100 	strd	r0, r1, [sp]
	sign = !!(double_temp & HIGHBIT64);
   11cce:	4660      	mov	r0, ip
	if (exp == 0x7ff) {
   11cd0:	d148      	bne.n	11d64 <z_prf+0x360>
		if (!fract) {
   11cd2:	e9dd 1200 	ldrd	r1, r2, [sp]
		if (sign) {
   11cd6:	2800      	cmp	r0, #0
   11cd8:	f177 0300 	sbcs.w	r3, r7, #0
			*buf++ = '-';
   11cdc:	bfb8      	it	lt
   11cde:	232d      	movlt	r3, #45	; 0x2d
   11ce0:	a815      	add	r0, sp, #84	; 0x54
		if (sign) {
   11ce2:	bfae      	itee	ge
   11ce4:	4603      	movge	r3, r0
			*buf++ = '-';
   11ce6:	f88d 3054 	strblt.w	r3, [sp, #84]	; 0x54
   11cea:	f10d 0355 	addlt.w	r3, sp, #85	; 0x55
		if (!fract) {
   11cee:	430a      	orrs	r2, r1
   11cf0:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
   11cf4:	f103 0803 	add.w	r8, r3, #3
   11cf8:	d125      	bne.n	11d46 <z_prf+0x342>
			if (isupper(c)) {
   11cfa:	2c19      	cmp	r4, #25
   11cfc:	d81d      	bhi.n	11d3a <z_prf+0x336>
				*buf++ = 'I';
   11cfe:	2249      	movs	r2, #73	; 0x49
   11d00:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
   11d02:	224e      	movs	r2, #78	; 0x4e
   11d04:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
   11d06:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
   11d08:	709a      	strb	r2, [r3, #2]
		*buf = 0;
   11d0a:	2200      	movs	r2, #0
   11d0c:	70da      	strb	r2, [r3, #3]
				if (fplus || fspace || (buf[0] == '-')) {
   11d0e:	9b07      	ldr	r3, [sp, #28]
	return buf - start;
   11d10:	eba8 0000 	sub.w	r0, r8, r0
				if (fplus || fspace || (buf[0] == '-')) {
   11d14:	2b00      	cmp	r3, #0
   11d16:	f040 8255 	bne.w	121c4 <z_prf+0x7c0>
   11d1a:	f1b9 0f00 	cmp.w	r9, #0
   11d1e:	d107      	bne.n	11d30 <z_prf+0x32c>
   11d20:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
   11d24:	f1a1 032d 	sub.w	r3, r1, #45	; 0x2d
   11d28:	f1d3 0900 	rsbs	r9, r3, #0
   11d2c:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1) {
   11d30:	28c8      	cmp	r0, #200	; 0xc8
   11d32:	f73f ae7c 	bgt.w	11a2e <z_prf+0x2a>
   11d36:	4606      	mov	r6, r0
   11d38:	e1b9      	b.n	120ae <z_prf+0x6aa>
				*buf++ = 'i';
   11d3a:	2269      	movs	r2, #105	; 0x69
   11d3c:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
   11d3e:	226e      	movs	r2, #110	; 0x6e
   11d40:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
   11d42:	2266      	movs	r2, #102	; 0x66
   11d44:	e7e0      	b.n	11d08 <z_prf+0x304>
			if (isupper(c)) {
   11d46:	2c19      	cmp	r4, #25
				*buf++ = 'N';
   11d48:	bf99      	ittee	ls
   11d4a:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
   11d4c:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
   11d4e:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
   11d50:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
   11d52:	bf94      	ite	ls
   11d54:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
   11d56:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
   11d58:	7059      	strb	r1, [r3, #1]
   11d5a:	e7d5      	b.n	11d08 <z_prf+0x304>
   11d5c:	0002bf25 	.word	0x0002bf25
   11d60:	0002bf2b 	.word	0x0002bf2b
		c = 'f';
   11d64:	2c46      	cmp	r4, #70	; 0x46
	if ((exp | fract) != 0) {
   11d66:	e9dd 2300 	ldrd	r2, r3, [sp]
   11d6a:	ea42 0208 	orr.w	r2, r2, r8
   11d6e:	ea43 73e8 	orr.w	r3, r3, r8, asr #31
		c = 'f';
   11d72:	bf08      	it	eq
   11d74:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
   11d76:	4313      	orrs	r3, r2
   11d78:	d043      	beq.n	11e02 <z_prf+0x3fe>
		fract |= HIGHBIT64;
   11d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (decexp && sign) {
   11d7e:	2800      	cmp	r0, #0
		fract |= HIGHBIT64;
   11d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (decexp && sign) {
   11d88:	f177 0300 	sbcs.w	r3, r7, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   11d8c:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
	if (decexp && sign) {
   11d90:	da39      	bge.n	11e06 <z_prf+0x402>
		*buf++ = '-';
   11d92:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
   11d94:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   11d98:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
	decexp = 0;
   11d9c:	2300      	movs	r3, #0
   11d9e:	9300      	str	r3, [sp, #0]
	while (exp <= -3) {
   11da0:	f118 0f02 	cmn.w	r8, #2
   11da4:	db3e      	blt.n	11e24 <z_prf+0x420>
	while (exp > 0) {
   11da6:	f1b8 0f00 	cmp.w	r8, #0
   11daa:	dc79      	bgt.n	11ea0 <z_prf+0x49c>
		_rlrshift(&fract);
   11dac:	a810      	add	r0, sp, #64	; 0x40
		exp++;
   11dae:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
   11db2:	f014 f8ce 	bl	25f52 <_rlrshift>
	while (exp < (0 + 4)) {
   11db6:	f1b8 0f04 	cmp.w	r8, #4
   11dba:	d1f7      	bne.n	11dac <z_prf+0x3a8>
		precision = 6;		/* Default precision if none given */
   11dbc:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
   11dbe:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
   11dc2:	bfb8      	it	lt
   11dc4:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
   11dc6:	2b47      	cmp	r3, #71	; 0x47
   11dc8:	f040 8097 	bne.w	11efa <z_prf+0x4f6>
		if (!falt && (precision > 0)) {
   11dcc:	2e00      	cmp	r6, #0
   11dce:	f040 8092 	bne.w	11ef6 <z_prf+0x4f2>
   11dd2:	1c2b      	adds	r3, r5, #0
   11dd4:	bf18      	it	ne
   11dd6:	2301      	movne	r3, #1
	prune_zero = false;		/* Assume trailing 0's allowed     */
   11dd8:	9308      	str	r3, [sp, #32]
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
   11dda:	9b00      	ldr	r3, [sp, #0]
   11ddc:	3303      	adds	r3, #3
   11dde:	db04      	blt.n	11dea <z_prf+0x3e6>
   11de0:	9a00      	ldr	r2, [sp, #0]
   11de2:	1c6b      	adds	r3, r5, #1
   11de4:	429a      	cmp	r2, r3
   11de6:	f340 808d 	ble.w	11f04 <z_prf+0x500>
				c = 'E';
   11dea:	2c67      	cmp	r4, #103	; 0x67
   11dec:	bf0c      	ite	eq
   11dee:	2465      	moveq	r4, #101	; 0x65
   11df0:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
   11df2:	f105 0801 	add.w	r8, r5, #1
	digit_count = 16;
   11df6:	2310      	movs	r3, #16
   11df8:	4598      	cmp	r8, r3
   11dfa:	930f      	str	r3, [sp, #60]	; 0x3c
   11dfc:	bfa8      	it	ge
   11dfe:	4698      	movge	r8, r3
   11e00:	e089      	b.n	11f16 <z_prf+0x512>
	if ((exp | fract) != 0) {
   11e02:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
   11e06:	9b07      	ldr	r3, [sp, #28]
   11e08:	b10b      	cbz	r3, 11e0e <z_prf+0x40a>
		*buf++ = '+';
   11e0a:	232b      	movs	r3, #43	; 0x2b
   11e0c:	e7c2      	b.n	11d94 <z_prf+0x390>
	} else if (fspace) {
   11e0e:	f1b9 0f00 	cmp.w	r9, #0
   11e12:	d001      	beq.n	11e18 <z_prf+0x414>
		*buf++ = ' ';
   11e14:	2320      	movs	r3, #32
   11e16:	e7bd      	b.n	11d94 <z_prf+0x390>
	} else if (fspace) {
   11e18:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
   11e1c:	e7be      	b.n	11d9c <z_prf+0x398>
			_rlrshift(&fract);
   11e1e:	a810      	add	r0, sp, #64	; 0x40
   11e20:	f014 f897 	bl	25f52 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
   11e24:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	; 0x40
   11e28:	2300      	movs	r3, #0
   11e2a:	930b      	str	r3, [sp, #44]	; 0x2c
   11e2c:	2300      	movs	r3, #0
   11e2e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
   11e32:	4aa9      	ldr	r2, [pc, #676]	; (120d8 <z_prf+0x6d4>)
   11e34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11e38:	428b      	cmp	r3, r1
   11e3a:	bf08      	it	eq
   11e3c:	4282      	cmpeq	r2, r0
   11e3e:	f108 0801 	add.w	r8, r8, #1
   11e42:	d3ec      	bcc.n	11e1e <z_prf+0x41a>
		fract *= 5U;
   11e44:	2205      	movs	r2, #5
   11e46:	fba7 0102 	umull	r0, r1, r7, r2
   11e4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   11e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e50:	fb02 330c 	mla	r3, r2, ip, r3
		decexp--;
   11e54:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   11e58:	9309      	str	r3, [sp, #36]	; 0x24
   11e5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11e5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		decexp--;
   11e62:	9b00      	ldr	r3, [sp, #0]
   11e64:	3b01      	subs	r3, #1
   11e66:	9300      	str	r3, [sp, #0]
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   11e68:	2300      	movs	r3, #0
   11e6a:	2100      	movs	r1, #0
   11e6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e72:	4299      	cmp	r1, r3
   11e74:	bf08      	it	eq
   11e76:	4290      	cmpeq	r0, r2
   11e78:	d207      	bcs.n	11e8a <z_prf+0x486>
   11e7a:	f1bc 0f00 	cmp.w	ip, #0
   11e7e:	d08f      	beq.n	11da0 <z_prf+0x39c>
   11e80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11e84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11e88:	e78a      	b.n	11da0 <z_prf+0x39c>
			fract <<= 1;
   11e8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11e8e:	1892      	adds	r2, r2, r2
   11e90:	415b      	adcs	r3, r3
   11e92:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
   11e96:	f108 38ff 	add.w	r8, r8, #4294967295
   11e9a:	f04f 0c01 	mov.w	ip, #1
   11e9e:	e7e3      	b.n	11e68 <z_prf+0x464>
		_ldiv5(&fract);
   11ea0:	a810      	add	r0, sp, #64	; 0x40
   11ea2:	f014 f869 	bl	25f78 <_ldiv5>
		decexp++;
   11ea6:	f04f 0c00 	mov.w	ip, #0
   11eaa:	9b00      	ldr	r3, [sp, #0]
		exp--;
   11eac:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   11eb0:	3301      	adds	r3, #1
   11eb2:	9300      	str	r3, [sp, #0]
   11eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
		while ((fract >> 32) <= (MAXFP1 / 2)) {
   11ebc:	2300      	movs	r3, #0
   11ebe:	2100      	movs	r1, #0
   11ec0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ec6:	4299      	cmp	r1, r3
   11ec8:	bf08      	it	eq
   11eca:	4290      	cmpeq	r0, r2
   11ecc:	d208      	bcs.n	11ee0 <z_prf+0x4dc>
   11ece:	f1bc 0f00 	cmp.w	ip, #0
   11ed2:	f43f af68 	beq.w	11da6 <z_prf+0x3a2>
   11ed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11eda:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11ede:	e762      	b.n	11da6 <z_prf+0x3a2>
			fract <<= 1;
   11ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11ee4:	1892      	adds	r2, r2, r2
   11ee6:	415b      	adcs	r3, r3
   11ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
			exp--;
   11eec:	f108 38ff 	add.w	r8, r8, #4294967295
   11ef0:	f04f 0c01 	mov.w	ip, #1
   11ef4:	e7e2      	b.n	11ebc <z_prf+0x4b8>
	prune_zero = false;		/* Assume trailing 0's allowed     */
   11ef6:	2300      	movs	r3, #0
   11ef8:	e76e      	b.n	11dd8 <z_prf+0x3d4>
   11efa:	2300      	movs	r3, #0
	if (c == 'f') {
   11efc:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
   11efe:	9308      	str	r3, [sp, #32]
	if (c == 'f') {
   11f00:	f47f af77 	bne.w	11df2 <z_prf+0x3ee>
		if (exp < 0) {
   11f04:	9b00      	ldr	r3, [sp, #0]
   11f06:	eb13 0805 	adds.w	r8, r3, r5
   11f0a:	d54b      	bpl.n	11fa4 <z_prf+0x5a0>
	digit_count = 16;
   11f0c:	2310      	movs	r3, #16
   11f0e:	2466      	movs	r4, #102	; 0x66
			exp = 0;
   11f10:	f04f 0800 	mov.w	r8, #0
	digit_count = 16;
   11f14:	930f      	str	r3, [sp, #60]	; 0x3c
	ltemp = 0x0800000000000000;
   11f16:	2200      	movs	r2, #0
   11f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11f1c:	a948      	add	r1, sp, #288	; 0x120
   11f1e:	e961 2336 	strd	r2, r3, [r1, #-216]!	; 0xd8
	while (exp--) {
   11f22:	f118 38ff 	adds.w	r8, r8, #4294967295
   11f26:	d23f      	bcs.n	11fa8 <z_prf+0x5a4>
	fract += ltemp;
   11f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11f2c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   11f30:	1817      	adds	r7, r2, r0
   11f32:	eb43 0801 	adc.w	r8, r3, r1
   11f36:	463a      	mov	r2, r7
   11f38:	4643      	mov	r3, r8
   11f3a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((fract >> 32) & 0xF0000000) {
   11f3e:	2300      	movs	r3, #0
   11f40:	f008 4270 	and.w	r2, r8, #4026531840	; 0xf0000000
   11f44:	4313      	orrs	r3, r2
   11f46:	d008      	beq.n	11f5a <z_prf+0x556>
		_ldiv5(&fract);
   11f48:	a810      	add	r0, sp, #64	; 0x40
   11f4a:	f014 f815 	bl	25f78 <_ldiv5>
		_rlrshift(&fract);
   11f4e:	a810      	add	r0, sp, #64	; 0x40
   11f50:	f013 ffff 	bl	25f52 <_rlrshift>
		decexp++;
   11f54:	9b00      	ldr	r3, [sp, #0]
   11f56:	3301      	adds	r3, #1
   11f58:	9300      	str	r3, [sp, #0]
	if (c == 'f') {
   11f5a:	2c66      	cmp	r4, #102	; 0x66
   11f5c:	f10a 0801 	add.w	r8, sl, #1
   11f60:	d140      	bne.n	11fe4 <z_prf+0x5e0>
		if (decexp > 0) {
   11f62:	9b00      	ldr	r3, [sp, #0]
   11f64:	2b00      	cmp	r3, #0
   11f66:	dd29      	ble.n	11fbc <z_prf+0x5b8>
   11f68:	4453      	add	r3, sl
   11f6a:	4698      	mov	r8, r3
				*buf++ = _get_digit(&fract, &digit_count);
   11f6c:	a90f      	add	r1, sp, #60	; 0x3c
   11f6e:	a810      	add	r0, sp, #64	; 0x40
   11f70:	f014 f832 	bl	25fd8 <_get_digit>
   11f74:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
   11f78:	45c2      	cmp	sl, r8
   11f7a:	d1f7      	bne.n	11f6c <z_prf+0x568>
   11f7c:	2300      	movs	r3, #0
   11f7e:	9300      	str	r3, [sp, #0]
		if (falt || (precision > 0)) {
   11f80:	b906      	cbnz	r6, 11f84 <z_prf+0x580>
   11f82:	b15d      	cbz	r5, 11f9c <z_prf+0x598>
			*buf++ = '.';
   11f84:	232e      	movs	r3, #46	; 0x2e
   11f86:	4646      	mov	r6, r8
				*buf++ = '0';
   11f88:	f04f 0a30 	mov.w	sl, #48	; 0x30
			*buf++ = '.';
   11f8c:	f888 3000 	strb.w	r3, [r8]
   11f90:	eb08 0305 	add.w	r3, r8, r5
		while (precision-- > 0) {
   11f94:	42b3      	cmp	r3, r6
   11f96:	d115      	bne.n	11fc4 <z_prf+0x5c0>
   11f98:	3501      	adds	r5, #1
   11f9a:	44a8      	add	r8, r5
	if (prune_zero) {
   11f9c:	9b08      	ldr	r3, [sp, #32]
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d139      	bne.n	12016 <z_prf+0x612>
   11fa2:	e060      	b.n	12066 <z_prf+0x662>
		if (exp < 0) {
   11fa4:	2466      	movs	r4, #102	; 0x66
   11fa6:	e726      	b.n	11df6 <z_prf+0x3f2>
		_ldiv5(&ltemp);
   11fa8:	4608      	mov	r0, r1
   11faa:	910a      	str	r1, [sp, #40]	; 0x28
   11fac:	f013 ffe4 	bl	25f78 <_ldiv5>
		_rlrshift(&ltemp);
   11fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
   11fb2:	4608      	mov	r0, r1
   11fb4:	f013 ffcd 	bl	25f52 <_rlrshift>
   11fb8:	990a      	ldr	r1, [sp, #40]	; 0x28
   11fba:	e7b2      	b.n	11f22 <z_prf+0x51e>
			*buf++ = '0';
   11fbc:	2330      	movs	r3, #48	; 0x30
   11fbe:	f88a 3000 	strb.w	r3, [sl]
   11fc2:	e7dd      	b.n	11f80 <z_prf+0x57c>
			if (decexp < 0) {
   11fc4:	9a00      	ldr	r2, [sp, #0]
   11fc6:	b12a      	cbz	r2, 11fd4 <z_prf+0x5d0>
				decexp++;
   11fc8:	3201      	adds	r2, #1
				*buf++ = '0';
   11fca:	f886 a001 	strb.w	sl, [r6, #1]
				decexp++;
   11fce:	9200      	str	r2, [sp, #0]
   11fd0:	3601      	adds	r6, #1
   11fd2:	e7df      	b.n	11f94 <z_prf+0x590>
				*buf++ = _get_digit(&fract, &digit_count);
   11fd4:	a90f      	add	r1, sp, #60	; 0x3c
   11fd6:	a810      	add	r0, sp, #64	; 0x40
   11fd8:	930a      	str	r3, [sp, #40]	; 0x28
   11fda:	f013 fffd 	bl	25fd8 <_get_digit>
   11fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11fe0:	7070      	strb	r0, [r6, #1]
   11fe2:	e7f5      	b.n	11fd0 <z_prf+0x5cc>
		*buf = _get_digit(&fract, &digit_count);
   11fe4:	a90f      	add	r1, sp, #60	; 0x3c
   11fe6:	a810      	add	r0, sp, #64	; 0x40
   11fe8:	f013 fff6 	bl	25fd8 <_get_digit>
		if (*buf++ != '0') {
   11fec:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11fee:	bf18      	it	ne
   11ff0:	9b00      	ldrne	r3, [sp, #0]
		*buf = _get_digit(&fract, &digit_count);
   11ff2:	f88a 0000 	strb.w	r0, [sl]
			decexp--;
   11ff6:	bf1c      	itt	ne
   11ff8:	f103 33ff 	addne.w	r3, r3, #4294967295
   11ffc:	9300      	strne	r3, [sp, #0]
		if (falt || (precision > 0)) {
   11ffe:	b906      	cbnz	r6, 12002 <z_prf+0x5fe>
   12000:	b13d      	cbz	r5, 12012 <z_prf+0x60e>
			*buf++ = '.';
   12002:	232e      	movs	r3, #46	; 0x2e
   12004:	f10a 0802 	add.w	r8, sl, #2
   12008:	f88a 3001 	strb.w	r3, [sl, #1]
   1200c:	4445      	add	r5, r8
		while (precision-- > 0) {
   1200e:	4545      	cmp	r5, r8
   12010:	d12e      	bne.n	12070 <z_prf+0x66c>
	if (prune_zero) {
   12012:	9b08      	ldr	r3, [sp, #32]
   12014:	b143      	cbz	r3, 12028 <z_prf+0x624>
		while (*--buf == '0')
   12016:	f818 2c01 	ldrb.w	r2, [r8, #-1]
   1201a:	f108 33ff 	add.w	r3, r8, #4294967295
   1201e:	2a30      	cmp	r2, #48	; 0x30
   12020:	d02d      	beq.n	1207e <z_prf+0x67a>
   12022:	2a2e      	cmp	r2, #46	; 0x2e
   12024:	bf08      	it	eq
   12026:	4698      	moveq	r8, r3
	if ((c == 'e') || (c == 'E')) {
   12028:	f024 0320 	bic.w	r3, r4, #32
   1202c:	2b45      	cmp	r3, #69	; 0x45
   1202e:	d11a      	bne.n	12066 <z_prf+0x662>
		if (decexp < 0) {
   12030:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) ((decexp / 10) + '0');
   12032:	220a      	movs	r2, #10
		if (decexp < 0) {
   12034:	2b00      	cmp	r3, #0
			decexp = -decexp;
   12036:	bfbb      	ittet	lt
   12038:	425b      	neglt	r3, r3
   1203a:	9300      	strlt	r3, [sp, #0]
			*buf++ = '+';
   1203c:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
   1203e:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   12040:	f888 3001 	strb.w	r3, [r8, #1]
		*buf++ = (char) ((decexp / 10) + '0');
   12044:	9b00      	ldr	r3, [sp, #0]
		*buf++ = (char) c;
   12046:	f888 4000 	strb.w	r4, [r8]
		*buf++ = (char) ((decexp / 10) + '0');
   1204a:	fb93 f3f2 	sdiv	r3, r3, r2
   1204e:	f103 0130 	add.w	r1, r3, #48	; 0x30
   12052:	f888 1002 	strb.w	r1, [r8, #2]
		decexp %= 10;
   12056:	9900      	ldr	r1, [sp, #0]
		*buf++ = (char) (decexp + '0');
   12058:	f108 0804 	add.w	r8, r8, #4
		decexp %= 10;
   1205c:	fb02 1713 	mls	r7, r2, r3, r1
		*buf++ = (char) (decexp + '0');
   12060:	3730      	adds	r7, #48	; 0x30
   12062:	f808 7c01 	strb.w	r7, [r8, #-1]
	*buf = 0;
   12066:	2300      	movs	r3, #0
	return buf - start;
   12068:	a815      	add	r0, sp, #84	; 0x54
	*buf = 0;
   1206a:	f888 3000 	strb.w	r3, [r8]
   1206e:	e64e      	b.n	11d0e <z_prf+0x30a>
			*buf++ = _get_digit(&fract, &digit_count);
   12070:	a90f      	add	r1, sp, #60	; 0x3c
   12072:	a810      	add	r0, sp, #64	; 0x40
   12074:	f013 ffb0 	bl	25fd8 <_get_digit>
   12078:	f808 0b01 	strb.w	r0, [r8], #1
   1207c:	e7c7      	b.n	1200e <z_prf+0x60a>
		while (*--buf == '0')
   1207e:	4698      	mov	r8, r3
   12080:	e7c9      	b.n	12016 <z_prf+0x612>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
   12082:	1d3b      	adds	r3, r7, #4
   12084:	9305      	str	r3, [sp, #20]
				*int32ptr_temp = count;
   12086:	9a04      	ldr	r2, [sp, #16]
   12088:	683b      	ldr	r3, [r7, #0]
   1208a:	601a      	str	r2, [r3, #0]
				break;
   1208c:	e4db      	b.n	11a46 <z_prf+0x42>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
   1208e:	1d3b      	adds	r3, r7, #4
   12090:	9305      	str	r3, [sp, #20]
   12092:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
   12094:	b316      	cbz	r6, 120dc <z_prf+0x6d8>
		*buf++ = '0';
   12096:	2330      	movs	r3, #48	; 0x30
   12098:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if (!value) {
   1209c:	bb59      	cbnz	r1, 120f6 <z_prf+0x6f2>
			prefix = 0;
   1209e:	3501      	adds	r5, #1
   120a0:	9b02      	ldr	r3, [sp, #8]
   120a2:	bf18      	it	ne
   120a4:	2320      	movne	r3, #32
   120a6:	4689      	mov	r9, r1
			*buf++ = 0;
   120a8:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
			prefix = 0;
   120ac:	9302      	str	r3, [sp, #8]
				if (c < width) {
   120ae:	9b03      	ldr	r3, [sp, #12]
   120b0:	42b3      	cmp	r3, r6
   120b2:	f340 8085 	ble.w	121c0 <z_prf+0x7bc>
					if (fminus) {
   120b6:	9b06      	ldr	r3, [sp, #24]
   120b8:	ad15      	add	r5, sp, #84	; 0x54
   120ba:	2b00      	cmp	r3, #0
   120bc:	d058      	beq.n	12170 <z_prf+0x76c>
							buf[i] = ' ';
   120be:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
   120c0:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
   120c2:	55ab      	strb	r3, [r5, r6]
						for (i = c; i < width; i++)
   120c4:	3601      	adds	r6, #1
   120c6:	42b2      	cmp	r2, r6
   120c8:	d1fa      	bne.n	120c0 <z_prf+0x6bc>
   120ca:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
					if ((*func)(*cptr, dest) == EOF) {
   120ce:	ac15      	add	r4, sp, #84	; 0x54
   120d0:	4413      	add	r3, r2
   120d2:	461d      	mov	r5, r3
   120d4:	1aa4      	subs	r4, r4, r2
   120d6:	e06f      	b.n	121b8 <z_prf+0x7b4>
   120d8:	33333332 	.word	0x33333332
	if (alt_form) {
   120dc:	a815      	add	r0, sp, #84	; 0x54
	return (buf - buf0) + _to_x(buf, value, 8, precision);
   120de:	f10d 0854 	add.w	r8, sp, #84	; 0x54
   120e2:	462b      	mov	r3, r5
   120e4:	2208      	movs	r2, #8
   120e6:	eba0 0808 	sub.w	r8, r0, r8
   120ea:	f013 ff0a 	bl	25f02 <_to_x>
   120ee:	4440      	add	r0, r8
			prefix = 0;
   120f0:	f04f 0900 	mov.w	r9, #0
   120f4:	e595      	b.n	11c22 <z_prf+0x21e>
		*buf++ = '0';
   120f6:	f10d 0055 	add.w	r0, sp, #85	; 0x55
   120fa:	e7f0      	b.n	120de <z_prf+0x6da>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
   120fc:	1d3b      	adds	r3, r7, #4
   120fe:	9305      	str	r3, [sp, #20]
		*buf++ = '0';
   12100:	f647 0330 	movw	r3, #30768	; 0x7830
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
   12104:	6839      	ldr	r1, [r7, #0]
		*buf++ = '0';
   12106:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
	len = _to_x(buf, value, 16, precision);
   1210a:	2210      	movs	r2, #16
   1210c:	2308      	movs	r3, #8
   1210e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   12112:	f013 fef6 	bl	25f02 <_to_x>
	return len + (buf - buf0);
   12116:	3002      	adds	r0, #2
   12118:	e7ea      	b.n	120f0 <z_prf+0x6ec>
				if ((precision >= 0) && (precision < c)) {
   1211a:	2d00      	cmp	r5, #0
   1211c:	db02      	blt.n	12124 <z_prf+0x720>
   1211e:	42ae      	cmp	r6, r5
   12120:	bfa8      	it	ge
   12122:	462e      	movge	r6, r5
				if (c > 0) {
   12124:	2e00      	cmp	r6, #0
   12126:	f43f ac8e 	beq.w	11a46 <z_prf+0x42>
					memcpy(buf, cptr_temp, (size_t) c);
   1212a:	4632      	mov	r2, r6
   1212c:	a815      	add	r0, sp, #84	; 0x54
   1212e:	f013 fe9a 	bl	25e66 <memcpy>
   12132:	e59c      	b.n	11c6e <z_prf+0x26a>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
   12134:	1d3b      	adds	r3, r7, #4
   12136:	9305      	str	r3, [sp, #20]
	return _to_x(buf, value, 10, precision);
   12138:	220a      	movs	r2, #10
   1213a:	462b      	mov	r3, r5
   1213c:	6839      	ldr	r1, [r7, #0]
   1213e:	a815      	add	r0, sp, #84	; 0x54
   12140:	f013 fedf 	bl	25f02 <_to_x>
   12144:	e7d4      	b.n	120f0 <z_prf+0x6ec>
	if (alt_form) {
   12146:	af15      	add	r7, sp, #84	; 0x54
   12148:	e527      	b.n	11b9a <z_prf+0x196>
		if (*buf >= 'a' && *buf <= 'z') {
   1214a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1214e:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
   12150:	bf9c      	itt	ls
   12152:	3b20      	subls	r3, #32
   12154:	7013      	strbls	r3, [r2, #0]
   12156:	e529      	b.n	11bac <z_prf+0x1a8>
				if ((*func)('%', dest) == EOF) {
   12158:	990d      	ldr	r1, [sp, #52]	; 0x34
   1215a:	4620      	mov	r0, r4
   1215c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1215e:	4798      	blx	r3
   12160:	3001      	adds	r0, #1
   12162:	f43f ac64 	beq.w	11a2e <z_prf+0x2a>
				count++;
   12166:	9b04      	ldr	r3, [sp, #16]
   12168:	3301      	adds	r3, #1
   1216a:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1) {
   1216c:	9705      	str	r7, [sp, #20]
   1216e:	e46a      	b.n	11a46 <z_prf+0x42>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
   12170:	9b03      	ldr	r3, [sp, #12]
   12172:	1c72      	adds	r2, r6, #1
   12174:	1b9c      	subs	r4, r3, r6
   12176:	1928      	adds	r0, r5, r4
   12178:	4629      	mov	r1, r5
   1217a:	f013 fe5d 	bl	25e38 <memmove>
						if (pad == ' ')
   1217e:	9b06      	ldr	r3, [sp, #24]
   12180:	9a02      	ldr	r2, [sp, #8]
   12182:	2a20      	cmp	r2, #32
   12184:	bf18      	it	ne
   12186:	464b      	movne	r3, r9
   12188:	9306      	str	r3, [sp, #24]
						c = width - c + prefix;
   1218a:	441c      	add	r4, r3
						for (i = prefix; i < c; i++)
   1218c:	9b06      	ldr	r3, [sp, #24]
   1218e:	42a3      	cmp	r3, r4
   12190:	da9b      	bge.n	120ca <z_prf+0x6c6>
							buf[i] = pad;
   12192:	9b06      	ldr	r3, [sp, #24]
   12194:	461a      	mov	r2, r3
   12196:	9b02      	ldr	r3, [sp, #8]
   12198:	54ab      	strb	r3, [r5, r2]
						for (i = prefix; i < c; i++)
   1219a:	4613      	mov	r3, r2
   1219c:	3301      	adds	r3, #1
   1219e:	9306      	str	r3, [sp, #24]
   121a0:	e7f4      	b.n	1218c <z_prf+0x788>
					if ((*func)(*cptr, dest) == EOF) {
   121a2:	9b04      	ldr	r3, [sp, #16]
   121a4:	990d      	ldr	r1, [sp, #52]	; 0x34
   121a6:	5ce0      	ldrb	r0, [r4, r3]
   121a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121aa:	4798      	blx	r3
   121ac:	3001      	adds	r0, #1
   121ae:	f43f ac3e 	beq.w	11a2e <z_prf+0x2a>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
   121b2:	9b04      	ldr	r3, [sp, #16]
   121b4:	3301      	adds	r3, #1
   121b6:	9304      	str	r3, [sp, #16]
   121b8:	9b04      	ldr	r3, [sp, #16]
   121ba:	42ab      	cmp	r3, r5
   121bc:	d1f1      	bne.n	121a2 <z_prf+0x79e>
   121be:	e442      	b.n	11a46 <z_prf+0x42>
   121c0:	9603      	str	r6, [sp, #12]
   121c2:	e782      	b.n	120ca <z_prf+0x6c6>
					prefix = 1;
   121c4:	f8dd 901c 	ldr.w	r9, [sp, #28]
   121c8:	e5b2      	b.n	11d30 <z_prf+0x32c>
   121ca:	bf00      	nop

000121cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   121cc:	4b01      	ldr	r3, [pc, #4]	; (121d4 <__stdout_hook_install+0x8>)
   121ce:	6018      	str	r0, [r3, #0]
}
   121d0:	4770      	bx	lr
   121d2:	bf00      	nop
   121d4:	20028248 	.word	0x20028248

000121d8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   121d8:	b40c      	push	{r2, r3}
   121da:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   121dc:	b909      	cbnz	r1, 121e2 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   121de:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   121e2:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   121e6:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   121e8:	9a06      	ldr	r2, [sp, #24]
   121ea:	a902      	add	r1, sp, #8
   121ec:	4805      	ldr	r0, [pc, #20]	; (12204 <snprintf+0x2c>)
	va_start(vargs, format);
   121ee:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   121f0:	f7ff fc08 	bl	11a04 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   121f4:	2200      	movs	r2, #0
   121f6:	9b02      	ldr	r3, [sp, #8]
   121f8:	701a      	strb	r2, [r3, #0]
	return r;
}
   121fa:	b005      	add	sp, #20
   121fc:	f85d eb04 	ldr.w	lr, [sp], #4
   12200:	b002      	add	sp, #8
   12202:	4770      	bx	lr
   12204:	00026015 	.word	0x00026015

00012208 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   12208:	b40e      	push	{r1, r2, r3}
   1220a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1220c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   12210:	ab05      	add	r3, sp, #20
   12212:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   12216:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   12218:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   1221a:	4806      	ldr	r0, [pc, #24]	; (12234 <sprintf+0x2c>)
   1221c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   1221e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   12220:	f7ff fbf0 	bl	11a04 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   12224:	2200      	movs	r2, #0
   12226:	9b02      	ldr	r3, [sp, #8]
   12228:	701a      	strb	r2, [r3, #0]
	return r;
}
   1222a:	b004      	add	sp, #16
   1222c:	f85d eb04 	ldr.w	lr, [sp], #4
   12230:	b003      	add	sp, #12
   12232:	4770      	bx	lr
   12234:	00026015 	.word	0x00026015

00012238 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   12238:	2124      	movs	r1, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1223a:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   1223c:	4a04      	ldr	r2, [pc, #16]	; (12250 <net_buf_id+0x18>)
   1223e:	fb01 2303 	mla	r3, r1, r3, r2
   12242:	6a1b      	ldr	r3, [r3, #32]
   12244:	1ac0      	subs	r0, r0, r3
}
   12246:	4b03      	ldr	r3, [pc, #12]	; (12254 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   12248:	10c0      	asrs	r0, r0, #3
}
   1224a:	4358      	muls	r0, r3
   1224c:	4770      	bx	lr
   1224e:	bf00      	nop
   12250:	2002bbd8 	.word	0x2002bbd8
   12254:	aaaaaaab 	.word	0xaaaaaaab

00012258 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   12258:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1225a:	2424      	movs	r4, #36	; 0x24
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1225c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1225e:	4a09      	ldr	r2, [pc, #36]	; (12284 <fixed_data_alloc+0x2c>)
   12260:	fb04 2303 	mla	r3, r4, r3, r2
   12264:	69db      	ldr	r3, [r3, #28]

	*size = MIN(fixed->data_size, *size);
   12266:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12268:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1226a:	6823      	ldr	r3, [r4, #0]
   1226c:	429a      	cmp	r2, r3
   1226e:	bf94      	ite	ls
   12270:	600a      	strls	r2, [r1, #0]
   12272:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12274:	f7ff ffe0 	bl	12238 <net_buf_id>
   12278:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1227c:	fb02 3000 	mla	r0, r2, r0, r3
   12280:	bd10      	pop	{r4, pc}
   12282:	bf00      	nop
   12284:	2002bbd8 	.word	0x2002bbd8

00012288 <net_context_init>:

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   12288:	f04f 32ff 	mov.w	r2, #4294967295
   1228c:	2101      	movs	r1, #1
   1228e:	4801      	ldr	r0, [pc, #4]	; (12294 <net_context_init+0xc>)
   12290:	f011 bbd4 	b.w	23a3c <z_impl_k_sem_init>
   12294:	200201d0 	.word	0x200201d0

00012298 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   12298:	b538      	push	{r3, r4, r5, lr}
   1229a:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   1229c:	4604      	mov	r4, r0
   1229e:	b958      	cbnz	r0, 122b8 <net_if_flag_is_set+0x20>
   122a0:	4909      	ldr	r1, [pc, #36]	; (122c8 <net_if_flag_is_set+0x30>)
   122a2:	480a      	ldr	r0, [pc, #40]	; (122cc <net_if_flag_is_set+0x34>)
   122a4:	f240 2306 	movw	r3, #518	; 0x206
   122a8:	4a09      	ldr	r2, [pc, #36]	; (122d0 <net_if_flag_is_set+0x38>)
   122aa:	f013 fc48 	bl	25b3e <printk>
   122ae:	f240 2106 	movw	r1, #518	; 0x206
   122b2:	4807      	ldr	r0, [pc, #28]	; (122d0 <net_if_flag_is_set+0x38>)
   122b4:	f013 fc50 	bl	25b58 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   122b8:	6823      	ldr	r3, [r4, #0]
   122ba:	330c      	adds	r3, #12
   122bc:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   122c0:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   122c2:	f000 0001 	and.w	r0, r0, #1
   122c6:	bd38      	pop	{r3, r4, r5, pc}
   122c8:	0002bf5a 	.word	0x0002bf5a
   122cc:	0002abaa 	.word	0x0002abaa
   122d0:	0002bf30 	.word	0x0002bf30

000122d4 <net_if_flag_set.constprop.25>:
static inline void net_if_flag_set(struct net_if *iface,
   122d4:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   122d6:	4604      	mov	r4, r0
   122d8:	b958      	cbnz	r0, 122f2 <net_if_flag_set.constprop.25+0x1e>
   122da:	490b      	ldr	r1, [pc, #44]	; (12308 <net_if_flag_set.constprop.25+0x34>)
   122dc:	480b      	ldr	r0, [pc, #44]	; (1230c <net_if_flag_set.constprop.25+0x38>)
   122de:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
   122e2:	4a0b      	ldr	r2, [pc, #44]	; (12310 <net_if_flag_set.constprop.25+0x3c>)
   122e4:	f013 fc2b 	bl	25b3e <printk>
   122e8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   122ec:	4808      	ldr	r0, [pc, #32]	; (12310 <net_if_flag_set.constprop.25+0x3c>)
   122ee:	f013 fc33 	bl	25b58 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   122f2:	6823      	ldr	r3, [r4, #0]
   122f4:	330c      	adds	r3, #12
   122f6:	e8d3 2fef 	ldaex	r2, [r3]
   122fa:	f042 0201 	orr.w	r2, r2, #1
   122fe:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12302:	2900      	cmp	r1, #0
   12304:	d1f7      	bne.n	122f6 <net_if_flag_set.constprop.25+0x22>
}
   12306:	bd10      	pop	{r4, pc}
   12308:	0002bf5a 	.word	0x0002bf5a
   1230c:	0002abaa 	.word	0x0002abaa
   12310:	0002bf30 	.word	0x0002bf30

00012314 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   12314:	b510      	push	{r4, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   12316:	2100      	movs	r1, #0
{
   12318:	4604      	mov	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1231a:	f7ff ffbd 	bl	12298 <net_if_flag_is_set>
   1231e:	b928      	cbnz	r0, 1232c <net_if_up+0x18>
		return 0;
	}

	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && net_if_is_ip_offloaded(iface)) {
   12320:	6823      	ldr	r3, [r4, #0]
   12322:	699a      	ldr	r2, [r3, #24]
   12324:	b122      	cbz	r2, 12330 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   12326:	4620      	mov	r0, r4
   12328:	f7ff ffd4 	bl	122d4 <net_if_flag_set.constprop.25>
		return 0;
   1232c:	2000      	movs	r0, #0
   1232e:	e018      	b.n	12362 <net_if_up+0x4e>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface)->enable) {
   12330:	685b      	ldr	r3, [r3, #4]
   12332:	689b      	ldr	r3, [r3, #8]
   12334:	b983      	cbnz	r3, 12358 <net_if_up+0x44>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   12336:	6823      	ldr	r3, [r4, #0]
   12338:	691b      	ldr	r3, [r3, #16]
   1233a:	2b00      	cmp	r3, #0
   1233c:	d1f3      	bne.n	12326 <net_if_up+0x12>
   1233e:	f640 3354 	movw	r3, #2900	; 0xb54
   12342:	4a08      	ldr	r2, [pc, #32]	; (12364 <net_if_up+0x50>)
   12344:	4908      	ldr	r1, [pc, #32]	; (12368 <net_if_up+0x54>)
   12346:	4809      	ldr	r0, [pc, #36]	; (1236c <net_if_up+0x58>)
   12348:	f013 fbf9 	bl	25b3e <printk>
   1234c:	f640 3154 	movw	r1, #2900	; 0xb54
   12350:	4804      	ldr	r0, [pc, #16]	; (12364 <net_if_up+0x50>)
   12352:	f013 fc01 	bl	25b58 <assert_post_action>
   12356:	e7e6      	b.n	12326 <net_if_up+0x12>
	status = net_if_l2(iface)->enable(iface, true);
   12358:	2101      	movs	r1, #1
   1235a:	4620      	mov	r0, r4
   1235c:	4798      	blx	r3
	if (status < 0) {
   1235e:	2800      	cmp	r0, #0
   12360:	dae9      	bge.n	12336 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   12362:	bd10      	pop	{r4, pc}
   12364:	0002bf91 	.word	0x0002bf91
   12368:	0002bf60 	.word	0x0002bf60
   1236c:	0002abaa 	.word	0x0002abaa

00012370 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP */

void net_if_init(void)
{
   12370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12372:	4e0a      	ldr	r6, [pc, #40]	; (1239c <net_if_init+0x2c>)
	int i;
#endif

	NET_DBG("");

	net_tc_tx_init();
   12374:	f000 f82e 	bl	123d4 <net_tc_tx_init>
#if defined(CONFIG_NET_IPV6)
	k_delayed_work_init(&address_lifetime_timer, address_lifetime_timeout);
	k_delayed_work_init(&prefix_lifetime_timer, prefix_lifetime_timeout);
#endif

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   12378:	2400      	movs	r4, #0
   1237a:	4637      	mov	r7, r6
   1237c:	4d08      	ldr	r5, [pc, #32]	; (123a0 <net_if_init+0x30>)
   1237e:	1bad      	subs	r5, r5, r6
   12380:	42ac      	cmp	r4, r5
   12382:	eb06 0004 	add.w	r0, r6, r4
   12386:	d100      	bne.n	1238a <net_if_init+0x1a>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   12388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   1238a:	593b      	ldr	r3, [r7, r4]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   1238c:	681b      	ldr	r3, [r3, #0]
   1238e:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   12390:	b113      	cbz	r3, 12398 <net_if_init+0x28>
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	b103      	cbz	r3, 12398 <net_if_init+0x28>
	api->init(iface);
   12396:	4798      	blx	r3
   12398:	3420      	adds	r4, #32
   1239a:	e7f1      	b.n	12380 <net_if_init+0x10>
   1239c:	2002bc20 	.word	0x2002bc20
   123a0:	2002bc40 	.word	0x2002bc40

000123a4 <net_if_post_init>:

void net_if_post_init(void)
{
   123a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   123a6:	2400      	movs	r4, #0
   123a8:	4f08      	ldr	r7, [pc, #32]	; (123cc <net_if_post_init+0x28>)
   123aa:	4d09      	ldr	r5, [pc, #36]	; (123d0 <net_if_post_init+0x2c>)
   123ac:	1bed      	subs	r5, r5, r7
   123ae:	42ac      	cmp	r4, r5
   123b0:	eb04 0607 	add.w	r6, r4, r7
   123b4:	d100      	bne.n	123b8 <net_if_post_init+0x14>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   123b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   123b8:	2103      	movs	r1, #3
   123ba:	4630      	mov	r0, r6
   123bc:	f7ff ff6c 	bl	12298 <net_if_flag_is_set>
   123c0:	b910      	cbnz	r0, 123c8 <net_if_post_init+0x24>
			net_if_up(iface);
   123c2:	4630      	mov	r0, r6
   123c4:	f7ff ffa6 	bl	12314 <net_if_up>
   123c8:	3420      	adds	r4, #32
   123ca:	e7f0      	b.n	123ae <net_if_post_init+0xa>
   123cc:	2002bc20 	.word	0x2002bc20
   123d0:	2002bc40 	.word	0x2002bc40

000123d4 <net_tc_tx_init>:

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = tx_tc2thread(i);
		tx_classes[i].tc = thread_priority;
   123d4:	2307      	movs	r3, #7
{
   123d6:	b510      	push	{r4, lr}
		tx_classes[i].tc = thread_priority;
   123d8:	4c08      	ldr	r4, [pc, #32]	; (123fc <net_tc_tx_init+0x28>)
			"prio %d (%d)", i,
			&tx_classes[i].work_q.queue, TX_STACK(i),
			K_THREAD_STACK_SIZEOF(tx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&tx_classes[i].work_q,
   123da:	4909      	ldr	r1, [pc, #36]	; (12400 <net_tc_tx_init+0x2c>)
		tx_classes[i].tc = thread_priority;
   123dc:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&tx_classes[i].work_q,
   123e0:	4620      	mov	r0, r4
   123e2:	f06f 0308 	mvn.w	r3, #8
   123e6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   123ea:	f011 fdab 	bl	23f44 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   123ee:	f104 0014 	add.w	r0, r4, #20
   123f2:	4904      	ldr	r1, [pc, #16]	; (12404 <net_tc_tx_init+0x30>)
			       tx_stack[i],
			       K_THREAD_STACK_SIZEOF(tx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&tx_classes[i].work_q.thread, "tx_workq");
	}
}
   123f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123f8:	f015 b977 	b.w	276ea <z_impl_k_thread_name_set>
   123fc:	200202b4 	.word	0x200202b4
   12400:	20024168 	.word	0x20024168
   12404:	0002bfc6 	.word	0x0002bfc6

00012408 <net_tc_rx_init>:

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
		u8_t thread_priority;

		thread_priority = rx_tc2thread(i);
		rx_classes[i].tc = thread_priority;
   12408:	2307      	movs	r3, #7
{
   1240a:	b510      	push	{r4, lr}
		rx_classes[i].tc = thread_priority;
   1240c:	4c08      	ldr	r4, [pc, #32]	; (12430 <net_tc_rx_init+0x28>)
			"prio %d (%d)", i,
			&rx_classes[i].work_q.queue, RX_STACK(i),
			K_THREAD_STACK_SIZEOF(rx_stack[i]),
			thread_priority, K_PRIO_COOP(thread_priority));

		k_work_q_start(&rx_classes[i].work_q,
   1240e:	4909      	ldr	r1, [pc, #36]	; (12434 <net_tc_rx_init+0x2c>)
		rx_classes[i].tc = thread_priority;
   12410:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		k_work_q_start(&rx_classes[i].work_q,
   12414:	4620      	mov	r0, r4
   12416:	f06f 0308 	mvn.w	r3, #8
   1241a:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1241e:	f011 fd91 	bl	23f44 <k_work_q_start>
   12422:	f104 0014 	add.w	r0, r4, #20
   12426:	4904      	ldr	r1, [pc, #16]	; (12438 <net_tc_rx_init+0x30>)
			       rx_stack[i],
			       K_THREAD_STACK_SIZEOF(rx_stack[i]),
			       K_PRIO_COOP(thread_priority));
		k_thread_name_set(&rx_classes[i].work_q.thread, "rx_workq");
	}
}
   12428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1242c:	f015 b95d 	b.w	276ea <z_impl_k_thread_name_set>
   12430:	200201e8 	.word	0x200201e8
   12434:	20024618 	.word	0x20024618
   12438:	0002bfbd 	.word	0x0002bfbd

0001243c <net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   1243c:	2300      	movs	r3, #0
{
   1243e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   12442:	2802      	cmp	r0, #2
{
   12444:	b087      	sub	sp, #28
   12446:	4682      	mov	sl, r0
   12448:	468b      	mov	fp, r1
   1244a:	4691      	mov	r9, r2
	unsigned char zeros[8] = { 0 };
   1244c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (family == AF_INET6) {
   12450:	d13f      	bne.n	124d2 <net_addr_ntop+0x96>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   12452:	9103      	str	r1, [sp, #12]
   12454:	a904      	add	r1, sp, #16
   12456:	b2dc      	uxtb	r4, r3
{
   12458:	2200      	movs	r2, #0
   1245a:	e007      	b.n	1246c <net_addr_ntop+0x30>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   1245c:	7808      	ldrb	r0, [r1, #0]
   1245e:	3201      	adds	r2, #1
   12460:	3001      	adds	r0, #1
   12462:	7008      	strb	r0, [r1, #0]
			for (j = i; j < 8; j++) {
   12464:	18a0      	adds	r0, r4, r2
   12466:	b2c0      	uxtb	r0, r0
   12468:	2807      	cmp	r0, #7
   1246a:	d804      	bhi.n	12476 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1246c:	1898      	adds	r0, r3, r2
   1246e:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
   12472:	2800      	cmp	r0, #0
   12474:	d0f2      	beq.n	1245c <net_addr_ntop+0x20>
   12476:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   12478:	2b08      	cmp	r3, #8
   1247a:	f101 0101 	add.w	r1, r1, #1
   1247e:	d1ea      	bne.n	12456 <net_addr_ntop+0x1a>
   12480:	2300      	movs	r3, #0
	s8_t pos = -1;
   12482:	f04f 37ff 	mov.w	r7, #4294967295
	u8_t i, bl, bh, longest = 1U;
   12486:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
			if (zeros[i] > longest) {
   1248a:	aa04      	add	r2, sp, #16
   1248c:	5cd2      	ldrb	r2, [r2, r3]
   1248e:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
   12490:	bf88      	it	hi
   12492:	b25f      	sxtbhi	r7, r3
   12494:	f103 0301 	add.w	r3, r3, #1
   12498:	bf88      	it	hi
   1249a:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
   1249c:	2b08      	cmp	r3, #8
   1249e:	d1f4      	bne.n	1248a <net_addr_ntop+0x4e>
		len = 8;
   124a0:	9302      	str	r3, [sp, #8]
   124a2:	f1b8 0f01 	cmp.w	r8, #1
   124a6:	f04f 033a 	mov.w	r3, #58	; 0x3a
   124aa:	bf08      	it	eq
   124ac:	f04f 37ff 	moveq.w	r7, #4294967295
   124b0:	9301      	str	r3, [sp, #4]
	bool needcolon = false;
   124b2:	2200      	movs	r2, #0
	char *ptr = dst;
   124b4:	464c      	mov	r4, r9
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   124b6:	4616      	mov	r6, r2
   124b8:	9b02      	ldr	r3, [sp, #8]
   124ba:	429e      	cmp	r6, r3
   124bc:	db19      	blt.n	124f2 <net_addr_ntop+0xb6>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   124be:	454c      	cmp	r4, r9
   124c0:	d009      	beq.n	124d6 <net_addr_ntop+0x9a>
   124c2:	2300      	movs	r3, #0
		return NULL;
	}

	if (family == AF_INET) {
   124c4:	f1ba 0f01 	cmp.w	sl, #1
		*(ptr - 1) = '\0';
   124c8:	bf0c      	ite	eq
   124ca:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   124ce:	7023      	strbne	r3, [r4, #0]
   124d0:	e003      	b.n	124da <net_addr_ntop+0x9e>
	} else if (family == AF_INET) {
   124d2:	2801      	cmp	r0, #1
   124d4:	d005      	beq.n	124e2 <net_addr_ntop+0xa6>
		return NULL;
   124d6:	f04f 0900 	mov.w	r9, #0
	}

	return dst;
}
   124da:	4648      	mov	r0, r9
   124dc:	b007      	add	sp, #28
   124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   124e2:	232e      	movs	r3, #46	; 0x2e
   124e4:	2604      	movs	r6, #4
	s8_t pos = -1;
   124e6:	f04f 37ff 	mov.w	r7, #4294967295
		delim = '.';
   124ea:	e9cd 3601 	strd	r3, r6, [sp, #4]
	u8_t i, bl, bh, longest = 1U;
   124ee:	4680      	mov	r8, r0
   124f0:	e7df      	b.n	124b2 <net_addr_ntop+0x76>
		if (len == 4) {
   124f2:	9b02      	ldr	r3, [sp, #8]
   124f4:	2b04      	cmp	r3, #4
   124f6:	d12d      	bne.n	12554 <net_addr_ntop+0x118>
			value = (u32_t)addr->s4_addr[i];
   124f8:	f81b 1006 	ldrb.w	r1, [fp, r6]
			if (value == 0U) {
   124fc:	b949      	cbnz	r1, 12512 <net_addr_ntop+0xd6>
				*ptr++ = '0';
   124fe:	2330      	movs	r3, #48	; 0x30
   12500:	4620      	mov	r0, r4
   12502:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   12506:	9b01      	ldr	r3, [sp, #4]
   12508:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1250a:	3601      	adds	r6, #1
   1250c:	b2f6      	uxtb	r6, r6
   1250e:	4604      	mov	r4, r0
   12510:	e7d2      	b.n	124b8 <net_addr_ntop+0x7c>
			l = net_value_to_udec(ptr, value, 0);
   12512:	4623      	mov	r3, r4
   12514:	2009      	movs	r0, #9
   12516:	f04f 0e00 	mov.w	lr, #0
   1251a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 125dc <net_addr_ntop+0x1a0>
		temp = value / divisor;
   1251e:	fbb1 f5fc 	udiv	r5, r1, ip
		if ((precision > i) || (temp != 0)) {
   12522:	4586      	cmp	lr, r0
		value = value % divisor;
   12524:	fb0c 1115 	mls	r1, ip, r5, r1
		if ((precision > i) || (temp != 0)) {
   12528:	dc00      	bgt.n	1252c <net_addr_ntop+0xf0>
   1252a:	b11d      	cbz	r5, 12534 <net_addr_ntop+0xf8>
			*buf++ = (char) (temp + '0');
   1252c:	4686      	mov	lr, r0
   1252e:	3530      	adds	r5, #48	; 0x30
   12530:	701d      	strb	r5, [r3, #0]
   12532:	3301      	adds	r3, #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   12534:	250a      	movs	r5, #10
   12536:	3801      	subs	r0, #1
   12538:	fbbc fcf5 	udiv	ip, ip, r5
   1253c:	1c45      	adds	r5, r0, #1
   1253e:	d1ee      	bne.n	1251e <net_addr_ntop+0xe2>
	*buf = 0;
   12540:	f04f 0100 	mov.w	r1, #0
   12544:	7019      	strb	r1, [r3, #0]
	return buf - start;
   12546:	1b1b      	subs	r3, r3, r4
			ptr += l;
   12548:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   1254a:	9901      	ldr	r1, [sp, #4]
			ptr += l;
   1254c:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   1254e:	3001      	adds	r0, #1
   12550:	54e1      	strb	r1, [r4, r3]
			continue;
   12552:	e7da      	b.n	1250a <net_addr_ntop+0xce>
		if (i == pos) {
   12554:	42b7      	cmp	r7, r6
   12556:	d10e      	bne.n	12576 <net_addr_ntop+0x13a>
			if (needcolon || i == 0U) {
   12558:	b902      	cbnz	r2, 1255c <net_addr_ntop+0x120>
   1255a:	b91f      	cbnz	r7, 12564 <net_addr_ntop+0x128>
				*ptr++ = ':';
   1255c:	233a      	movs	r3, #58	; 0x3a
   1255e:	3401      	adds	r4, #1
   12560:	f804 3c01 	strb.w	r3, [r4, #-1]
			*ptr++ = ':';
   12564:	233a      	movs	r3, #58	; 0x3a
   12566:	7023      	strb	r3, [r4, #0]
			i += longest - 1U;
   12568:	f108 33ff 	add.w	r3, r8, #4294967295
   1256c:	441e      	add	r6, r3
			*ptr++ = ':';
   1256e:	1c60      	adds	r0, r4, #1
			i += longest - 1U;
   12570:	b2f6      	uxtb	r6, r6
			needcolon = false;
   12572:	2200      	movs	r2, #0
			continue;
   12574:	e7c9      	b.n	1250a <net_addr_ntop+0xce>
		if (needcolon) {
   12576:	b11a      	cbz	r2, 12580 <net_addr_ntop+0x144>
			*ptr++ = ':';
   12578:	233a      	movs	r3, #58	; 0x3a
   1257a:	3401      	adds	r4, #1
   1257c:	f804 3c01 	strb.w	r3, [r4, #-1]
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   12580:	9b03      	ldr	r3, [sp, #12]
   12582:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   12586:	021d      	lsls	r5, r3, #8
   12588:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1258c:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1258e:	f3c5 2307 	ubfx	r3, r5, #8, #8
		bl = value & 0xff;
   12592:	b2ed      	uxtb	r5, r5
		if (bh) {
   12594:	b1ab      	cbz	r3, 125c2 <net_addr_ntop+0x186>
			if (bh > 0x0f) {
   12596:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   12598:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1259a:	d90b      	bls.n	125b4 <net_addr_ntop+0x178>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1259c:	2300      	movs	r3, #0
   1259e:	2261      	movs	r2, #97	; 0x61
   125a0:	4620      	mov	r0, r4
   125a2:	f013 fd53 	bl	2604c <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   125a6:	2301      	movs	r3, #1
   125a8:	2261      	movs	r2, #97	; 0x61
   125aa:	4629      	mov	r1, r5
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   125ac:	f013 fd4e 	bl	2604c <net_byte_to_hex>
		needcolon = true;
   125b0:	2201      	movs	r2, #1
   125b2:	e7aa      	b.n	1250a <net_addr_ntop+0xce>
				if (bh < 10) {
   125b4:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   125b6:	bf94      	ite	ls
   125b8:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   125ba:	3157      	addhi	r1, #87	; 0x57
   125bc:	1c60      	adds	r0, r4, #1
   125be:	7021      	strb	r1, [r4, #0]
   125c0:	e7f1      	b.n	125a6 <net_addr_ntop+0x16a>
		} else if (bl > 0x0f) {
   125c2:	2d0f      	cmp	r5, #15
   125c4:	d903      	bls.n	125ce <net_addr_ntop+0x192>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   125c6:	2261      	movs	r2, #97	; 0x61
   125c8:	4629      	mov	r1, r5
   125ca:	4620      	mov	r0, r4
   125cc:	e7ee      	b.n	125ac <net_addr_ntop+0x170>
			if (bl < 10) {
   125ce:	2d09      	cmp	r5, #9
				*ptr++ = (char)(bl + '0');
   125d0:	bf94      	ite	ls
   125d2:	3530      	addls	r5, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   125d4:	3557      	addhi	r5, #87	; 0x57
   125d6:	1c60      	adds	r0, r4, #1
   125d8:	7025      	strb	r5, [r4, #0]
   125da:	e7e9      	b.n	125b0 <net_addr_ntop+0x174>
   125dc:	3b9aca00 	.word	0x3b9aca00

000125e0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   125e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   125e4:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   125e6:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   125ea:	4b3b      	ldr	r3, [pc, #236]	; (126d8 <connect_request_encode+0xf8>)
   125ec:	4a3b      	ldr	r2, [pc, #236]	; (126dc <connect_request_encode+0xfc>)
{
   125ee:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   125f0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   125f4:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   125f6:	2804      	cmp	r0, #4
   125f8:	bf0c      	ite	eq
   125fa:	4610      	moveq	r0, r2
   125fc:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   125fe:	600f      	str	r7, [r1, #0]
{
   12600:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   12602:	f013 fe0a 	bl	2621a <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   12606:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   1260a:	4603      	mov	r3, r0
   1260c:	b938      	cbnz	r0, 1261e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1260e:	e9d4 2000 	ldrd	r2, r0, [r4]
   12612:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   12614:	f896 105c 	ldrb.w	r1, [r6, #92]	; 0x5c
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   12618:	d104      	bne.n	12624 <connect_request_encode+0x44>
		return -ENOMEM;
   1261a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   1261e:	4618      	mov	r0, r3
   12620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   12624:	1c50      	adds	r0, r2, #1
   12626:	6020      	str	r0, [r4, #0]
   12628:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   1262a:	e9d4 8200 	ldrd	r8, r2, [r4]
   1262e:	4542      	cmp	r2, r8
   12630:	d0f3      	beq.n	1261a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   12632:	f108 0201 	add.w	r2, r8, #1
   12636:	6022      	str	r2, [r4, #0]
	err_code = pack_uint16(MQTT_KEEPALIVE, buf);
   12638:	4621      	mov	r1, r4
	*(buf->cur++) = val;
   1263a:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(MQTT_KEEPALIVE, buf);
   1263e:	203c      	movs	r0, #60	; 0x3c
   12640:	f013 fdd9 	bl	261f6 <pack_uint16>
	if (err_code != 0) {
   12644:	4603      	mov	r3, r0
   12646:	2800      	cmp	r0, #0
   12648:	d1e9      	bne.n	1261e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   1264a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1264e:	f013 fde4 	bl	2621a <pack_utf8_str>
	if (err_code != 0) {
   12652:	4603      	mov	r3, r0
   12654:	2800      	cmp	r0, #0
   12656:	d1e2      	bne.n	1261e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   12658:	6c30      	ldr	r0, [r6, #64]	; 0x40
	u8_t connect_flags = client->clean_session << 1;
   1265a:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   1265c:	b1d8      	cbz	r0, 12696 <connect_request_encode+0xb6>
		connect_flags |= client->will_retain << 5;
   1265e:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   12662:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   12666:	f003 0301 	and.w	r3, r3, #1
   1266a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1266e:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   12670:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   12672:	00db      	lsls	r3, r3, #3
   12674:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   12678:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1267a:	f013 fdce 	bl	2621a <pack_utf8_str>
		if (err_code != 0) {
   1267e:	4603      	mov	r3, r0
   12680:	2800      	cmp	r0, #0
   12682:	d1cc      	bne.n	1261e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   12684:	6c73      	ldr	r3, [r6, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   12686:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   12688:	b313      	cbz	r3, 126d0 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   1268a:	4618      	mov	r0, r3
   1268c:	f013 fdc5 	bl	2621a <pack_utf8_str>
			if (err_code != 0) {
   12690:	4603      	mov	r3, r0
   12692:	2800      	cmp	r0, #0
   12694:	d1c3      	bne.n	1261e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   12696:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   12698:	b138      	cbz	r0, 126aa <connect_request_encode+0xca>
		err_code = pack_utf8_str(client->user_name, buf);
   1269a:	4621      	mov	r1, r4
   1269c:	f013 fdbd 	bl	2621a <pack_utf8_str>
		if (err_code != 0) {
   126a0:	4603      	mov	r3, r0
   126a2:	2800      	cmp	r0, #0
   126a4:	d1bb      	bne.n	1261e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   126a6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   126aa:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   126ac:	b138      	cbz	r0, 126be <connect_request_encode+0xde>
		err_code = pack_utf8_str(client->password, buf);
   126ae:	4621      	mov	r1, r4
   126b0:	f013 fdb3 	bl	2621a <pack_utf8_str>
		if (err_code != 0) {
   126b4:	4603      	mov	r3, r0
   126b6:	2800      	cmp	r0, #0
   126b8:	d1b1      	bne.n	1261e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   126ba:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   126be:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   126c2:	4622      	mov	r2, r4
   126c4:	4639      	mov	r1, r7
}
   126c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   126ca:	2010      	movs	r0, #16
   126cc:	f013 bdc0 	b.w	26250 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   126d0:	f013 fd91 	bl	261f6 <pack_uint16>
   126d4:	e7dc      	b.n	12690 <connect_request_encode+0xb0>
   126d6:	bf00      	nop
   126d8:	00027be0 	.word	0x00027be0
   126dc:	00027be8 	.word	0x00027be8

000126e0 <disconnect_encode>:

	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
   126e0:	b510      	push	{r4, lr}
   126e2:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   126e4:	e9d0 0300 	ldrd	r0, r3, [r0]
   126e8:	1a1b      	subs	r3, r3, r0
   126ea:	2b01      	cmp	r3, #1
   126ec:	d908      	bls.n	12700 <disconnect_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
   126ee:	2202      	movs	r2, #2
   126f0:	4905      	ldr	r1, [pc, #20]	; (12708 <disconnect_encode+0x28>)
   126f2:	f013 fbb8 	bl	25e66 <memcpy>
	buf->end = buf->cur + sizeof(disc_packet);

	return 0;
   126f6:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(disc_packet);
   126f8:	6823      	ldr	r3, [r4, #0]
   126fa:	3302      	adds	r3, #2
   126fc:	6063      	str	r3, [r4, #4]
}
   126fe:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   12700:	f06f 000b 	mvn.w	r0, #11
   12704:	e7fb      	b.n	126fe <disconnect_encode+0x1e>
   12706:	bf00      	nop
   12708:	0002bfcf 	.word	0x0002bfcf

0001270c <ping_request_encode>:

	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
   1270c:	b510      	push	{r4, lr}
   1270e:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   12710:	e9d0 0300 	ldrd	r0, r3, [r0]
   12714:	1a1b      	subs	r3, r3, r0
   12716:	2b01      	cmp	r3, #1
   12718:	d908      	bls.n	1272c <ping_request_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
   1271a:	2202      	movs	r2, #2
   1271c:	4905      	ldr	r1, [pc, #20]	; (12734 <ping_request_encode+0x28>)
   1271e:	f013 fba2 	bl	25e66 <memcpy>
	buf->end = buf->cur + sizeof(ping_packet);

	return 0;
   12722:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(ping_packet);
   12724:	6823      	ldr	r3, [r4, #0]
   12726:	3302      	adds	r3, #2
   12728:	6063      	str	r3, [r4, #4]
}
   1272a:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1272c:	f06f 000b 	mvn.w	r0, #11
   12730:	e7fb      	b.n	1272a <ping_request_encode+0x1e>
   12732:	bf00      	nop
   12734:	0002bfdb 	.word	0x0002bfdb

00012738 <close>:
{
   12738:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   1273a:	4c10      	ldr	r4, [pc, #64]	; (1277c <close+0x44>)
{
   1273c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   1273e:	6823      	ldr	r3, [r4, #0]
   12740:	b94b      	cbnz	r3, 12756 <close+0x1e>
   12742:	490f      	ldr	r1, [pc, #60]	; (12780 <close+0x48>)
   12744:	480f      	ldr	r0, [pc, #60]	; (12784 <close+0x4c>)
   12746:	2321      	movs	r3, #33	; 0x21
   12748:	4a0f      	ldr	r2, [pc, #60]	; (12788 <close+0x50>)
   1274a:	f013 f9f8 	bl	25b3e <printk>
   1274e:	2121      	movs	r1, #33	; 0x21
   12750:	480d      	ldr	r0, [pc, #52]	; (12788 <close+0x50>)
   12752:	f013 fa01 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   12756:	6823      	ldr	r3, [r4, #0]
   12758:	685b      	ldr	r3, [r3, #4]
   1275a:	b94b      	cbnz	r3, 12770 <close+0x38>
   1275c:	490b      	ldr	r1, [pc, #44]	; (1278c <close+0x54>)
   1275e:	4809      	ldr	r0, [pc, #36]	; (12784 <close+0x4c>)
   12760:	2322      	movs	r3, #34	; 0x22
   12762:	4a09      	ldr	r2, [pc, #36]	; (12788 <close+0x50>)
   12764:	f013 f9eb 	bl	25b3e <printk>
   12768:	2122      	movs	r1, #34	; 0x22
   1276a:	4807      	ldr	r0, [pc, #28]	; (12788 <close+0x50>)
   1276c:	f013 f9f4 	bl	25b58 <assert_post_action>
	return socket_ops->close(sock);
   12770:	6823      	ldr	r3, [r4, #0]
   12772:	4628      	mov	r0, r5
}
   12774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   12778:	685b      	ldr	r3, [r3, #4]
   1277a:	4718      	bx	r3
   1277c:	200201a8 	.word	0x200201a8
   12780:	0002ab9f 	.word	0x0002ab9f
   12784:	0002abaa 	.word	0x0002abaa
   12788:	0002ab6d 	.word	0x0002ab6d
   1278c:	0002bfdd 	.word	0x0002bfdd

00012790 <mqtt_client_tcp_connect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   12790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   12794:	4c2d      	ldr	r4, [pc, #180]	; (1284c <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   12796:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12798:	6823      	ldr	r3, [r4, #0]
{
   1279a:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1279c:	882f      	ldrh	r7, [r5, #0]
   1279e:	b94b      	cbnz	r3, 127b4 <mqtt_client_tcp_connect+0x24>
   127a0:	492b      	ldr	r1, [pc, #172]	; (12850 <mqtt_client_tcp_connect+0xc0>)
   127a2:	482c      	ldr	r0, [pc, #176]	; (12854 <mqtt_client_tcp_connect+0xc4>)
   127a4:	2319      	movs	r3, #25
   127a6:	4a2c      	ldr	r2, [pc, #176]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   127a8:	f013 f9c9 	bl	25b3e <printk>
   127ac:	2119      	movs	r1, #25
   127ae:	482a      	ldr	r0, [pc, #168]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   127b0:	f013 f9d2 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   127b4:	6823      	ldr	r3, [r4, #0]
   127b6:	681b      	ldr	r3, [r3, #0]
   127b8:	b94b      	cbnz	r3, 127ce <mqtt_client_tcp_connect+0x3e>
   127ba:	4928      	ldr	r1, [pc, #160]	; (1285c <mqtt_client_tcp_connect+0xcc>)
   127bc:	4825      	ldr	r0, [pc, #148]	; (12854 <mqtt_client_tcp_connect+0xc4>)
   127be:	231a      	movs	r3, #26
   127c0:	4a25      	ldr	r2, [pc, #148]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   127c2:	f013 f9bc 	bl	25b3e <printk>
   127c6:	211a      	movs	r1, #26
   127c8:	4823      	ldr	r0, [pc, #140]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   127ca:	f013 f9c5 	bl	25b58 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   127ce:	6823      	ldr	r3, [r4, #0]
   127d0:	4638      	mov	r0, r7
   127d2:	681b      	ldr	r3, [r3, #0]
   127d4:	2206      	movs	r2, #6
   127d6:	2101      	movs	r1, #1
   127d8:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   127da:	2800      	cmp	r0, #0
   127dc:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   127de:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   127e0:	da05      	bge.n	127ee <mqtt_client_tcp_connect+0x5e>
   127e2:	f00f fa25 	bl	21c30 <z_impl_z_errno>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   127e6:	6800      	ldr	r0, [r0, #0]
   127e8:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   127ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   127ee:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   127f0:	6b75      	ldr	r5, [r6, #52]	; 0x34
		peer_addr_size = sizeof(struct sockaddr_in);
   127f2:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   127f4:	6823      	ldr	r3, [r4, #0]
   127f6:	bf14      	ite	ne
   127f8:	f04f 0818 	movne.w	r8, #24
   127fc:	f04f 0808 	moveq.w	r8, #8
   12800:	b94b      	cbnz	r3, 12816 <mqtt_client_tcp_connect+0x86>
   12802:	4913      	ldr	r1, [pc, #76]	; (12850 <mqtt_client_tcp_connect+0xc0>)
   12804:	4813      	ldr	r0, [pc, #76]	; (12854 <mqtt_client_tcp_connect+0xc4>)
   12806:	2345      	movs	r3, #69	; 0x45
   12808:	4a13      	ldr	r2, [pc, #76]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   1280a:	f013 f998 	bl	25b3e <printk>
   1280e:	2145      	movs	r1, #69	; 0x45
   12810:	4811      	ldr	r0, [pc, #68]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   12812:	f013 f9a1 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   12816:	6823      	ldr	r3, [r4, #0]
   12818:	695b      	ldr	r3, [r3, #20]
   1281a:	b94b      	cbnz	r3, 12830 <mqtt_client_tcp_connect+0xa0>
   1281c:	4910      	ldr	r1, [pc, #64]	; (12860 <mqtt_client_tcp_connect+0xd0>)
   1281e:	480d      	ldr	r0, [pc, #52]	; (12854 <mqtt_client_tcp_connect+0xc4>)
   12820:	2346      	movs	r3, #70	; 0x46
   12822:	4a0d      	ldr	r2, [pc, #52]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   12824:	f013 f98b 	bl	25b3e <printk>
   12828:	2146      	movs	r1, #70	; 0x46
   1282a:	480b      	ldr	r0, [pc, #44]	; (12858 <mqtt_client_tcp_connect+0xc8>)
   1282c:	f013 f994 	bl	25b58 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   12830:	6823      	ldr	r3, [r4, #0]
   12832:	4642      	mov	r2, r8
   12834:	695b      	ldr	r3, [r3, #20]
   12836:	4629      	mov	r1, r5
   12838:	4638      	mov	r0, r7
   1283a:	4798      	blx	r3
	if (ret < 0) {
   1283c:	2800      	cmp	r0, #0
   1283e:	da03      	bge.n	12848 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   12840:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   12842:	f7ff ff79 	bl	12738 <close>
   12846:	e7cc      	b.n	127e2 <mqtt_client_tcp_connect+0x52>
	return 0;
   12848:	2000      	movs	r0, #0
   1284a:	e7ce      	b.n	127ea <mqtt_client_tcp_connect+0x5a>
   1284c:	200201a8 	.word	0x200201a8
   12850:	0002ab9f 	.word	0x0002ab9f
   12854:	0002abaa 	.word	0x0002abaa
   12858:	0002ab6d 	.word	0x0002ab6d
   1285c:	0002bfef 	.word	0x0002bfef
   12860:	0002c002 	.word	0x0002c002

00012864 <mqtt_client_tcp_write>:
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   12864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12868:	4680      	mov	r8, r0
   1286a:	4689      	mov	r9, r1
   1286c:	4617      	mov	r7, r2
	u32_t offset = 0U;
   1286e:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   12870:	4d1d      	ldr	r5, [pc, #116]	; (128e8 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   12872:	42bc      	cmp	r4, r7
   12874:	d301      	bcc.n	1287a <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   12876:	2000      	movs	r0, #0
   12878:	e031      	b.n	128de <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   1287a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1287e:	eb09 0a04 	add.w	sl, r9, r4
   12882:	461e      	mov	r6, r3
   12884:	4b19      	ldr	r3, [pc, #100]	; (128ec <mqtt_client_tcp_write+0x88>)
   12886:	eba7 0b04 	sub.w	fp, r7, r4
   1288a:	681b      	ldr	r3, [r3, #0]
   1288c:	b94b      	cbnz	r3, 128a2 <mqtt_client_tcp_write+0x3e>
   1288e:	4918      	ldr	r1, [pc, #96]	; (128f0 <mqtt_client_tcp_write+0x8c>)
   12890:	4818      	ldr	r0, [pc, #96]	; (128f4 <mqtt_client_tcp_write+0x90>)
   12892:	237e      	movs	r3, #126	; 0x7e
   12894:	462a      	mov	r2, r5
   12896:	f013 f952 	bl	25b3e <printk>
   1289a:	217e      	movs	r1, #126	; 0x7e
   1289c:	4628      	mov	r0, r5
   1289e:	f013 f95b 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   128a2:	4b12      	ldr	r3, [pc, #72]	; (128ec <mqtt_client_tcp_write+0x88>)
   128a4:	681b      	ldr	r3, [r3, #0]
   128a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   128a8:	b94b      	cbnz	r3, 128be <mqtt_client_tcp_write+0x5a>
   128aa:	4913      	ldr	r1, [pc, #76]	; (128f8 <mqtt_client_tcp_write+0x94>)
   128ac:	4811      	ldr	r0, [pc, #68]	; (128f4 <mqtt_client_tcp_write+0x90>)
   128ae:	237f      	movs	r3, #127	; 0x7f
   128b0:	462a      	mov	r2, r5
   128b2:	f013 f944 	bl	25b3e <printk>
   128b6:	217f      	movs	r1, #127	; 0x7f
   128b8:	4628      	mov	r0, r5
   128ba:	f013 f94d 	bl	25b58 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   128be:	4b0b      	ldr	r3, [pc, #44]	; (128ec <mqtt_client_tcp_write+0x88>)
   128c0:	4630      	mov	r0, r6
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	465a      	mov	r2, fp
   128c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   128c8:	4651      	mov	r1, sl
   128ca:	469c      	mov	ip, r3
   128cc:	2300      	movs	r3, #0
   128ce:	4666      	mov	r6, ip
   128d0:	47b0      	blx	r6
		if (ret < 0) {
   128d2:	2800      	cmp	r0, #0
   128d4:	da05      	bge.n	128e2 <mqtt_client_tcp_write+0x7e>
   128d6:	f00f f9ab 	bl	21c30 <z_impl_z_errno>
			return -errno;
   128da:	6800      	ldr	r0, [r0, #0]
   128dc:	4240      	negs	r0, r0
}
   128de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   128e2:	4404      	add	r4, r0
   128e4:	e7c5      	b.n	12872 <mqtt_client_tcp_write+0xe>
   128e6:	bf00      	nop
   128e8:	0002ab6d 	.word	0x0002ab6d
   128ec:	200201a8 	.word	0x200201a8
   128f0:	0002ab9f 	.word	0x0002ab9f
   128f4:	0002abaa 	.word	0x0002abaa
   128f8:	0002c027 	.word	0x0002c027

000128fc <mqtt_client_tcp_read>:
 * @retval Number of bytes read or an error code indicating reason for failure.
 *         0 if connection was closed.
 */
int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   128fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   12900:	4c18      	ldr	r4, [pc, #96]	; (12964 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   12902:	2b00      	cmp	r3, #0
   12904:	6823      	ldr	r3, [r4, #0]
{
   12906:	460e      	mov	r6, r1
   12908:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   1290a:	bf14      	ite	ne
   1290c:	f04f 0800 	movne.w	r8, #0
   12910:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   12914:	6a85      	ldr	r5, [r0, #40]	; 0x28
   12916:	b94b      	cbnz	r3, 1292c <mqtt_client_tcp_read+0x30>
   12918:	4913      	ldr	r1, [pc, #76]	; (12968 <mqtt_client_tcp_read+0x6c>)
   1291a:	4814      	ldr	r0, [pc, #80]	; (1296c <mqtt_client_tcp_read+0x70>)
   1291c:	2369      	movs	r3, #105	; 0x69
   1291e:	4a14      	ldr	r2, [pc, #80]	; (12970 <mqtt_client_tcp_read+0x74>)
   12920:	f013 f90d 	bl	25b3e <printk>
   12924:	2169      	movs	r1, #105	; 0x69
   12926:	4812      	ldr	r0, [pc, #72]	; (12970 <mqtt_client_tcp_read+0x74>)
   12928:	f013 f916 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   1292c:	6823      	ldr	r3, [r4, #0]
   1292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12930:	b94b      	cbnz	r3, 12946 <mqtt_client_tcp_read+0x4a>
   12932:	4910      	ldr	r1, [pc, #64]	; (12974 <mqtt_client_tcp_read+0x78>)
   12934:	480d      	ldr	r0, [pc, #52]	; (1296c <mqtt_client_tcp_read+0x70>)
   12936:	236a      	movs	r3, #106	; 0x6a
   12938:	4a0d      	ldr	r2, [pc, #52]	; (12970 <mqtt_client_tcp_read+0x74>)
   1293a:	f013 f900 	bl	25b3e <printk>
   1293e:	216a      	movs	r1, #106	; 0x6a
   12940:	480b      	ldr	r0, [pc, #44]	; (12970 <mqtt_client_tcp_read+0x74>)
   12942:	f013 f909 	bl	25b58 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   12946:	6823      	ldr	r3, [r4, #0]
   12948:	463a      	mov	r2, r7
   1294a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1294c:	4631      	mov	r1, r6
   1294e:	4643      	mov	r3, r8
   12950:	4628      	mov	r0, r5
   12952:	47a0      	blx	r4
	if (ret < 0) {
   12954:	2800      	cmp	r0, #0
   12956:	da03      	bge.n	12960 <mqtt_client_tcp_read+0x64>
   12958:	f00f f96a 	bl	21c30 <z_impl_z_errno>
		return -errno;
   1295c:	6800      	ldr	r0, [r0, #0]
   1295e:	4240      	negs	r0, r0
	}

	return ret;
}
   12960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12964:	200201a8 	.word	0x200201a8
   12968:	0002ab9f 	.word	0x0002ab9f
   1296c:	0002abaa 	.word	0x0002abaa
   12970:	0002ab6d 	.word	0x0002ab6d
   12974:	0002c016 	.word	0x0002c016

00012978 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_SOCKS */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   12978:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1297c:	4a01      	ldr	r2, [pc, #4]	; (12984 <mqtt_transport_connect+0xc>)
   1297e:	011b      	lsls	r3, r3, #4
   12980:	58d3      	ldr	r3, [r2, r3]
   12982:	4718      	bx	r3
   12984:	00027bf0 	.word	0x00027bf0

00012988 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   12988:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   1298a:	4b04      	ldr	r3, [pc, #16]	; (1299c <mqtt_transport_write+0x14>)
   1298c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   12990:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   12994:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   12996:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   1299a:	4718      	bx	r3
   1299c:	00027bf0 	.word	0x00027bf0

000129a0 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   129a0:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   129a2:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   129a6:	4c03      	ldr	r4, [pc, #12]	; (129b4 <mqtt_transport_read+0x14>)
   129a8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   129ac:	68a4      	ldr	r4, [r4, #8]
   129ae:	46a4      	mov	ip, r4
							 shall_block);
}
   129b0:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   129b2:	4760      	bx	ip
   129b4:	00027bf0 	.word	0x00027bf0

000129b8 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   129b8:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   129ba:	b510      	push	{r4, lr}
   129bc:	b142      	cbz	r2, 129d0 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   129be:	4b0f      	ldr	r3, [pc, #60]	; (129fc <mqtt_mutex_unlock+0x44>)
   129c0:	6882      	ldr	r2, [r0, #8]
   129c2:	689b      	ldr	r3, [r3, #8]
   129c4:	429a      	cmp	r2, r3
   129c6:	d115      	bne.n	129f4 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   129c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   129cc:	f00f bda2 	b.w	22514 <z_impl_k_mutex_unlock>
		return -EINVAL;
   129d0:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   129d4:	2343      	movs	r3, #67	; 0x43
   129d6:	4a0a      	ldr	r2, [pc, #40]	; (12a00 <mqtt_mutex_unlock+0x48>)
   129d8:	490a      	ldr	r1, [pc, #40]	; (12a04 <mqtt_mutex_unlock+0x4c>)
   129da:	480b      	ldr	r0, [pc, #44]	; (12a08 <mqtt_mutex_unlock+0x50>)
   129dc:	f013 f8af 	bl	25b3e <printk>
   129e0:	4621      	mov	r1, r4
   129e2:	480a      	ldr	r0, [pc, #40]	; (12a0c <mqtt_mutex_unlock+0x54>)
   129e4:	f013 f8ab 	bl	25b3e <printk>
}
   129e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   129ec:	2143      	movs	r1, #67	; 0x43
   129ee:	4804      	ldr	r0, [pc, #16]	; (12a00 <mqtt_mutex_unlock+0x48>)
   129f0:	f013 b8b2 	b.w	25b58 <assert_post_action>
		return -EPERM;
   129f4:	f04f 34ff 	mov.w	r4, #4294967295
   129f8:	e7ec      	b.n	129d4 <mqtt_mutex_unlock+0x1c>
   129fa:	bf00      	nop
   129fc:	20022120 	.word	0x20022120
   12a00:	0002c058 	.word	0x0002c058
   12a04:	0002c08b 	.word	0x0002c08b
   12a08:	0002abaa 	.word	0x0002abaa
   12a0c:	0002c094 	.word	0x0002c094

00012a10 <mqtt_mutex_lock>:
{
   12a10:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   12a12:	f04f 31ff 	mov.w	r1, #4294967295
   12a16:	f00f fcc9 	bl	223ac <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   12a1a:	4604      	mov	r4, r0
   12a1c:	b178      	cbz	r0, 12a3e <mqtt_mutex_lock+0x2e>
   12a1e:	2339      	movs	r3, #57	; 0x39
   12a20:	4a07      	ldr	r2, [pc, #28]	; (12a40 <mqtt_mutex_lock+0x30>)
   12a22:	4908      	ldr	r1, [pc, #32]	; (12a44 <mqtt_mutex_lock+0x34>)
   12a24:	4808      	ldr	r0, [pc, #32]	; (12a48 <mqtt_mutex_lock+0x38>)
   12a26:	f013 f88a 	bl	25b3e <printk>
   12a2a:	4621      	mov	r1, r4
   12a2c:	4807      	ldr	r0, [pc, #28]	; (12a4c <mqtt_mutex_lock+0x3c>)
   12a2e:	f013 f886 	bl	25b3e <printk>
}
   12a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   12a36:	2139      	movs	r1, #57	; 0x39
   12a38:	4801      	ldr	r0, [pc, #4]	; (12a40 <mqtt_mutex_lock+0x30>)
   12a3a:	f013 b88d 	b.w	25b58 <assert_post_action>
}
   12a3e:	bd10      	pop	{r4, pc}
   12a40:	0002c058 	.word	0x0002c058
   12a44:	0002c08b 	.word	0x0002c08b
   12a48:	0002abaa 	.word	0x0002abaa
   12a4c:	0002c038 	.word	0x0002c038

00012a50 <mqtt_live>:

	return 0;
}

int mqtt_live(struct mqtt_client *client)
{
   12a50:	b538      	push	{r3, r4, r5, lr}
	u32_t elapsed_time;

	NULL_PARAM_CHECK(client);
   12a52:	4604      	mov	r4, r0
   12a54:	b1d0      	cbz	r0, 12a8c <mqtt_live+0x3c>

	mqtt_mutex_lock(client);
   12a56:	f7ff ffdb 	bl	12a10 <mqtt_mutex_lock>

	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   12a5a:	69a3      	ldr	r3, [r4, #24]
   12a5c:	071b      	lsls	r3, r3, #28
   12a5e:	d508      	bpl.n	12a72 <mqtt_live+0x22>
		client_disconnect(client, 0);
   12a60:	2100      	movs	r1, #0
   12a62:	4620      	mov	r0, r4
   12a64:	f013 fda8 	bl	265b8 <client_disconnect>
		    (elapsed_time >= (MQTT_KEEPALIVE * 1000))) {
			(void)mqtt_ping(client);
		}
	}

	mqtt_mutex_unlock(client);
   12a68:	4620      	mov	r0, r4
   12a6a:	f7ff ffa5 	bl	129b8 <mqtt_mutex_unlock>

	return 0;
   12a6e:	2000      	movs	r0, #0
}
   12a70:	bd38      	pop	{r3, r4, r5, pc}
		elapsed_time = mqtt_elapsed_time_in_ms_get(
   12a72:	6965      	ldr	r5, [r4, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   12a74:	f014 fe65 	bl	27742 <z_impl_k_uptime_get_32>
		if ((MQTT_KEEPALIVE > 0) &&
   12a78:	4b06      	ldr	r3, [pc, #24]	; (12a94 <mqtt_live+0x44>)
   12a7a:	1b5b      	subs	r3, r3, r5
   12a7c:	4418      	add	r0, r3
   12a7e:	4b06      	ldr	r3, [pc, #24]	; (12a98 <mqtt_live+0x48>)
   12a80:	4298      	cmp	r0, r3
   12a82:	d8f1      	bhi.n	12a68 <mqtt_live+0x18>
			(void)mqtt_ping(client);
   12a84:	4620      	mov	r0, r4
   12a86:	f013 feca 	bl	2681e <mqtt_ping>
   12a8a:	e7ed      	b.n	12a68 <mqtt_live+0x18>
	NULL_PARAM_CHECK(client);
   12a8c:	f06f 0015 	mvn.w	r0, #21
   12a90:	e7ee      	b.n	12a70 <mqtt_live+0x20>
   12a92:	bf00      	nop
   12a94:	ffff15a0 	.word	0xffff15a0
   12a98:	7fff159f 	.word	0x7fff159f

00012a9c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   12a9c:	b570      	push	{r4, r5, r6, lr}
   12a9e:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12aa0:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   12aa2:	460d      	mov	r5, r1
   12aa4:	b961      	cbnz	r1, 12ac0 <gpio_nrfx_manage_callback+0x24>
   12aa6:	4922      	ldr	r1, [pc, #136]	; (12b30 <gpio_nrfx_manage_callback+0x94>)
   12aa8:	231c      	movs	r3, #28
   12aaa:	4a22      	ldr	r2, [pc, #136]	; (12b34 <gpio_nrfx_manage_callback+0x98>)
   12aac:	4822      	ldr	r0, [pc, #136]	; (12b38 <gpio_nrfx_manage_callback+0x9c>)
   12aae:	f013 f846 	bl	25b3e <printk>
   12ab2:	4822      	ldr	r0, [pc, #136]	; (12b3c <gpio_nrfx_manage_callback+0xa0>)
   12ab4:	f013 f843 	bl	25b3e <printk>
   12ab8:	211c      	movs	r1, #28
   12aba:	481e      	ldr	r0, [pc, #120]	; (12b34 <gpio_nrfx_manage_callback+0x98>)
   12abc:	f013 f84c 	bl	25b58 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   12ac0:	686b      	ldr	r3, [r5, #4]
   12ac2:	b963      	cbnz	r3, 12ade <gpio_nrfx_manage_callback+0x42>
   12ac4:	491e      	ldr	r1, [pc, #120]	; (12b40 <gpio_nrfx_manage_callback+0xa4>)
   12ac6:	231d      	movs	r3, #29
   12ac8:	4a1a      	ldr	r2, [pc, #104]	; (12b34 <gpio_nrfx_manage_callback+0x98>)
   12aca:	481b      	ldr	r0, [pc, #108]	; (12b38 <gpio_nrfx_manage_callback+0x9c>)
   12acc:	f013 f837 	bl	25b3e <printk>
   12ad0:	481c      	ldr	r0, [pc, #112]	; (12b44 <gpio_nrfx_manage_callback+0xa8>)
   12ad2:	f013 f834 	bl	25b3e <printk>
   12ad6:	211d      	movs	r1, #29
   12ad8:	4816      	ldr	r0, [pc, #88]	; (12b34 <gpio_nrfx_manage_callback+0x98>)
   12ada:	f013 f83d 	bl	25b58 <assert_post_action>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   12ade:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   12ae0:	b15b      	cbz	r3, 12afa <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12ae2:	2200      	movs	r2, #0
   12ae4:	429d      	cmp	r5, r3
   12ae6:	d113      	bne.n	12b10 <gpio_nrfx_manage_callback+0x74>
   12ae8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   12aea:	b95a      	cbnz	r2, 12b04 <gpio_nrfx_manage_callback+0x68>
   12aec:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   12aee:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   12af0:	4295      	cmp	r5, r2
   12af2:	d100      	bne.n	12af6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   12af4:	6063      	str	r3, [r4, #4]
	parent->next = child;
   12af6:	2300      	movs	r3, #0
   12af8:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   12afa:	b976      	cbnz	r6, 12b1a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   12afc:	2000      	movs	r0, #0
				     callback, set);
}
   12afe:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b00:	460b      	mov	r3, r1
   12b02:	e7ef      	b.n	12ae4 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   12b04:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   12b06:	6863      	ldr	r3, [r4, #4]
   12b08:	429d      	cmp	r5, r3
	list->tail = node;
   12b0a:	bf08      	it	eq
   12b0c:	6062      	streq	r2, [r4, #4]
   12b0e:	e7f2      	b.n	12af6 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
   12b10:	6819      	ldr	r1, [r3, #0]
   12b12:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b14:	2900      	cmp	r1, #0
   12b16:	d1f3      	bne.n	12b00 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   12b18:	b13e      	cbz	r6, 12b2a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   12b1a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   12b1c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   12b1e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   12b20:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   12b22:	2800      	cmp	r0, #0
   12b24:	d1ea      	bne.n	12afc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   12b26:	6065      	str	r5, [r4, #4]
   12b28:	e7e9      	b.n	12afe <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   12b2a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12b2e:	e7e6      	b.n	12afe <gpio_nrfx_manage_callback+0x62>
   12b30:	0002c0e5 	.word	0x0002c0e5
   12b34:	0002c0b6 	.word	0x0002c0b6
   12b38:	0002abaa 	.word	0x0002abaa
   12b3c:	0002c0ee 	.word	0x0002c0ee
   12b40:	0002c0fd 	.word	0x0002c0fd
   12b44:	0002c10f 	.word	0x0002c10f

00012b48 <nrf_gpio_pin_port_decode.isra.6.part.7>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   12b48:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   12b4a:	4c07      	ldr	r4, [pc, #28]	; (12b68 <nrf_gpio_pin_port_decode.isra.6.part.7+0x20>)
   12b4c:	4907      	ldr	r1, [pc, #28]	; (12b6c <nrf_gpio_pin_port_decode.isra.6.part.7+0x24>)
   12b4e:	4622      	mov	r2, r4
   12b50:	4807      	ldr	r0, [pc, #28]	; (12b70 <nrf_gpio_pin_port_decode.isra.6.part.7+0x28>)
   12b52:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   12b56:	f012 fff2 	bl	25b3e <printk>
   12b5a:	4620      	mov	r0, r4
}
   12b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   12b60:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   12b64:	f012 bff8 	b.w	25b58 <assert_post_action>
   12b68:	0002b148 	.word	0x0002b148
   12b6c:	0002b180 	.word	0x0002b180
   12b70:	0002abaa 	.word	0x0002abaa

00012b74 <nrf_gpio_cfg_sense_set>:
   12b74:	281f      	cmp	r0, #31
{
   12b76:	b538      	push	{r3, r4, r5, lr}
   12b78:	4604      	mov	r4, r0
   12b7a:	460d      	mov	r5, r1
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   12b7c:	d901      	bls.n	12b82 <nrf_gpio_cfg_sense_set+0xe>
   12b7e:	f7ff ffe3 	bl	12b48 <nrf_gpio_pin_port_decode.isra.6.part.7>
   12b82:	4808      	ldr	r0, [pc, #32]	; (12ba4 <nrf_gpio_cfg_sense_set+0x30>)
   12b84:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   12b88:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   12b8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   12b90:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12b94:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   12b98:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   12b9c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   12ba0:	bd38      	pop	{r3, r4, r5, pc}
   12ba2:	bf00      	nop
   12ba4:	40842500 	.word	0x40842500

00012ba8 <gpiote_pin_int_cfg>:
{
   12ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   12bac:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12bae:	f001 041f 	and.w	r4, r1, #31
   12bb2:	689b      	ldr	r3, [r3, #8]
{
   12bb4:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12bb6:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   12bb8:	4e48      	ldr	r6, [pc, #288]	; (12cdc <gpiote_pin_int_cfg+0x134>)
   12bba:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12bbe:	2300      	movs	r3, #0
   12bc0:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   12bc4:	6887      	ldr	r7, [r0, #8]
   12bc6:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12bc8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   12bcc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   12bd0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   12bd4:	428c      	cmp	r4, r1
   12bd6:	d166      	bne.n	12ca6 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
   12bd8:	fa22 f103 	lsr.w	r1, r2, r3
   12bdc:	07c9      	lsls	r1, r1, #31
   12bde:	d562      	bpl.n	12ca6 <gpiote_pin_int_cfg+0xfe>
   12be0:	009a      	lsls	r2, r3, #2
   12be2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12be6:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   12bea:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   12bee:	f021 0101 	bic.w	r1, r1, #1
   12bf2:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   12bf6:	2201      	movs	r2, #1
   12bf8:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   12bfc:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   12c00:	4620      	mov	r0, r4
   12c02:	2100      	movs	r1, #0
   12c04:	f7ff ffb6 	bl	12b74 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   12c08:	68b8      	ldr	r0, [r7, #8]
   12c0a:	40e8      	lsrs	r0, r5
   12c0c:	f010 0001 	ands.w	r0, r0, #1
   12c10:	d047      	beq.n	12ca2 <gpiote_pin_int_cfg+0xfa>
   12c12:	68f8      	ldr	r0, [r7, #12]
   12c14:	40e8      	lsrs	r0, r5
   12c16:	f010 0001 	ands.w	r0, r0, #1
   12c1a:	d042      	beq.n	12ca2 <gpiote_pin_int_cfg+0xfa>
		if (data->trig_edge & BIT(pin)) {
   12c1c:	6978      	ldr	r0, [r7, #20]
   12c1e:	40e8      	lsrs	r0, r5
   12c20:	f010 0801 	ands.w	r8, r0, #1
   12c24:	d04b      	beq.n	12cbe <gpiote_pin_int_cfg+0x116>
			if (data->double_edge & BIT(pin)) {
   12c26:	69bb      	ldr	r3, [r7, #24]
   12c28:	40eb      	lsrs	r3, r5
   12c2a:	07db      	lsls	r3, r3, #31
   12c2c:	d43f      	bmi.n	12cae <gpiote_pin_int_cfg+0x106>
			} else if (((data->active_level & BIT(pin)) != 0U)
   12c2e:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   12c30:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   12c32:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   12c34:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   12c38:	f003 0301 	and.w	r3, r3, #1
   12c3c:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   12c40:	42ab      	cmp	r3, r5
   12c42:	bf0c      	ite	eq
   12c44:	2502      	moveq	r5, #2
   12c46:	2501      	movne	r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   12c48:	2200      	movs	r2, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   12c4a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   12c4e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   12c52:	f010 0003 	ands.w	r0, r0, #3
   12c56:	d12c      	bne.n	12cb2 <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
   12c58:	0093      	lsls	r3, r2, #2
   12c5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12c5e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12c62:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12c66:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12c68:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   12c6c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   12c70:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12c74:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   12c78:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   12c7c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   12c80:	430d      	orrs	r5, r1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   12c82:	4917      	ldr	r1, [pc, #92]	; (12ce0 <gpiote_pin_int_cfg+0x138>)
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12c84:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   12c88:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   12c8c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   12c90:	f041 0101 	orr.w	r1, r1, #1
   12c94:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   12c98:	2301      	movs	r3, #1
   12c9a:	fa03 f202 	lsl.w	r2, r3, r2
    NRF_GPIOTE->INTENSET = mask;
   12c9e:	f8c6 2304 	str.w	r2, [r6, #772]	; 0x304
}
   12ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12ca6:	3301      	adds	r3, #1
   12ca8:	2b08      	cmp	r3, #8
   12caa:	d18d      	bne.n	12bc8 <gpiote_pin_int_cfg+0x20>
   12cac:	e7a8      	b.n	12c00 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   12cae:	2503      	movs	r5, #3
   12cb0:	e7ca      	b.n	12c48 <gpiote_pin_int_cfg+0xa0>
   12cb2:	3201      	adds	r2, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   12cb4:	2a08      	cmp	r2, #8
   12cb6:	d1c8      	bne.n	12c4a <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   12cb8:	f06f 0012 	mvn.w	r0, #18
   12cbc:	e7f1      	b.n	12ca2 <gpiote_pin_int_cfg+0xfa>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   12cbe:	693b      	ldr	r3, [r7, #16]
   12cc0:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   12cc2:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   12cc4:	4053      	eors	r3, r2
   12cc6:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   12cca:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   12cce:	bf0c      	ite	eq
   12cd0:	2103      	moveq	r1, #3
   12cd2:	2102      	movne	r1, #2
   12cd4:	f7ff ff4e 	bl	12b74 <nrf_gpio_cfg_sense_set>
	int res = 0;
   12cd8:	4640      	mov	r0, r8
   12cda:	e7e2      	b.n	12ca2 <gpiote_pin_int_cfg+0xfa>
   12cdc:	40031000 	.word	0x40031000
   12ce0:	40031100 	.word	0x40031100

00012ce4 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   12ce4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   12ce6:	4b09      	ldr	r3, [pc, #36]	; (12d0c <gpio_nrfx_init+0x28>)
   12ce8:	781a      	ldrb	r2, [r3, #0]
   12cea:	b96a      	cbnz	r2, 12d08 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   12cec:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   12cee:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   12cf0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   12cf2:	2105      	movs	r1, #5
   12cf4:	f7fe fb04 	bl	11300 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
   12cf8:	2031      	movs	r0, #49	; 0x31
   12cfa:	f7fe fadd 	bl	112b8 <z_arch_irq_enable>
   12cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12d02:	4b03      	ldr	r3, [pc, #12]	; (12d10 <gpio_nrfx_init+0x2c>)
   12d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   12d08:	2000      	movs	r0, #0
   12d0a:	bd08      	pop	{r3, pc}
   12d0c:	20023cfe 	.word	0x20023cfe
   12d10:	40031000 	.word	0x40031000

00012d14 <gpio_nrfx_config>:
{
   12d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d18:	4607      	mov	r7, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   12d1a:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   12d1c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   12d20:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   12d24:	461d      	mov	r5, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   12d26:	d04a      	beq.n	12dbe <gpio_nrfx_config+0xaa>
   12d28:	dc2d      	bgt.n	12d86 <gpio_nrfx_config+0x72>
   12d2a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   12d2e:	d03e      	beq.n	12dae <gpio_nrfx_config+0x9a>
   12d30:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   12d34:	d03f      	beq.n	12db6 <gpio_nrfx_config+0xa2>
   12d36:	bb68      	cbnz	r0, 12d94 <gpio_nrfx_config+0x80>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12d38:	f405 7640 	and.w	r6, r5, #768	; 0x300
   12d3c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   12d40:	d03f      	beq.n	12dc2 <gpio_nrfx_config+0xae>
		pull = NRF_GPIO_PIN_PULLUP;
   12d42:	f5a6 7600 	sub.w	r6, r6, #512	; 0x200
   12d46:	4273      	negs	r3, r6
   12d48:	4173      	adcs	r3, r6
	if (access_op == GPIO_ACCESS_BY_PORT) {
   12d4a:	2901      	cmp	r1, #1
		from_pin = pin;
   12d4c:	bf19      	ittee	ne
   12d4e:	fa5f f982 	uxtbne.w	r9, r2
		to_pin   = pin;
   12d52:	46c8      	movne	r8, r9
		to_pin   = 31U;
   12d54:	f04f 081f 	moveq.w	r8, #31
		from_pin = 0U;
   12d58:	f04f 0900 	moveq.w	r9, #0
   12d5c:	f04f 0a01 	mov.w	sl, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   12d60:	f005 0c01 	and.w	ip, r5, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   12d64:	ea4f 064c 	mov.w	r6, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   12d68:	ea46 060c 	orr.w	r6, r6, ip
   12d6c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
   12d70:	ea40 0683 	orr.w	r6, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   12d74:	f005 0302 	and.w	r3, r5, #2
   12d78:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   12d7a:	45c8      	cmp	r8, r9
   12d7c:	d223      	bcs.n	12dc6 <gpio_nrfx_config+0xb2>
	return 0;
   12d7e:	2000      	movs	r0, #0
}
   12d80:	b003      	add	sp, #12
   12d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   12d86:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   12d8a:	d016      	beq.n	12dba <gpio_nrfx_config+0xa6>
   12d8c:	dc05      	bgt.n	12d9a <gpio_nrfx_config+0x86>
   12d8e:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   12d92:	d00e      	beq.n	12db2 <gpio_nrfx_config+0x9e>
		return -EINVAL;
   12d94:	f06f 0015 	mvn.w	r0, #21
   12d98:	e7f2      	b.n	12d80 <gpio_nrfx_config+0x6c>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   12d9a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   12d9e:	d004      	beq.n	12daa <gpio_nrfx_config+0x96>
   12da0:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   12da4:	d1f6      	bne.n	12d94 <gpio_nrfx_config+0x80>
		drive = NRF_GPIO_PIN_H0D1;
   12da6:	2007      	movs	r0, #7
		break;
   12da8:	e7c6      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
   12daa:	2006      	movs	r0, #6
		break;
   12dac:	e7c4      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
   12dae:	2001      	movs	r0, #1
		break;
   12db0:	e7c2      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   12db2:	2003      	movs	r0, #3
		break;
   12db4:	e7c0      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
   12db6:	2004      	movs	r0, #4
		break;
   12db8:	e7be      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
   12dba:	2005      	movs	r0, #5
		break;
   12dbc:	e7bc      	b.n	12d38 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
   12dbe:	2002      	movs	r0, #2
   12dc0:	e7ba      	b.n	12d38 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
   12dc2:	2303      	movs	r3, #3
   12dc4:	e7c1      	b.n	12d4a <gpio_nrfx_config+0x36>
	return port->config->config_info;
   12dc6:	683b      	ldr	r3, [r7, #0]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   12dc8:	689b      	ldr	r3, [r3, #8]
   12dca:	7919      	ldrb	r1, [r3, #4]
   12dcc:	f009 031f 	and.w	r3, r9, #31
   12dd0:	ea43 1b41 	orr.w	fp, r3, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   12dd4:	f1bb 0f1f 	cmp.w	fp, #31
   12dd8:	dd01      	ble.n	12dde <gpio_nrfx_config+0xca>
   12dda:	f7ff feb5 	bl	12b48 <nrf_gpio_pin_port_decode.isra.6.part.7>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12dde:	4a19      	ldr	r2, [pc, #100]	; (12e44 <gpio_nrfx_config+0x130>)
   12de0:	f10b 0380 	add.w	r3, fp, #128	; 0x80
   12de4:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   12de8:	9a01      	ldr	r2, [sp, #4]
   12dea:	fa0a f309 	lsl.w	r3, sl, r9
   12dee:	68a1      	ldr	r1, [r4, #8]
   12df0:	b32a      	cbz	r2, 12e3e <gpio_nrfx_config+0x12a>
   12df2:	4319      	orrs	r1, r3
   12df4:	60a1      	str	r1, [r4, #8]
   12df6:	6961      	ldr	r1, [r4, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   12df8:	06a8      	lsls	r0, r5, #26
   12dfa:	bf4c      	ite	mi
   12dfc:	4319      	orrmi	r1, r3
   12dfe:	4399      	bicpl	r1, r3
   12e00:	6161      	str	r1, [r4, #20]
   12e02:	69a1      	ldr	r1, [r4, #24]
		WRITE_BIT(data->double_edge, curr_pin,
   12e04:	066a      	lsls	r2, r5, #25
   12e06:	bf4c      	ite	mi
   12e08:	4319      	orrmi	r1, r3
   12e0a:	4399      	bicpl	r1, r3
   12e0c:	61a1      	str	r1, [r4, #24]
   12e0e:	6921      	ldr	r1, [r4, #16]
		WRITE_BIT(data->active_level, curr_pin,
   12e10:	0768      	lsls	r0, r5, #29
   12e12:	bf4c      	ite	mi
   12e14:	4319      	orrmi	r1, r3
   12e16:	4399      	bicpl	r1, r3
   12e18:	6121      	str	r1, [r4, #16]
   12e1a:	69e1      	ldr	r1, [r4, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   12e1c:	062a      	lsls	r2, r5, #24
   12e1e:	bf4c      	ite	mi
   12e20:	430b      	orrmi	r3, r1
   12e22:	ea21 0303 	bicpl.w	r3, r1, r3
   12e26:	61e3      	str	r3, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   12e28:	4649      	mov	r1, r9
   12e2a:	4638      	mov	r0, r7
   12e2c:	f7ff febc 	bl	12ba8 <gpiote_pin_int_cfg>
		if (res != 0) {
   12e30:	2800      	cmp	r0, #0
   12e32:	d1a5      	bne.n	12d80 <gpio_nrfx_config+0x6c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   12e34:	f109 0201 	add.w	r2, r9, #1
   12e38:	fa5f f982 	uxtb.w	r9, r2
   12e3c:	e79d      	b.n	12d7a <gpio_nrfx_config+0x66>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   12e3e:	ea21 0103 	bic.w	r1, r1, r3
   12e42:	e7d7      	b.n	12df4 <gpio_nrfx_config+0xe0>
   12e44:	40842500 	.word	0x40842500

00012e48 <gpiote_event_handler>:
{
   12e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   12e4c:	4f52      	ldr	r7, [pc, #328]	; (12f98 <gpiote_event_handler+0x150>)
   12e4e:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   12e50:	2e01      	cmp	r6, #1
   12e52:	d174      	bne.n	12f3e <gpiote_event_handler+0xf6>
	u32_t bit = 1U << pin;
   12e54:	46b0      	mov	r8, r6
	u32_t pin = 0U;
   12e56:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   12e5a:	4a50      	ldr	r2, [pc, #320]	; (12f9c <gpiote_event_handler+0x154>)
   12e5c:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   12e5e:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   12e60:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   12e62:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   12e66:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   12e6a:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   12e6c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   12e70:	430a      	orrs	r2, r1
   12e72:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   12e76:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   12e7a:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   12e7c:	6912      	ldr	r2, [r2, #16]
   12e7e:	405c      	eors	r4, r3
   12e80:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   12e82:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   12e86:	2d00      	cmp	r5, #0
   12e88:	d146      	bne.n	12f18 <gpiote_event_handler+0xd0>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   12e8a:	603d      	str	r5, [r7, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   12e8c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   12e8e:	2701      	movs	r7, #1
   12e90:	469e      	mov	lr, r3
    return (NRF_GPIOTE->INTENSET & mask);
   12e92:	4d43      	ldr	r5, [pc, #268]	; (12fa0 <gpiote_event_handler+0x158>)
   12e94:	f8df c114 	ldr.w	ip, [pc, #276]	; 12fac <gpiote_event_handler+0x164>
   12e98:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   12e9c:	fa07 f103 	lsl.w	r1, r7, r3
   12ea0:	4211      	tst	r1, r2
   12ea2:	d00f      	beq.n	12ec4 <gpiote_event_handler+0x7c>
   12ea4:	eb03 020c 	add.w	r2, r3, ip
   12ea8:	0092      	lsls	r2, r2, #2
   12eaa:	6811      	ldr	r1, [r2, #0]
   12eac:	2901      	cmp	r1, #1
   12eae:	d109      	bne.n	12ec4 <gpiote_event_handler+0x7c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12eb0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   12eb4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   12eb8:	f8c2 e000 	str.w	lr, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   12ebc:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   12ec0:	4081      	lsls	r1, r0
   12ec2:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12ec4:	3301      	adds	r3, #1
   12ec6:	2b08      	cmp	r3, #8
   12ec8:	d1e6      	bne.n	12e98 <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   12eca:	2c00      	cmp	r4, #0
   12ecc:	d039      	beq.n	12f42 <gpiote_event_handler+0xfa>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   12ece:	4833      	ldr	r0, [pc, #204]	; (12f9c <gpiote_event_handler+0x154>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   12ed0:	6883      	ldr	r3, [r0, #8]
   12ed2:	681d      	ldr	r5, [r3, #0]
   12ed4:	b3ad      	cbz	r5, 12f42 <gpiote_event_handler+0xfa>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   12ed6:	4680      	mov	r8, r0
	return node->next;
   12ed8:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   12eda:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 12fb0 <gpiote_event_handler+0x168>
   12ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 12fb4 <gpiote_event_handler+0x16c>
		if (cb->pin_mask & pins) {
   12ee2:	68ab      	ldr	r3, [r5, #8]
   12ee4:	421c      	tst	r4, r3
   12ee6:	d013      	beq.n	12f10 <gpiote_event_handler+0xc8>
			__ASSERT(cb->handler, "No callback handler!");
   12ee8:	686b      	ldr	r3, [r5, #4]
   12eea:	b963      	cbnz	r3, 12f06 <gpiote_event_handler+0xbe>
   12eec:	4651      	mov	r1, sl
   12eee:	233d      	movs	r3, #61	; 0x3d
   12ef0:	464a      	mov	r2, r9
   12ef2:	482c      	ldr	r0, [pc, #176]	; (12fa4 <gpiote_event_handler+0x15c>)
   12ef4:	f012 fe23 	bl	25b3e <printk>
   12ef8:	482b      	ldr	r0, [pc, #172]	; (12fa8 <gpiote_event_handler+0x160>)
   12efa:	f012 fe20 	bl	25b3e <printk>
   12efe:	213d      	movs	r1, #61	; 0x3d
   12f00:	4648      	mov	r0, r9
   12f02:	f012 fe29 	bl	25b58 <assert_post_action>
			cb->handler(port, cb, pins);
   12f06:	686b      	ldr	r3, [r5, #4]
   12f08:	4622      	mov	r2, r4
   12f0a:	4629      	mov	r1, r5
   12f0c:	4640      	mov	r0, r8
   12f0e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   12f10:	b1bf      	cbz	r7, 12f42 <gpiote_event_handler+0xfa>
   12f12:	463d      	mov	r5, r7
   12f14:	683f      	ldr	r7, [r7, #0]
   12f16:	e7e4      	b.n	12ee2 <gpiote_event_handler+0x9a>
		if (level_pins & bit) {
   12f18:	ea15 0f08 	tst.w	r5, r8
   12f1c:	d00a      	beq.n	12f34 <gpiote_event_handler+0xec>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12f1e:	f899 3004 	ldrb.w	r3, [r9, #4]
   12f22:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   12f26:	2100      	movs	r1, #0
   12f28:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   12f2c:	f7ff fe22 	bl	12b74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   12f30:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   12f34:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   12f38:	ea4f 0848 	mov.w	r8, r8, lsl #1
   12f3c:	e7a3      	b.n	12e86 <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   12f3e:	2400      	movs	r4, #0
   12f40:	e7a4      	b.n	12e8c <gpiote_event_handler+0x44>
	if (port_event) {
   12f42:	2e01      	cmp	r6, #1
   12f44:	d10e      	bne.n	12f64 <gpiote_event_handler+0x11c>
	u32_t pin = 0U;
   12f46:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   12f48:	4b14      	ldr	r3, [pc, #80]	; (12f9c <gpiote_event_handler+0x154>)
   12f4a:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   12f4c:	681b      	ldr	r3, [r3, #0]
   12f4e:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   12f52:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   12f56:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   12f58:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   12f5c:	4313      	orrs	r3, r2
   12f5e:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   12f62:	b90c      	cbnz	r4, 12f68 <gpiote_event_handler+0x120>
}
   12f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   12f68:	4226      	tst	r6, r4
   12f6a:	d012      	beq.n	12f92 <gpiote_event_handler+0x14a>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   12f6c:	692b      	ldr	r3, [r5, #16]
   12f6e:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12f70:	f898 c004 	ldrb.w	ip, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   12f74:	4053      	eors	r3, r2
   12f76:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   12f78:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12f7c:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   12f80:	bf0c      	ite	eq
   12f82:	2103      	moveq	r1, #3
   12f84:	2102      	movne	r1, #2
   12f86:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   12f8a:	f7ff fdf3 	bl	12b74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   12f8e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   12f92:	3701      	adds	r7, #1
		bit <<= 1;
   12f94:	0076      	lsls	r6, r6, #1
   12f96:	e7e4      	b.n	12f62 <gpiote_event_handler+0x11a>
   12f98:	4003117c 	.word	0x4003117c
   12f9c:	2002bad0 	.word	0x2002bad0
   12fa0:	40031000 	.word	0x40031000
   12fa4:	0002abaa 	.word	0x0002abaa
   12fa8:	0002c10f 	.word	0x0002c10f
   12fac:	1000c440 	.word	0x1000c440
   12fb0:	0002c0b6 	.word	0x0002c0b6
   12fb4:	0002b190 	.word	0x0002b190

00012fb8 <event_handler>:
static void event_handler(nrfx_twim_evt_t const *p_event, void *p_context)
{
	struct device *dev = p_context;
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);

	switch (p_event->type) {
   12fb8:	7802      	ldrb	r2, [r0, #0]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   12fba:	688b      	ldr	r3, [r1, #8]
	switch (p_event->type) {
   12fbc:	2a01      	cmp	r2, #1
   12fbe:	d00a      	beq.n	12fd6 <event_handler+0x1e>
   12fc0:	d303      	bcc.n	12fca <event_handler+0x12>
   12fc2:	2a02      	cmp	r2, #2
   12fc4:	d009      	beq.n	12fda <event_handler+0x22>
		break;
	case NRFX_TWIM_EVT_DATA_NACK:
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
		break;
	default:
		dev_data->res = NRFX_ERROR_INTERNAL;
   12fc6:	4a06      	ldr	r2, [pc, #24]	; (12fe0 <event_handler+0x28>)
   12fc8:	e000      	b.n	12fcc <event_handler+0x14>
		dev_data->res = NRFX_SUCCESS;
   12fca:	4a06      	ldr	r2, [pc, #24]	; (12fe4 <event_handler+0x2c>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   12fcc:	631a      	str	r2, [r3, #48]	; 0x30

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   12fce:	f103 0018 	add.w	r0, r3, #24
   12fd2:	f010 bd69 	b.w	23aa8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   12fd6:	4a04      	ldr	r2, [pc, #16]	; (12fe8 <event_handler+0x30>)
   12fd8:	e7f8      	b.n	12fcc <event_handler+0x14>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   12fda:	4a04      	ldr	r2, [pc, #16]	; (12fec <event_handler+0x34>)
   12fdc:	e7f6      	b.n	12fcc <event_handler+0x14>
   12fde:	bf00      	nop
   12fe0:	0bad0001 	.word	0x0bad0001
   12fe4:	0bad0000 	.word	0x0bad0000
   12fe8:	0bae0001 	.word	0x0bae0001
   12fec:	0bae0002 	.word	0x0bae0002

00012ff0 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   12ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12ff2:	4604      	mov	r4, r0
   12ff4:	2200      	movs	r2, #0
   12ff6:	2101      	movs	r1, #1
   12ff8:	200a      	movs	r0, #10
   12ffa:	f7fe f981 	bl	11300 <z_irq_priority_set>
   12ffe:	f04f 0c00 	mov.w	ip, #0
   13002:	2008      	movs	r0, #8
   13004:	2109      	movs	r1, #9
   13006:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   1300a:	e88d 100b 	stmia.w	sp, {r0, r1, r3, ip}
	return dev->config->config_info;
   1300e:	6820      	ldr	r0, [r4, #0]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim, config,
   13010:	4623      	mov	r3, r4
   13012:	4a06      	ldr	r2, [pc, #24]	; (1302c <twim_2_init+0x3c>)
   13014:	4669      	mov	r1, sp
   13016:	6880      	ldr	r0, [r0, #8]
   13018:	f7fd f874 	bl	10104 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1301c:	4b04      	ldr	r3, [pc, #16]	; (13030 <twim_2_init+0x40>)
   1301e:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
   13020:	bf14      	ite	ne
   13022:	f06f 000f 	mvnne.w	r0, #15
   13026:	2000      	moveq	r0, #0
   13028:	b004      	add	sp, #16
   1302a:	bd10      	pop	{r4, pc}
   1302c:	00012fb9 	.word	0x00012fb9
   13030:	0bad0000 	.word	0x0bad0000

00013034 <i2c_nrfx_twim_transfer>:
{
   13034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13038:	4604      	mov	r4, r0
   1303a:	b087      	sub	sp, #28
   1303c:	460d      	mov	r5, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1303e:	6880      	ldr	r0, [r0, #8]
   13040:	f04f 31ff 	mov.w	r1, #4294967295
   13044:	4691      	mov	r9, r2
   13046:	469a      	mov	sl, r3
   13048:	f010 fd76 	bl	23b38 <z_impl_k_sem_take>
	return dev->config->config_info;
   1304c:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
   1304e:	2700      	movs	r7, #0
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   13050:	6898      	ldr	r0, [r3, #8]
   13052:	f7fd f8c9 	bl	101e8 <nrfx_twim_enable>
		if (res != NRFX_SUCCESS) {
   13056:	f8df 8098 	ldr.w	r8, [pc, #152]	; 130f0 <i2c_nrfx_twim_transfer+0xbc>
   1305a:	6823      	ldr	r3, [r4, #0]
	for (size_t i = 0; i < num_msgs; i++) {
   1305c:	45b9      	cmp	r9, r7
   1305e:	f8d3 b008 	ldr.w	fp, [r3, #8]
   13062:	d801      	bhi.n	13068 <i2c_nrfx_twim_transfer+0x34>
	int ret = 0;
   13064:	2500      	movs	r5, #0
   13066:	e022      	b.n	130ae <i2c_nrfx_twim_transfer+0x7a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   13068:	7a2e      	ldrb	r6, [r5, #8]
   1306a:	f016 0108 	ands.w	r1, r6, #8
   1306e:	d136      	bne.n	130de <i2c_nrfx_twim_transfer+0xaa>
		nrfx_twim_xfer_desc_t cur_xfer = {
   13070:	2212      	movs	r2, #18
   13072:	f10d 0006 	add.w	r0, sp, #6
   13076:	f012 ff23 	bl	25ec0 <memset>
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
   1307a:	f006 0301 	and.w	r3, r6, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
   1307e:	f88d 3004 	strb.w	r3, [sp, #4]
   13082:	686b      	ldr	r3, [r5, #4]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   13084:	f016 0f02 	tst.w	r6, #2
		nrfx_twim_xfer_desc_t cur_xfer = {
   13088:	9302      	str	r3, [sp, #8]
   1308a:	682b      	ldr	r3, [r5, #0]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1308c:	bf0c      	ite	eq
   1308e:	2220      	moveq	r2, #32
   13090:	2200      	movne	r2, #0
   13092:	a901      	add	r1, sp, #4
   13094:	4658      	mov	r0, fp
		nrfx_twim_xfer_desc_t cur_xfer = {
   13096:	f88d a005 	strb.w	sl, [sp, #5]
   1309a:	9304      	str	r3, [sp, #16]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1309c:	f7fd f904 	bl	102a8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   130a0:	4540      	cmp	r0, r8
   130a2:	d00f      	beq.n	130c4 <i2c_nrfx_twim_transfer+0x90>
			if (res == NRFX_ERROR_BUSY) {
   130a4:	4b11      	ldr	r3, [pc, #68]	; (130ec <i2c_nrfx_twim_transfer+0xb8>)
   130a6:	4298      	cmp	r0, r3
   130a8:	d01c      	beq.n	130e4 <i2c_nrfx_twim_transfer+0xb0>
				ret = -EIO;
   130aa:	f06f 0504 	mvn.w	r5, #4
	return dev->config->config_info;
   130ae:	6823      	ldr	r3, [r4, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   130b0:	6898      	ldr	r0, [r3, #8]
   130b2:	f7fd f8c3 	bl	1023c <nrfx_twim_disable>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   130b6:	68a0      	ldr	r0, [r4, #8]
   130b8:	f010 fcf6 	bl	23aa8 <z_impl_k_sem_give>
}
   130bc:	4628      	mov	r0, r5
   130be:	b007      	add	sp, #28
   130c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&(get_dev_data(dev)->completion_sync), K_FOREVER);
   130c4:	68a0      	ldr	r0, [r4, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   130c6:	f04f 31ff 	mov.w	r1, #4294967295
   130ca:	3018      	adds	r0, #24
   130cc:	f010 fd34 	bl	23b38 <z_impl_k_sem_take>
		res = get_dev_data(dev)->res;
   130d0:	68a3      	ldr	r3, [r4, #8]
   130d2:	350c      	adds	r5, #12
   130d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   130d6:	4543      	cmp	r3, r8
   130d8:	d1e7      	bne.n	130aa <i2c_nrfx_twim_transfer+0x76>
	for (size_t i = 0; i < num_msgs; i++) {
   130da:	3701      	adds	r7, #1
   130dc:	e7bd      	b.n	1305a <i2c_nrfx_twim_transfer+0x26>
			ret = -ENOTSUP;
   130de:	f06f 0522 	mvn.w	r5, #34	; 0x22
   130e2:	e7e4      	b.n	130ae <i2c_nrfx_twim_transfer+0x7a>
				ret = -EBUSY;
   130e4:	f06f 050f 	mvn.w	r5, #15
   130e8:	e7e1      	b.n	130ae <i2c_nrfx_twim_transfer+0x7a>
   130ea:	bf00      	nop
   130ec:	0bad000b 	.word	0x0bad000b
   130f0:	0bad0000 	.word	0x0bad0000

000130f4 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   130f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   130f6:	4604      	mov	r4, r0
   130f8:	2200      	movs	r2, #0
   130fa:	2101      	movs	r1, #1
   130fc:	200b      	movs	r0, #11
   130fe:	f7fe f8ff 	bl	11300 <z_irq_priority_set>
   13102:	2210      	movs	r2, #16
   13104:	2100      	movs	r1, #0
   13106:	4668      	mov	r0, sp
   13108:	f012 feda 	bl	25ec0 <memset>
   1310c:	231e      	movs	r3, #30
   1310e:	f88d 3001 	strb.w	r3, [sp, #1]
   13112:	2302      	movs	r3, #2
   13114:	f88d 3002 	strb.w	r3, [sp, #2]
   13118:	23ff      	movs	r3, #255	; 0xff
   1311a:	f88d 3003 	strb.w	r3, [sp, #3]
   1311e:	f88d 3006 	strb.w	r3, [sp, #6]
   13122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	return dev->config->config_info;
   13126:	6820      	ldr	r0, [r4, #0]
SPI_NRFX_SPIM_DEVICE(3);
   13128:	9302      	str	r3, [sp, #8]
	nrfx_err_t result = nrfx_spim_init(&get_dev_config(dev)->spim,
   1312a:	4a09      	ldr	r2, [pc, #36]	; (13150 <spi_3_init+0x5c>)
   1312c:	4623      	mov	r3, r4
   1312e:	4669      	mov	r1, sp
   13130:	6880      	ldr	r0, [r0, #8]
   13132:	f7fc fde7 	bl	fd04 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   13136:	4b07      	ldr	r3, [pc, #28]	; (13154 <spi_3_init+0x60>)
   13138:	4298      	cmp	r0, r3
   1313a:	d105      	bne.n	13148 <spi_3_init+0x54>
	spi_context_unlock_unconditionally(&get_dev_data(dev)->ctx);
   1313c:	68a0      	ldr	r0, [r4, #8]
   1313e:	f013 fc7e 	bl	26a3e <spi_context_unlock_unconditionally>
	return 0;
   13142:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
   13144:	b004      	add	sp, #16
   13146:	bd10      	pop	{r4, pc}
		return -EBUSY;
   13148:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
   1314c:	e7fa      	b.n	13144 <spi_3_init+0x50>
   1314e:	bf00      	nop
   13150:	00026a7f 	.word	0x00026a7f
   13154:	0bad0000 	.word	0x0bad0000

00013158 <transfer_next_chunk>:
{
   13158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1315a:	6885      	ldr	r5, [r0, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
}

static inline size_t spi_context_longest_current_buf(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1315c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   1315e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   13160:	b98a      	cbnz	r2, 13186 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   13162:	2b00      	cmp	r3, #0
   13164:	d133      	bne.n	131ce <transfer_next_chunk+0x76>
	int error = 0;
   13166:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   13168:	2200      	movs	r2, #0
   1316a:	4628      	mov	r0, r5
   1316c:	4611      	mov	r1, r2
   1316e:	f013 fc3c 	bl	269ea <_spi_context_cs_control.isra.7>
	ctx->sync_status = status;
   13172:	636c      	str	r4, [r5, #52]	; 0x34
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   13174:	f105 001c 	add.w	r0, r5, #28
   13178:	f010 fc96 	bl	23aa8 <z_impl_k_sem_give>
	dev_data->busy = false;
   1317c:	2300      	movs	r3, #0
   1317e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
   13182:	b004      	add	sp, #16
   13184:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   13186:	b323      	cbz	r3, 131d2 <transfer_next_chunk+0x7a>
   13188:	4293      	cmp	r3, r2
   1318a:	4619      	mov	r1, r3
   1318c:	bf28      	it	cs
   1318e:	4611      	movcs	r1, r2
	return dev->config->config_info;
   13190:	6800      	ldr	r0, [r0, #0]
		const u8_t *tx_buf = ctx->tx_buf;
   13192:	6cac      	ldr	r4, [r5, #72]	; 0x48
	return dev->config->config_info;
   13194:	6880      	ldr	r0, [r0, #8]
		xfer.p_tx_buffer = tx_buf;
   13196:	9400      	str	r4, [sp, #0]
   13198:	6886      	ldr	r6, [r0, #8]
   1319a:	42b1      	cmp	r1, r6
   1319c:	bf28      	it	cs
   1319e:	4631      	movcs	r1, r6
		dev_data->chunk_len = chunk_len;
   131a0:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
   131a2:	b1c4      	cbz	r4, 131d6 <transfer_next_chunk+0x7e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   131a4:	2a00      	cmp	r2, #0
   131a6:	bf18      	it	ne
   131a8:	460a      	movne	r2, r1
   131aa:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   131ac:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   131ae:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   131b0:	b19a      	cbz	r2, 131da <transfer_next_chunk+0x82>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   131b2:	2b00      	cmp	r3, #0
   131b4:	bf18      	it	ne
   131b6:	460b      	movne	r3, r1
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   131b8:	2200      	movs	r2, #0
   131ba:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   131bc:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   131be:	f7fc fe71 	bl	fea4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   131c2:	4b07      	ldr	r3, [pc, #28]	; (131e0 <transfer_next_chunk+0x88>)
   131c4:	4298      	cmp	r0, r3
   131c6:	d0dc      	beq.n	13182 <transfer_next_chunk+0x2a>
   131c8:	f06f 0404 	mvn.w	r4, #4
   131cc:	e7cc      	b.n	13168 <transfer_next_chunk+0x10>
   131ce:	4619      	mov	r1, r3
   131d0:	e7de      	b.n	13190 <transfer_next_chunk+0x38>
	} else if (!ctx->rx_len) {
   131d2:	4611      	mov	r1, r2
   131d4:	e7dc      	b.n	13190 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   131d6:	4622      	mov	r2, r4
   131d8:	e7e7      	b.n	131aa <transfer_next_chunk+0x52>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   131da:	4613      	mov	r3, r2
   131dc:	e7ec      	b.n	131b8 <transfer_next_chunk+0x60>
   131de:	bf00      	nop
   131e0:	0bad0000 	.word	0x0bad0000

000131e4 <spi_nrfx_transceive>:
{
   131e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   131e8:	4607      	mov	r7, r0
   131ea:	4688      	mov	r8, r1
	k_sem_take(&ctx->lock, K_FOREVER);
   131ec:	6880      	ldr	r0, [r0, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   131ee:	f04f 31ff 	mov.w	r1, #4294967295
   131f2:	3004      	adds	r0, #4
   131f4:	461d      	mov	r5, r3
   131f6:	4616      	mov	r6, r2
   131f8:	f010 fc9e 	bl	23b38 <z_impl_k_sem_take>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   131fc:	68bc      	ldr	r4, [r7, #8]
	if (spi_context_configured(ctx, spi_cfg)) {
   131fe:	6823      	ldr	r3, [r4, #0]
   13200:	4598      	cmp	r8, r3
   13202:	d060      	beq.n	132c6 <spi_nrfx_transceive+0xe2>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   13204:	f641 0109 	movw	r1, #6153	; 0x1809
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   13208:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1320c:	4019      	ands	r1, r3
   1320e:	f040 80aa 	bne.w	13366 <spi_nrfx_transceive+0x182>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   13212:	f3c3 1345 	ubfx	r3, r3, #5, #6
   13216:	2b08      	cmp	r3, #8
   13218:	f040 80a5 	bne.w	13366 <spi_nrfx_transceive+0x182>
	if (spi_cfg->frequency < 125000) {
   1321c:	f8d8 2000 	ldr.w	r2, [r8]
   13220:	4b52      	ldr	r3, [pc, #328]	; (1336c <spi_nrfx_transceive+0x188>)
   13222:	429a      	cmp	r2, r3
   13224:	f240 809f 	bls.w	13366 <spi_nrfx_transceive+0x182>
	return dev->config->config_info;
   13228:	683b      	ldr	r3, [r7, #0]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1322a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1322e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	ctx->config = spi_cfg;
   13232:	f8c4 8000 	str.w	r8, [r4]
   13236:	b18a      	cbz	r2, 1325c <spi_nrfx_transceive+0x78>
   13238:	6810      	ldr	r0, [r2, #0]
   1323a:	b178      	cbz	r0, 1325c <spi_nrfx_transceive+0x78>
	return api->config(port, access_op, pin, flags);
   1323c:	6843      	ldr	r3, [r0, #4]
   1323e:	6852      	ldr	r2, [r2, #4]
   13240:	f8d3 a000 	ldr.w	sl, [r3]
   13244:	2301      	movs	r3, #1
   13246:	47d0      	blx	sl
		gpio_pin_write(ctx->config->cs->gpio_dev,
   13248:	6822      	ldr	r2, [r4, #0]
   1324a:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   1324c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		gpio_pin_write(ctx->config->cs->gpio_dev,
   13250:	e9d3 0100 	ldrd	r0, r1, [r3]
   13254:	43d2      	mvns	r2, r2
   13256:	0fd2      	lsrs	r2, r2, #31
   13258:	f013 fbbd 	bl	269d6 <gpio_pin_write>
	nrf_spim_configure(spim->p_reg,
   1325c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   13260:	f8d9 1000 	ldr.w	r1, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   13264:	0798      	lsls	r0, r3, #30
   13266:	f003 0204 	and.w	r2, r3, #4
   1326a:	d559      	bpl.n	13320 <spi_nrfx_transceive+0x13c>
			return NRF_SPIM_MODE_3;
   1326c:	2a00      	cmp	r2, #0
   1326e:	bf0c      	ite	eq
   13270:	2202      	moveq	r2, #2
   13272:	2203      	movne	r2, #3
    switch (spi_mode)
   13274:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
   13276:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1327a:	d055      	beq.n	13328 <spi_nrfx_transceive+0x144>
   1327c:	2a03      	cmp	r2, #3
   1327e:	d056      	beq.n	1332e <spi_nrfx_transceive+0x14a>
   13280:	2a01      	cmp	r2, #1
   13282:	d101      	bne.n	13288 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   13284:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   13288:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
   1328c:	4a38      	ldr	r2, [pc, #224]	; (13370 <spi_nrfx_transceive+0x18c>)
	nrf_spim_frequency_set(spim->p_reg,
   1328e:	f8d8 3000 	ldr.w	r3, [r8]
	if (frequency < 250000) {
   13292:	4293      	cmp	r3, r2
   13294:	d94e      	bls.n	13334 <spi_nrfx_transceive+0x150>
	} else if (frequency < 500000) {
   13296:	4a37      	ldr	r2, [pc, #220]	; (13374 <spi_nrfx_transceive+0x190>)
   13298:	4293      	cmp	r3, r2
   1329a:	d94e      	bls.n	1333a <spi_nrfx_transceive+0x156>
	} else if (frequency < 1000000) {
   1329c:	4a36      	ldr	r2, [pc, #216]	; (13378 <spi_nrfx_transceive+0x194>)
   1329e:	4293      	cmp	r3, r2
   132a0:	d94e      	bls.n	13340 <spi_nrfx_transceive+0x15c>
	} else if (frequency < 2000000) {
   132a2:	4a36      	ldr	r2, [pc, #216]	; (1337c <spi_nrfx_transceive+0x198>)
   132a4:	4293      	cmp	r3, r2
   132a6:	d94e      	bls.n	13346 <spi_nrfx_transceive+0x162>
	} else if (frequency < 4000000) {
   132a8:	4a35      	ldr	r2, [pc, #212]	; (13380 <spi_nrfx_transceive+0x19c>)
   132aa:	4293      	cmp	r3, r2
   132ac:	d94e      	bls.n	1334c <spi_nrfx_transceive+0x168>
		return NRF_SPIM_FREQ_4M;
   132ae:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
   132b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
   132b6:	4293      	cmp	r3, r2
   132b8:	bf8c      	ite	hi
   132ba:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
   132be:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   132c2:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
   132c6:	2301      	movs	r3, #1
   132c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	if (tx_bufs) {
   132cc:	2e00      	cmp	r6, #0
   132ce:	d040      	beq.n	13352 <spi_nrfx_transceive+0x16e>
		ctx->current_tx = tx_bufs->buffers;
   132d0:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   132d2:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
   132d4:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->tx_count = tx_bufs->count;
   132d6:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   132d8:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   132da:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   132dc:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->tx_len = ctx->current_tx->len / dfs;
   132de:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (rx_bufs) {
   132e0:	2d00      	cmp	r5, #0
   132e2:	d03b      	beq.n	1335c <spi_nrfx_transceive+0x178>
		ctx->current_rx = rx_bufs->buffers;
   132e4:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   132e6:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
   132e8:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->rx_count = rx_bufs->count;
   132ea:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   132ec:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   132ee:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   132f0:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->rx_len = ctx->current_rx->len / dfs;
   132f2:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   132f4:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   132f6:	2101      	movs	r1, #1
	ctx->sync_status = 0;
   132f8:	6362      	str	r2, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   132fa:	4620      	mov	r0, r4
   132fc:	f013 fb75 	bl	269ea <_spi_context_cs_control.isra.7>
		transfer_next_chunk(dev);
   13300:	4638      	mov	r0, r7
   13302:	f7ff ff29 	bl	13158 <transfer_next_chunk>
   13306:	f04f 31ff 	mov.w	r1, #4294967295
   1330a:	f104 001c 	add.w	r0, r4, #28
   1330e:	f010 fc13 	bl	23b38 <z_impl_k_sem_take>
	status = ctx->sync_status;
   13312:	6b65      	ldr	r5, [r4, #52]	; 0x34
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   13314:	1d20      	adds	r0, r4, #4
   13316:	f010 fbc7 	bl	23aa8 <z_impl_k_sem_give>
}
   1331a:	4628      	mov	r0, r5
   1331c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return NRF_SPIM_MODE_3;
   13320:	3200      	adds	r2, #0
   13322:	bf18      	it	ne
   13324:	2201      	movne	r2, #1
   13326:	e7a5      	b.n	13274 <spi_nrfx_transceive+0x90>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   13328:	f043 0304 	orr.w	r3, r3, #4
   1332c:	e7ac      	b.n	13288 <spi_nrfx_transceive+0xa4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1332e:	f043 0306 	orr.w	r3, r3, #6
   13332:	e7a9      	b.n	13288 <spi_nrfx_transceive+0xa4>
		return NRF_SPIM_FREQ_125K;
   13334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   13338:	e7c3      	b.n	132c2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_250K;
   1333a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1333e:	e7c0      	b.n	132c2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_500K;
   13340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13344:	e7bd      	b.n	132c2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_1M;
   13346:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1334a:	e7ba      	b.n	132c2 <spi_nrfx_transceive+0xde>
		return NRF_SPIM_FREQ_2M;
   1334c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   13350:	e7b7      	b.n	132c2 <spi_nrfx_transceive+0xde>
		ctx->tx_count = 0;
   13352:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
		ctx->tx_len = 0;
   13356:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
   1335a:	e7c1      	b.n	132e0 <spi_nrfx_transceive+0xfc>
		ctx->rx_count = 0;
   1335c:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
		ctx->rx_len = 0;
   13360:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
   13364:	e7c6      	b.n	132f4 <spi_nrfx_transceive+0x110>
		return -EINVAL;
   13366:	f06f 0515 	mvn.w	r5, #21
   1336a:	e7d3      	b.n	13314 <spi_nrfx_transceive+0x130>
   1336c:	0001e847 	.word	0x0001e847
   13370:	0003d08f 	.word	0x0003d08f
   13374:	0007a11f 	.word	0x0007a11f
   13378:	000f423f 	.word	0x000f423f
   1337c:	001e847f 	.word	0x001e847f
   13380:	003d08ff 	.word	0x003d08ff

00013384 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   13384:	b570      	push	{r4, r5, r6, lr}
	nrf_uarte_parity_t parity;
	nrf_uarte_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   13386:	794b      	ldrb	r3, [r1, #5]
   13388:	2b01      	cmp	r3, #1
   1338a:	d123      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1338c:	798b      	ldrb	r3, [r1, #6]
   1338e:	2b03      	cmp	r3, #3
   13390:	d120      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13392:	79cc      	ldrb	r4, [r1, #7]
   13394:	b12c      	cbz	r4, 133a2 <uarte_nrfx_configure+0x1e>
   13396:	2c01      	cmp	r4, #1
   13398:	d11c      	bne.n	133d4 <uarte_nrfx_configure+0x50>
	return dev->config->config_info;
   1339a:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1339c:	689b      	ldr	r3, [r3, #8]
   1339e:	791b      	ldrb	r3, [r3, #4]
   133a0:	b1c3      	cbz	r3, 133d4 <uarte_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   133a2:	790a      	ldrb	r2, [r1, #4]
   133a4:	b112      	cbz	r2, 133ac <uarte_nrfx_configure+0x28>
   133a6:	2a02      	cmp	r2, #2
   133a8:	d114      	bne.n	133d4 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   133aa:	220e      	movs	r2, #14
	switch (baudrate) {
   133ac:	f647 2612 	movw	r6, #31250	; 0x7a12
	return dev->config->config_info;
   133b0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   133b2:	689b      	ldr	r3, [r3, #8]
   133b4:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
   133b6:	680b      	ldr	r3, [r1, #0]
   133b8:	42b3      	cmp	r3, r6
   133ba:	d06b      	beq.n	13494 <uarte_nrfx_configure+0x110>
   133bc:	d827      	bhi.n	1340e <uarte_nrfx_configure+0x8a>
   133be:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   133c2:	d061      	beq.n	13488 <uarte_nrfx_configure+0x104>
   133c4:	d812      	bhi.n	133ec <uarte_nrfx_configure+0x68>
   133c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   133ca:	d04d      	beq.n	13468 <uarte_nrfx_configure+0xe4>
   133cc:	d805      	bhi.n	133da <uarte_nrfx_configure+0x56>
   133ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   133d2:	d074      	beq.n	134be <uarte_nrfx_configure+0x13a>
		return -ENOTSUP;
   133d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   133d8:	e052      	b.n	13480 <uarte_nrfx_configure+0xfc>
	switch (baudrate) {
   133da:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   133de:	d050      	beq.n	13482 <uarte_nrfx_configure+0xfe>
   133e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   133e4:	d1f6      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   133e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   133ea:	e03f      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   133ec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   133f0:	d04c      	beq.n	1348c <uarte_nrfx_configure+0x108>
   133f2:	d804      	bhi.n	133fe <uarte_nrfx_configure+0x7a>
   133f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   133f8:	d1ec      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   133fa:	4b32      	ldr	r3, [pc, #200]	; (134c4 <uarte_nrfx_configure+0x140>)
   133fc:	e036      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   133fe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13402:	d045      	beq.n	13490 <uarte_nrfx_configure+0x10c>
   13404:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13408:	d1e4      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1340a:	4b2f      	ldr	r3, [pc, #188]	; (134c8 <uarte_nrfx_configure+0x144>)
   1340c:	e02e      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1340e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   13412:	d048      	beq.n	134a6 <uarte_nrfx_configure+0x122>
   13414:	d812      	bhi.n	1343c <uarte_nrfx_configure+0xb8>
   13416:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1341a:	42b3      	cmp	r3, r6
   1341c:	d03d      	beq.n	1349a <uarte_nrfx_configure+0x116>
   1341e:	d805      	bhi.n	1342c <uarte_nrfx_configure+0xa8>
   13420:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   13424:	d1d6      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13426:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1342a:	e01f      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1342c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13430:	d036      	beq.n	134a0 <uarte_nrfx_configure+0x11c>
   13432:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13436:	d1cd      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13438:	4b24      	ldr	r3, [pc, #144]	; (134cc <uarte_nrfx_configure+0x148>)
   1343a:	e017      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   1343c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   13440:	d037      	beq.n	134b2 <uarte_nrfx_configure+0x12e>
   13442:	d808      	bhi.n	13456 <uarte_nrfx_configure+0xd2>
   13444:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   13448:	d030      	beq.n	134ac <uarte_nrfx_configure+0x128>
   1344a:	4e21      	ldr	r6, [pc, #132]	; (134d0 <uarte_nrfx_configure+0x14c>)
   1344c:	42b3      	cmp	r3, r6
   1344e:	d1c1      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13450:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13454:	e00a      	b.n	1346c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   13456:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1345a:	d02d      	beq.n	134b8 <uarte_nrfx_configure+0x134>
   1345c:	4e1d      	ldr	r6, [pc, #116]	; (134d4 <uarte_nrfx_configure+0x150>)
   1345e:	42b3      	cmp	r3, r6
   13460:	d1b8      	bne.n	133d4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13466:	e001      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   13468:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1346c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   13470:	6883      	ldr	r3, [r0, #8]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13472:	4322      	orrs	r2, r4
   13474:	c903      	ldmia	r1, {r0, r1}
   13476:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1347a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1347e:	2000      	movs	r0, #0
}
   13480:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13482:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13486:	e7f1      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   13488:	4b13      	ldr	r3, [pc, #76]	; (134d8 <uarte_nrfx_configure+0x154>)
   1348a:	e7ef      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1348c:	4b13      	ldr	r3, [pc, #76]	; (134dc <uarte_nrfx_configure+0x158>)
   1348e:	e7ed      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13490:	4b13      	ldr	r3, [pc, #76]	; (134e0 <uarte_nrfx_configure+0x15c>)
   13492:	e7eb      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13494:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13498:	e7e8      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1349a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1349e:	e7e5      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   134a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   134a4:	e7e2      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   134a6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   134aa:	e7df      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   134ac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   134b0:	e7dc      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   134b2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   134b6:	e7d9      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   134b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   134bc:	e7d6      	b.n	1346c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   134be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   134c2:	e7d3      	b.n	1346c <uarte_nrfx_configure+0xe8>
   134c4:	00275000 	.word	0x00275000
   134c8:	0075c000 	.word	0x0075c000
   134cc:	013a9000 	.word	0x013a9000
   134d0:	0003d090 	.word	0x0003d090
   134d4:	000f4240 	.word	0x000f4240
   134d8:	0013b000 	.word	0x0013b000
   134dc:	003af000 	.word	0x003af000
   134e0:	004ea000 	.word	0x004ea000

000134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>:
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   134e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   134e6:	4c07      	ldr	r4, [pc, #28]	; (13504 <nrf_gpio_pin_port_decode.isra.3.part.4+0x20>)
   134e8:	4907      	ldr	r1, [pc, #28]	; (13508 <nrf_gpio_pin_port_decode.isra.3.part.4+0x24>)
   134ea:	4622      	mov	r2, r4
   134ec:	4807      	ldr	r0, [pc, #28]	; (1350c <nrf_gpio_pin_port_decode.isra.3.part.4+0x28>)
   134ee:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   134f2:	f012 fb24 	bl	25b3e <printk>
   134f6:	4620      	mov	r0, r4
}
   134f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   134fc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   13500:	f012 bb2a 	b.w	25b58 <assert_post_action>
   13504:	0002b148 	.word	0x0002b148
   13508:	0002b180 	.word	0x0002b180
   1350c:	0002abaa 	.word	0x0002abaa

00013510 <uarte_instance_init.constprop.5>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   13510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return dev->config->config_info;
   13514:	6803      	ldr	r3, [r0, #0]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   13516:	680e      	ldr	r6, [r1, #0]
	return config->uarte_regs;
   13518:	689b      	ldr	r3, [r3, #8]
   1351a:	2e1f      	cmp	r6, #31
static int uarte_instance_init(struct device *dev,
   1351c:	4607      	mov	r7, r0
   1351e:	460d      	mov	r5, r1
	return config->uarte_regs;
   13520:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   13522:	f8d0 9008 	ldr.w	r9, [r0, #8]
   13526:	d901      	bls.n	1352c <uarte_instance_init.constprop.5+0x1c>
   13528:	f7ff ffdc 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1352c:	2301      	movs	r3, #1
   1352e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   13530:	4e35      	ldr	r6, [pc, #212]	; (13608 <uarte_instance_init.constprop.5+0xf8>)
   13532:	60b3      	str	r3, [r6, #8]
	nrf_gpio_cfg_output(config->pseltxd);
   13534:	f8d5 8000 	ldr.w	r8, [r5]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   13538:	f1b8 0f1f 	cmp.w	r8, #31
   1353c:	d901      	bls.n	13542 <uarte_instance_init.constprop.5+0x32>
   1353e:	f7ff ffd1 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13542:	2303      	movs	r3, #3
   13544:	f108 0880 	add.w	r8, r8, #128	; 0x80
   13548:	f846 3028 	str.w	r3, [r6, r8, lsl #2]

	nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
   1354c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   13550:	f1b8 0f1f 	cmp.w	r8, #31
   13554:	d901      	bls.n	1355a <uarte_instance_init.constprop.5+0x4a>
   13556:	f7ff ffc5 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1355a:	2300      	movs	r3, #0
   1355c:	f108 0880 	add.w	r8, r8, #128	; 0x80
   13560:	f846 3028 	str.w	r3, [r6, r8, lsl #2]

	nrf_uarte_txrx_pins_set(uarte,
   13564:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   13568:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1356c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
				config->pseltxd,
				config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   13570:	68ab      	ldr	r3, [r5, #8]
   13572:	3301      	adds	r3, #1
   13574:	d02b      	beq.n	135ce <uarte_instance_init.constprop.5+0xbe>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   13576:	f8d5 800c 	ldr.w	r8, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   1357a:	f1b8 3fff 	cmp.w	r8, #4294967295
   1357e:	d026      	beq.n	135ce <uarte_instance_init.constprop.5+0xbe>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   13580:	f1b8 0f1f 	cmp.w	r8, #31
   13584:	d901      	bls.n	1358a <uarte_instance_init.constprop.5+0x7a>
   13586:	f7ff ffad 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1358a:	2301      	movs	r3, #1
   1358c:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTSET = set_mask;
   13590:	60b3      	str	r3, [r6, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   13592:	f8d5 800c 	ldr.w	r8, [r5, #12]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   13596:	f1b8 0f1f 	cmp.w	r8, #31
   1359a:	d901      	bls.n	135a0 <uarte_instance_init.constprop.5+0x90>
   1359c:	f7ff ffa2 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   135a0:	2303      	movs	r3, #3
   135a2:	f108 0880 	add.w	r8, r8, #128	; 0x80
   135a6:	f846 3028 	str.w	r3, [r6, r8, lsl #2]

		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
   135aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   135ae:	f1b8 0f1f 	cmp.w	r8, #31
   135b2:	d901      	bls.n	135b8 <uarte_instance_init.constprop.5+0xa8>
   135b4:	f7ff ff96 	bl	134e4 <nrf_gpio_pin_port_decode.isra.3.part.4>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   135b8:	2300      	movs	r3, #0
   135ba:	f108 0880 	add.w	r8, r8, #128	; 0x80
   135be:	f846 3028 	str.w	r3, [r6, r8, lsl #2]

		nrf_uarte_hwfc_pins_set(uarte,
   135c2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    p_reg->PSEL.RTS = pselrts;
   135c6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   135ca:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   135ce:	68b9      	ldr	r1, [r7, #8]
   135d0:	4638      	mov	r0, r7
   135d2:	f7ff fed7 	bl	13384 <uarte_nrfx_configure>
	if (err) {
   135d6:	b9a8      	cbnz	r0, 13604 <uarte_instance_init.constprop.5+0xf4>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   135d8:	2308      	movs	r3, #8
   135da:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   135de:	f109 030c 	add.w	r3, r9, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   135e2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   135e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   135ea:	2301      	movs	r3, #1
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   135ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
   135f0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   135f4:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   135f6:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   135f8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   135fc:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13600:	60a3      	str	r3, [r4, #8]
   13602:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   13604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13608:	40842500 	.word	0x40842500

0001360c <uarte_1_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_1_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_1_CTS_PIN)
		#define UARTE_1_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(1);
   1360c:	b530      	push	{r4, r5, lr}
   1360e:	b085      	sub	sp, #20
   13610:	466c      	mov	r4, sp
   13612:	4605      	mov	r5, r0
   13614:	4b08      	ldr	r3, [pc, #32]	; (13638 <uarte_1_init+0x2c>)
   13616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1361c:	2200      	movs	r2, #0
   1361e:	2101      	movs	r1, #1
   13620:	2009      	movs	r0, #9
   13622:	f7fd fe6d 	bl	11300 <z_irq_priority_set>
   13626:	2009      	movs	r0, #9
   13628:	f7fd fe46 	bl	112b8 <z_arch_irq_enable>
   1362c:	4621      	mov	r1, r4
   1362e:	4628      	mov	r0, r5
   13630:	f7ff ff6e 	bl	13510 <uarte_instance_init.constprop.5>
   13634:	b005      	add	sp, #20
   13636:	bd30      	pop	{r4, r5, pc}
   13638:	00027b10 	.word	0x00027b10

0001363c <uarte_0_init>:
	UART_NRF_UARTE_DEVICE(0);
   1363c:	b530      	push	{r4, r5, lr}
   1363e:	b085      	sub	sp, #20
   13640:	466c      	mov	r4, sp
   13642:	4605      	mov	r5, r0
   13644:	4b08      	ldr	r3, [pc, #32]	; (13668 <uarte_0_init+0x2c>)
   13646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1364c:	2200      	movs	r2, #0
   1364e:	2101      	movs	r1, #1
   13650:	2008      	movs	r0, #8
   13652:	f7fd fe55 	bl	11300 <z_irq_priority_set>
   13656:	2008      	movs	r0, #8
   13658:	f7fd fe2e 	bl	112b8 <z_arch_irq_enable>
   1365c:	4621      	mov	r1, r4
   1365e:	4628      	mov	r0, r5
   13660:	f7ff ff56 	bl	13510 <uarte_instance_init.constprop.5>
   13664:	b005      	add	sp, #20
   13666:	bd30      	pop	{r4, r5, pc}
   13668:	00027b20 	.word	0x00027b20

0001366c <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1366c:	2200      	movs	r2, #0
   1366e:	4b0e      	ldr	r3, [pc, #56]	; (136a8 <thread_monitor_entry_get+0x3c>)
{
   13670:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   13672:	681c      	ldr	r4, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   13674:	4b0d      	ldr	r3, [pc, #52]	; (136ac <thread_monitor_entry_get+0x40>)
	int entry_age, oldest_entry_age = 0;
   13676:	4616      	mov	r6, r2
   13678:	461f      	mov	r7, r3
		if (entry->id == id) {
   1367a:	58bd      	ldr	r5, [r7, r2]
   1367c:	18b9      	adds	r1, r7, r2
   1367e:	4285      	cmp	r5, r0
   13680:	d00d      	beq.n	1369e <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   13682:	b175      	cbz	r5, 136a2 <thread_monitor_entry_get+0x36>
		entry_age = rpc_event_cnt - entry->cnt;
   13684:	684d      	ldr	r5, [r1, #4]
   13686:	3208      	adds	r2, #8
   13688:	1b65      	subs	r5, r4, r5
		if (entry_age > oldest_entry_age) {
   1368a:	42b5      	cmp	r5, r6
   1368c:	bfc4      	itt	gt
   1368e:	462e      	movgt	r6, r5
   13690:	460b      	movgt	r3, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   13692:	2a50      	cmp	r2, #80	; 0x50
   13694:	d1f1      	bne.n	1367a <thread_monitor_entry_get+0xe>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   13696:	4619      	mov	r1, r3
	new_entry->cnt = rpc_event_cnt - 1;
   13698:	3c01      	subs	r4, #1
	new_entry->id = id;
   1369a:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1369c:	605c      	str	r4, [r3, #4]
}
   1369e:	4608      	mov	r0, r1
   136a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   136a2:	460b      	mov	r3, r1
   136a4:	e7f7      	b.n	13696 <thread_monitor_entry_get+0x2a>
   136a6:	bf00      	nop
   136a8:	200203a0 	.word	0x200203a0
   136ac:	200203ac 	.word	0x200203ac

000136b0 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   136b0:	4668      	mov	r0, sp
   136b2:	f020 0107 	bic.w	r1, r0, #7
   136b6:	468d      	mov	sp, r1
   136b8:	b519      	push	{r0, r3, r4, lr}
   136ba:	f012 fa65 	bl	25b88 <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   136be:	4b0d      	ldr	r3, [pc, #52]	; (136f4 <rpc_proxy_irq_handler+0x44>)
   136c0:	e8d3 2fef 	ldaex	r2, [r3]
   136c4:	3201      	adds	r2, #1
   136c6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   136ca:	2900      	cmp	r1, #0
   136cc:	d1f8      	bne.n	136c0 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   136ce:	f00c fe5f 	bl	20390 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   136d2:	4b09      	ldr	r3, [pc, #36]	; (136f8 <rpc_proxy_irq_handler+0x48>)
   136d4:	681c      	ldr	r4, [r3, #0]
   136d6:	b124      	cbz	r4, 136e2 <rpc_proxy_irq_handler+0x32>
   136d8:	1d20      	adds	r0, r4, #4
   136da:	f010 f9e5 	bl	23aa8 <z_impl_k_sem_give>
   136de:	6824      	ldr	r4, [r4, #0]
   136e0:	e7f9      	b.n	136d6 <rpc_proxy_irq_handler+0x26>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   136e2:	f7fd fe3f 	bl	11364 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   136e6:	f7fd fb91 	bl	10e0c <_IntExit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   136ea:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   136ee:	4685      	mov	sp, r0
   136f0:	4770      	bx	lr
   136f2:	bf00      	nop
   136f4:	200203a0 	.word	0x200203a0
   136f8:	200203a4 	.word	0x200203a4

000136fc <bsd_os_timedwait>:
{
   136fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13700:	460d      	mov	r5, r1
   13702:	b089      	sub	sp, #36	; 0x24
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   13704:	f014 f828 	bl	27758 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   13708:	682b      	ldr	r3, [r5, #0]
   1370a:	4606      	mov	r6, r0
   1370c:	2b00      	cmp	r3, #0
   1370e:	460f      	mov	r7, r1
   13710:	d103      	bne.n	1371a <bsd_os_timedwait+0x1e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   13712:	f010 f80b 	bl	2372c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   13716:	203c      	movs	r0, #60	; 0x3c
   13718:	e06c      	b.n	137f4 <bsd_os_timedwait+0xf8>
		*timeout = K_FOREVER;
   1371a:	bfb8      	it	lt
   1371c:	f04f 33ff 	movlt.w	r3, #4294967295
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   13720:	f04f 0201 	mov.w	r2, #1
   13724:	bfb8      	it	lt
   13726:	602b      	strlt	r3, [r5, #0]
   13728:	2100      	movs	r1, #0
   1372a:	a802      	add	r0, sp, #8
   1372c:	f010 f986 	bl	23a3c <z_impl_k_sem_init>
   13730:	f10d 0804 	add.w	r8, sp, #4
   13734:	f04f 0320 	mov.w	r3, #32
   13738:	f3ef 8911 	mrs	r9, BASEPRI
   1373c:	f383 8811 	msr	BASEPRI, r3
   13740:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   13744:	f010 f974 	bl	23a30 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   13748:	f7ff ff90 	bl	1366c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1374c:	4c32      	ldr	r4, [pc, #200]	; (13818 <bsd_os_timedwait+0x11c>)
   1374e:	6843      	ldr	r3, [r0, #4]
   13750:	6822      	ldr	r2, [r4, #0]
   13752:	4293      	cmp	r3, r2
   13754:	f04f 0300 	mov.w	r3, #0
   13758:	d108      	bne.n	1376c <bsd_os_timedwait+0x70>
	parent->next = child;
   1375a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1375c:	4b2f      	ldr	r3, [pc, #188]	; (1381c <bsd_os_timedwait+0x120>)
   1375e:	685a      	ldr	r2, [r3, #4]
   13760:	2a00      	cmp	r2, #0
   13762:	d14a      	bne.n	137fa <bsd_os_timedwait+0xfe>
	list->head = node;
   13764:	e9c3 8800 	strd	r8, r8, [r3]
		allow_to_sleep = true;
   13768:	2301      	movs	r3, #1
   1376a:	e000      	b.n	1376e <bsd_os_timedwait+0x72>
	entry->cnt = rpc_event_cnt;
   1376c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1376e:	f389 8811 	msr	BASEPRI, r9
   13772:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   13776:	2b00      	cmp	r3, #0
   13778:	d03b      	beq.n	137f2 <bsd_os_timedwait+0xf6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1377a:	6829      	ldr	r1, [r5, #0]
   1377c:	a802      	add	r0, sp, #8
   1377e:	f010 f9db 	bl	23b38 <z_impl_k_sem_take>
	__asm__ volatile(
   13782:	f04f 0320 	mov.w	r3, #32
   13786:	f3ef 8911 	mrs	r9, BASEPRI
   1378a:	f383 8811 	msr	BASEPRI, r3
   1378e:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13792:	2100      	movs	r1, #0
   13794:	4b21      	ldr	r3, [pc, #132]	; (1381c <bsd_os_timedwait+0x120>)
   13796:	681a      	ldr	r2, [r3, #0]
   13798:	b15a      	cbz	r2, 137b2 <bsd_os_timedwait+0xb6>
   1379a:	4542      	cmp	r2, r8
   1379c:	d138      	bne.n	13810 <bsd_os_timedwait+0x114>
   1379e:	9801      	ldr	r0, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   137a0:	2900      	cmp	r1, #0
   137a2:	d12f      	bne.n	13804 <bsd_os_timedwait+0x108>
   137a4:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   137a6:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   137a8:	4291      	cmp	r1, r2
   137aa:	d100      	bne.n	137ae <bsd_os_timedwait+0xb2>
	list->tail = node;
   137ac:	6058      	str	r0, [r3, #4]
	parent->next = child;
   137ae:	2300      	movs	r3, #0
   137b0:	9301      	str	r3, [sp, #4]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   137b2:	f010 f93d 	bl	23a30 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   137b6:	f7ff ff59 	bl	1366c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   137ba:	6823      	ldr	r3, [r4, #0]
   137bc:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   137be:	f389 8811 	msr	BASEPRI, r9
   137c2:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   137c6:	682c      	ldr	r4, [r5, #0]
   137c8:	1c63      	adds	r3, r4, #1
   137ca:	d012      	beq.n	137f2 <bsd_os_timedwait+0xf6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   137cc:	f013 ffc4 	bl	27758 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   137d0:	1b86      	subs	r6, r0, r6
   137d2:	eb61 0707 	sbc.w	r7, r1, r7
   137d6:	17e3      	asrs	r3, r4, #31
   137d8:	1ba2      	subs	r2, r4, r6
   137da:	eb63 0307 	sbc.w	r3, r3, r7
   137de:	4619      	mov	r1, r3
	*timeout = remaining > 0 ? remaining : 0;
   137e0:	2a00      	cmp	r2, #0
   137e2:	f171 0300 	sbcs.w	r3, r1, #0
	remaining = *timeout - (k_uptime_get() - start);
   137e6:	4610      	mov	r0, r2
	*timeout = remaining > 0 ? remaining : 0;
   137e8:	bfb8      	it	lt
   137ea:	2000      	movlt	r0, #0
   137ec:	6028      	str	r0, [r5, #0]
	if (*timeout == 0) {
   137ee:	2800      	cmp	r0, #0
   137f0:	d091      	beq.n	13716 <bsd_os_timedwait+0x1a>
	return 0;
   137f2:	2000      	movs	r0, #0
}
   137f4:	b009      	add	sp, #36	; 0x24
   137f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   137fa:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   137fe:	f8c3 8004 	str.w	r8, [r3, #4]
   13802:	e7b1      	b.n	13768 <bsd_os_timedwait+0x6c>
	parent->next = child;
   13804:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   13806:	6858      	ldr	r0, [r3, #4]
   13808:	4290      	cmp	r0, r2
	list->tail = node;
   1380a:	bf08      	it	eq
   1380c:	6059      	streq	r1, [r3, #4]
   1380e:	e7ce      	b.n	137ae <bsd_os_timedwait+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13810:	4611      	mov	r1, r2
   13812:	6812      	ldr	r2, [r2, #0]
   13814:	e7c0      	b.n	13798 <bsd_os_timedwait+0x9c>
   13816:	bf00      	nop
   13818:	200203a0 	.word	0x200203a0
   1381c:	200203a4 	.word	0x200203a4

00013820 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13824:	4b01      	ldr	r3, [pc, #4]	; (1382c <bsd_os_application_irq_set+0xc>)
   13826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1382a:	4770      	bx	lr
   1382c:	e000e100 	.word	0xe000e100

00013830 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13834:	4b01      	ldr	r3, [pc, #4]	; (1383c <bsd_os_application_irq_clear+0xc>)
   13836:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1383a:	4770      	bx	lr
   1383c:	e000e100 	.word	0xe000e100

00013840 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13840:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13844:	4b01      	ldr	r3, [pc, #4]	; (1384c <bsd_os_trace_irq_set+0xc>)
   13846:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1384a:	4770      	bx	lr
   1384c:	e000e100 	.word	0xe000e100

00013850 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13850:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   13854:	4b01      	ldr	r3, [pc, #4]	; (1385c <bsd_os_trace_irq_clear+0xc>)
   13856:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1385a:	4770      	bx	lr
   1385c:	e000e100 	.word	0xe000e100

00013860 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   13860:	b508      	push	{r3, lr}
	list->head = NULL;
   13862:	2300      	movs	r3, #0
   13864:	4a07      	ldr	r2, [pc, #28]	; (13884 <bsd_os_init+0x24>)
	list->tail = NULL;
   13866:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1386a:	4a07      	ldr	r2, [pc, #28]	; (13888 <bsd_os_init+0x28>)
   1386c:	e8d2 1fef 	ldaex	r1, [r2]
   13870:	e8c2 3fe0 	stlex	r0, r3, [r2]
   13874:	2800      	cmp	r0, #0
   13876:	d1f9      	bne.n	1386c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   13878:	f013 fae2 	bl	26e40 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   1387c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   13880:	f013 bad3 	b.w	26e2a <trace_task_create>
   13884:	200203a4 	.word	0x200203a4
   13888:	200203a0 	.word	0x200203a0

0001388c <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   1388c:	4b03      	ldr	r3, [pc, #12]	; (1389c <nrf91_socket_iface_init+0x10>)

	iface->if_dev->offload = &nrf91_net_offload;
   1388e:	4a04      	ldr	r2, [pc, #16]	; (138a0 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   13890:	6018      	str	r0, [r3, #0]
	iface->if_dev->offload = &nrf91_net_offload;
   13892:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   13894:	4803      	ldr	r0, [pc, #12]	; (138a4 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->offload = &nrf91_net_offload;
   13896:	619a      	str	r2, [r3, #24]
	socket_offload_register(&nrf91_socket_offload_ops);
   13898:	f7fc bf66 	b.w	10768 <socket_offload_register>
   1389c:	20020420 	.word	0x20020420
   138a0:	200203fc 	.word	0x200203fc
   138a4:	00027cac 	.word	0x00027cac

000138a8 <z_to_nrf_optname>:
	switch (z_in_level) {
   138a8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   138ac:	d00d      	beq.n	138ca <z_to_nrf_optname+0x22>
   138ae:	f240 2302 	movw	r3, #514	; 0x202
   138b2:	4298      	cmp	r0, r3
   138b4:	d02a      	beq.n	1390c <z_to_nrf_optname+0x64>
   138b6:	2801      	cmp	r0, #1
   138b8:	d12a      	bne.n	13910 <z_to_nrf_optname+0x68>
		switch (z_in_optname) {
   138ba:	2914      	cmp	r1, #20
   138bc:	d024      	beq.n	13908 <z_to_nrf_optname+0x60>
   138be:	2919      	cmp	r1, #25
   138c0:	d022      	beq.n	13908 <z_to_nrf_optname+0x60>
   138c2:	2904      	cmp	r1, #4
   138c4:	d124      	bne.n	13910 <z_to_nrf_optname+0x68>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   138c6:	2304      	movs	r3, #4
   138c8:	e013      	b.n	138f2 <z_to_nrf_optname+0x4a>
		switch (z_in_optname) {
   138ca:	3901      	subs	r1, #1
   138cc:	2905      	cmp	r1, #5
   138ce:	d81f      	bhi.n	13910 <z_to_nrf_optname+0x68>
   138d0:	a301      	add	r3, pc, #4	; (adr r3, 138d8 <z_to_nrf_optname+0x30>)
   138d2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   138d6:	bf00      	nop
   138d8:	000138f1 	.word	0x000138f1
   138dc:	000138f9 	.word	0x000138f9
   138e0:	000138fd 	.word	0x000138fd
   138e4:	00013901 	.word	0x00013901
   138e8:	000138c7 	.word	0x000138c7
   138ec:	00013905 	.word	0x00013905
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   138f0:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_HOSTNAME;
   138f2:	6013      	str	r3, [r2, #0]
	int retval = 0;
   138f4:	2000      	movs	r0, #0
   138f6:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   138f8:	2305      	movs	r3, #5
   138fa:	e7fa      	b.n	138f2 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   138fc:	2306      	movs	r3, #6
   138fe:	e7f8      	b.n	138f2 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   13900:	2307      	movs	r3, #7
   13902:	e7f6      	b.n	138f2 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   13904:	2301      	movs	r3, #1
   13906:	e7f4      	b.n	138f2 <z_to_nrf_optname+0x4a>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   13908:	6011      	str	r1, [r2, #0]
   1390a:	e7f3      	b.n	138f4 <z_to_nrf_optname+0x4c>
		switch (z_in_optname) {
   1390c:	2901      	cmp	r1, #1
   1390e:	d0f9      	beq.n	13904 <z_to_nrf_optname+0x5c>
		retval = -1;
   13910:	f04f 30ff 	mov.w	r0, #4294967295
}
   13914:	4770      	bx	lr
   13916:	bf00      	nop

00013918 <write_uart_string>:
static const char termination[3] = { '\0', '\r', '\n' };



static inline void write_uart_string(char *str, size_t len)
{
   13918:	b570      	push	{r4, r5, r6, lr}
   1391a:	4604      	mov	r4, r0
	for (size_t i = 0; i < len; i++) {
		uart_poll_out(uart_dev, str[i]);
   1391c:	4e05      	ldr	r6, [pc, #20]	; (13934 <write_uart_string+0x1c>)
   1391e:	1845      	adds	r5, r0, r1
	for (size_t i = 0; i < len; i++) {
   13920:	42ac      	cmp	r4, r5
   13922:	d100      	bne.n	13926 <write_uart_string+0xe>
	}
}
   13924:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(uart_dev, str[i]);
   13926:	6830      	ldr	r0, [r6, #0]
   13928:	f814 1b01 	ldrb.w	r1, [r4], #1
   1392c:	6843      	ldr	r3, [r0, #4]
   1392e:	685b      	ldr	r3, [r3, #4]
   13930:	4798      	blx	r3
   13932:	e7f5      	b.n	13920 <write_uart_string+0x8>
   13934:	20020438 	.word	0x20020438

00013938 <cmd_send>:
		write_uart_string(response, len);
	}
}

static void cmd_send(struct k_work *work)
{
   13938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int               err;

	ARG_UNUSED(work);

	/* Make sure the string is 0-terminated */
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1393a:	4b1d      	ldr	r3, [pc, #116]	; (139b0 <cmd_send+0x78>)
   1393c:	2200      	movs	r2, #0
   1393e:	681b      	ldr	r3, [r3, #0]
   13940:	481c      	ldr	r0, [pc, #112]	; (139b4 <cmd_send+0x7c>)
   13942:	2bff      	cmp	r3, #255	; 0xff
   13944:	bf28      	it	cs
   13946:	23ff      	movcs	r3, #255	; 0xff

	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   13948:	491b      	ldr	r1, [pc, #108]	; (139b8 <cmd_send+0x80>)
	at_buf[MIN(at_buf_len, AT_MAX_CMD_LEN - 1)] = 0;
   1394a:	54c2      	strb	r2, [r0, r3]
	err = at_cmd_write(at_buf, buf, AT_MAX_CMD_LEN, &state);
   1394c:	f10d 0307 	add.w	r3, sp, #7
   13950:	f44f 7280 	mov.w	r2, #256	; 0x100
   13954:	f000 faec 	bl	13f30 <at_cmd_write>
	if (err < 0) {
   13958:	1e02      	subs	r2, r0, #0
		LOG_ERR("Could not send AT command to modem: %d", err);
		state = AT_CMD_ERROR;
   1395a:	bfbc      	itt	lt
   1395c:	2301      	movlt	r3, #1
   1395e:	f88d 3007 	strblt.w	r3, [sp, #7]
	}

	switch (state) {
   13962:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13966:	2b03      	cmp	r3, #3
   13968:	d80e      	bhi.n	13988 <cmd_send+0x50>
   1396a:	e8df f003 	tbb	[pc, r3]
   1396e:	1402      	.short	0x1402
   13970:	1e17      	.short	0x1e17
	case AT_CMD_OK:
		write_uart_string(buf, strlen(buf));
   13972:	4811      	ldr	r0, [pc, #68]	; (139b8 <cmd_send+0x80>)
   13974:	f012 fa0c 	bl	25d90 <strlen>
   13978:	4601      	mov	r1, r0
   1397a:	480f      	ldr	r0, [pc, #60]	; (139b8 <cmd_send+0x80>)
   1397c:	f7ff ffcc 	bl	13918 <write_uart_string>
		write_uart_string(OK_STR, sizeof(OK_STR));
   13980:	2105      	movs	r1, #5
   13982:	480e      	ldr	r0, [pc, #56]	; (139bc <cmd_send+0x84>)
		chars = sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str, ++chars);
		break;
	case AT_CMD_ERROR_CME:
		chars = sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str, ++chars);
   13984:	f7ff ffc8 	bl	13918 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   13988:	4b0d      	ldr	r3, [pc, #52]	; (139c0 <cmd_send+0x88>)
   1398a:	6818      	ldr	r0, [r3, #0]
   1398c:	f013 fe01 	bl	27592 <z_impl_uart_irq_rx_enable>
}
   13990:	b007      	add	sp, #28
   13992:	f85d fb04 	ldr.w	pc, [sp], #4
		write_uart_string(ERROR_STR, sizeof(ERROR_STR));
   13996:	2108      	movs	r1, #8
   13998:	480a      	ldr	r0, [pc, #40]	; (139c4 <cmd_send+0x8c>)
   1399a:	e7f3      	b.n	13984 <cmd_send+0x4c>
		chars = sprintf(str, "+CMS: %d\r\n", err);
   1399c:	490a      	ldr	r1, [pc, #40]	; (139c8 <cmd_send+0x90>)
		chars = sprintf(str, "+CME: %d\r\n", err);
   1399e:	a802      	add	r0, sp, #8
   139a0:	f7fe fc32 	bl	12208 <sprintf>
		write_uart_string(str, ++chars);
   139a4:	1c41      	adds	r1, r0, #1
   139a6:	a802      	add	r0, sp, #8
   139a8:	e7ec      	b.n	13984 <cmd_send+0x4c>
		chars = sprintf(str, "+CME: %d\r\n", err);
   139aa:	4908      	ldr	r1, [pc, #32]	; (139cc <cmd_send+0x94>)
   139ac:	e7f7      	b.n	1399e <cmd_send+0x66>
   139ae:	bf00      	nop
   139b0:	20020424 	.word	0x20020424
   139b4:	20023d3f 	.word	0x20023d3f
   139b8:	20023e3f 	.word	0x20023e3f
   139bc:	0002c133 	.word	0x0002c133
   139c0:	20020438 	.word	0x20020438
   139c4:	0002c138 	.word	0x0002c138
   139c8:	0002c140 	.word	0x0002c140
   139cc:	0002c14b 	.word	0x0002c14b

000139d0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   139d0:	2201      	movs	r2, #1
{
   139d2:	b538      	push	{r3, r4, r5, lr}
		term_mode = mode;
   139d4:	4b14      	ldr	r3, [pc, #80]	; (13a28 <at_host_init+0x58>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	at_cmd_set_notification_handler(response_handler);
   139d6:	4815      	ldr	r0, [pc, #84]	; (13a2c <at_host_init+0x5c>)
		term_mode = mode;
   139d8:	701a      	strb	r2, [r3, #0]
	at_cmd_set_notification_handler(response_handler);
   139da:	f000 facb 	bl	13f74 <at_cmd_set_notification_handler>
   139de:	4814      	ldr	r0, [pc, #80]	; (13a30 <at_host_init+0x60>)
   139e0:	f00e f900 	bl	21be4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   139e4:	4d13      	ldr	r5, [pc, #76]	; (13a34 <at_host_init+0x64>)
   139e6:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   139e8:	b910      	cbnz	r0, 139f0 <at_host_init+0x20>

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
		return -EFAULT;
   139ea:	f06f 000d 	mvn.w	r0, #13

	k_work_init(&cmd_send_work, cmd_send);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   139ee:	bd38      	pop	{r3, r4, r5, pc}
	if (api->err_check != NULL) {
   139f0:	6843      	ldr	r3, [r0, #4]
   139f2:	689b      	ldr	r3, [r3, #8]
   139f4:	b96b      	cbnz	r3, 13a12 <at_host_init+0x42>
	uart_irq_callback_set(uart_dev, isr);
   139f6:	682a      	ldr	r2, [r5, #0]
	const struct uart_driver_api *api =
   139f8:	6853      	ldr	r3, [r2, #4]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   139fa:	b973      	cbnz	r3, 13a1a <at_host_init+0x4a>
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   139fc:	2400      	movs	r4, #0
   139fe:	4b0e      	ldr	r3, [pc, #56]	; (13a38 <at_host_init+0x68>)
   13a00:	4a0e      	ldr	r2, [pc, #56]	; (13a3c <at_host_init+0x6c>)
   13a02:	6828      	ldr	r0, [r5, #0]
   13a04:	601c      	str	r4, [r3, #0]
   13a06:	e9c3 2401 	strd	r2, r4, [r3, #4]
   13a0a:	f013 fdc2 	bl	27592 <z_impl_uart_irq_rx_enable>
	return err;
   13a0e:	4620      	mov	r0, r4
   13a10:	e7ed      	b.n	139ee <at_host_init+0x1e>
		return api->err_check(dev);
   13a12:	4798      	blx	r3
	if (err) {
   13a14:	2800      	cmp	r0, #0
   13a16:	d0ee      	beq.n	139f6 <at_host_init+0x26>
   13a18:	e7e7      	b.n	139ea <at_host_init+0x1a>
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   13a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d0ed      	beq.n	139fc <at_host_init+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   13a20:	4907      	ldr	r1, [pc, #28]	; (13a40 <at_host_init+0x70>)
   13a22:	4610      	mov	r0, r2
   13a24:	4798      	blx	r3
   13a26:	e7e9      	b.n	139fc <at_host_init+0x2c>
   13a28:	20023f40 	.word	0x20023f40
   13a2c:	0002759d 	.word	0x0002759d
   13a30:	0002a775 	.word	0x0002a775
   13a34:	20020438 	.word	0x20020438
   13a38:	2002042c 	.word	0x2002042c
   13a3c:	00013939 	.word	0x00013939
   13a40:	00013a45 	.word	0x00013a45

00013a44 <isr>:
	if (api->irq_update) {
   13a44:	6843      	ldr	r3, [r0, #4]
{
   13a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13a4a:	4605      	mov	r5, r0
   13a4c:	b103      	cbz	r3, 13a50 <isr+0xc>
		return api->irq_update(dev);
   13a4e:	4798      	blx	r3
	if (api->irq_rx_ready) {
   13a50:	686b      	ldr	r3, [r5, #4]
   13a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13a54:	b16b      	cbz	r3, 13a72 <isr+0x2e>
		return api->irq_rx_ready(dev);
   13a56:	4628      	mov	r0, r5
   13a58:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   13a5a:	b150      	cbz	r0, 13a72 <isr+0x2e>
	cmd_len += 1;
   13a5c:	4c34      	ldr	r4, [pc, #208]	; (13b30 <isr+0xec>)
	if (inside_quotes) {
   13a5e:	4e35      	ldr	r6, [pc, #212]	; (13b34 <isr+0xf0>)
	if (api->fifo_read) {
   13a60:	686b      	ldr	r3, [r5, #4]
   13a62:	699b      	ldr	r3, [r3, #24]
   13a64:	b12b      	cbz	r3, 13a72 <isr+0x2e>
		return api->fifo_read(dev, rx_data, size);
   13a66:	2201      	movs	r2, #1
   13a68:	f10d 0107 	add.w	r1, sp, #7
   13a6c:	4628      	mov	r0, r5
   13a6e:	4798      	blx	r3
	while (uart_fifo_read(dev, &character, 1)) {
   13a70:	b908      	cbnz	r0, 13a76 <isr+0x32>
}
   13a72:	b003      	add	sp, #12
   13a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cmd_len += 1;
   13a76:	6822      	ldr	r2, [r4, #0]
		uart_rx_handler(character);
   13a78:	f89d 1007 	ldrb.w	r1, [sp, #7]
	cmd_len += 1;
   13a7c:	1c53      	adds	r3, r2, #1
	switch (character) {
   13a7e:	2922      	cmp	r1, #34	; 0x22
	cmd_len += 1;
   13a80:	6023      	str	r3, [r4, #0]
	switch (character) {
   13a82:	d018      	beq.n	13ab6 <isr+0x72>
   13a84:	297f      	cmp	r1, #127	; 0x7f
   13a86:	d001      	beq.n	13a8c <isr+0x48>
   13a88:	2908      	cmp	r1, #8
   13a8a:	d118      	bne.n	13abe <isr+0x7a>
		pos = pos ? pos - 1 : 0;
   13a8c:	b102      	cbz	r2, 13a90 <isr+0x4c>
   13a8e:	3a01      	subs	r2, #1
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   13a90:	2b02      	cmp	r3, #2
   13a92:	bf38      	it	cc
   13a94:	2302      	movcc	r3, #2
		at_buf[pos] = 0;
   13a96:	2700      	movs	r7, #0
   13a98:	4827      	ldr	r0, [pc, #156]	; (13b38 <isr+0xf4>)
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   13a9a:	3b02      	subs	r3, #2
		at_buf[pos] = 0;
   13a9c:	5487      	strb	r7, [r0, r2]
		cmd_len = cmd_len <= 1 ? 0 : cmd_len - 2;
   13a9e:	6023      	str	r3, [r4, #0]
	if (inside_quotes) {
   13aa0:	7833      	ldrb	r3, [r6, #0]
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	d1dc      	bne.n	13a60 <isr+0x1c>
	switch (term_mode) {
   13aa6:	4b25      	ldr	r3, [pc, #148]	; (13b3c <isr+0xf8>)
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	2b03      	cmp	r3, #3
   13aac:	d8d8      	bhi.n	13a60 <isr+0x1c>
   13aae:	e8df f003 	tbb	[pc, r3]
   13ab2:	1212      	.short	0x1212
   13ab4:	3830      	.short	0x3830
		inside_quotes = !inside_quotes;
   13ab6:	7830      	ldrb	r0, [r6, #0]
   13ab8:	f080 0001 	eor.w	r0, r0, #1
   13abc:	7030      	strb	r0, [r6, #0]
		if (cmd_len > AT_MAX_CMD_LEN) {
   13abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   13ac2:	d903      	bls.n	13acc <isr+0x88>
			cmd_len = AT_MAX_CMD_LEN;
   13ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
	cmd_len = 0;
   13ac8:	6023      	str	r3, [r4, #0]
   13aca:	e7c9      	b.n	13a60 <isr+0x1c>
		} else if (cmd_len < 1) {
   13acc:	2b00      	cmp	r3, #0
   13ace:	d0fb      	beq.n	13ac8 <isr+0x84>
		at_buf[pos] = character;
   13ad0:	4b19      	ldr	r3, [pc, #100]	; (13b38 <isr+0xf4>)
   13ad2:	5499      	strb	r1, [r3, r2]
   13ad4:	e7e4      	b.n	13aa0 <isr+0x5c>
		if (character == termination[term_mode]) {
   13ad6:	4a1a      	ldr	r2, [pc, #104]	; (13b40 <isr+0xfc>)
   13ad8:	5cd3      	ldrb	r3, [r2, r3]
   13ada:	428b      	cmp	r3, r1
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   13adc:	d1c0      	bne.n	13a60 <isr+0x1c>
	uart_irq_rx_disable(uart_dev);
   13ade:	4b19      	ldr	r3, [pc, #100]	; (13b44 <isr+0x100>)
   13ae0:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   13ae2:	6843      	ldr	r3, [r0, #4]
   13ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13ae6:	b103      	cbz	r3, 13aea <isr+0xa6>
		api->irq_rx_disable(dev);
   13ae8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13aea:	4917      	ldr	r1, [pc, #92]	; (13b48 <isr+0x104>)
   13aec:	e8d1 3fef 	ldaex	r3, [r1]
   13af0:	f043 0201 	orr.w	r2, r3, #1
   13af4:	e8c1 2fe0 	stlex	r0, r2, [r1]
   13af8:	2800      	cmp	r0, #0
   13afa:	d1f7      	bne.n	13aec <isr+0xa8>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13afc:	07db      	lsls	r3, r3, #31
   13afe:	d403      	bmi.n	13b08 <isr+0xc4>
		k_queue_append(&work_q->queue, work);
   13b00:	3908      	subs	r1, #8
   13b02:	4812      	ldr	r0, [pc, #72]	; (13b4c <isr+0x108>)
   13b04:	f013 fd9a 	bl	2763c <k_queue_append>
	at_buf_len = cmd_len;
   13b08:	4b11      	ldr	r3, [pc, #68]	; (13b50 <isr+0x10c>)
   13b0a:	6822      	ldr	r2, [r4, #0]
   13b0c:	601a      	str	r2, [r3, #0]
	cmd_len = 0;
   13b0e:	2300      	movs	r3, #0
   13b10:	e7da      	b.n	13ac8 <isr+0x84>
		if ((at_buf[pos - 1]) &&
   13b12:	4b09      	ldr	r3, [pc, #36]	; (13b38 <isr+0xf4>)
   13b14:	441a      	add	r2, r3
   13b16:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   13b1a:	2b00      	cmp	r3, #0
   13b1c:	d0a0      	beq.n	13a60 <isr+0x1c>
		if ((at_buf[pos - 1] == '\r') && (character == '\n')) {
   13b1e:	290a      	cmp	r1, #10
   13b20:	e7dc      	b.n	13adc <isr+0x98>
   13b22:	4b05      	ldr	r3, [pc, #20]	; (13b38 <isr+0xf4>)
   13b24:	441a      	add	r2, r3
   13b26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   13b2a:	2b0d      	cmp	r3, #13
   13b2c:	d198      	bne.n	13a60 <isr+0x1c>
   13b2e:	e7f6      	b.n	13b1e <isr+0xda>
   13b30:	20020428 	.word	0x20020428
   13b34:	20023f3f 	.word	0x20023f3f
   13b38:	20023d3f 	.word	0x20023d3f
   13b3c:	20023f40 	.word	0x20023f40
   13b40:	0002c156 	.word	0x0002c156
   13b44:	20020438 	.word	0x20020438
   13b48:	20020434 	.word	0x20020434
   13b4c:	20022168 	.word	0x20022168
   13b50:	20020424 	.word	0x20020424

00013b54 <close>:
{
   13b54:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   13b56:	4c10      	ldr	r4, [pc, #64]	; (13b98 <close+0x44>)
{
   13b58:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   13b5a:	6823      	ldr	r3, [r4, #0]
   13b5c:	b94b      	cbnz	r3, 13b72 <close+0x1e>
   13b5e:	490f      	ldr	r1, [pc, #60]	; (13b9c <close+0x48>)
   13b60:	480f      	ldr	r0, [pc, #60]	; (13ba0 <close+0x4c>)
   13b62:	2321      	movs	r3, #33	; 0x21
   13b64:	4a0f      	ldr	r2, [pc, #60]	; (13ba4 <close+0x50>)
   13b66:	f011 ffea 	bl	25b3e <printk>
   13b6a:	2121      	movs	r1, #33	; 0x21
   13b6c:	480d      	ldr	r0, [pc, #52]	; (13ba4 <close+0x50>)
   13b6e:	f011 fff3 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   13b72:	6823      	ldr	r3, [r4, #0]
   13b74:	685b      	ldr	r3, [r3, #4]
   13b76:	b94b      	cbnz	r3, 13b8c <close+0x38>
   13b78:	490b      	ldr	r1, [pc, #44]	; (13ba8 <close+0x54>)
   13b7a:	4809      	ldr	r0, [pc, #36]	; (13ba0 <close+0x4c>)
   13b7c:	2322      	movs	r3, #34	; 0x22
   13b7e:	4a09      	ldr	r2, [pc, #36]	; (13ba4 <close+0x50>)
   13b80:	f011 ffdd 	bl	25b3e <printk>
   13b84:	2122      	movs	r1, #34	; 0x22
   13b86:	4807      	ldr	r0, [pc, #28]	; (13ba4 <close+0x50>)
   13b88:	f011 ffe6 	bl	25b58 <assert_post_action>
	return socket_ops->close(sock);
   13b8c:	6823      	ldr	r3, [r4, #0]
   13b8e:	4628      	mov	r0, r5
}
   13b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   13b94:	685b      	ldr	r3, [r3, #4]
   13b96:	4718      	bx	r3
   13b98:	200201a8 	.word	0x200201a8
   13b9c:	0002ab9f 	.word	0x0002ab9f
   13ba0:	0002abaa 	.word	0x0002abaa
   13ba4:	0002ab6d 	.word	0x0002ab6d
   13ba8:	0002bfdd 	.word	0x0002bfdd

00013bac <open_socket>:
	char             data[CONFIG_AT_CMD_RESPONSE_MAX_LEN];
	at_cmd_handler_t callback;
};

static int open_socket(void)
{
   13bac:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   13bae:	4c16      	ldr	r4, [pc, #88]	; (13c08 <open_socket+0x5c>)
   13bb0:	6823      	ldr	r3, [r4, #0]
   13bb2:	b94b      	cbnz	r3, 13bc8 <open_socket+0x1c>
   13bb4:	4915      	ldr	r1, [pc, #84]	; (13c0c <open_socket+0x60>)
   13bb6:	4816      	ldr	r0, [pc, #88]	; (13c10 <open_socket+0x64>)
   13bb8:	2319      	movs	r3, #25
   13bba:	4a16      	ldr	r2, [pc, #88]	; (13c14 <open_socket+0x68>)
   13bbc:	f011 ffbf 	bl	25b3e <printk>
   13bc0:	2119      	movs	r1, #25
   13bc2:	4814      	ldr	r0, [pc, #80]	; (13c14 <open_socket+0x68>)
   13bc4:	f011 ffc8 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   13bc8:	6823      	ldr	r3, [r4, #0]
   13bca:	681b      	ldr	r3, [r3, #0]
   13bcc:	b94b      	cbnz	r3, 13be2 <open_socket+0x36>
   13bce:	4912      	ldr	r1, [pc, #72]	; (13c18 <open_socket+0x6c>)
   13bd0:	480f      	ldr	r0, [pc, #60]	; (13c10 <open_socket+0x64>)
   13bd2:	231a      	movs	r3, #26
   13bd4:	4a0f      	ldr	r2, [pc, #60]	; (13c14 <open_socket+0x68>)
   13bd6:	f011 ffb2 	bl	25b3e <printk>
   13bda:	211a      	movs	r1, #26
   13bdc:	480d      	ldr	r0, [pc, #52]	; (13c14 <open_socket+0x68>)
   13bde:	f011 ffbb 	bl	25b58 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   13be2:	6823      	ldr	r3, [r4, #0]
   13be4:	f240 2201 	movw	r2, #513	; 0x201
   13be8:	681b      	ldr	r3, [r3, #0]
   13bea:	2100      	movs	r1, #0
   13bec:	2066      	movs	r0, #102	; 0x66
   13bee:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   13bf0:	4b0a      	ldr	r3, [pc, #40]	; (13c1c <open_socket+0x70>)
   13bf2:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   13bf4:	3001      	adds	r0, #1
   13bf6:	d104      	bne.n	13c02 <open_socket+0x56>
   13bf8:	f00e f81a 	bl	21c30 <z_impl_z_errno>
		return -errno;
   13bfc:	6800      	ldr	r0, [r0, #0]
   13bfe:	4240      	negs	r0, r0
	}

	return 0;
}
   13c00:	bd10      	pop	{r4, pc}
	return 0;
   13c02:	2000      	movs	r0, #0
   13c04:	e7fc      	b.n	13c00 <open_socket+0x54>
   13c06:	bf00      	nop
   13c08:	200201a8 	.word	0x200201a8
   13c0c:	0002ab9f 	.word	0x0002ab9f
   13c10:	0002abaa 	.word	0x0002abaa
   13c14:	0002ab6d 	.word	0x0002ab6d
   13c18:	0002bfef 	.word	0x0002bfef
   13c1c:	2002043c 	.word	0x2002043c

00013c20 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   13c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13c24:	4680      	mov	r8, r0
   13c26:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   13c28:	f012 f8b2 	bl	25d90 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   13c2c:	4c1d      	ldr	r4, [pc, #116]	; (13ca4 <at_write+0x84>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", cmd);
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   13c2e:	4b1e      	ldr	r3, [pc, #120]	; (13ca8 <at_write+0x88>)
	int bytes_to_send = strlen(cmd);
   13c30:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   13c32:	681f      	ldr	r7, [r3, #0]
   13c34:	6823      	ldr	r3, [r4, #0]
   13c36:	b94b      	cbnz	r3, 13c4c <at_write+0x2c>
   13c38:	491c      	ldr	r1, [pc, #112]	; (13cac <at_write+0x8c>)
   13c3a:	481d      	ldr	r0, [pc, #116]	; (13cb0 <at_write+0x90>)
   13c3c:	237e      	movs	r3, #126	; 0x7e
   13c3e:	4a1d      	ldr	r2, [pc, #116]	; (13cb4 <at_write+0x94>)
   13c40:	f011 ff7d 	bl	25b3e <printk>
   13c44:	217e      	movs	r1, #126	; 0x7e
   13c46:	481b      	ldr	r0, [pc, #108]	; (13cb4 <at_write+0x94>)
   13c48:	f011 ff86 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   13c4c:	6823      	ldr	r3, [r4, #0]
   13c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13c50:	b94b      	cbnz	r3, 13c66 <at_write+0x46>
   13c52:	4919      	ldr	r1, [pc, #100]	; (13cb8 <at_write+0x98>)
   13c54:	4816      	ldr	r0, [pc, #88]	; (13cb0 <at_write+0x90>)
   13c56:	237f      	movs	r3, #127	; 0x7f
   13c58:	4a16      	ldr	r2, [pc, #88]	; (13cb4 <at_write+0x94>)
   13c5a:	f011 ff70 	bl	25b3e <printk>
   13c5e:	217f      	movs	r1, #127	; 0x7f
   13c60:	4814      	ldr	r0, [pc, #80]	; (13cb4 <at_write+0x94>)
   13c62:	f011 ff79 	bl	25b58 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   13c66:	6823      	ldr	r3, [r4, #0]
   13c68:	4632      	mov	r2, r6
   13c6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13c6c:	4641      	mov	r1, r8
   13c6e:	2300      	movs	r3, #0
   13c70:	4638      	mov	r0, r7
   13c72:	47a0      	blx	r4

	if (bytes_sent != bytes_to_send) {
   13c74:	4286      	cmp	r6, r0
   13c76:	d00d      	beq.n	13c94 <at_write+0x74>
		LOG_ERR("Failed to send AT command");
		ret.code  = -EIO;
   13c78:	f06f 0304 	mvn.w	r3, #4
   13c7c:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   13c7e:	2301      	movs	r3, #1
   13c80:	f88d 3004 	strb.w	r3, [sp, #4]
	} else {
		k_msgq_get(&return_code_msq, &ret, K_FOREVER);
		LOG_DBG("Bytes sent: %d", bytes_sent);
	}

	if (state) {
   13c84:	b115      	cbz	r5, 13c8c <at_write+0x6c>
		*state = ret.state;
   13c86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   13c8a:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   13c8c:	9800      	ldr	r0, [sp, #0]
   13c8e:	b002      	add	sp, #8
   13c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_ALLOC_INIT, k_msgq_alloc_init, int, struct k_msgq *, q, size_t, msg_size, u32_t, max_msgs)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_GET, k_msgq_get, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   13c94:	f04f 32ff 	mov.w	r2, #4294967295
   13c98:	4669      	mov	r1, sp
   13c9a:	4808      	ldr	r0, [pc, #32]	; (13cbc <at_write+0x9c>)
   13c9c:	f00e fa94 	bl	221c8 <z_impl_k_msgq_get>
   13ca0:	e7f0      	b.n	13c84 <at_write+0x64>
   13ca2:	bf00      	nop
   13ca4:	200201a8 	.word	0x200201a8
   13ca8:	2002043c 	.word	0x2002043c
   13cac:	0002ab9f 	.word	0x0002ab9f
   13cb0:	0002abaa 	.word	0x0002abaa
   13cb4:	0002ab6d 	.word	0x0002ab6d
   13cb8:	0002c027 	.word	0x0002c027
   13cbc:	2002bbac 	.word	0x2002bbac

00013cc0 <at_cmd_init>:

	k_mutex_unlock(&cmd_pending);
}

static int at_cmd_init(struct device *dev)
{
   13cc0:	b510      	push	{r4, lr}
   13cc2:	b086      	sub	sp, #24
	ARG_UNUSED(dev);

	if (open_socket() != 0) {
   13cc4:	f7ff ff72 	bl	13bac <open_socket>
   13cc8:	4604      	mov	r4, r0
   13cca:	b980      	cbnz	r0, 13cee <at_cmd_init+0x2e>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   13ccc:	230a      	movs	r3, #10
   13cce:	e9cd 0004 	strd	r0, r0, [sp, #16]
   13cd2:	e9cd 0302 	strd	r0, r3, [sp, #8]
   13cd6:	e9cd 0000 	strd	r0, r0, [sp]
   13cda:	4b06      	ldr	r3, [pc, #24]	; (13cf4 <at_cmd_init+0x34>)
   13cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13ce0:	4905      	ldr	r1, [pc, #20]	; (13cf8 <at_cmd_init+0x38>)
   13ce2:	4806      	ldr	r0, [pc, #24]	; (13cfc <at_cmd_init+0x3c>)
   13ce4:	f010 f876 	bl	23dd4 <z_impl_k_thread_create>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   13ce8:	4620      	mov	r0, r4
   13cea:	b006      	add	sp, #24
   13cec:	bd10      	pop	{r4, pc}
		return -1;
   13cee:	f04f 34ff 	mov.w	r4, #4294967295
   13cf2:	e7f9      	b.n	13ce8 <at_cmd_init+0x28>
   13cf4:	00013d01 	.word	0x00013d01
   13cf8:	20024bf8 	.word	0x20024bf8
   13cfc:	20020450 	.word	0x20020450

00013d00 <socket_thread_fn>:
{
   13d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   13d04:	f8df 8220 	ldr.w	r8, [pc, #544]	; 13f28 <socket_thread_fn+0x228>
	struct return_state_object ret = {
   13d08:	2500      	movs	r5, #0
   13d0a:	46c1      	mov	r9, r8
	__ASSERT_NO_MSG(socket_ops);
   13d0c:	4e75      	ldr	r6, [pc, #468]	; (13ee4 <socket_thread_fn+0x1e4>)
{
   13d0e:	b085      	sub	sp, #20
   13d10:	6833      	ldr	r3, [r6, #0]
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   13d12:	f8d8 7000 	ldr.w	r7, [r8]
   13d16:	b94b      	cbnz	r3, 13d2c <socket_thread_fn+0x2c>
   13d18:	4973      	ldr	r1, [pc, #460]	; (13ee8 <socket_thread_fn+0x1e8>)
   13d1a:	4874      	ldr	r0, [pc, #464]	; (13eec <socket_thread_fn+0x1ec>)
   13d1c:	2369      	movs	r3, #105	; 0x69
   13d1e:	4a74      	ldr	r2, [pc, #464]	; (13ef0 <socket_thread_fn+0x1f0>)
   13d20:	f011 ff0d 	bl	25b3e <printk>
   13d24:	2169      	movs	r1, #105	; 0x69
   13d26:	4872      	ldr	r0, [pc, #456]	; (13ef0 <socket_thread_fn+0x1f0>)
   13d28:	f011 ff16 	bl	25b58 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   13d2c:	6833      	ldr	r3, [r6, #0]
   13d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13d30:	b94b      	cbnz	r3, 13d46 <socket_thread_fn+0x46>
   13d32:	4970      	ldr	r1, [pc, #448]	; (13ef4 <socket_thread_fn+0x1f4>)
   13d34:	486d      	ldr	r0, [pc, #436]	; (13eec <socket_thread_fn+0x1ec>)
   13d36:	236a      	movs	r3, #106	; 0x6a
   13d38:	4a6d      	ldr	r2, [pc, #436]	; (13ef0 <socket_thread_fn+0x1f0>)
   13d3a:	f011 ff00 	bl	25b3e <printk>
   13d3e:	216a      	movs	r1, #106	; 0x6a
   13d40:	486b      	ldr	r0, [pc, #428]	; (13ef0 <socket_thread_fn+0x1f0>)
   13d42:	f011 ff09 	bl	25b58 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   13d46:	6833      	ldr	r3, [r6, #0]
   13d48:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 13f18 <socket_thread_fn+0x218>
   13d4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   13d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13d52:	2300      	movs	r3, #0
   13d54:	4651      	mov	r1, sl
   13d56:	4638      	mov	r0, r7
   13d58:	47a0      	blx	r4
		if (bytes_read < 0) {
   13d5a:	2800      	cmp	r0, #0
   13d5c:	4654      	mov	r4, sl
   13d5e:	da29      	bge.n	13db4 <socket_thread_fn+0xb4>
			if ((close(common_socket_fd) == 0) &&
   13d60:	f8d9 0000 	ldr.w	r0, [r9]
   13d64:	f7ff fef6 	bl	13b54 <close>
   13d68:	b9e8      	cbnz	r0, 13da6 <socket_thread_fn+0xa6>
			    (open_socket() == 0)) {
   13d6a:	f7ff ff1f 	bl	13bac <open_socket>
			if ((close(common_socket_fd) == 0) &&
   13d6e:	b9d0      	cbnz	r0, 13da6 <socket_thread_fn+0xa6>
				if (cmd_pending.lock_count > 0) {
   13d70:	4b61      	ldr	r3, [pc, #388]	; (13ef8 <socket_thread_fn+0x1f8>)
   13d72:	68db      	ldr	r3, [r3, #12]
   13d74:	2b00      	cmp	r3, #0
   13d76:	d0cb      	beq.n	13d10 <socket_thread_fn+0x10>
   13d78:	f00d ff5a 	bl	21c30 <z_impl_z_errno>
					ret.state = AT_CMD_ERROR;
   13d7c:	f04f 0a01 	mov.w	sl, #1
					ret.code  = -errno;
   13d80:	6805      	ldr	r5, [r0, #0]
   13d82:	426d      	negs	r5, r5
		current_cmd_handler = NULL;
   13d84:	2200      	movs	r2, #0
   13d86:	4b5d      	ldr	r3, [pc, #372]	; (13efc <socket_thread_fn+0x1fc>)
		if (ret.state != AT_CMD_NOTIFICATION) {
   13d88:	f1ba 0f04 	cmp.w	sl, #4
		current_cmd_handler = NULL;
   13d8c:	601a      	str	r2, [r3, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   13d8e:	d0bf      	beq.n	13d10 <socket_thread_fn+0x10>
K_SYSCALL_DECLARE3(K_SYSCALL_K_MSGQ_PUT, k_msgq_put, int, struct k_msgq *, q, void *, data, s32_t, timeout)
   13d90:	f04f 32ff 	mov.w	r2, #4294967295
   13d94:	a902      	add	r1, sp, #8
   13d96:	485a      	ldr	r0, [pc, #360]	; (13f00 <socket_thread_fn+0x200>)
			struct return_state_object ret_copy = {
   13d98:	9502      	str	r5, [sp, #8]
   13d9a:	f88d a00c 	strb.w	sl, [sp, #12]
			ret.code  = 0;
   13d9e:	2500      	movs	r5, #0
   13da0:	f00e f96c 	bl	2207c <z_impl_k_msgq_put>
   13da4:	e7b4      	b.n	13d10 <socket_thread_fn+0x10>
			close(common_socket_fd);
   13da6:	f8d9 0000 	ldr.w	r0, [r9]
   13daa:	f7ff fed3 	bl	13b54 <close>
}
   13dae:	b005      	add	sp, #20
   13db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(buf) ||
   13db4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   13db8:	d07c      	beq.n	13eb4 <socket_thread_fn+0x1b4>
			   buf[bytes_read - 1] != '\0') {
   13dba:	4450      	add	r0, sl
		} else if (bytes_read == sizeof(buf) ||
   13dbc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   13dc0:	2b00      	cmp	r3, #0
   13dc2:	d177      	bne.n	13eb4 <socket_thread_fn+0x1b4>
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   13dc4:	494f      	ldr	r1, [pc, #316]	; (13f04 <socket_thread_fn+0x204>)
   13dc6:	4650      	mov	r0, sl
   13dc8:	9301      	str	r3, [sp, #4]
   13dca:	f011 ffac 	bl	25d26 <strstr>
   13dce:	4f4b      	ldr	r7, [pc, #300]	; (13efc <socket_thread_fn+0x1fc>)
		if (tmpstr) {
   13dd0:	4683      	mov	fp, r0
   13dd2:	9b01      	ldr	r3, [sp, #4]
   13dd4:	2800      	cmp	r0, #0
   13dd6:	d177      	bne.n	13ec8 <socket_thread_fn+0x1c8>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   13dd8:	494b      	ldr	r1, [pc, #300]	; (13f08 <socket_thread_fn+0x208>)
   13dda:	4650      	mov	r0, sl
   13ddc:	f011 ffa3 	bl	25d26 <strstr>
		if (tmpstr) {
   13de0:	4683      	mov	fp, r0
   13de2:	2800      	cmp	r0, #0
   13de4:	d173      	bne.n	13ece <socket_thread_fn+0x1ce>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   13de6:	4949      	ldr	r1, [pc, #292]	; (13f0c <socket_thread_fn+0x20c>)
   13de8:	4650      	mov	r0, sl
   13dea:	f011 ff9c 	bl	25d26 <strstr>
		if (tmpstr) {
   13dee:	4683      	mov	fp, r0
   13df0:	b198      	cbz	r0, 13e1a <socket_thread_fn+0x11a>
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   13df2:	1d60      	adds	r0, r4, #5
   13df4:	f011 fefe 	bl	25bf4 <atoi>
			ret->state = AT_CMD_ERROR_CMS;
   13df8:	f04f 0a02 	mov.w	sl, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   13dfc:	4605      	mov	r5, r0
		buf[new_len++] = '\0';
   13dfe:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   13e00:	ebab 0404 	sub.w	r4, fp, r4
		buf[new_len++] = '\0';
   13e04:	f88b 3000 	strb.w	r3, [fp]
			if ((response_buf_len > 0) &&
   13e08:	f8df b120 	ldr.w	fp, [pc, #288]	; 13f2c <socket_thread_fn+0x22c>
		buf[new_len++] = '\0';
   13e0c:	3401      	adds	r4, #1
			if ((response_buf_len > 0) &&
   13e0e:	f8db 2000 	ldr.w	r2, [fp]
   13e12:	b982      	cbnz	r2, 13e36 <socket_thread_fn+0x136>
		if (payload_len == 0) {
   13e14:	bb24      	cbnz	r4, 13e60 <socket_thread_fn+0x160>
		current_cmd_handler = NULL;
   13e16:	603c      	str	r4, [r7, #0]
   13e18:	e7ba      	b.n	13d90 <socket_thread_fn+0x90>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   13e1a:	493d      	ldr	r1, [pc, #244]	; (13f10 <socket_thread_fn+0x210>)
   13e1c:	4650      	mov	r0, sl
   13e1e:	f011 ff82 	bl	25d26 <strstr>
		if (tmpstr) {
   13e22:	4683      	mov	fp, r0
   13e24:	2800      	cmp	r0, #0
   13e26:	d056      	beq.n	13ed6 <socket_thread_fn+0x1d6>
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   13e28:	1d60      	adds	r0, r4, #5
   13e2a:	f011 fee3 	bl	25bf4 <atoi>
			ret->state = AT_CMD_ERROR_CME;
   13e2e:	f04f 0a03 	mov.w	sl, #3
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   13e32:	4605      	mov	r5, r0
   13e34:	e7e3      	b.n	13dfe <socket_thread_fn+0xfe>
			    (response_buf != NULL)) {
   13e36:	4b37      	ldr	r3, [pc, #220]	; (13f14 <socket_thread_fn+0x214>)
   13e38:	6818      	ldr	r0, [r3, #0]
			if ((response_buf_len > 0) &&
   13e3a:	2800      	cmp	r0, #0
   13e3c:	d0ea      	beq.n	13e14 <socket_thread_fn+0x114>
				if (response_buf_len > payload_len) {
   13e3e:	42a2      	cmp	r2, r4
   13e40:	d90a      	bls.n	13e58 <socket_thread_fn+0x158>
					memcpy(response_buf,
   13e42:	4622      	mov	r2, r4
   13e44:	4934      	ldr	r1, [pc, #208]	; (13f18 <socket_thread_fn+0x218>)
   13e46:	9301      	str	r3, [sp, #4]
   13e48:	f012 f80d 	bl	25e66 <memcpy>
   13e4c:	9b01      	ldr	r3, [sp, #4]
				response_buf_len = 0;
   13e4e:	2200      	movs	r2, #0
   13e50:	f8cb 2000 	str.w	r2, [fp]
				response_buf     = NULL;
   13e54:	601a      	str	r2, [r3, #0]
   13e56:	e795      	b.n	13d84 <socket_thread_fn+0x84>
					ret.code = AT_CMD_ERROR;
   13e58:	2501      	movs	r5, #1
   13e5a:	e7f8      	b.n	13e4e <socket_thread_fn+0x14e>
		if (payload_len == 0) {
   13e5c:	f04f 0a04 	mov.w	sl, #4
			struct callback_work_item *item =
   13e60:	f44f 7088 	mov.w	r0, #272	; 0x110
   13e64:	f00e f8fa 	bl	2205c <k_malloc>
			if (!item) {
   13e68:	4683      	mov	fp, r0
   13e6a:	b340      	cbz	r0, 13ebe <socket_thread_fn+0x1be>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   13e6c:	2300      	movs	r3, #0
   13e6e:	4a2b      	ldr	r2, [pc, #172]	; (13f1c <socket_thread_fn+0x21c>)
   13e70:	6003      	str	r3, [r0, #0]
   13e72:	e9c0 2301 	strd	r2, r3, [r0, #4]
			memcpy(item->data, buf, payload_len);
   13e76:	4928      	ldr	r1, [pc, #160]	; (13f18 <socket_thread_fn+0x218>)
   13e78:	4622      	mov	r2, r4
   13e7a:	300c      	adds	r0, #12
   13e7c:	f011 fff3 	bl	25e66 <memcpy>
			if (ret.state == AT_CMD_NOTIFICATION) {
   13e80:	f1ba 0f04 	cmp.w	sl, #4
				item->callback = notification_handler;
   13e84:	bf0a      	itet	eq
   13e86:	4b26      	ldreq	r3, [pc, #152]	; (13f20 <socket_thread_fn+0x220>)
				item->callback = current_cmd_handler;
   13e88:	683b      	ldrne	r3, [r7, #0]
				item->callback = notification_handler;
   13e8a:	681b      	ldreq	r3, [r3, #0]
				item->callback = current_cmd_handler;
   13e8c:	f8cb 310c 	str.w	r3, [fp, #268]	; 0x10c
   13e90:	f10b 0308 	add.w	r3, fp, #8
   13e94:	e8d3 2fef 	ldaex	r2, [r3]
   13e98:	f042 0101 	orr.w	r1, r2, #1
   13e9c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13ea0:	2800      	cmp	r0, #0
   13ea2:	d1f7      	bne.n	13e94 <socket_thread_fn+0x194>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13ea4:	07d3      	lsls	r3, r2, #31
   13ea6:	f53f af6d 	bmi.w	13d84 <socket_thread_fn+0x84>
		k_queue_append(&work_q->queue, work);
   13eaa:	4659      	mov	r1, fp
   13eac:	481d      	ldr	r0, [pc, #116]	; (13f24 <socket_thread_fn+0x224>)
   13eae:	f013 fbc5 	bl	2763c <k_queue_append>
   13eb2:	e767      	b.n	13d84 <socket_thread_fn+0x84>
			ret.state = AT_CMD_ERROR;
   13eb4:	f04f 0a01 	mov.w	sl, #1
			ret.code  = -ENOBUFS;
   13eb8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   13ebc:	e762      	b.n	13d84 <socket_thread_fn+0x84>
				ret.state = AT_CMD_ERROR;
   13ebe:	f04f 0a01 	mov.w	sl, #1
				ret.code  = -ENOMEM;
   13ec2:	f06f 050b 	mvn.w	r5, #11
   13ec6:	e75d      	b.n	13d84 <socket_thread_fn+0x84>
			ret->state = AT_CMD_OK;
   13ec8:	461d      	mov	r5, r3
			ret->code  = 0;
   13eca:	469a      	mov	sl, r3
   13ecc:	e797      	b.n	13dfe <socket_thread_fn+0xfe>
			ret->state = AT_CMD_ERROR;
   13ece:	f04f 0a01 	mov.w	sl, #1
			ret->code  = ENOEXEC;
   13ed2:	2508      	movs	r5, #8
   13ed4:	e793      	b.n	13dfe <socket_thread_fn+0xfe>
		new_len = strlen(buf) + 1;
   13ed6:	4650      	mov	r0, sl
   13ed8:	f011 ff5a 	bl	25d90 <strlen>
		if (payload_len == 0) {
   13edc:	1c44      	adds	r4, r0, #1
   13ede:	d1bd      	bne.n	13e5c <socket_thread_fn+0x15c>
		current_cmd_handler = NULL;
   13ee0:	603c      	str	r4, [r7, #0]
   13ee2:	e715      	b.n	13d10 <socket_thread_fn+0x10>
   13ee4:	200201a8 	.word	0x200201a8
   13ee8:	0002ab9f 	.word	0x0002ab9f
   13eec:	0002abaa 	.word	0x0002abaa
   13ef0:	0002ab6d 	.word	0x0002ab6d
   13ef4:	0002c016 	.word	0x0002c016
   13ef8:	2002bb98 	.word	0x2002bb98
   13efc:	20020440 	.word	0x20020440
   13f00:	2002bbac 	.word	0x2002bbac
   13f04:	0002c159 	.word	0x0002c159
   13f08:	0002c15c 	.word	0x0002c15c
   13f0c:	0002c162 	.word	0x0002c162
   13f10:	0002c168 	.word	0x0002c168
   13f14:	20020448 	.word	0x20020448
   13f18:	20023f41 	.word	0x20023f41
   13f1c:	000275b7 	.word	0x000275b7
   13f20:	20020444 	.word	0x20020444
   13f24:	20022168 	.word	0x20022168
   13f28:	2002043c 	.word	0x2002043c
   13f2c:	2002044c 	.word	0x2002044c

00013f30 <at_cmd_write>:
{
   13f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f34:	4688      	mov	r8, r1
   13f36:	461e      	mov	r6, r3
   13f38:	4605      	mov	r5, r0
   13f3a:	4617      	mov	r7, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   13f3c:	4c0a      	ldr	r4, [pc, #40]	; (13f68 <at_cmd_write+0x38>)
   13f3e:	f04f 31ff 	mov.w	r1, #4294967295
   13f42:	4620      	mov	r0, r4
   13f44:	f00e fa32 	bl	223ac <z_impl_k_mutex_lock>
	response_buf     = buf;
   13f48:	4b08      	ldr	r3, [pc, #32]	; (13f6c <at_cmd_write+0x3c>)
	return_code = at_write(cmd, state);
   13f4a:	4631      	mov	r1, r6
	response_buf     = buf;
   13f4c:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   13f50:	4b07      	ldr	r3, [pc, #28]	; (13f70 <at_cmd_write+0x40>)
	return_code = at_write(cmd, state);
   13f52:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   13f54:	601f      	str	r7, [r3, #0]
	return_code = at_write(cmd, state);
   13f56:	f7ff fe63 	bl	13c20 <at_write>
   13f5a:	4605      	mov	r5, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   13f5c:	4620      	mov	r0, r4
   13f5e:	f00e fad9 	bl	22514 <z_impl_k_mutex_unlock>
}
   13f62:	4628      	mov	r0, r5
   13f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f68:	2002bb98 	.word	0x2002bb98
   13f6c:	20020448 	.word	0x20020448
   13f70:	2002044c 	.word	0x2002044c

00013f74 <at_cmd_set_notification_handler>:
{
   13f74:	b538      	push	{r3, r4, r5, lr}
   13f76:	4605      	mov	r5, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   13f78:	4c06      	ldr	r4, [pc, #24]	; (13f94 <at_cmd_set_notification_handler+0x20>)
   13f7a:	f04f 31ff 	mov.w	r1, #4294967295
   13f7e:	4620      	mov	r0, r4
   13f80:	f00e fa14 	bl	223ac <z_impl_k_mutex_lock>
	notification_handler = handler;
   13f84:	4b04      	ldr	r3, [pc, #16]	; (13f98 <at_cmd_set_notification_handler+0x24>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   13f86:	4620      	mov	r0, r4
   13f88:	601d      	str	r5, [r3, #0]
}
   13f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13f8e:	f00e bac1 	b.w	22514 <z_impl_k_mutex_unlock>
   13f92:	bf00      	nop
   13f94:	2002bb98 	.word	0x2002bb98
   13f98:	20020444 	.word	0x20020444

00013f9c <at_handler>:
#if defined(CONFIG_LTE_LEGACY_PCO_MODE)
static const char legacy_pco[] = "AT%XEPCO=0";
#endif

void at_handler(char *response)
{
   13f9c:	b510      	push	{r4, lr}
	LOG_DBG("recv: %s", response);

	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   13f9e:	4601      	mov	r1, r0
{
   13fa0:	4604      	mov	r4, r0
	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   13fa2:	2209      	movs	r2, #9
   13fa4:	480f      	ldr	r0, [pc, #60]	; (13fe4 <at_handler+0x48>)
   13fa6:	f011 ff37 	bl	25e18 <memcmp>
   13faa:	b920      	cbnz	r0, 13fb6 <at_handler+0x1a>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
	    !memcmp(status4, response, AT_CMD_SIZE(status4))) {
		k_sem_give(&link);
	}
}
   13fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   13fb0:	480d      	ldr	r0, [pc, #52]	; (13fe8 <at_handler+0x4c>)
   13fb2:	f00f bd79 	b.w	23aa8 <z_impl_k_sem_give>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
   13fb6:	2208      	movs	r2, #8
   13fb8:	4621      	mov	r1, r4
   13fba:	480c      	ldr	r0, [pc, #48]	; (13fec <at_handler+0x50>)
   13fbc:	f011 ff2c 	bl	25e18 <memcmp>
	if (!memcmp(status1, response, AT_CMD_SIZE(status1)) ||
   13fc0:	2800      	cmp	r0, #0
   13fc2:	d0f3      	beq.n	13fac <at_handler+0x10>
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
   13fc4:	2209      	movs	r2, #9
   13fc6:	4621      	mov	r1, r4
   13fc8:	4809      	ldr	r0, [pc, #36]	; (13ff0 <at_handler+0x54>)
   13fca:	f011 ff25 	bl	25e18 <memcmp>
	    !memcmp(status2, response, AT_CMD_SIZE(status2)) ||
   13fce:	2800      	cmp	r0, #0
   13fd0:	d0ec      	beq.n	13fac <at_handler+0x10>
	    !memcmp(status4, response, AT_CMD_SIZE(status4))) {
   13fd2:	2208      	movs	r2, #8
   13fd4:	4621      	mov	r1, r4
   13fd6:	4807      	ldr	r0, [pc, #28]	; (13ff4 <at_handler+0x58>)
   13fd8:	f011 ff1e 	bl	25e18 <memcmp>
	    !memcmp(status3, response, AT_CMD_SIZE(status3)) ||
   13fdc:	2800      	cmp	r0, #0
   13fde:	d0e5      	beq.n	13fac <at_handler+0x10>
}
   13fe0:	bd10      	pop	{r4, pc}
   13fe2:	bf00      	nop
   13fe4:	0002c18f 	.word	0x0002c18f
   13fe8:	20020500 	.word	0x20020500
   13fec:	0002c199 	.word	0x0002c199
   13ff0:	0002c1a2 	.word	0x0002c1a2
   13ff4:	0002c1ac 	.word	0x0002c1ac

00013ff8 <w_lte_lc_init_and_connect>:
	/* Request configured eDRX settings to save power */
	if (at_cmd_write(edrx_req, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(subscribe, NULL, 0, NULL) != 0) {
   13ff8:	2300      	movs	r3, #0
{
   13ffa:	b510      	push	{r4, lr}
	if (at_cmd_write(subscribe, NULL, 0, NULL) != 0) {
   13ffc:	461a      	mov	r2, r3
   13ffe:	4619      	mov	r1, r3
   14000:	4815      	ldr	r0, [pc, #84]	; (14058 <w_lte_lc_init_and_connect+0x60>)
   14002:	f7ff ff95 	bl	13f30 <at_cmd_write>
   14006:	4603      	mov	r3, r0
   14008:	b118      	cbz	r0, 14012 <w_lte_lc_init_and_connect+0x1a>
		return -EIO;
   1400a:	f06f 0404 	mvn.w	r4, #4
	k_sem_take(&link, K_FOREVER);

	at_cmd_set_notification_handler(NULL);

	return 0;
}
   1400e:	4620      	mov	r0, r4
   14010:	bd10      	pop	{r4, pc}
	if (at_cmd_write(network_mode, NULL, 0, NULL) != 0) {
   14012:	4602      	mov	r2, r0
   14014:	4601      	mov	r1, r0
   14016:	4811      	ldr	r0, [pc, #68]	; (1405c <w_lte_lc_init_and_connect+0x64>)
   14018:	f7ff ff8a 	bl	13f30 <at_cmd_write>
   1401c:	4604      	mov	r4, r0
   1401e:	2800      	cmp	r0, #0
   14020:	d1f3      	bne.n	1400a <w_lte_lc_init_and_connect+0x12>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   14022:	4601      	mov	r1, r0
   14024:	2201      	movs	r2, #1
   14026:	480e      	ldr	r0, [pc, #56]	; (14060 <w_lte_lc_init_and_connect+0x68>)
   14028:	f00f fd08 	bl	23a3c <z_impl_k_sem_init>
	at_cmd_set_notification_handler(at_handler);
   1402c:	480d      	ldr	r0, [pc, #52]	; (14064 <w_lte_lc_init_and_connect+0x6c>)
   1402e:	f7ff ffa1 	bl	13f74 <at_cmd_set_notification_handler>
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   14032:	4623      	mov	r3, r4
   14034:	4622      	mov	r2, r4
   14036:	4621      	mov	r1, r4
   14038:	480b      	ldr	r0, [pc, #44]	; (14068 <w_lte_lc_init_and_connect+0x70>)
   1403a:	f7ff ff79 	bl	13f30 <at_cmd_write>
   1403e:	4604      	mov	r4, r0
   14040:	2800      	cmp	r0, #0
   14042:	d1e2      	bne.n	1400a <w_lte_lc_init_and_connect+0x12>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   14044:	f04f 31ff 	mov.w	r1, #4294967295
   14048:	4805      	ldr	r0, [pc, #20]	; (14060 <w_lte_lc_init_and_connect+0x68>)
   1404a:	f00f fd75 	bl	23b38 <z_impl_k_sem_take>
	at_cmd_set_notification_handler(NULL);
   1404e:	4620      	mov	r0, r4
   14050:	f7ff ff90 	bl	13f74 <at_cmd_set_notification_handler>
	return 0;
   14054:	e7db      	b.n	1400e <w_lte_lc_init_and_connect+0x16>
   14056:	bf00      	nop
   14058:	0002c1c6 	.word	0x0002c1c6
   1405c:	0002c16e 	.word	0x0002c16e
   14060:	20020500 	.word	0x20020500
   14064:	00013f9d 	.word	0x00013f9d
   14068:	0002c185 	.word	0x0002c185

0001406c <dfu_client_event_handler>:
   1406c:	f850 1b08 	ldr.w	r1, [r0], #8
   14070:	0c09      	lsrs	r1, r1, #16
   14072:	f008 b833 	b.w	1c0dc <rpc_dfu_event_handler>
   14076:	bf00      	nop

00014078 <rpc_dfu_client_init>:
   14078:	4801      	ldr	r0, [pc, #4]	; (14080 <rpc_dfu_client_init+0x8>)
   1407a:	f00c b9f9 	b.w	20470 <rpc_client_register>
   1407e:	bf00      	nop
   14080:	00027cec 	.word	0x00027cec

00014084 <rpc_dfu_client_request_alloc>:
   14084:	2300      	movs	r3, #0
   14086:	b510      	push	{r4, lr}
   14088:	b082      	sub	sp, #8
   1408a:	9301      	str	r3, [sp, #4]
   1408c:	b158      	cbz	r0, 140a6 <rpc_dfu_client_request_alloc+0x22>
   1408e:	4604      	mov	r4, r0
   14090:	aa01      	add	r2, sp, #4
   14092:	2006      	movs	r0, #6
   14094:	f00c fc2c 	bl	208f0 <rpc_message_alloc>
   14098:	b918      	cbnz	r0, 140a2 <rpc_dfu_client_request_alloc+0x1e>
   1409a:	9b01      	ldr	r3, [sp, #4]
   1409c:	b10b      	cbz	r3, 140a2 <rpc_dfu_client_request_alloc+0x1e>
   1409e:	3308      	adds	r3, #8
   140a0:	6023      	str	r3, [r4, #0]
   140a2:	b002      	add	sp, #8
   140a4:	bd10      	pop	{r4, pc}
   140a6:	2007      	movs	r0, #7
   140a8:	b002      	add	sp, #8
   140aa:	bd10      	pop	{r4, pc}

000140ac <rpc_dfu_client_request_send>:
   140ac:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   140b0:	d10b      	bne.n	140ca <rpc_dfu_client_request_send+0x1e>
   140b2:	b160      	cbz	r0, 140ce <rpc_dfu_client_request_send+0x22>
   140b4:	4603      	mov	r3, r0
   140b6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   140ba:	2006      	movs	r0, #6
   140bc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   140c0:	f843 1d08 	str.w	r1, [r3, #-8]!
   140c4:	4619      	mov	r1, r3
   140c6:	f00c bbfb 	b.w	208c0 <rpc_message_send>
   140ca:	200f      	movs	r0, #15
   140cc:	4770      	bx	lr
   140ce:	2007      	movs	r0, #7
   140d0:	4770      	bx	lr
   140d2:	bf00      	nop

000140d4 <rpc_dfu_client_message_free>:
   140d4:	b120      	cbz	r0, 140e0 <rpc_dfu_client_message_free+0xc>
   140d6:	f1a0 0108 	sub.w	r1, r0, #8
   140da:	2006      	movs	r0, #6
   140dc:	f00c bc3c 	b.w	20958 <rpc_message_free>
   140e0:	2007      	movs	r0, #7
   140e2:	4770      	bx	lr

000140e4 <rpc_dfu_client_data_free>:
   140e4:	b118      	cbz	r0, 140ee <rpc_dfu_client_data_free+0xa>
   140e6:	4601      	mov	r1, r0
   140e8:	2006      	movs	r0, #6
   140ea:	f00c bce5 	b.w	20ab8 <rpc_message_data_free>
   140ee:	2007      	movs	r0, #7
   140f0:	4770      	bx	lr
   140f2:	bf00      	nop

000140f4 <mem_free>:
   140f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f8:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 141c8 <mem_free+0xd4>
   140fc:	b083      	sub	sp, #12
   140fe:	9000      	str	r0, [sp, #0]
   14100:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   14104:	f8dc 3008 	ldr.w	r3, [ip, #8]
   14108:	b12b      	cbz	r3, 14116 <mem_free+0x22>
   1410a:	f8dc 2000 	ldr.w	r2, [ip]
   1410e:	9c00      	ldr	r4, [sp, #0]
   14110:	7810      	ldrb	r0, [r2, #0]
   14112:	42a0      	cmp	r0, r4
   14114:	d006      	beq.n	14124 <mem_free+0x30>
   14116:	f10c 0c0c 	add.w	ip, ip, #12
   1411a:	45e3      	cmp	fp, ip
   1411c:	d1f2      	bne.n	14104 <mem_free+0x10>
   1411e:	b003      	add	sp, #12
   14120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14124:	f8dc a004 	ldr.w	sl, [ip, #4]
   14128:	eb03 080a 	add.w	r8, r3, sl
   1412c:	45c2      	cmp	sl, r8
   1412e:	d2f2      	bcs.n	14116 <mem_free+0x22>
   14130:	6853      	ldr	r3, [r2, #4]
   14132:	f8cd c004 	str.w	ip, [sp, #4]
   14136:	46d6      	mov	lr, sl
   14138:	469c      	mov	ip, r3
   1413a:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1413e:	8997      	ldrh	r7, [r2, #12]
   14140:	ebae 000a 	sub.w	r0, lr, sl
   14144:	b3df      	cbz	r7, 141be <mem_free+0xca>
   14146:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1414a:	4290      	cmp	r0, r2
   1414c:	d31c      	bcc.n	14188 <mem_free+0x94>
   1414e:	4665      	mov	r5, ip
   14150:	2400      	movs	r4, #0
   14152:	f109 0304 	add.w	r3, r9, #4
   14156:	e003      	b.n	14160 <mem_free+0x6c>
   14158:	885a      	ldrh	r2, [r3, #2]
   1415a:	3304      	adds	r3, #4
   1415c:	4282      	cmp	r2, r0
   1415e:	d815      	bhi.n	1418c <mem_free+0x98>
   14160:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   14164:	3401      	adds	r4, #1
   14166:	42a7      	cmp	r7, r4
   14168:	fb02 5506 	mla	r5, r2, r6, r5
   1416c:	eba0 0002 	sub.w	r0, r0, r2
   14170:	461e      	mov	r6, r3
   14172:	d1f1      	bne.n	14158 <mem_free+0x64>
   14174:	2000      	movs	r0, #0
   14176:	4281      	cmp	r1, r0
   14178:	d00d      	beq.n	14196 <mem_free+0xa2>
   1417a:	f10e 0e01 	add.w	lr, lr, #1
   1417e:	45f0      	cmp	r8, lr
   14180:	d1de      	bne.n	14140 <mem_free+0x4c>
   14182:	f8dd c004 	ldr.w	ip, [sp, #4]
   14186:	e7c6      	b.n	14116 <mem_free+0x22>
   14188:	4665      	mov	r5, ip
   1418a:	464e      	mov	r6, r9
   1418c:	8833      	ldrh	r3, [r6, #0]
   1418e:	fb00 5003 	mla	r0, r0, r3, r5
   14192:	4281      	cmp	r1, r0
   14194:	d1f1      	bne.n	1417a <mem_free+0x86>
   14196:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1419a:	f8dd c004 	ldr.w	ip, [sp, #4]
   1419e:	d0ba      	beq.n	14116 <mem_free+0x22>
   141a0:	2301      	movs	r3, #1
   141a2:	4a08      	ldr	r2, [pc, #32]	; (141c4 <mem_free+0xd0>)
   141a4:	ea4f 115e 	mov.w	r1, lr, lsr #5
   141a8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   141ac:	f00e 0e1f 	and.w	lr, lr, #31
   141b0:	fa03 fe0e 	lsl.w	lr, r3, lr
   141b4:	ea4e 0000 	orr.w	r0, lr, r0
   141b8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   141bc:	e7af      	b.n	1411e <mem_free+0x2a>
   141be:	4638      	mov	r0, r7
   141c0:	e7d9      	b.n	14176 <mem_free+0x82>
   141c2:	bf00      	nop
   141c4:	20020518 	.word	0x20020518
   141c8:	2002055c 	.word	0x2002055c

000141cc <mem_alloc.constprop.5>:
   141cc:	2800      	cmp	r0, #0
   141ce:	d050      	beq.n	14272 <mem_alloc.constprop.5+0xa6>
   141d0:	4b6d      	ldr	r3, [pc, #436]	; (14388 <mem_alloc.constprop.5+0x1bc>)
   141d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   141d6:	4290      	cmp	r0, r2
   141d8:	d84b      	bhi.n	14272 <mem_alloc.constprop.5+0xa6>
   141da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141de:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   141e2:	b083      	sub	sp, #12
   141e4:	f1bb 0f00 	cmp.w	fp, #0
   141e8:	d054      	beq.n	14294 <mem_alloc.constprop.5+0xc8>
   141ea:	f10b 32ff 	add.w	r2, fp, #4294967295
   141ee:	4691      	mov	r9, r2
   141f0:	2600      	movs	r6, #0
   141f2:	f04f 0812 	mov.w	r8, #18
   141f6:	4f65      	ldr	r7, [pc, #404]	; (1438c <mem_alloc.constprop.5+0x1c0>)
   141f8:	9201      	str	r2, [sp, #4]
   141fa:	f10b 0e11 	add.w	lr, fp, #17
   141fe:	eb06 0209 	add.w	r2, r6, r9
   14202:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   14206:	3201      	adds	r2, #1
   14208:	0852      	lsrs	r2, r2, #1
   1420a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1420e:	f102 0112 	add.w	r1, r2, #18
   14212:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   14216:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1421a:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1421e:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   14222:	f8dc c004 	ldr.w	ip, [ip, #4]
   14226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1422a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1422e:	f8da a010 	ldr.w	sl, [sl, #16]
   14232:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   14236:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1423a:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1423e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   14242:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   14246:	6849      	ldr	r1, [r1, #4]
   14248:	692d      	ldr	r5, [r5, #16]
   1424a:	6924      	ldr	r4, [r4, #16]
   1424c:	f8dc c004 	ldr.w	ip, [ip, #4]
   14250:	4550      	cmp	r0, sl
   14252:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   14256:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1425a:	d915      	bls.n	14288 <mem_alloc.constprop.5+0xbc>
   1425c:	4288      	cmp	r0, r1
   1425e:	d211      	bcs.n	14284 <mem_alloc.constprop.5+0xb8>
   14260:	42a8      	cmp	r0, r5
   14262:	d908      	bls.n	14276 <mem_alloc.constprop.5+0xaa>
   14264:	1c56      	adds	r6, r2, #1
   14266:	45b1      	cmp	r9, r6
   14268:	f0c0 8087 	bcc.w	1437a <mem_alloc.constprop.5+0x1ae>
   1426c:	f102 0813 	add.w	r8, r2, #19
   14270:	e7c5      	b.n	141fe <mem_alloc.constprop.5+0x32>
   14272:	2000      	movs	r0, #0
   14274:	4770      	bx	lr
   14276:	f102 39ff 	add.w	r9, r2, #4294967295
   1427a:	454e      	cmp	r6, r9
   1427c:	d87d      	bhi.n	1437a <mem_alloc.constprop.5+0x1ae>
   1427e:	f102 0e11 	add.w	lr, r2, #17
   14282:	e7bc      	b.n	141fe <mem_alloc.constprop.5+0x32>
   14284:	f109 0601 	add.w	r6, r9, #1
   14288:	45b3      	cmp	fp, r6
   1428a:	d007      	beq.n	1429c <mem_alloc.constprop.5+0xd0>
   1428c:	2e10      	cmp	r6, #16
   1428e:	d001      	beq.n	14294 <mem_alloc.constprop.5+0xc8>
   14290:	45b3      	cmp	fp, r6
   14292:	d808      	bhi.n	142a6 <mem_alloc.constprop.5+0xda>
   14294:	2000      	movs	r0, #0
   14296:	b003      	add	sp, #12
   14298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1429c:	9a01      	ldr	r2, [sp, #4]
   1429e:	2a10      	cmp	r2, #16
   142a0:	bf18      	it	ne
   142a2:	4616      	movne	r6, r2
   142a4:	d0f6      	beq.n	14294 <mem_alloc.constprop.5+0xc8>
   142a6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 14390 <mem_alloc.constprop.5+0x1c4>
   142aa:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   142ae:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   142b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   142b6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   142ba:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   142be:	f8d2 e004 	ldr.w	lr, [r2, #4]
   142c2:	691d      	ldr	r5, [r3, #16]
   142c4:	2c00      	cmp	r4, #0
   142c6:	d056      	beq.n	14376 <mem_alloc.constprop.5+0x1aa>
   142c8:	462a      	mov	r2, r5
   142ca:	4670      	mov	r0, lr
   142cc:	00a4      	lsls	r4, r4, #2
   142ce:	eb05 0904 	add.w	r9, r5, r4
   142d2:	8851      	ldrh	r1, [r2, #2]
   142d4:	3204      	adds	r2, #4
   142d6:	4591      	cmp	r9, r2
   142d8:	4408      	add	r0, r1
   142da:	d1fa      	bne.n	142d2 <mem_alloc.constprop.5+0x106>
   142dc:	1929      	adds	r1, r5, r4
   142de:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   142e2:	4482      	add	sl, r0
   142e4:	4582      	cmp	sl, r0
   142e6:	d918      	bls.n	1431a <mem_alloc.constprop.5+0x14e>
   142e8:	0941      	lsrs	r1, r0, #5
   142ea:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   142ee:	f000 041f 	and.w	r4, r0, #31
   142f2:	fa22 f904 	lsr.w	r9, r2, r4
   142f6:	f019 0f01 	tst.w	r9, #1
   142fa:	d007      	beq.n	1430c <mem_alloc.constprop.5+0x140>
   142fc:	e013      	b.n	14326 <mem_alloc.constprop.5+0x15a>
   142fe:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   14302:	fa22 f904 	lsr.w	r9, r2, r4
   14306:	f019 0f01 	tst.w	r9, #1
   1430a:	d10c      	bne.n	14326 <mem_alloc.constprop.5+0x15a>
   1430c:	3001      	adds	r0, #1
   1430e:	4582      	cmp	sl, r0
   14310:	ea4f 1150 	mov.w	r1, r0, lsr #5
   14314:	f000 041f 	and.w	r4, r0, #31
   14318:	d1f1      	bne.n	142fe <mem_alloc.constprop.5+0x132>
   1431a:	3601      	adds	r6, #1
   1431c:	455e      	cmp	r6, fp
   1431e:	f108 0808 	add.w	r8, r8, #8
   14322:	d3c4      	bcc.n	142ae <mem_alloc.constprop.5+0xe2>
   14324:	e7b6      	b.n	14294 <mem_alloc.constprop.5+0xc8>
   14326:	2601      	movs	r6, #1
   14328:	fa06 f404 	lsl.w	r4, r6, r4
   1432c:	899e      	ldrh	r6, [r3, #12]
   1432e:	ea22 0204 	bic.w	r2, r2, r4
   14332:	eba0 000e 	sub.w	r0, r0, lr
   14336:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1433a:	685c      	ldr	r4, [r3, #4]
   1433c:	2e00      	cmp	r6, #0
   1433e:	d0a9      	beq.n	14294 <mem_alloc.constprop.5+0xc8>
   14340:	886a      	ldrh	r2, [r5, #2]
   14342:	4282      	cmp	r2, r0
   14344:	d811      	bhi.n	1436a <mem_alloc.constprop.5+0x19e>
   14346:	2100      	movs	r1, #0
   14348:	1d2b      	adds	r3, r5, #4
   1434a:	e003      	b.n	14354 <mem_alloc.constprop.5+0x188>
   1434c:	885a      	ldrh	r2, [r3, #2]
   1434e:	3304      	adds	r3, #4
   14350:	4282      	cmp	r2, r0
   14352:	d80a      	bhi.n	1436a <mem_alloc.constprop.5+0x19e>
   14354:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   14358:	3101      	adds	r1, #1
   1435a:	428e      	cmp	r6, r1
   1435c:	fb02 4405 	mla	r4, r2, r5, r4
   14360:	eba0 0002 	sub.w	r0, r0, r2
   14364:	461d      	mov	r5, r3
   14366:	d1f1      	bne.n	1434c <mem_alloc.constprop.5+0x180>
   14368:	e794      	b.n	14294 <mem_alloc.constprop.5+0xc8>
   1436a:	882b      	ldrh	r3, [r5, #0]
   1436c:	fb00 4003 	mla	r0, r0, r3, r4
   14370:	b003      	add	sp, #12
   14372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14376:	4670      	mov	r0, lr
   14378:	e7b0      	b.n	142dc <mem_alloc.constprop.5+0x110>
   1437a:	f1bb 0f10 	cmp.w	fp, #16
   1437e:	bf08      	it	eq
   14380:	260f      	moveq	r6, #15
   14382:	d090      	beq.n	142a6 <mem_alloc.constprop.5+0xda>
   14384:	e786      	b.n	14294 <mem_alloc.constprop.5+0xc8>
   14386:	bf00      	nop
   14388:	20020598 	.word	0x20020598
   1438c:	2002055c 	.word	0x2002055c
   14390:	20020518 	.word	0x20020518

00014394 <mem_alloc.constprop.4>:
   14394:	2800      	cmp	r0, #0
   14396:	d04c      	beq.n	14432 <mem_alloc.constprop.4+0x9e>
   14398:	4b6b      	ldr	r3, [pc, #428]	; (14548 <mem_alloc.constprop.4+0x1b4>)
   1439a:	681a      	ldr	r2, [r3, #0]
   1439c:	4290      	cmp	r0, r2
   1439e:	d848      	bhi.n	14432 <mem_alloc.constprop.4+0x9e>
   143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a4:	685f      	ldr	r7, [r3, #4]
   143a6:	b083      	sub	sp, #12
   143a8:	9700      	str	r7, [sp, #0]
   143aa:	2f00      	cmp	r7, #0
   143ac:	d051      	beq.n	14452 <mem_alloc.constprop.4+0xbe>
   143ae:	1e7a      	subs	r2, r7, #1
   143b0:	4696      	mov	lr, r2
   143b2:	2100      	movs	r1, #0
   143b4:	f04f 0c01 	mov.w	ip, #1
   143b8:	4c64      	ldr	r4, [pc, #400]	; (1454c <mem_alloc.constprop.4+0x1b8>)
   143ba:	9201      	str	r2, [sp, #4]
   143bc:	eb01 020e 	add.w	r2, r1, lr
   143c0:	3201      	adds	r2, #1
   143c2:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   143c6:	0852      	lsrs	r2, r2, #1
   143c8:	f102 0801 	add.w	r8, r2, #1
   143cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   143d0:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   143d4:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   143d8:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   143dc:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   143e0:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   143e4:	f8d9 9004 	ldr.w	r9, [r9, #4]
   143e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   143ec:	f8da a010 	ldr.w	sl, [sl, #16]
   143f0:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   143f4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   143f8:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   143fc:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   14400:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   14404:	6936      	ldr	r6, [r6, #16]
   14406:	f8db b004 	ldr.w	fp, [fp, #4]
   1440a:	692d      	ldr	r5, [r5, #16]
   1440c:	f8d9 9004 	ldr.w	r9, [r9, #4]
   14410:	4550      	cmp	r0, sl
   14412:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   14416:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1441a:	d913      	bls.n	14444 <mem_alloc.constprop.4+0xb0>
   1441c:	42a8      	cmp	r0, r5
   1441e:	d210      	bcs.n	14442 <mem_alloc.constprop.4+0xae>
   14420:	42b0      	cmp	r0, r6
   14422:	d908      	bls.n	14436 <mem_alloc.constprop.4+0xa2>
   14424:	45c6      	cmp	lr, r8
   14426:	4641      	mov	r1, r8
   14428:	f0c0 8087 	bcc.w	1453a <mem_alloc.constprop.4+0x1a6>
   1442c:	f108 0c01 	add.w	ip, r8, #1
   14430:	e7c4      	b.n	143bc <mem_alloc.constprop.4+0x28>
   14432:	2000      	movs	r0, #0
   14434:	4770      	bx	lr
   14436:	f102 3eff 	add.w	lr, r2, #4294967295
   1443a:	4571      	cmp	r1, lr
   1443c:	d87d      	bhi.n	1453a <mem_alloc.constprop.4+0x1a6>
   1443e:	4617      	mov	r7, r2
   14440:	e7bc      	b.n	143bc <mem_alloc.constprop.4+0x28>
   14442:	4639      	mov	r1, r7
   14444:	9a00      	ldr	r2, [sp, #0]
   14446:	428a      	cmp	r2, r1
   14448:	d007      	beq.n	1445a <mem_alloc.constprop.4+0xc6>
   1444a:	2910      	cmp	r1, #16
   1444c:	d001      	beq.n	14452 <mem_alloc.constprop.4+0xbe>
   1444e:	428a      	cmp	r2, r1
   14450:	d808      	bhi.n	14464 <mem_alloc.constprop.4+0xd0>
   14452:	2000      	movs	r0, #0
   14454:	b003      	add	sp, #12
   14456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1445a:	9a01      	ldr	r2, [sp, #4]
   1445c:	2a10      	cmp	r2, #16
   1445e:	bf18      	it	ne
   14460:	4611      	movne	r1, r2
   14462:	d0f6      	beq.n	14452 <mem_alloc.constprop.4+0xbe>
   14464:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 14550 <mem_alloc.constprop.4+0x1bc>
   14468:	f8dd 9000 	ldr.w	r9, [sp]
   1446c:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   14470:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   14474:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   14478:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1447c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   14480:	f8d2 e004 	ldr.w	lr, [r2, #4]
   14484:	691f      	ldr	r7, [r3, #16]
   14486:	2e00      	cmp	r6, #0
   14488:	d055      	beq.n	14536 <mem_alloc.constprop.4+0x1a2>
   1448a:	463a      	mov	r2, r7
   1448c:	4670      	mov	r0, lr
   1448e:	00b6      	lsls	r6, r6, #2
   14490:	eb07 0a06 	add.w	sl, r7, r6
   14494:	8855      	ldrh	r5, [r2, #2]
   14496:	3204      	adds	r2, #4
   14498:	4592      	cmp	sl, r2
   1449a:	4428      	add	r0, r5
   1449c:	d1fa      	bne.n	14494 <mem_alloc.constprop.4+0x100>
   1449e:	19bd      	adds	r5, r7, r6
   144a0:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   144a4:	4483      	add	fp, r0
   144a6:	4583      	cmp	fp, r0
   144a8:	d918      	bls.n	144dc <mem_alloc.constprop.4+0x148>
   144aa:	0945      	lsrs	r5, r0, #5
   144ac:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   144b0:	f000 061f 	and.w	r6, r0, #31
   144b4:	fa22 fa06 	lsr.w	sl, r2, r6
   144b8:	f01a 0f01 	tst.w	sl, #1
   144bc:	d007      	beq.n	144ce <mem_alloc.constprop.4+0x13a>
   144be:	e013      	b.n	144e8 <mem_alloc.constprop.4+0x154>
   144c0:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   144c4:	fa22 fa06 	lsr.w	sl, r2, r6
   144c8:	f01a 0f01 	tst.w	sl, #1
   144cc:	d10c      	bne.n	144e8 <mem_alloc.constprop.4+0x154>
   144ce:	3001      	adds	r0, #1
   144d0:	4583      	cmp	fp, r0
   144d2:	ea4f 1550 	mov.w	r5, r0, lsr #5
   144d6:	f000 061f 	and.w	r6, r0, #31
   144da:	d1f1      	bne.n	144c0 <mem_alloc.constprop.4+0x12c>
   144dc:	3101      	adds	r1, #1
   144de:	4549      	cmp	r1, r9
   144e0:	f108 0808 	add.w	r8, r8, #8
   144e4:	d3c4      	bcc.n	14470 <mem_alloc.constprop.4+0xdc>
   144e6:	e7b4      	b.n	14452 <mem_alloc.constprop.4+0xbe>
   144e8:	2101      	movs	r1, #1
   144ea:	40b1      	lsls	r1, r6
   144ec:	899e      	ldrh	r6, [r3, #12]
   144ee:	ea22 0201 	bic.w	r2, r2, r1
   144f2:	eba0 000e 	sub.w	r0, r0, lr
   144f6:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   144fa:	685c      	ldr	r4, [r3, #4]
   144fc:	2e00      	cmp	r6, #0
   144fe:	d0a8      	beq.n	14452 <mem_alloc.constprop.4+0xbe>
   14500:	887a      	ldrh	r2, [r7, #2]
   14502:	4282      	cmp	r2, r0
   14504:	d811      	bhi.n	1452a <mem_alloc.constprop.4+0x196>
   14506:	2100      	movs	r1, #0
   14508:	1d3b      	adds	r3, r7, #4
   1450a:	e003      	b.n	14514 <mem_alloc.constprop.4+0x180>
   1450c:	885a      	ldrh	r2, [r3, #2]
   1450e:	3304      	adds	r3, #4
   14510:	4282      	cmp	r2, r0
   14512:	d80a      	bhi.n	1452a <mem_alloc.constprop.4+0x196>
   14514:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   14518:	3101      	adds	r1, #1
   1451a:	428e      	cmp	r6, r1
   1451c:	eba0 0002 	sub.w	r0, r0, r2
   14520:	fb02 4405 	mla	r4, r2, r5, r4
   14524:	461f      	mov	r7, r3
   14526:	d1f1      	bne.n	1450c <mem_alloc.constprop.4+0x178>
   14528:	e793      	b.n	14452 <mem_alloc.constprop.4+0xbe>
   1452a:	883b      	ldrh	r3, [r7, #0]
   1452c:	fb00 4003 	mla	r0, r0, r3, r4
   14530:	b003      	add	sp, #12
   14532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14536:	4670      	mov	r0, lr
   14538:	e7b1      	b.n	1449e <mem_alloc.constprop.4+0x10a>
   1453a:	9a00      	ldr	r2, [sp, #0]
   1453c:	2a10      	cmp	r2, #16
   1453e:	bf08      	it	eq
   14540:	210f      	moveq	r1, #15
   14542:	d08f      	beq.n	14464 <mem_alloc.constprop.4+0xd0>
   14544:	e785      	b.n	14452 <mem_alloc.constprop.4+0xbe>
   14546:	bf00      	nop
   14548:	20020598 	.word	0x20020598
   1454c:	2002055c 	.word	0x2002055c
   14550:	20020518 	.word	0x20020518

00014554 <nrf_mem_init>:
   14554:	b570      	push	{r4, r5, r6, lr}
   14556:	2200      	movs	r2, #0
   14558:	2501      	movs	r5, #1
   1455a:	4833      	ldr	r0, [pc, #204]	; (14628 <nrf_mem_init+0xd4>)
   1455c:	0951      	lsrs	r1, r2, #5
   1455e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   14562:	f002 031f 	and.w	r3, r2, #31
   14566:	fa05 f303 	lsl.w	r3, r5, r3
   1456a:	3201      	adds	r2, #1
   1456c:	4323      	orrs	r3, r4
   1456e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   14572:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   14576:	d1f1      	bne.n	1455c <nrf_mem_init+0x8>
   14578:	2400      	movs	r4, #0
   1457a:	4b2c      	ldr	r3, [pc, #176]	; (1462c <nrf_mem_init+0xd8>)
   1457c:	4621      	mov	r1, r4
   1457e:	223c      	movs	r2, #60	; 0x3c
   14580:	482b      	ldr	r0, [pc, #172]	; (14630 <nrf_mem_init+0xdc>)
   14582:	601c      	str	r4, [r3, #0]
   14584:	f011 fc9c 	bl	25ec0 <memset>
   14588:	2110      	movs	r1, #16
   1458a:	2205      	movs	r2, #5
   1458c:	4b29      	ldr	r3, [pc, #164]	; (14634 <nrf_mem_init+0xe0>)
   1458e:	4e2a      	ldr	r6, [pc, #168]	; (14638 <nrf_mem_init+0xe4>)
   14590:	e9c3 4400 	strd	r4, r4, [r3]
   14594:	60d9      	str	r1, [r3, #12]
   14596:	6159      	str	r1, [r3, #20]
   14598:	61d9      	str	r1, [r3, #28]
   1459a:	6259      	str	r1, [r3, #36]	; 0x24
   1459c:	62d9      	str	r1, [r3, #44]	; 0x2c
   1459e:	6359      	str	r1, [r3, #52]	; 0x34
   145a0:	63d9      	str	r1, [r3, #60]	; 0x3c
   145a2:	6459      	str	r1, [r3, #68]	; 0x44
   145a4:	64d9      	str	r1, [r3, #76]	; 0x4c
   145a6:	6559      	str	r1, [r3, #84]	; 0x54
   145a8:	65d9      	str	r1, [r3, #92]	; 0x5c
   145aa:	6659      	str	r1, [r3, #100]	; 0x64
   145ac:	66d9      	str	r1, [r3, #108]	; 0x6c
   145ae:	6759      	str	r1, [r3, #116]	; 0x74
   145b0:	67d9      	str	r1, [r3, #124]	; 0x7c
   145b2:	609a      	str	r2, [r3, #8]
   145b4:	611a      	str	r2, [r3, #16]
   145b6:	619a      	str	r2, [r3, #24]
   145b8:	621a      	str	r2, [r3, #32]
   145ba:	629a      	str	r2, [r3, #40]	; 0x28
   145bc:	631a      	str	r2, [r3, #48]	; 0x30
   145be:	639a      	str	r2, [r3, #56]	; 0x38
   145c0:	641a      	str	r2, [r3, #64]	; 0x40
   145c2:	649a      	str	r2, [r3, #72]	; 0x48
   145c4:	651a      	str	r2, [r3, #80]	; 0x50
   145c6:	659a      	str	r2, [r3, #88]	; 0x58
   145c8:	661a      	str	r2, [r3, #96]	; 0x60
   145ca:	669a      	str	r2, [r3, #104]	; 0x68
   145cc:	671a      	str	r2, [r3, #112]	; 0x70
   145ce:	679a      	str	r2, [r3, #120]	; 0x78
   145d0:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   145d4:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   145d8:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   145dc:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   145e0:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   145e4:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   145e8:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   145ec:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   145f0:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   145f4:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   145f8:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   145fc:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   14600:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   14604:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   14608:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1460c:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   14610:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   14614:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14618:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1461c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14620:	4620      	mov	r0, r4
   14622:	7035      	strb	r5, [r6, #0]
   14624:	bd70      	pop	{r4, r5, r6, pc}
   14626:	bf00      	nop
   14628:	20020518 	.word	0x20020518
   1462c:	20020558 	.word	0x20020558
   14630:	2002055c 	.word	0x2002055c
   14634:	20020598 	.word	0x20020598
   14638:	20024041 	.word	0x20024041

0001463c <nrf_mem_register>:
   1463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14640:	4b87      	ldr	r3, [pc, #540]	; (14860 <nrf_mem_register+0x224>)
   14642:	b087      	sub	sp, #28
   14644:	781b      	ldrb	r3, [r3, #0]
   14646:	2b00      	cmp	r3, #0
   14648:	f000 808c 	beq.w	14764 <nrf_mem_register+0x128>
   1464c:	b328      	cbz	r0, 1469a <nrf_mem_register+0x5e>
   1464e:	b321      	cbz	r1, 1469a <nrf_mem_register+0x5e>
   14650:	780b      	ldrb	r3, [r1, #0]
   14652:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1486c <nrf_mem_register+0x230>
   14656:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1465a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1465e:	685b      	ldr	r3, [r3, #4]
   14660:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   14664:	4463      	add	r3, ip
   14666:	2b10      	cmp	r3, #16
   14668:	d811      	bhi.n	1468e <nrf_mem_register+0x52>
   1466a:	f04f 0a00 	mov.w	sl, #0
   1466e:	4689      	mov	r9, r1
   14670:	4b7c      	ldr	r3, [pc, #496]	; (14864 <nrf_mem_register+0x228>)
   14672:	4f7d      	ldr	r7, [pc, #500]	; (14868 <nrf_mem_register+0x22c>)
   14674:	681b      	ldr	r3, [r3, #0]
   14676:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1467a:	9300      	str	r3, [sp, #0]
   1467c:	68b9      	ldr	r1, [r7, #8]
   1467e:	b191      	cbz	r1, 146a6 <nrf_mem_register+0x6a>
   14680:	f10a 0a01 	add.w	sl, sl, #1
   14684:	f1ba 0f05 	cmp.w	sl, #5
   14688:	f107 070c 	add.w	r7, r7, #12
   1468c:	d1f6      	bne.n	1467c <nrf_mem_register+0x40>
   1468e:	f248 1b07 	movw	fp, #33031	; 0x8107
   14692:	4658      	mov	r0, fp
   14694:	b007      	add	sp, #28
   14696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1469a:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1469e:	4658      	mov	r0, fp
   146a0:	b007      	add	sp, #28
   146a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a6:	f1bc 0f00 	cmp.w	ip, #0
   146aa:	d061      	beq.n	14770 <nrf_mem_register+0x134>
   146ac:	460d      	mov	r5, r1
   146ae:	460c      	mov	r4, r1
   146b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   146b4:	eb0e 0b03 	add.w	fp, lr, r3
   146b8:	885a      	ldrh	r2, [r3, #2]
   146ba:	f833 6b04 	ldrh.w	r6, [r3], #4
   146be:	4415      	add	r5, r2
   146c0:	459b      	cmp	fp, r3
   146c2:	fb02 4406 	mla	r4, r2, r6, r4
   146c6:	d1f7      	bne.n	146b8 <nrf_mem_register+0x7c>
   146c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   146cc:	42a3      	cmp	r3, r4
   146ce:	d3d7      	bcc.n	14680 <nrf_mem_register+0x44>
   146d0:	9b00      	ldr	r3, [sp, #0]
   146d2:	442b      	add	r3, r5
   146d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   146d8:	d2d2      	bcs.n	14680 <nrf_mem_register+0x44>
   146da:	4c63      	ldr	r4, [pc, #396]	; (14868 <nrf_mem_register+0x22c>)
   146dc:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   146e0:	0092      	lsls	r2, r2, #2
   146e2:	f8c0 a000 	str.w	sl, [r0]
   146e6:	18a0      	adds	r0, r4, r2
   146e8:	f844 9002 	str.w	r9, [r4, r2]
   146ec:	9a00      	ldr	r2, [sp, #0]
   146ee:	468b      	mov	fp, r1
   146f0:	e9c0 2501 	strd	r2, r5, [r0, #4]
   146f4:	f899 2001 	ldrb.w	r2, [r9, #1]
   146f8:	485a      	ldr	r0, [pc, #360]	; (14864 <nrf_mem_register+0x228>)
   146fa:	2a01      	cmp	r2, #1
   146fc:	6003      	str	r3, [r0, #0]
   146fe:	d0c8      	beq.n	14692 <nrf_mem_register+0x56>
   14700:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   14704:	2b00      	cmp	r3, #0
   14706:	d0c4      	beq.n	14692 <nrf_mem_register+0x56>
   14708:	2500      	movs	r5, #0
   1470a:	f8cd 9004 	str.w	r9, [sp, #4]
   1470e:	f8cd a00c 	str.w	sl, [sp, #12]
   14712:	f8cd b014 	str.w	fp, [sp, #20]
   14716:	9b01      	ldr	r3, [sp, #4]
   14718:	781f      	ldrb	r7, [r3, #0]
   1471a:	691a      	ldr	r2, [r3, #16]
   1471c:	013b      	lsls	r3, r7, #4
   1471e:	eb03 0907 	add.w	r9, r3, r7
   14722:	9300      	str	r3, [sp, #0]
   14724:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   14728:	6859      	ldr	r1, [r3, #4]
   1472a:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1472e:	9102      	str	r1, [sp, #8]
   14730:	bb39      	cbnz	r1, 14782 <nrf_mem_register+0x146>
   14732:	9a03      	ldr	r2, [sp, #12]
   14734:	60dd      	str	r5, [r3, #12]
   14736:	609a      	str	r2, [r3, #8]
   14738:	9b00      	ldr	r3, [sp, #0]
   1473a:	443b      	add	r3, r7
   1473c:	461f      	mov	r7, r3
   1473e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   14742:	684b      	ldr	r3, [r1, #4]
   14744:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   14748:	3301      	adds	r3, #1
   1474a:	4294      	cmp	r4, r2
   1474c:	604b      	str	r3, [r1, #4]
   1474e:	d912      	bls.n	14776 <nrf_mem_register+0x13a>
   14750:	9b01      	ldr	r3, [sp, #4]
   14752:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   14756:	899b      	ldrh	r3, [r3, #12]
   14758:	3501      	adds	r5, #1
   1475a:	429d      	cmp	r5, r3
   1475c:	d3db      	bcc.n	14716 <nrf_mem_register+0xda>
   1475e:	f8dd b014 	ldr.w	fp, [sp, #20]
   14762:	e796      	b.n	14692 <nrf_mem_register+0x56>
   14764:	f248 1b08 	movw	fp, #33032	; 0x8108
   14768:	4658      	mov	r0, fp
   1476a:	b007      	add	sp, #28
   1476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14770:	9b00      	ldr	r3, [sp, #0]
   14772:	4665      	mov	r5, ip
   14774:	e7ae      	b.n	146d4 <nrf_mem_register+0x98>
   14776:	9b01      	ldr	r3, [sp, #4]
   14778:	3501      	adds	r5, #1
   1477a:	899b      	ldrh	r3, [r3, #12]
   1477c:	42ab      	cmp	r3, r5
   1477e:	d8ca      	bhi.n	14716 <nrf_mem_register+0xda>
   14780:	e7ed      	b.n	1475e <nrf_mem_register+0x122>
   14782:	2600      	movs	r6, #0
   14784:	f101 3aff 	add.w	sl, r1, #4294967295
   14788:	9504      	str	r5, [sp, #16]
   1478a:	eb06 000a 	add.w	r0, r6, sl
   1478e:	eb09 0206 	add.w	r2, r9, r6
   14792:	3201      	adds	r2, #1
   14794:	3001      	adds	r0, #1
   14796:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1479a:	0840      	lsrs	r0, r0, #1
   1479c:	4d32      	ldr	r5, [pc, #200]	; (14868 <nrf_mem_register+0x22c>)
   1479e:	eb09 0100 	add.w	r1, r9, r0
   147a2:	eb09 030a 	add.w	r3, r9, sl
   147a6:	3101      	adds	r1, #1
   147a8:	3301      	adds	r3, #1
   147aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   147ae:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   147b2:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   147b6:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   147ba:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   147be:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   147c2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   147c6:	f8db b010 	ldr.w	fp, [fp, #16]
   147ca:	6852      	ldr	r2, [r2, #4]
   147cc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   147d0:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   147d4:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   147d8:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   147dc:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   147e0:	f8de e010 	ldr.w	lr, [lr, #16]
   147e4:	6849      	ldr	r1, [r1, #4]
   147e6:	f8dc c010 	ldr.w	ip, [ip, #16]
   147ea:	685b      	ldr	r3, [r3, #4]
   147ec:	4294      	cmp	r4, r2
   147ee:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   147f2:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   147f6:	d92d      	bls.n	14854 <nrf_mem_register+0x218>
   147f8:	429c      	cmp	r4, r3
   147fa:	d22d      	bcs.n	14858 <nrf_mem_register+0x21c>
   147fc:	428c      	cmp	r4, r1
   147fe:	d924      	bls.n	1484a <nrf_mem_register+0x20e>
   14800:	1c46      	adds	r6, r0, #1
   14802:	45b2      	cmp	sl, r6
   14804:	d2c1      	bcs.n	1478a <nrf_mem_register+0x14e>
   14806:	2610      	movs	r6, #16
   14808:	9d04      	ldr	r5, [sp, #16]
   1480a:	9a02      	ldr	r2, [sp, #8]
   1480c:	42b2      	cmp	r2, r6
   1480e:	d911      	bls.n	14834 <nrf_mem_register+0x1f8>
   14810:	9b00      	ldr	r3, [sp, #0]
   14812:	443b      	add	r3, r7
   14814:	441a      	add	r2, r3
   14816:	4433      	add	r3, r6
   14818:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1481c:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   14820:	2208      	movs	r2, #8
   14822:	4651      	mov	r1, sl
   14824:	eb0a 0002 	add.w	r0, sl, r2
   14828:	f1aa 0a08 	sub.w	sl, sl, #8
   1482c:	f011 fb1b 	bl	25e66 <memcpy>
   14830:	45d1      	cmp	r9, sl
   14832:	d1f5      	bne.n	14820 <nrf_mem_register+0x1e4>
   14834:	9b00      	ldr	r3, [sp, #0]
   14836:	9903      	ldr	r1, [sp, #12]
   14838:	443b      	add	r3, r7
   1483a:	4433      	add	r3, r6
   1483c:	3301      	adds	r3, #1
   1483e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   14842:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   14846:	6055      	str	r5, [r2, #4]
   14848:	e776      	b.n	14738 <nrf_mem_register+0xfc>
   1484a:	f100 3aff 	add.w	sl, r0, #4294967295
   1484e:	4556      	cmp	r6, sl
   14850:	d99b      	bls.n	1478a <nrf_mem_register+0x14e>
   14852:	e7d8      	b.n	14806 <nrf_mem_register+0x1ca>
   14854:	9d04      	ldr	r5, [sp, #16]
   14856:	e7d8      	b.n	1480a <nrf_mem_register+0x1ce>
   14858:	9d04      	ldr	r5, [sp, #16]
   1485a:	f10a 0601 	add.w	r6, sl, #1
   1485e:	e7d4      	b.n	1480a <nrf_mem_register+0x1ce>
   14860:	20024041 	.word	0x20024041
   14864:	20020558 	.word	0x20020558
   14868:	2002055c 	.word	0x2002055c
   1486c:	20020598 	.word	0x20020598

00014870 <nrf_malloc>:
   14870:	4b03      	ldr	r3, [pc, #12]	; (14880 <nrf_malloc+0x10>)
   14872:	781b      	ldrb	r3, [r3, #0]
   14874:	b10b      	cbz	r3, 1487a <nrf_malloc+0xa>
   14876:	f7ff bd8d 	b.w	14394 <mem_alloc.constprop.4>
   1487a:	4618      	mov	r0, r3
   1487c:	4770      	bx	lr
   1487e:	bf00      	nop
   14880:	20024041 	.word	0x20024041

00014884 <nrf_calloc>:
   14884:	b538      	push	{r3, r4, r5, lr}
   14886:	4b08      	ldr	r3, [pc, #32]	; (148a8 <nrf_calloc+0x24>)
   14888:	781d      	ldrb	r5, [r3, #0]
   1488a:	b155      	cbz	r5, 148a2 <nrf_calloc+0x1e>
   1488c:	fb01 f400 	mul.w	r4, r1, r0
   14890:	4620      	mov	r0, r4
   14892:	f7ff fd7f 	bl	14394 <mem_alloc.constprop.4>
   14896:	4605      	mov	r5, r0
   14898:	b118      	cbz	r0, 148a2 <nrf_calloc+0x1e>
   1489a:	4622      	mov	r2, r4
   1489c:	2100      	movs	r1, #0
   1489e:	f011 fb0f 	bl	25ec0 <memset>
   148a2:	4628      	mov	r0, r5
   148a4:	bd38      	pop	{r3, r4, r5, pc}
   148a6:	bf00      	nop
   148a8:	20024041 	.word	0x20024041

000148ac <nrf_free>:
   148ac:	4b04      	ldr	r3, [pc, #16]	; (148c0 <nrf_free+0x14>)
   148ae:	781b      	ldrb	r3, [r3, #0]
   148b0:	b123      	cbz	r3, 148bc <nrf_free+0x10>
   148b2:	b118      	cbz	r0, 148bc <nrf_free+0x10>
   148b4:	4601      	mov	r1, r0
   148b6:	2000      	movs	r0, #0
   148b8:	f7ff bc1c 	b.w	140f4 <mem_free>
   148bc:	4770      	bx	lr
   148be:	bf00      	nop
   148c0:	20024041 	.word	0x20024041

000148c4 <nrf_shared_malloc>:
   148c4:	4b03      	ldr	r3, [pc, #12]	; (148d4 <nrf_shared_malloc+0x10>)
   148c6:	781b      	ldrb	r3, [r3, #0]
   148c8:	b10b      	cbz	r3, 148ce <nrf_shared_malloc+0xa>
   148ca:	f7ff bc7f 	b.w	141cc <mem_alloc.constprop.5>
   148ce:	4618      	mov	r0, r3
   148d0:	4770      	bx	lr
   148d2:	bf00      	nop
   148d4:	20024041 	.word	0x20024041

000148d8 <nrf_shared_free>:
   148d8:	4b04      	ldr	r3, [pc, #16]	; (148ec <nrf_shared_free+0x14>)
   148da:	781b      	ldrb	r3, [r3, #0]
   148dc:	b123      	cbz	r3, 148e8 <nrf_shared_free+0x10>
   148de:	b118      	cbz	r0, 148e8 <nrf_shared_free+0x10>
   148e0:	4601      	mov	r1, r0
   148e2:	2001      	movs	r0, #1
   148e4:	f7ff bc06 	b.w	140f4 <mem_free>
   148e8:	4770      	bx	lr
   148ea:	bf00      	nop
   148ec:	20024041 	.word	0x20024041

000148f0 <mbedtls_aes_init>:
   148f0:	f44f 728c 	mov.w	r2, #280	; 0x118
   148f4:	2100      	movs	r1, #0
   148f6:	f011 bae3 	b.w	25ec0 <memset>
   148fa:	bf00      	nop

000148fc <mbedtls_aes_free>:
   148fc:	b118      	cbz	r0, 14906 <mbedtls_aes_free+0xa>
   148fe:	f44f 718c 	mov.w	r1, #280	; 0x118
   14902:	f006 bba9 	b.w	1b058 <mbedtls_platform_zeroize>
   14906:	4770      	bx	lr

00014908 <mbedtls_aes_setkey_enc>:
   14908:	2ac0      	cmp	r2, #192	; 0xc0
   1490a:	f000 8184 	beq.w	14c16 <mbedtls_aes_setkey_enc+0x30e>
   1490e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   14912:	f000 817d 	beq.w	14c10 <mbedtls_aes_setkey_enc+0x308>
   14916:	2a80      	cmp	r2, #128	; 0x80
   14918:	d002      	beq.n	14920 <mbedtls_aes_setkey_enc+0x18>
   1491a:	f06f 001f 	mvn.w	r0, #31
   1491e:	4770      	bx	lr
   14920:	230a      	movs	r3, #10
   14922:	6003      	str	r3, [r0, #0]
   14924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14928:	4607      	mov	r7, r0
   1492a:	f04f 0c00 	mov.w	ip, #0
   1492e:	f100 0408 	add.w	r4, r0, #8
   14932:	b085      	sub	sp, #20
   14934:	0952      	lsrs	r2, r2, #5
   14936:	f847 4f04 	str.w	r4, [r7, #4]!
   1493a:	788b      	ldrb	r3, [r1, #2]
   1493c:	784d      	ldrb	r5, [r1, #1]
   1493e:	780e      	ldrb	r6, [r1, #0]
   14940:	041b      	lsls	r3, r3, #16
   14942:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   14946:	78cd      	ldrb	r5, [r1, #3]
   14948:	4333      	orrs	r3, r6
   1494a:	f10c 0c01 	add.w	ip, ip, #1
   1494e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14952:	4594      	cmp	ip, r2
   14954:	f847 3f04 	str.w	r3, [r7, #4]!
   14958:	f101 0104 	add.w	r1, r1, #4
   1495c:	d3ed      	bcc.n	1493a <mbedtls_aes_setkey_enc+0x32>
   1495e:	6803      	ldr	r3, [r0, #0]
   14960:	2b0c      	cmp	r3, #12
   14962:	f000 81bf 	beq.w	14ce4 <mbedtls_aes_setkey_enc+0x3dc>
   14966:	2b0e      	cmp	r3, #14
   14968:	f000 8158 	beq.w	14c1c <mbedtls_aes_setkey_enc+0x314>
   1496c:	2b0a      	cmp	r3, #10
   1496e:	f040 814b 	bne.w	14c08 <mbedtls_aes_setkey_enc+0x300>
   14972:	6944      	ldr	r4, [r0, #20]
   14974:	4bd8      	ldr	r3, [pc, #864]	; (14cd8 <mbedtls_aes_setkey_enc+0x3d0>)
   14976:	f3c4 2207 	ubfx	r2, r4, #8, #8
   1497a:	6881      	ldr	r1, [r0, #8]
   1497c:	5c9a      	ldrb	r2, [r3, r2]
   1497e:	0e25      	lsrs	r5, r4, #24
   14980:	5d5e      	ldrb	r6, [r3, r5]
   14982:	f081 0101 	eor.w	r1, r1, #1
   14986:	b2e5      	uxtb	r5, r4
   14988:	5d5d      	ldrb	r5, [r3, r5]
   1498a:	404a      	eors	r2, r1
   1498c:	f3c4 4107 	ubfx	r1, r4, #16, #8
   14990:	ea82 4206 	eor.w	r2, r2, r6, lsl #16
   14994:	5c5e      	ldrb	r6, [r3, r1]
   14996:	ea82 6505 	eor.w	r5, r2, r5, lsl #24
   1499a:	68c1      	ldr	r1, [r0, #12]
   1499c:	ea85 2206 	eor.w	r2, r5, r6, lsl #8
   149a0:	6907      	ldr	r7, [r0, #16]
   149a2:	4051      	eors	r1, r2
   149a4:	ea81 0907 	eor.w	r9, r1, r7
   149a8:	ea89 0404 	eor.w	r4, r9, r4
   149ac:	f3c4 2507 	ubfx	r5, r4, #8, #8
   149b0:	5d5d      	ldrb	r5, [r3, r5]
   149b2:	0e26      	lsrs	r6, r4, #24
   149b4:	5d9e      	ldrb	r6, [r3, r6]
   149b6:	f082 0c02 	eor.w	ip, r2, #2
   149ba:	ea85 050c 	eor.w	r5, r5, ip
   149be:	ea85 4506 	eor.w	r5, r5, r6, lsl #16
   149c2:	b2e6      	uxtb	r6, r4
   149c4:	f813 c006 	ldrb.w	ip, [r3, r6]
   149c8:	f3c4 4607 	ubfx	r6, r4, #16, #8
   149cc:	5d9e      	ldrb	r6, [r3, r6]
   149ce:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
   149d2:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
   149d6:	406f      	eors	r7, r5
   149d8:	ea87 0c04 	eor.w	ip, r7, r4
   149dc:	f3cc 2607 	ubfx	r6, ip, #8, #8
   149e0:	5d9e      	ldrb	r6, [r3, r6]
   149e2:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
   149e6:	f813 e00e 	ldrb.w	lr, [r3, lr]
   149ea:	f085 0804 	eor.w	r8, r5, #4
   149ee:	ea86 0608 	eor.w	r6, r6, r8
   149f2:	ea86 460e 	eor.w	r6, r6, lr, lsl #16
   149f6:	fa5f fe8c 	uxtb.w	lr, ip
   149fa:	f813 e00e 	ldrb.w	lr, [r3, lr]
   149fe:	6182      	str	r2, [r0, #24]
   14a00:	f3cc 4207 	ubfx	r2, ip, #16, #8
   14a04:	ea86 660e 	eor.w	r6, r6, lr, lsl #24
   14a08:	f813 e002 	ldrb.w	lr, [r3, r2]
   14a0c:	ea85 0201 	eor.w	r2, r5, r1
   14a10:	ea86 260e 	eor.w	r6, r6, lr, lsl #8
   14a14:	ea86 0802 	eor.w	r8, r6, r2
   14a18:	ea88 0e04 	eor.w	lr, r8, r4
   14a1c:	61c1      	str	r1, [r0, #28]
   14a1e:	f3ce 2107 	ubfx	r1, lr, #8, #8
   14a22:	5c59      	ldrb	r1, [r3, r1]
   14a24:	ea4f 6a1e 	mov.w	sl, lr, lsr #24
   14a28:	f813 a00a 	ldrb.w	sl, [r3, sl]
   14a2c:	f086 0b08 	eor.w	fp, r6, #8
   14a30:	ea81 010b 	eor.w	r1, r1, fp
   14a34:	ea81 410a 	eor.w	r1, r1, sl, lsl #16
   14a38:	fa5f fa8e 	uxtb.w	sl, lr
   14a3c:	f813 a00a 	ldrb.w	sl, [r3, sl]
   14a40:	6244      	str	r4, [r0, #36]	; 0x24
   14a42:	f3ce 4407 	ubfx	r4, lr, #16, #8
   14a46:	5d1c      	ldrb	r4, [r3, r4]
   14a48:	ea81 610a 	eor.w	r1, r1, sl, lsl #24
   14a4c:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
   14a50:	ea81 0a07 	eor.w	sl, r1, r7
   14a54:	ea8a 040e 	eor.w	r4, sl, lr
   14a58:	62c2      	str	r2, [r0, #44]	; 0x2c
   14a5a:	6307      	str	r7, [r0, #48]	; 0x30
   14a5c:	f3c4 2207 	ubfx	r2, r4, #8, #8
   14a60:	ea88 0707 	eor.w	r7, r8, r7
   14a64:	e9c0 680e 	strd	r6, r8, [r0, #56]	; 0x38
   14a68:	f8c0 9020 	str.w	r9, [r0, #32]
   14a6c:	6285      	str	r5, [r0, #40]	; 0x28
   14a6e:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
   14a72:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
   14a76:	6407      	str	r7, [r0, #64]	; 0x40
   14a78:	6481      	str	r1, [r0, #72]	; 0x48
   14a7a:	f813 c002 	ldrb.w	ip, [r3, r2]
   14a7e:	0e22      	lsrs	r2, r4, #24
   14a80:	5c9a      	ldrb	r2, [r3, r2]
   14a82:	f081 0510 	eor.w	r5, r1, #16
   14a86:	ea8c 0c05 	eor.w	ip, ip, r5
   14a8a:	ea8c 4c02 	eor.w	ip, ip, r2, lsl #16
   14a8e:	b2e2      	uxtb	r2, r4
   14a90:	5c9d      	ldrb	r5, [r3, r2]
   14a92:	f3c4 4207 	ubfx	r2, r4, #16, #8
   14a96:	5c9a      	ldrb	r2, [r3, r2]
   14a98:	ea8c 6c05 	eor.w	ip, ip, r5, lsl #24
   14a9c:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
   14aa0:	ea81 0108 	eor.w	r1, r1, r8
   14aa4:	ea81 090c 	eor.w	r9, r1, ip
   14aa8:	ea8e 0209 	eor.w	r2, lr, r9
   14aac:	f3c2 2507 	ubfx	r5, r2, #8, #8
   14ab0:	5d5e      	ldrb	r6, [r3, r5]
   14ab2:	0e15      	lsrs	r5, r2, #24
   14ab4:	5d5d      	ldrb	r5, [r3, r5]
   14ab6:	f08c 0720 	eor.w	r7, ip, #32
   14aba:	407e      	eors	r6, r7
   14abc:	ea86 4605 	eor.w	r6, r6, r5, lsl #16
   14ac0:	b2d5      	uxtb	r5, r2
   14ac2:	5d5d      	ldrb	r5, [r3, r5]
   14ac4:	64c1      	str	r1, [r0, #76]	; 0x4c
   14ac6:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14aca:	5c59      	ldrb	r1, [r3, r1]
   14acc:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
   14ad0:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
   14ad4:	ea8a 0e06 	eor.w	lr, sl, r6
   14ad8:	ea82 080e 	eor.w	r8, r2, lr
   14adc:	f3c8 2107 	ubfx	r1, r8, #8, #8
   14ae0:	5c5f      	ldrb	r7, [r3, r1]
   14ae2:	ea4f 6118 	mov.w	r1, r8, lsr #24
   14ae6:	5c59      	ldrb	r1, [r3, r1]
   14ae8:	f086 0540 	eor.w	r5, r6, #64	; 0x40
   14aec:	406f      	eors	r7, r5
   14aee:	ea87 4701 	eor.w	r7, r7, r1, lsl #16
   14af2:	fa5f f188 	uxtb.w	r1, r8
   14af6:	5c59      	ldrb	r1, [r3, r1]
   14af8:	ea8a 0509 	eor.w	r5, sl, r9
   14afc:	ea87 6701 	eor.w	r7, r7, r1, lsl #24
   14b00:	f3c8 4107 	ubfx	r1, r8, #16, #8
   14b04:	5c59      	ldrb	r1, [r3, r1]
   14b06:	f8c0 a050 	str.w	sl, [r0, #80]	; 0x50
   14b0a:	ea87 2701 	eor.w	r7, r7, r1, lsl #8
   14b0e:	ea89 0a06 	eor.w	sl, r9, r6
   14b12:	6605      	str	r5, [r0, #96]	; 0x60
   14b14:	ea8a 0507 	eor.w	r5, sl, r7
   14b18:	ea82 0105 	eor.w	r1, r2, r5
   14b1c:	6544      	str	r4, [r0, #84]	; 0x54
   14b1e:	f3c1 2407 	ubfx	r4, r1, #8, #8
   14b22:	5d1c      	ldrb	r4, [r3, r4]
   14b24:	ea4f 6b11 	mov.w	fp, r1, lsr #24
   14b28:	f813 b00b 	ldrb.w	fp, [r3, fp]
   14b2c:	6642      	str	r2, [r0, #100]	; 0x64
   14b2e:	f087 0280 	eor.w	r2, r7, #128	; 0x80
   14b32:	4062      	eors	r2, r4
   14b34:	b2cc      	uxtb	r4, r1
   14b36:	ea82 420b 	eor.w	r2, r2, fp, lsl #16
   14b3a:	f813 b004 	ldrb.w	fp, [r3, r4]
   14b3e:	f3c1 4407 	ubfx	r4, r1, #16, #8
   14b42:	5d1c      	ldrb	r4, [r3, r4]
   14b44:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
   14b48:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
   14b4c:	ea8e 0402 	eor.w	r4, lr, r2
   14b50:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
   14b54:	ea81 0c04 	eor.w	ip, r1, r4
   14b58:	6686      	str	r6, [r0, #104]	; 0x68
   14b5a:	67c5      	str	r5, [r0, #124]	; 0x7c
   14b5c:	ea8e 0605 	eor.w	r6, lr, r5
   14b60:	6787      	str	r7, [r0, #120]	; 0x78
   14b62:	4055      	eors	r5, r2
   14b64:	f3cc 2707 	ubfx	r7, ip, #8, #8
   14b68:	e9c0 ae1b 	strd	sl, lr, [r0, #108]	; 0x6c
   14b6c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
   14b70:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   14b74:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
   14b78:	f8c0 905c 	str.w	r9, [r0, #92]	; 0x5c
   14b7c:	f8c0 8074 	str.w	r8, [r0, #116]	; 0x74
   14b80:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
   14b84:	5dde      	ldrb	r6, [r3, r7]
   14b86:	f082 021b 	eor.w	r2, r2, #27
   14b8a:	ea4f 671c 	mov.w	r7, ip, lsr #24
   14b8e:	f813 e007 	ldrb.w	lr, [r3, r7]
   14b92:	4056      	eors	r6, r2
   14b94:	fa5f f28c 	uxtb.w	r2, ip
   14b98:	5c9f      	ldrb	r7, [r3, r2]
   14b9a:	f3cc 4207 	ubfx	r2, ip, #16, #8
   14b9e:	5c9a      	ldrb	r2, [r3, r2]
   14ba0:	ea86 460e 	eor.w	r6, r6, lr, lsl #16
   14ba4:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
   14ba8:	ea86 2602 	eor.w	r6, r6, r2, lsl #8
   14bac:	4075      	eors	r5, r6
   14bae:	4069      	eors	r1, r5
   14bb0:	f3c1 2207 	ubfx	r2, r1, #8, #8
   14bb4:	5c9a      	ldrb	r2, [r3, r2]
   14bb6:	0e0f      	lsrs	r7, r1, #24
   14bb8:	5ddf      	ldrb	r7, [r3, r7]
   14bba:	f086 0e36 	eor.w	lr, r6, #54	; 0x36
   14bbe:	ea82 020e 	eor.w	r2, r2, lr
   14bc2:	ea82 4207 	eor.w	r2, r2, r7, lsl #16
   14bc6:	b2cf      	uxtb	r7, r1
   14bc8:	f813 e007 	ldrb.w	lr, [r3, r7]
   14bcc:	f3c1 4707 	ubfx	r7, r1, #16, #8
   14bd0:	5ddf      	ldrb	r7, [r3, r7]
   14bd2:	ea82 630e 	eor.w	r3, r2, lr, lsl #24
   14bd6:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   14bda:	ea83 0204 	eor.w	r2, r3, r4
   14bde:	ea82 0e01 	eor.w	lr, r2, r1
   14be2:	e9c0 6526 	strd	r6, r5, [r0, #152]	; 0x98
   14be6:	e9c0 2e2c 	strd	r2, lr, [r0, #176]	; 0xb0
   14bea:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
   14bee:	ea83 0705 	eor.w	r7, r3, r5
   14bf2:	406c      	eors	r4, r5
   14bf4:	f8c0 c094 	str.w	ip, [r0, #148]	; 0x94
   14bf8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
   14bfc:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
   14c00:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
   14c04:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
   14c08:	2000      	movs	r0, #0
   14c0a:	b005      	add	sp, #20
   14c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c10:	230e      	movs	r3, #14
   14c12:	6003      	str	r3, [r0, #0]
   14c14:	e686      	b.n	14924 <mbedtls_aes_setkey_enc+0x1c>
   14c16:	230c      	movs	r3, #12
   14c18:	6003      	str	r3, [r0, #0]
   14c1a:	e683      	b.n	14924 <mbedtls_aes_setkey_enc+0x1c>
   14c1c:	e9d0 ce03 	ldrd	ip, lr, [r0, #12]
   14c20:	e9d0 8907 	ldrd	r8, r9, [r0, #28]
   14c24:	e9d0 7205 	ldrd	r7, r2, [r0, #20]
   14c28:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14c2a:	6883      	ldr	r3, [r0, #8]
   14c2c:	4670      	mov	r0, lr
   14c2e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 14ce0 <mbedtls_aes_setkey_enc+0x3d8>
   14c32:	4d29      	ldr	r5, [pc, #164]	; (14cd8 <mbedtls_aes_setkey_enc+0x3d0>)
   14c34:	f8cd c000 	str.w	ip, [sp]
   14c38:	f85a bf04 	ldr.w	fp, [sl, #4]!
   14c3c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
   14c40:	f815 e00c 	ldrb.w	lr, [r5, ip]
   14c44:	ea4f 6c16 	mov.w	ip, r6, lsr #24
   14c48:	ea83 030b 	eor.w	r3, r3, fp
   14c4c:	f815 b00c 	ldrb.w	fp, [r5, ip]
   14c50:	fa5f fc86 	uxtb.w	ip, r6
   14c54:	ea8e 0303 	eor.w	r3, lr, r3
   14c58:	f815 c00c 	ldrb.w	ip, [r5, ip]
   14c5c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
   14c60:	ea83 430b 	eor.w	r3, r3, fp, lsl #16
   14c64:	f815 e00e 	ldrb.w	lr, [r5, lr]
   14c68:	ea83 630c 	eor.w	r3, r3, ip, lsl #24
   14c6c:	9900      	ldr	r1, [sp, #0]
   14c6e:	ea83 230e 	eor.w	r3, r3, lr, lsl #8
   14c72:	4059      	eors	r1, r3
   14c74:	4048      	eors	r0, r1
   14c76:	4047      	eors	r7, r0
   14c78:	fa5f fc87 	uxtb.w	ip, r7
   14c7c:	f815 e00c 	ldrb.w	lr, [r5, ip]
   14c80:	ea4f 6c17 	mov.w	ip, r7, lsr #24
   14c84:	f815 b00c 	ldrb.w	fp, [r5, ip]
   14c88:	f3c7 2c07 	ubfx	ip, r7, #8, #8
   14c8c:	ea8e 0202 	eor.w	r2, lr, r2
   14c90:	f815 c00c 	ldrb.w	ip, [r5, ip]
   14c94:	f3c7 4e07 	ubfx	lr, r7, #16, #8
   14c98:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
   14c9c:	f815 e00e 	ldrb.w	lr, [r5, lr]
   14ca0:	ea82 220c 	eor.w	r2, r2, ip, lsl #8
   14ca4:	ea82 420e 	eor.w	r2, r2, lr, lsl #16
   14ca8:	ea88 0802 	eor.w	r8, r8, r2
   14cac:	e9c4 3108 	strd	r3, r1, [r4, #32]
   14cb0:	9100      	str	r1, [sp, #0]
   14cb2:	490a      	ldr	r1, [pc, #40]	; (14cdc <mbedtls_aes_setkey_enc+0x3d4>)
   14cb4:	ea89 0908 	eor.w	r9, r9, r8
   14cb8:	ea86 0609 	eor.w	r6, r6, r9
   14cbc:	458a      	cmp	sl, r1
   14cbe:	e9c4 070a 	strd	r0, r7, [r4, #40]	; 0x28
   14cc2:	e9c4 960e 	strd	r9, r6, [r4, #56]	; 0x38
   14cc6:	e9c4 280c 	strd	r2, r8, [r4, #48]	; 0x30
   14cca:	f104 0420 	add.w	r4, r4, #32
   14cce:	d1b3      	bne.n	14c38 <mbedtls_aes_setkey_enc+0x330>
   14cd0:	2000      	movs	r0, #0
   14cd2:	b005      	add	sp, #20
   14cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd8:	00027cfc 	.word	0x00027cfc
   14cdc:	00028e14 	.word	0x00028e14
   14ce0:	00028df8 	.word	0x00028df8
   14ce4:	69c2      	ldr	r2, [r0, #28]
   14ce6:	4bb2      	ldr	r3, [pc, #712]	; (14fb0 <mbedtls_aes_setkey_enc+0x6a8>)
   14ce8:	f3c2 2407 	ubfx	r4, r2, #8, #8
   14cec:	6881      	ldr	r1, [r0, #8]
   14cee:	5d1d      	ldrb	r5, [r3, r4]
   14cf0:	0e14      	lsrs	r4, r2, #24
   14cf2:	5d1e      	ldrb	r6, [r3, r4]
   14cf4:	f081 0101 	eor.w	r1, r1, #1
   14cf8:	b2d4      	uxtb	r4, r2
   14cfa:	5d1c      	ldrb	r4, [r3, r4]
   14cfc:	404d      	eors	r5, r1
   14cfe:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14d02:	5c59      	ldrb	r1, [r3, r1]
   14d04:	ea85 4506 	eor.w	r5, r5, r6, lsl #16
   14d08:	68c7      	ldr	r7, [r0, #12]
   14d0a:	ea85 6504 	eor.w	r5, r5, r4, lsl #24
   14d0e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
   14d12:	6901      	ldr	r1, [r0, #16]
   14d14:	406f      	eors	r7, r5
   14d16:	6946      	ldr	r6, [r0, #20]
   14d18:	ea81 0907 	eor.w	r9, r1, r7
   14d1c:	6984      	ldr	r4, [r0, #24]
   14d1e:	ea86 0609 	eor.w	r6, r6, r9
   14d22:	ea84 0806 	eor.w	r8, r4, r6
   14d26:	ea82 0208 	eor.w	r2, r2, r8
   14d2a:	f3c2 2407 	ubfx	r4, r2, #8, #8
   14d2e:	f813 e004 	ldrb.w	lr, [r3, r4]
   14d32:	ea4f 6c12 	mov.w	ip, r2, lsr #24
   14d36:	f813 a00c 	ldrb.w	sl, [r3, ip]
   14d3a:	f085 0402 	eor.w	r4, r5, #2
   14d3e:	fa5f fc82 	uxtb.w	ip, r2
   14d42:	ea8e 0404 	eor.w	r4, lr, r4
   14d46:	f813 e00c 	ldrb.w	lr, [r3, ip]
   14d4a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
   14d4e:	f813 c00c 	ldrb.w	ip, [r3, ip]
   14d52:	ea84 440a 	eor.w	r4, r4, sl, lsl #16
   14d56:	ea84 640e 	eor.w	r4, r4, lr, lsl #24
   14d5a:	ea84 240c 	eor.w	r4, r4, ip, lsl #8
   14d5e:	4061      	eors	r1, r4
   14d60:	9401      	str	r4, [sp, #4]
   14d62:	460c      	mov	r4, r1
   14d64:	6981      	ldr	r1, [r0, #24]
   14d66:	6205      	str	r5, [r0, #32]
   14d68:	4061      	eors	r1, r4
   14d6a:	ea82 0c01 	eor.w	ip, r2, r1
   14d6e:	9103      	str	r1, [sp, #12]
   14d70:	f3cc 2e07 	ubfx	lr, ip, #8, #8
   14d74:	9901      	ldr	r1, [sp, #4]
   14d76:	f813 e00e 	ldrb.w	lr, [r3, lr]
   14d7a:	ea4f 6a1c 	mov.w	sl, ip, lsr #24
   14d7e:	f813 a00a 	ldrb.w	sl, [r3, sl]
   14d82:	f081 0b04 	eor.w	fp, r1, #4
   14d86:	ea8e 0e0b 	eor.w	lr, lr, fp
   14d8a:	ea8e 4a0a 	eor.w	sl, lr, sl, lsl #16
   14d8e:	fa5f fe8c 	uxtb.w	lr, ip
   14d92:	f813 e00e 	ldrb.w	lr, [r3, lr]
   14d96:	e9c0 960a 	strd	r9, r6, [r0, #40]	; 0x28
   14d9a:	ea8a 650e 	eor.w	r5, sl, lr, lsl #24
   14d9e:	f3cc 4e07 	ubfx	lr, ip, #16, #8
   14da2:	f813 e00e 	ldrb.w	lr, [r3, lr]
   14da6:	ea87 0a01 	eor.w	sl, r7, r1
   14daa:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
   14dae:	ea8a 0e05 	eor.w	lr, sl, r5
   14db2:	ea86 010e 	eor.w	r1, r6, lr
   14db6:	9100      	str	r1, [sp, #0]
   14db8:	4621      	mov	r1, r4
   14dba:	ea86 0904 	eor.w	r9, r6, r4
   14dbe:	9c00      	ldr	r4, [sp, #0]
   14dc0:	e9c0 820c 	strd	r8, r2, [r0, #48]	; 0x30
   14dc4:	ea82 0604 	eor.w	r6, r2, r4
   14dc8:	6247      	str	r7, [r0, #36]	; 0x24
   14dca:	f8c0 a03c 	str.w	sl, [r0, #60]	; 0x3c
   14dce:	9102      	str	r1, [sp, #8]
   14dd0:	6401      	str	r1, [r0, #64]	; 0x40
   14dd2:	9f03      	ldr	r7, [sp, #12]
   14dd4:	f3c6 2407 	ubfx	r4, r6, #8, #8
   14dd8:	ea81 080e 	eor.w	r8, r1, lr
   14ddc:	e9c0 7c12 	strd	r7, ip, [r0, #72]	; 0x48
   14de0:	5d1c      	ldrb	r4, [r3, r4]
   14de2:	ea4f 6c16 	mov.w	ip, r6, lsr #24
   14de6:	e9c0 5e14 	strd	r5, lr, [r0, #80]	; 0x50
   14dea:	f8c0 8058 	str.w	r8, [r0, #88]	; 0x58
   14dee:	f085 0508 	eor.w	r5, r5, #8
   14df2:	f813 800c 	ldrb.w	r8, [r3, ip]
   14df6:	fa5f fc86 	uxtb.w	ip, r6
   14dfa:	9901      	ldr	r1, [sp, #4]
   14dfc:	f813 c00c 	ldrb.w	ip, [r3, ip]
   14e00:	4065      	eors	r5, r4
   14e02:	f3c6 4407 	ubfx	r4, r6, #16, #8
   14e06:	5d1c      	ldrb	r4, [r3, r4]
   14e08:	ea85 4508 	eor.w	r5, r5, r8, lsl #16
   14e0c:	6381      	str	r1, [r0, #56]	; 0x38
   14e0e:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
   14e12:	9902      	ldr	r1, [sp, #8]
   14e14:	ea85 2504 	eor.w	r5, r5, r4, lsl #8
   14e18:	4069      	eors	r1, r5
   14e1a:	9101      	str	r1, [sp, #4]
   14e1c:	4639      	mov	r1, r7
   14e1e:	6984      	ldr	r4, [r0, #24]
   14e20:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
   14e24:	ea84 0805 	eor.w	r8, r4, r5
   14e28:	ea86 0908 	eor.w	r9, r6, r8
   14e2c:	f3c9 2407 	ubfx	r4, r9, #8, #8
   14e30:	f813 a004 	ldrb.w	sl, [r3, r4]
   14e34:	ea4f 6419 	mov.w	r4, r9, lsr #24
   14e38:	5d1c      	ldrb	r4, [r3, r4]
   14e3a:	f085 0c10 	eor.w	ip, r5, #16
   14e3e:	ea8a 0c0c 	eor.w	ip, sl, ip
   14e42:	fa5f fa89 	uxtb.w	sl, r9
   14e46:	f813 a00a 	ldrb.w	sl, [r3, sl]
   14e4a:	ea8c 4c04 	eor.w	ip, ip, r4, lsl #16
   14e4e:	f3c9 4407 	ubfx	r4, r9, #16, #8
   14e52:	5d1c      	ldrb	r4, [r3, r4]
   14e54:	ea8c 6c0a 	eor.w	ip, ip, sl, lsl #24
   14e58:	ea8e 0e05 	eor.w	lr, lr, r5
   14e5c:	ea8c 2c04 	eor.w	ip, ip, r4, lsl #8
   14e60:	ea8e 040c 	eor.w	r4, lr, ip
   14e64:	4062      	eors	r2, r4
   14e66:	f8c0 e06c 	str.w	lr, [r0, #108]	; 0x6c
   14e6a:	f3c2 2e07 	ubfx	lr, r2, #8, #8
   14e6e:	f813 e00e 	ldrb.w	lr, [r3, lr]
   14e72:	ea4f 6a12 	mov.w	sl, r2, lsr #24
   14e76:	f813 a00a 	ldrb.w	sl, [r3, sl]
   14e7a:	f08c 0b20 	eor.w	fp, ip, #32
   14e7e:	ea8e 0e0b 	eor.w	lr, lr, fp
   14e82:	ea8e 4a0a 	eor.w	sl, lr, sl, lsl #16
   14e86:	fa5f fe82 	uxtb.w	lr, r2
   14e8a:	f813 e00e 	ldrb.w	lr, [r3, lr]
   14e8e:	9f00      	ldr	r7, [sp, #0]
   14e90:	ea8a 6a0e 	eor.w	sl, sl, lr, lsl #24
   14e94:	f3c2 4e07 	ubfx	lr, r2, #16, #8
   14e98:	f813 b00e 	ldrb.w	fp, [r3, lr]
   14e9c:	ea81 0e07 	eor.w	lr, r1, r7
   14ea0:	9901      	ldr	r1, [sp, #4]
   14ea2:	ea8a 2b0b 	eor.w	fp, sl, fp, lsl #8
   14ea6:	ea81 0a0b 	eor.w	sl, r1, fp
   14eaa:	9f00      	ldr	r7, [sp, #0]
   14eac:	f8c0 e060 	str.w	lr, [r0, #96]	; 0x60
   14eb0:	ea88 0e0a 	eor.w	lr, r8, sl
   14eb4:	65c7      	str	r7, [r0, #92]	; 0x5c
   14eb6:	6646      	str	r6, [r0, #100]	; 0x64
   14eb8:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
   14ebc:	ea82 060e 	eor.w	r6, r2, lr
   14ec0:	6701      	str	r1, [r0, #112]	; 0x70
   14ec2:	ea87 0904 	eor.w	r9, r7, r4
   14ec6:	404f      	eors	r7, r1
   14ec8:	4061      	eors	r1, r4
   14eca:	6685      	str	r5, [r0, #104]	; 0x68
   14ecc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   14ed0:	f3c6 2507 	ubfx	r5, r6, #8, #8
   14ed4:	ea88 0109 	eor.w	r1, r8, r9
   14ed8:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
   14edc:	5d5d      	ldrb	r5, [r3, r5]
   14ede:	0e31      	lsrs	r1, r6, #24
   14ee0:	5c59      	ldrb	r1, [r3, r1]
   14ee2:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
   14ee6:	f8c0 b098 	str.w	fp, [r0, #152]	; 0x98
   14eea:	ea84 040b 	eor.w	r4, r4, fp
   14eee:	6747      	str	r7, [r0, #116]	; 0x74
   14ef0:	f08b 0b40 	eor.w	fp, fp, #64	; 0x40
   14ef4:	b2f7      	uxtb	r7, r6
   14ef6:	5ddf      	ldrb	r7, [r3, r7]
   14ef8:	f8c0 60ac 	str.w	r6, [r0, #172]	; 0xac
   14efc:	ea85 050b 	eor.w	r5, r5, fp
   14f00:	f3c6 4607 	ubfx	r6, r6, #16, #8
   14f04:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
   14f08:	5d99      	ldrb	r1, [r3, r6]
   14f0a:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
   14f0e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
   14f12:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
   14f16:	406c      	eors	r4, r5
   14f18:	ea89 0604 	eor.w	r6, r9, r4
   14f1c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
   14f20:	4072      	eors	r2, r6
   14f22:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14f26:	f8c0 c080 	str.w	ip, [r0, #128]	; 0x80
   14f2a:	5c59      	ldrb	r1, [r3, r1]
   14f2c:	ea89 0c0a 	eor.w	ip, r9, sl
   14f30:	0e17      	lsrs	r7, r2, #24
   14f32:	f8c0 908c 	str.w	r9, [r0, #140]	; 0x8c
   14f36:	f8c0 c0a4 	str.w	ip, [r0, #164]	; 0xa4
   14f3a:	f813 9007 	ldrb.w	r9, [r3, r7]
   14f3e:	f085 0c80 	eor.w	ip, r5, #128	; 0x80
   14f42:	b2d7      	uxtb	r7, r2
   14f44:	ea81 010c 	eor.w	r1, r1, ip
   14f48:	f813 c007 	ldrb.w	ip, [r3, r7]
   14f4c:	f3c2 4707 	ubfx	r7, r2, #16, #8
   14f50:	5ddf      	ldrb	r7, [r3, r7]
   14f52:	ea81 4109 	eor.w	r1, r1, r9, lsl #16
   14f56:	ea81 630c 	eor.w	r3, r1, ip, lsl #24
   14f5a:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   14f5e:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
   14f62:	ea83 0c0a 	eor.w	ip, r3, sl
   14f66:	ea83 0808 	eor.w	r8, r3, r8
   14f6a:	f8c0 e0a8 	str.w	lr, [r0, #168]	; 0xa8
   14f6e:	ea8e 0706 	eor.w	r7, lr, r6
   14f72:	ea88 0b02 	eor.w	fp, r8, r2
   14f76:	ea8c 0906 	eor.w	r9, ip, r6
   14f7a:	ea83 0e04 	eor.w	lr, r3, r4
   14f7e:	ea8a 0104 	eor.w	r1, sl, r4
   14f82:	f8c0 a0a0 	str.w	sl, [r0, #160]	; 0xa0
   14f86:	e9c0 7230 	strd	r7, r2, [r0, #192]	; 0xc0
   14f8a:	f8c0 60bc 	str.w	r6, [r0, #188]	; 0xbc
   14f8e:	e9c0 542c 	strd	r5, r4, [r0, #176]	; 0xb0
   14f92:	e9c0 8b36 	strd	r8, fp, [r0, #216]	; 0xd8
   14f96:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   14f9a:	e9c0 c934 	strd	ip, r9, [r0, #208]	; 0xd0
   14f9e:	f8c0 e0cc 	str.w	lr, [r0, #204]	; 0xcc
   14fa2:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
   14fa6:	2000      	movs	r0, #0
   14fa8:	b005      	add	sp, #20
   14faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fae:	bf00      	nop
   14fb0:	00027cfc 	.word	0x00027cfc

00014fb4 <mbedtls_internal_aes_encrypt>:
   14fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fb8:	e9d0 0300 	ldrd	r0, r3, [r0]
   14fbc:	1040      	asrs	r0, r0, #1
   14fbe:	4605      	mov	r5, r0
   14fc0:	b08b      	sub	sp, #44	; 0x2c
   14fc2:	681c      	ldr	r4, [r3, #0]
   14fc4:	f8d1 a000 	ldr.w	sl, [r1]
   14fc8:	3d01      	subs	r5, #1
   14fca:	9502      	str	r5, [sp, #8]
   14fcc:	684f      	ldr	r7, [r1, #4]
   14fce:	688d      	ldr	r5, [r1, #8]
   14fd0:	9208      	str	r2, [sp, #32]
   14fd2:	ea8a 0a04 	eor.w	sl, sl, r4
   14fd6:	9a02      	ldr	r2, [sp, #8]
   14fd8:	68cc      	ldr	r4, [r1, #12]
   14fda:	68d9      	ldr	r1, [r3, #12]
   14fdc:	9009      	str	r0, [sp, #36]	; 0x24
   14fde:	685e      	ldr	r6, [r3, #4]
   14fe0:	6898      	ldr	r0, [r3, #8]
   14fe2:	ea84 0c01 	eor.w	ip, r4, r1
   14fe6:	2a00      	cmp	r2, #0
   14fe8:	f103 0110 	add.w	r1, r3, #16
   14fec:	ea86 0607 	eor.w	r6, r6, r7
   14ff0:	ea85 0500 	eor.w	r5, r5, r0
   14ff4:	9106      	str	r1, [sp, #24]
   14ff6:	f340 8202 	ble.w	153fe <mbedtls_internal_aes_encrypt+0x44a>
   14ffa:	4ad2      	ldr	r2, [pc, #840]	; (15344 <mbedtls_internal_aes_encrypt+0x390>)
   14ffc:	49d2      	ldr	r1, [pc, #840]	; (15348 <mbedtls_internal_aes_encrypt+0x394>)
   14ffe:	4691      	mov	r9, r2
   15000:	9100      	str	r1, [sp, #0]
   15002:	49d2      	ldr	r1, [pc, #840]	; (1534c <mbedtls_internal_aes_encrypt+0x398>)
   15004:	f8df b34c 	ldr.w	fp, [pc, #844]	; 15354 <mbedtls_internal_aes_encrypt+0x3a0>
   15008:	9207      	str	r2, [sp, #28]
   1500a:	9101      	str	r1, [sp, #4]
   1500c:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   15010:	fa5f f38a 	uxtb.w	r3, sl
   15014:	fa5f f08c 	uxtb.w	r0, ip
   15018:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   1501c:	f859 4020 	ldr.w	r4, [r9, r0, lsl #2]
   15020:	b2ea      	uxtb	r2, r5
   15022:	f85e 0c20 	ldr.w	r0, [lr, #-32]
   15026:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   1502a:	4047      	eors	r7, r0
   1502c:	f85e 0c14 	ldr.w	r0, [lr, #-20]
   15030:	9204      	str	r2, [sp, #16]
   15032:	ea4f 631c 	mov.w	r3, ip, lsr #24
   15036:	0e2a      	lsrs	r2, r5, #24
   15038:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   1503c:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   15040:	4044      	eors	r4, r0
   15042:	0e30      	lsrs	r0, r6, #24
   15044:	f85b 8020 	ldr.w	r8, [fp, r0, lsl #2]
   15048:	9800      	ldr	r0, [sp, #0]
   1504a:	405f      	eors	r7, r3
   1504c:	4054      	eors	r4, r2
   1504e:	b2f1      	uxtb	r1, r6
   15050:	f3c6 2307 	ubfx	r3, r6, #8, #8
   15054:	f3ca 2207 	ubfx	r2, sl, #8, #8
   15058:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   1505c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   15060:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   15064:	f85e 0c1c 	ldr.w	r0, [lr, #-28]
   15068:	9703      	str	r7, [sp, #12]
   1506a:	4048      	eors	r0, r1
   1506c:	ea4f 611a 	mov.w	r1, sl, lsr #24
   15070:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   15074:	9f04      	ldr	r7, [sp, #16]
   15076:	4048      	eors	r0, r1
   15078:	f85e 1c18 	ldr.w	r1, [lr, #-24]
   1507c:	9405      	str	r4, [sp, #20]
   1507e:	4079      	eors	r1, r7
   15080:	9f00      	ldr	r7, [sp, #0]
   15082:	9c01      	ldr	r4, [sp, #4]
   15084:	ea81 0808 	eor.w	r8, r1, r8
   15088:	f3c5 2107 	ubfx	r1, r5, #8, #8
   1508c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   15090:	f3c6 4607 	ubfx	r6, r6, #16, #8
   15094:	9f03      	ldr	r7, [sp, #12]
   15096:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   1509a:	f3c5 4507 	ubfx	r5, r5, #16, #8
   1509e:	f854 a02a 	ldr.w	sl, [r4, sl, lsl #2]
   150a2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   150a6:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   150aa:	9c00      	ldr	r4, [sp, #0]
   150ac:	407b      	eors	r3, r7
   150ae:	f3cc 2707 	ubfx	r7, ip, #8, #8
   150b2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
   150b6:	9c01      	ldr	r4, [sp, #4]
   150b8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
   150bc:	f854 c02c 	ldr.w	ip, [r4, ip, lsl #2]
   150c0:	9c05      	ldr	r4, [sp, #20]
   150c2:	406b      	eors	r3, r5
   150c4:	4062      	eors	r2, r4
   150c6:	4056      	eors	r6, r2
   150c8:	4048      	eors	r0, r1
   150ca:	ea80 000c 	eor.w	r0, r0, ip
   150ce:	ea88 0807 	eor.w	r8, r8, r7
   150d2:	fa5f fc83 	uxtb.w	ip, r3
   150d6:	0e35      	lsrs	r5, r6, #24
   150d8:	ea88 080a 	eor.w	r8, r8, sl
   150dc:	f859 a02c 	ldr.w	sl, [r9, ip, lsl #2]
   150e0:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
   150e4:	f3c0 2207 	ubfx	r2, r0, #8, #8
   150e8:	9503      	str	r5, [sp, #12]
   150ea:	9d00      	ldr	r5, [sp, #0]
   150ec:	f3c8 4707 	ubfx	r7, r8, #16, #8
   150f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   150f4:	9d01      	ldr	r5, [sp, #4]
   150f6:	b2c4      	uxtb	r4, r0
   150f8:	0e19      	lsrs	r1, r3, #24
   150fa:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
   150fe:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
   15102:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   15106:	9d00      	ldr	r5, [sp, #0]
   15108:	f3c8 2c07 	ubfx	ip, r8, #8, #8
   1510c:	f855 502c 	ldr.w	r5, [r5, ip, lsl #2]
   15110:	ea84 0c01 	eor.w	ip, r4, r1
   15114:	9c01      	ldr	r4, [sp, #4]
   15116:	f3c6 4107 	ubfx	r1, r6, #16, #8
   1511a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   1511e:	9504      	str	r5, [sp, #16]
   15120:	9d03      	ldr	r5, [sp, #12]
   15122:	9103      	str	r1, [sp, #12]
   15124:	fa5f f188 	uxtb.w	r1, r8
   15128:	f859 4021 	ldr.w	r4, [r9, r1, lsl #2]
   1512c:	f85e 1c10 	ldr.w	r1, [lr, #-16]
   15130:	ea8a 0a05 	eor.w	sl, sl, r5
   15134:	ea8a 0a01 	eor.w	sl, sl, r1
   15138:	0e01      	lsrs	r1, r0, #24
   1513a:	f85b 5021 	ldr.w	r5, [fp, r1, lsl #2]
   1513e:	ea4f 6818 	mov.w	r8, r8, lsr #24
   15142:	406c      	eors	r4, r5
   15144:	b2f5      	uxtb	r5, r6
   15146:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   1514a:	ea8a 0a02 	eor.w	sl, sl, r2
   1514e:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   15152:	f85e 1c0c 	ldr.w	r1, [lr, #-12]
   15156:	ea85 0802 	eor.w	r8, r5, r2
   1515a:	f85e 2c08 	ldr.w	r2, [lr, #-8]
   1515e:	9d01      	ldr	r5, [sp, #4]
   15160:	4062      	eors	r2, r4
   15162:	f3c0 4007 	ubfx	r0, r0, #16, #8
   15166:	f3c3 2407 	ubfx	r4, r3, #8, #8
   1516a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1516e:	ea8c 0c01 	eor.w	ip, ip, r1
   15172:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   15176:	9900      	ldr	r1, [sp, #0]
   15178:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
   1517c:	9b04      	ldr	r3, [sp, #16]
   1517e:	f3c6 2607 	ubfx	r6, r6, #8, #8
   15182:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
   15186:	ea8a 0a07 	eor.w	sl, sl, r7
   1518a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
   1518e:	f85e 6c04 	ldr.w	r6, [lr, #-4]
   15192:	ea8c 0103 	eor.w	r1, ip, r3
   15196:	9b03      	ldr	r3, [sp, #12]
   15198:	ea88 0806 	eor.w	r8, r8, r6
   1519c:	ea81 0603 	eor.w	r6, r1, r3
   151a0:	9b02      	ldr	r3, [sp, #8]
   151a2:	407a      	eors	r2, r7
   151a4:	ea88 0804 	eor.w	r8, r8, r4
   151a8:	3b01      	subs	r3, #1
   151aa:	ea85 0502 	eor.w	r5, r5, r2
   151ae:	ea88 0c00 	eor.w	ip, r8, r0
   151b2:	f10e 0e20 	add.w	lr, lr, #32
   151b6:	9302      	str	r3, [sp, #8]
   151b8:	f47f af2a 	bne.w	15010 <mbedtls_internal_aes_encrypt+0x5c>
   151bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151be:	9a06      	ldr	r2, [sp, #24]
   151c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   151c4:	3b01      	subs	r3, #1
   151c6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   151ca:	9306      	str	r3, [sp, #24]
   151cc:	f04f 0e00 	mov.w	lr, #0
   151d0:	9c07      	ldr	r4, [sp, #28]
   151d2:	fa5f f08a 	uxtb.w	r0, sl
   151d6:	fa5f f18c 	uxtb.w	r1, ip
   151da:	0e2b      	lsrs	r3, r5, #24
   151dc:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
   151e0:	ea4f 621c 	mov.w	r2, ip, lsr #24
   151e4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   151e8:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
   151ec:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   151f0:	9b06      	ldr	r3, [sp, #24]
   151f2:	4041      	eors	r1, r0
   151f4:	9807      	ldr	r0, [sp, #28]
   151f6:	9103      	str	r1, [sp, #12]
   151f8:	681b      	ldr	r3, [r3, #0]
   151fa:	b2f1      	uxtb	r1, r6
   151fc:	407a      	eors	r2, r7
   151fe:	9f00      	ldr	r7, [sp, #0]
   15200:	f3c6 2407 	ubfx	r4, r6, #8, #8
   15204:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   15208:	9901      	ldr	r1, [sp, #4]
   1520a:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
   1520e:	405a      	eors	r2, r3
   15210:	f3c5 4407 	ubfx	r4, r5, #16, #8
   15214:	0e33      	lsrs	r3, r6, #24
   15216:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   1521a:	f85b 4023 	ldr.w	r4, [fp, r3, lsl #2]
   1521e:	9b01      	ldr	r3, [sp, #4]
   15220:	f3c6 4607 	ubfx	r6, r6, #16, #8
   15224:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
   15228:	ea4f 631a 	mov.w	r3, sl, lsr #24
   1522c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   15230:	407a      	eors	r2, r7
   15232:	9604      	str	r6, [sp, #16]
   15234:	ea82 0601 	eor.w	r6, r2, r1
   15238:	9a07      	ldr	r2, [sp, #28]
   1523a:	4058      	eors	r0, r3
   1523c:	b2eb      	uxtb	r3, r5
   1523e:	9f06      	ldr	r7, [sp, #24]
   15240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   15244:	9900      	ldr	r1, [sp, #0]
   15246:	f3c5 2507 	ubfx	r5, r5, #8, #8
   1524a:	ea82 0b04 	eor.w	fp, r2, r4
   1524e:	9602      	str	r6, [sp, #8]
   15250:	9c03      	ldr	r4, [sp, #12]
   15252:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
   15256:	68f9      	ldr	r1, [r7, #12]
   15258:	9a00      	ldr	r2, [sp, #0]
   1525a:	f3ca 2307 	ubfx	r3, sl, #8, #8
   1525e:	4061      	eors	r1, r4
   15260:	9c01      	ldr	r4, [sp, #4]
   15262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   15266:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   1526a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   1526e:	f854 402a 	ldr.w	r4, [r4, sl, lsl #2]
   15272:	9b04      	ldr	r3, [sp, #16]
   15274:	4051      	eors	r1, r2
   15276:	ea81 0203 	eor.w	r2, r1, r3
   1527a:	687b      	ldr	r3, [r7, #4]
   1527c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   15280:	4043      	eors	r3, r0
   15282:	4073      	eors	r3, r6
   15284:	9e00      	ldr	r6, [sp, #0]
   15286:	f3cc 2007 	ubfx	r0, ip, #8, #8
   1528a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1528e:	68be      	ldr	r6, [r7, #8]
   15290:	9f01      	ldr	r7, [sp, #4]
   15292:	9103      	str	r1, [sp, #12]
   15294:	f3cc 4107 	ubfx	r1, ip, #16, #8
   15298:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   1529c:	ea8b 0606 	eor.w	r6, fp, r6
   152a0:	4d2b      	ldr	r5, [pc, #172]	; (15350 <mbedtls_internal_aes_encrypt+0x39c>)
   152a2:	404b      	eors	r3, r1
   152a4:	4070      	eors	r0, r6
   152a6:	9903      	ldr	r1, [sp, #12]
   152a8:	4044      	eors	r4, r0
   152aa:	b2d8      	uxtb	r0, r3
   152ac:	5c6f      	ldrb	r7, [r5, r1]
   152ae:	5c28      	ldrb	r0, [r5, r0]
   152b0:	9906      	ldr	r1, [sp, #24]
   152b2:	9000      	str	r0, [sp, #0]
   152b4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
   152b8:	9802      	ldr	r0, [sp, #8]
   152ba:	6909      	ldr	r1, [r1, #16]
   152bc:	f815 b00b 	ldrb.w	fp, [r5, fp]
   152c0:	f3c3 2a07 	ubfx	sl, r3, #8, #8
   152c4:	f815 a00a 	ldrb.w	sl, [r5, sl]
   152c8:	4079      	eors	r1, r7
   152ca:	f3c4 4607 	ubfx	r6, r4, #16, #8
   152ce:	0e00      	lsrs	r0, r0, #24
   152d0:	f815 c000 	ldrb.w	ip, [r5, r0]
   152d4:	5dae      	ldrb	r6, [r5, r6]
   152d6:	f3c4 2007 	ubfx	r0, r4, #8, #8
   152da:	ea81 6b0b 	eor.w	fp, r1, fp, lsl #24
   152de:	5c2f      	ldrb	r7, [r5, r0]
   152e0:	ea8b 2b0a 	eor.w	fp, fp, sl, lsl #8
   152e4:	f3c2 4007 	ubfx	r0, r2, #16, #8
   152e8:	ea8b 4b06 	eor.w	fp, fp, r6, lsl #16
   152ec:	f8cd c004 	str.w	ip, [sp, #4]
   152f0:	9e06      	ldr	r6, [sp, #24]
   152f2:	f815 c000 	ldrb.w	ip, [r5, r0]
   152f6:	9703      	str	r7, [sp, #12]
   152f8:	b2e1      	uxtb	r1, r4
   152fa:	0e1f      	lsrs	r7, r3, #24
   152fc:	f3c3 4307 	ubfx	r3, r3, #16, #8
   15300:	5c68      	ldrb	r0, [r5, r1]
   15302:	f8cd c010 	str.w	ip, [sp, #16]
   15306:	9305      	str	r3, [sp, #20]
   15308:	f3c2 2c07 	ubfx	ip, r2, #8, #8
   1530c:	6973      	ldr	r3, [r6, #20]
   1530e:	b2d1      	uxtb	r1, r2
   15310:	9a00      	ldr	r2, [sp, #0]
   15312:	46f0      	mov	r8, lr
   15314:	4053      	eors	r3, r2
   15316:	9a01      	ldr	r2, [sp, #4]
   15318:	0e24      	lsrs	r4, r4, #24
   1531a:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
   1531e:	4632      	mov	r2, r6
   15320:	69b6      	ldr	r6, [r6, #24]
   15322:	5def      	ldrb	r7, [r5, r7]
   15324:	f8d2 a01c 	ldr.w	sl, [r2, #28]
   15328:	5c69      	ldrb	r1, [r5, r1]
   1532a:	4070      	eors	r0, r6
   1532c:	ea81 0a0a 	eor.w	sl, r1, sl
   15330:	9902      	ldr	r1, [sp, #8]
   15332:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
   15336:	f3c1 2607 	ubfx	r6, r1, #8, #8
   1533a:	f3c1 4707 	ubfx	r7, r1, #16, #8
   1533e:	9905      	ldr	r1, [sp, #20]
   15340:	e00a      	b.n	15358 <mbedtls_internal_aes_encrypt+0x3a4>
   15342:	bf00      	nop
   15344:	00027dfc 	.word	0x00027dfc
   15348:	000281fc 	.word	0x000281fc
   1534c:	000285fc 	.word	0x000285fc
   15350:	00027cfc 	.word	0x00027cfc
   15354:	000289fc 	.word	0x000289fc
   15358:	5d2c      	ldrb	r4, [r5, r4]
   1535a:	f815 200c 	ldrb.w	r2, [r5, ip]
   1535e:	5dae      	ldrb	r6, [r5, r6]
   15360:	5c69      	ldrb	r1, [r5, r1]
   15362:	5ded      	ldrb	r5, [r5, r7]
   15364:	9f03      	ldr	r7, [sp, #12]
   15366:	ea80 2002 	eor.w	r0, r0, r2, lsl #8
   1536a:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
   1536e:	9f04      	ldr	r7, [sp, #16]
   15370:	46f1      	mov	r9, lr
   15372:	ea83 4307 	eor.w	r3, r3, r7, lsl #16
   15376:	4647      	mov	r7, r8
   15378:	ea80 4505 	eor.w	r5, r0, r5, lsl #16
   1537c:	0a28      	lsrs	r0, r5, #8
   1537e:	f365 0807 	bfi	r8, r5, #0, #8
   15382:	f360 280f 	bfi	r8, r0, #8, #8
   15386:	0c28      	lsrs	r0, r5, #16
   15388:	f360 4817 	bfi	r8, r0, #16, #8
   1538c:	2000      	movs	r0, #0
   1538e:	ea8a 6a04 	eor.w	sl, sl, r4, lsl #24
   15392:	ea8a 2a06 	eor.w	sl, sl, r6, lsl #8
   15396:	ea8a 4101 	eor.w	r1, sl, r1, lsl #16
   1539a:	0a1c      	lsrs	r4, r3, #8
   1539c:	f363 0707 	bfi	r7, r3, #0, #8
   153a0:	ea4f 261b 	mov.w	r6, fp, lsr #8
   153a4:	0a0a      	lsrs	r2, r1, #8
   153a6:	f36b 0e07 	bfi	lr, fp, #0, #8
   153aa:	f361 0907 	bfi	r9, r1, #0, #8
   153ae:	f364 270f 	bfi	r7, r4, #8, #8
   153b2:	0c1c      	lsrs	r4, r3, #16
   153b4:	f366 2e0f 	bfi	lr, r6, #8, #8
   153b8:	f362 290f 	bfi	r9, r2, #8, #8
   153bc:	ea4f 461b 	mov.w	r6, fp, lsr #16
   153c0:	0c0a      	lsrs	r2, r1, #16
   153c2:	f364 4717 	bfi	r7, r4, #16, #8
   153c6:	0e1b      	lsrs	r3, r3, #24
   153c8:	f363 671f 	bfi	r7, r3, #24, #8
   153cc:	f366 4e17 	bfi	lr, r6, #16, #8
   153d0:	9b08      	ldr	r3, [sp, #32]
   153d2:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
   153d6:	0e2d      	lsrs	r5, r5, #24
   153d8:	f362 4917 	bfi	r9, r2, #16, #8
   153dc:	0e09      	lsrs	r1, r1, #24
   153de:	f36b 6e1f 	bfi	lr, fp, #24, #8
   153e2:	f365 681f 	bfi	r8, r5, #24, #8
   153e6:	f361 691f 	bfi	r9, r1, #24, #8
   153ea:	f8c3 e000 	str.w	lr, [r3]
   153ee:	605f      	str	r7, [r3, #4]
   153f0:	f8c3 8008 	str.w	r8, [r3, #8]
   153f4:	f8c3 900c 	str.w	r9, [r3, #12]
   153f8:	b00b      	add	sp, #44	; 0x2c
   153fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153fe:	4b04      	ldr	r3, [pc, #16]	; (15410 <mbedtls_internal_aes_encrypt+0x45c>)
   15400:	f8df b018 	ldr.w	fp, [pc, #24]	; 1541c <mbedtls_internal_aes_encrypt+0x468>
   15404:	9307      	str	r3, [sp, #28]
   15406:	4b03      	ldr	r3, [pc, #12]	; (15414 <mbedtls_internal_aes_encrypt+0x460>)
   15408:	9300      	str	r3, [sp, #0]
   1540a:	4b03      	ldr	r3, [pc, #12]	; (15418 <mbedtls_internal_aes_encrypt+0x464>)
   1540c:	9301      	str	r3, [sp, #4]
   1540e:	e6dd      	b.n	151cc <mbedtls_internal_aes_encrypt+0x218>
   15410:	00027dfc 	.word	0x00027dfc
   15414:	000281fc 	.word	0x000281fc
   15418:	000285fc 	.word	0x000285fc
   1541c:	000289fc 	.word	0x000289fc

00015420 <mbedtls_internal_aes_decrypt>:
   15420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15424:	e9d0 3400 	ldrd	r3, r4, [r0]
   15428:	f8d1 9000 	ldr.w	r9, [r1]
   1542c:	6826      	ldr	r6, [r4, #0]
   1542e:	b08b      	sub	sp, #44	; 0x2c
   15430:	105b      	asrs	r3, r3, #1
   15432:	1e58      	subs	r0, r3, #1
   15434:	9309      	str	r3, [sp, #36]	; 0x24
   15436:	ea89 0306 	eor.w	r3, r9, r6
   1543a:	9304      	str	r3, [sp, #16]
   1543c:	688b      	ldr	r3, [r1, #8]
   1543e:	f8d1 8004 	ldr.w	r8, [r1, #4]
   15442:	68cd      	ldr	r5, [r1, #12]
   15444:	9208      	str	r2, [sp, #32]
   15446:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   1544a:	4053      	eors	r3, r2
   1544c:	f104 0210 	add.w	r2, r4, #16
   15450:	9207      	str	r2, [sp, #28]
   15452:	4ad4      	ldr	r2, [pc, #848]	; (157a4 <mbedtls_internal_aes_decrypt+0x384>)
   15454:	6867      	ldr	r7, [r4, #4]
   15456:	9201      	str	r2, [sp, #4]
   15458:	4ad3      	ldr	r2, [pc, #844]	; (157a8 <mbedtls_internal_aes_decrypt+0x388>)
   1545a:	2800      	cmp	r0, #0
   1545c:	9003      	str	r0, [sp, #12]
   1545e:	ea88 0807 	eor.w	r8, r8, r7
   15462:	ea85 0501 	eor.w	r5, r5, r1
   15466:	f8df b348 	ldr.w	fp, [pc, #840]	; 157b0 <mbedtls_internal_aes_decrypt+0x390>
   1546a:	9200      	str	r2, [sp, #0]
   1546c:	f8df 9344 	ldr.w	r9, [pc, #836]	; 157b4 <mbedtls_internal_aes_decrypt+0x394>
   15470:	f340 80e9 	ble.w	15646 <mbedtls_internal_aes_decrypt+0x226>
   15474:	46aa      	mov	sl, r5
   15476:	9a04      	ldr	r2, [sp, #16]
   15478:	f104 0c30 	add.w	ip, r4, #48	; 0x30
   1547c:	9302      	str	r3, [sp, #8]
   1547e:	9b01      	ldr	r3, [sp, #4]
   15480:	f89d 5008 	ldrb.w	r5, [sp, #8]
   15484:	b2d1      	uxtb	r1, r2
   15486:	fa5f f688 	uxtb.w	r6, r8
   1548a:	fa5f f48a 	uxtb.w	r4, sl
   1548e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   15492:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
   15496:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1549a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
   1549e:	f85c 3c20 	ldr.w	r3, [ip, #-32]
   154a2:	f85c 6c1c 	ldr.w	r6, [ip, #-28]
   154a6:	ea80 0e03 	eor.w	lr, r0, r3
   154aa:	9b02      	ldr	r3, [sp, #8]
   154ac:	4077      	eors	r7, r6
   154ae:	f85c 6c14 	ldr.w	r6, [ip, #-20]
   154b2:	0e18      	lsrs	r0, r3, #24
   154b4:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
   154b8:	ea4f 6118 	mov.w	r1, r8, lsr #24
   154bc:	4066      	eors	r6, r4
   154be:	0e14      	lsrs	r4, r2, #24
   154c0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   154c4:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
   154c8:	9b00      	ldr	r3, [sp, #0]
   154ca:	9505      	str	r5, [sp, #20]
   154cc:	4047      	eors	r7, r0
   154ce:	ea8e 0e01 	eor.w	lr, lr, r1
   154d2:	9704      	str	r7, [sp, #16]
   154d4:	ea4f 651a 	mov.w	r5, sl, lsr #24
   154d8:	9f05      	ldr	r7, [sp, #20]
   154da:	f3ca 2107 	ubfx	r1, sl, #8, #8
   154de:	f3c2 2007 	ubfx	r0, r2, #8, #8
   154e2:	4066      	eors	r6, r4
   154e4:	f85c 4c18 	ldr.w	r4, [ip, #-24]
   154e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   154ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   154f0:	f85b 5025 	ldr.w	r5, [fp, r5, lsl #2]
   154f4:	9b02      	ldr	r3, [sp, #8]
   154f6:	407c      	eors	r4, r7
   154f8:	9f00      	ldr	r7, [sp, #0]
   154fa:	4065      	eors	r5, r4
   154fc:	ea8e 0101 	eor.w	r1, lr, r1
   15500:	f3c3 2407 	ubfx	r4, r3, #8, #8
   15504:	f3c8 2e07 	ubfx	lr, r8, #8, #8
   15508:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1550c:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
   15510:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   15514:	9f04      	ldr	r7, [sp, #16]
   15516:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1551a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
   1551e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   15522:	f3c2 4207 	ubfx	r2, r2, #16, #8
   15526:	4078      	eors	r0, r7
   15528:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   1552c:	4059      	eors	r1, r3
   1552e:	ea85 050e 	eor.w	r5, r5, lr
   15532:	ea80 030a 	eor.w	r3, r0, sl
   15536:	406a      	eors	r2, r5
   15538:	461d      	mov	r5, r3
   1553a:	f3c8 4807 	ubfx	r8, r8, #16, #8
   1553e:	f859 8028 	ldr.w	r8, [r9, r8, lsl #2]
   15542:	9502      	str	r5, [sp, #8]
   15544:	4066      	eors	r6, r4
   15546:	f89d 5008 	ldrb.w	r5, [sp, #8]
   1554a:	9801      	ldr	r0, [sp, #4]
   1554c:	ea86 0608 	eor.w	r6, r6, r8
   15550:	fa5f f881 	uxtb.w	r8, r1
   15554:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
   15558:	9800      	ldr	r0, [sp, #0]
   1555a:	f3c6 2707 	ubfx	r7, r6, #8, #8
   1555e:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   15562:	9801      	ldr	r0, [sp, #4]
   15564:	0e14      	lsrs	r4, r2, #24
   15566:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   1556a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
   1556e:	9800      	ldr	r0, [sp, #0]
   15570:	f3c1 2a07 	ubfx	sl, r1, #8, #8
   15574:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
   15578:	ea85 0a04 	eor.w	sl, r5, r4
   1557c:	f3c6 4407 	ubfx	r4, r6, #16, #8
   15580:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
   15584:	ea4f 6e13 	mov.w	lr, r3, lsr #24
   15588:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
   1558c:	f3c2 2507 	ubfx	r5, r2, #8, #8
   15590:	f3c2 4307 	ubfx	r3, r2, #16, #8
   15594:	9405      	str	r4, [sp, #20]
   15596:	b2d4      	uxtb	r4, r2
   15598:	f85c 2c10 	ldr.w	r2, [ip, #-16]
   1559c:	ea88 0e0e 	eor.w	lr, r8, lr
   155a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   155a4:	ea8e 0202 	eor.w	r2, lr, r2
   155a8:	407a      	eors	r2, r7
   155aa:	9004      	str	r0, [sp, #16]
   155ac:	405a      	eors	r2, r3
   155ae:	9801      	ldr	r0, [sp, #4]
   155b0:	f85c 3c08 	ldr.w	r3, [ip, #-8]
   155b4:	ea4f 6811 	mov.w	r8, r1, lsr #24
   155b8:	ea4f 6e16 	mov.w	lr, r6, lsr #24
   155bc:	b2f6      	uxtb	r6, r6
   155be:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   155c2:	9306      	str	r3, [sp, #24]
   155c4:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
   155c8:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   155cc:	9800      	ldr	r0, [sp, #0]
   155ce:	f85b e02e 	ldr.w	lr, [fp, lr, lsl #2]
   155d2:	f850 8025 	ldr.w	r8, [r0, r5, lsl #2]
   155d6:	405e      	eors	r6, r3
   155d8:	9d02      	ldr	r5, [sp, #8]
   155da:	9b06      	ldr	r3, [sp, #24]
   155dc:	ea84 0e0e 	eor.w	lr, r4, lr
   155e0:	ea8e 0403 	eor.w	r4, lr, r3
   155e4:	f3c5 2307 	ubfx	r3, r5, #8, #8
   155e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   155ec:	f3c1 4107 	ubfx	r1, r1, #16, #8
   155f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   155f4:	f3c5 4007 	ubfx	r0, r5, #16, #8
   155f8:	4063      	eors	r3, r4
   155fa:	f85c 5c04 	ldr.w	r5, [ip, #-4]
   155fe:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   15602:	404b      	eors	r3, r1
   15604:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
   15608:	4075      	eors	r5, r6
   1560a:	9e04      	ldr	r6, [sp, #16]
   1560c:	9c05      	ldr	r4, [sp, #20]
   1560e:	9302      	str	r3, [sp, #8]
   15610:	9b03      	ldr	r3, [sp, #12]
   15612:	ea8a 0707 	eor.w	r7, sl, r7
   15616:	ea85 0508 	eor.w	r5, r5, r8
   1561a:	4077      	eors	r7, r6
   1561c:	3b01      	subs	r3, #1
   1561e:	ea87 0804 	eor.w	r8, r7, r4
   15622:	ea85 0a00 	eor.w	sl, r5, r0
   15626:	f10c 0c20 	add.w	ip, ip, #32
   1562a:	9303      	str	r3, [sp, #12]
   1562c:	f47f af27 	bne.w	1547e <mbedtls_internal_aes_decrypt+0x5e>
   15630:	4655      	mov	r5, sl
   15632:	9204      	str	r2, [sp, #16]
   15634:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15636:	9907      	ldr	r1, [sp, #28]
   15638:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
   1563c:	3a01      	subs	r2, #1
   1563e:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   15642:	9b02      	ldr	r3, [sp, #8]
   15644:	9207      	str	r2, [sp, #28]
   15646:	9e01      	ldr	r6, [sp, #4]
   15648:	f89d 4010 	ldrb.w	r4, [sp, #16]
   1564c:	ea4f 6118 	mov.w	r1, r8, lsr #24
   15650:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
   15654:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
   15658:	fa5f f088 	uxtb.w	r0, r8
   1565c:	0e1a      	lsrs	r2, r3, #24
   1565e:	4079      	eors	r1, r7
   15660:	9f00      	ldr	r7, [sp, #0]
   15662:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]
   15666:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
   1566a:	f3c5 2607 	ubfx	r6, r5, #8, #8
   1566e:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
   15672:	f3c3 4607 	ubfx	r6, r3, #16, #8
   15676:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   1567a:	4060      	eors	r0, r4
   1567c:	9c01      	ldr	r4, [sp, #4]
   1567e:	9005      	str	r0, [sp, #20]
   15680:	b2e8      	uxtb	r0, r5
   15682:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   15686:	4634      	mov	r4, r6
   15688:	9a07      	ldr	r2, [sp, #28]
   1568a:	f04f 0c00 	mov.w	ip, #0
   1568e:	6812      	ldr	r2, [r2, #0]
   15690:	46e2      	mov	sl, ip
   15692:	4051      	eors	r1, r2
   15694:	4079      	eors	r1, r7
   15696:	9f04      	ldr	r7, [sp, #16]
   15698:	0e2a      	lsrs	r2, r5, #24
   1569a:	f85b 6022 	ldr.w	r6, [fp, r2, lsl #2]
   1569e:	0e3a      	lsrs	r2, r7, #24
   156a0:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   156a4:	4061      	eors	r1, r4
   156a6:	9c01      	ldr	r4, [sp, #4]
   156a8:	9102      	str	r1, [sp, #8]
   156aa:	b2d9      	uxtb	r1, r3
   156ac:	4042      	eors	r2, r0
   156ae:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   156b2:	9c00      	ldr	r4, [sp, #0]
   156b4:	ea80 0b06 	eor.w	fp, r0, r6
   156b8:	463e      	mov	r6, r7
   156ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
   156be:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   156c2:	9b07      	ldr	r3, [sp, #28]
   156c4:	f3c5 4507 	ubfx	r5, r5, #16, #8
   156c8:	6858      	ldr	r0, [r3, #4]
   156ca:	9b05      	ldr	r3, [sp, #20]
   156cc:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   156d0:	4058      	eors	r0, r3
   156d2:	f3c7 2307 	ubfx	r3, r7, #8, #8
   156d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   156da:	9506      	str	r5, [sp, #24]
   156dc:	f3c6 4607 	ubfx	r6, r6, #16, #8
   156e0:	4058      	eors	r0, r3
   156e2:	9b06      	ldr	r3, [sp, #24]
   156e4:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   156e8:	9e07      	ldr	r6, [sp, #28]
   156ea:	4058      	eors	r0, r3
   156ec:	9001      	str	r0, [sp, #4]
   156ee:	68f3      	ldr	r3, [r6, #12]
   156f0:	9800      	ldr	r0, [sp, #0]
   156f2:	4053      	eors	r3, r2
   156f4:	4059      	eors	r1, r3
   156f6:	f3c8 4207 	ubfx	r2, r8, #16, #8
   156fa:	f3c8 2307 	ubfx	r3, r8, #8, #8
   156fe:	4d2b      	ldr	r5, [pc, #172]	; (157ac <mbedtls_internal_aes_decrypt+0x38c>)
   15700:	f89d 4008 	ldrb.w	r4, [sp, #8]
   15704:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   15708:	68b6      	ldr	r6, [r6, #8]
   1570a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   1570e:	ea8b 0606 	eor.w	r6, fp, r6
   15712:	9a01      	ldr	r2, [sp, #4]
   15714:	404b      	eors	r3, r1
   15716:	5d29      	ldrb	r1, [r5, r4]
   15718:	9c07      	ldr	r4, [sp, #28]
   1571a:	4070      	eors	r0, r6
   1571c:	4078      	eors	r0, r7
   1571e:	4690      	mov	r8, r2
   15720:	ea4f 6b12 	mov.w	fp, r2, lsr #24
   15724:	b2d7      	uxtb	r7, r2
   15726:	6922      	ldr	r2, [r4, #16]
   15728:	f3c3 2607 	ubfx	r6, r3, #8, #8
   1572c:	404a      	eors	r2, r1
   1572e:	9902      	ldr	r1, [sp, #8]
   15730:	f815 400b 	ldrb.w	r4, [r5, fp]
   15734:	f3c1 2107 	ubfx	r1, r1, #8, #8
   15738:	f815 b001 	ldrb.w	fp, [r5, r1]
   1573c:	5dae      	ldrb	r6, [r5, r6]
   1573e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   15742:	f3c0 4907 	ubfx	r9, r0, #16, #8
   15746:	f815 9009 	ldrb.w	r9, [r5, r9]
   1574a:	5def      	ldrb	r7, [r5, r7]
   1574c:	f8cd b010 	str.w	fp, [sp, #16]
   15750:	f815 b001 	ldrb.w	fp, [r5, r1]
   15754:	ea82 6104 	eor.w	r1, r2, r4, lsl #24
   15758:	b2c2      	uxtb	r2, r0
   1575a:	5cac      	ldrb	r4, [r5, r2]
   1575c:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
   15760:	9a07      	ldr	r2, [sp, #28]
   15762:	9701      	str	r7, [sp, #4]
   15764:	ea81 4109 	eor.w	r1, r1, r9, lsl #16
   15768:	6956      	ldr	r6, [r2, #20]
   1576a:	9100      	str	r1, [sp, #0]
   1576c:	9901      	ldr	r1, [sp, #4]
   1576e:	0e07      	lsrs	r7, r0, #24
   15770:	404e      	eors	r6, r1
   15772:	4611      	mov	r1, r2
   15774:	5def      	ldrb	r7, [r5, r7]
   15776:	f8cd b014 	str.w	fp, [sp, #20]
   1577a:	6992      	ldr	r2, [r2, #24]
   1577c:	ea4f 6b13 	mov.w	fp, r3, lsr #24
   15780:	f8d1 901c 	ldr.w	r9, [r1, #28]
   15784:	ea86 6707 	eor.w	r7, r6, r7, lsl #24
   15788:	9902      	ldr	r1, [sp, #8]
   1578a:	f815 600b 	ldrb.w	r6, [r5, fp]
   1578e:	b2db      	uxtb	r3, r3
   15790:	5ceb      	ldrb	r3, [r5, r3]
   15792:	f3c0 2007 	ubfx	r0, r0, #8, #8
   15796:	4062      	eors	r2, r4
   15798:	f815 b000 	ldrb.w	fp, [r5, r0]
   1579c:	ea82 6206 	eor.w	r2, r2, r6, lsl #24
   157a0:	e00a      	b.n	157b8 <mbedtls_internal_aes_decrypt+0x398>
   157a2:	bf00      	nop
   157a4:	00028f24 	.word	0x00028f24
   157a8:	00029324 	.word	0x00029324
   157ac:	00028e24 	.word	0x00028e24
   157b0:	00029b24 	.word	0x00029b24
   157b4:	00029724 	.word	0x00029724
   157b8:	0e08      	lsrs	r0, r1, #24
   157ba:	f3c8 2607 	ubfx	r6, r8, #8, #8
   157be:	5c28      	ldrb	r0, [r5, r0]
   157c0:	f3c1 4407 	ubfx	r4, r1, #16, #8
   157c4:	5dae      	ldrb	r6, [r5, r6]
   157c6:	ea83 0309 	eor.w	r3, r3, r9
   157ca:	f3c8 4907 	ubfx	r9, r8, #16, #8
   157ce:	f815 9009 	ldrb.w	r9, [r5, r9]
   157d2:	5d2d      	ldrb	r5, [r5, r4]
   157d4:	ea82 2206 	eor.w	r2, r2, r6, lsl #8
   157d8:	ea82 4505 	eor.w	r5, r2, r5, lsl #16
   157dc:	9a00      	ldr	r2, [sp, #0]
   157de:	46e6      	mov	lr, ip
   157e0:	0a16      	lsrs	r6, r2, #8
   157e2:	f362 0c07 	bfi	ip, r2, #0, #8
   157e6:	2200      	movs	r2, #0
   157e8:	9904      	ldr	r1, [sp, #16]
   157ea:	ea83 6300 	eor.w	r3, r3, r0, lsl #24
   157ee:	ea87 2701 	eor.w	r7, r7, r1, lsl #8
   157f2:	9905      	ldr	r1, [sp, #20]
   157f4:	ea83 230b 	eor.w	r3, r3, fp, lsl #8
   157f8:	ea87 4701 	eor.w	r7, r7, r1, lsl #16
   157fc:	4611      	mov	r1, r2
   157fe:	ea83 4309 	eor.w	r3, r3, r9, lsl #16
   15802:	0a1a      	lsrs	r2, r3, #8
   15804:	f363 0107 	bfi	r1, r3, #0, #8
   15808:	0a28      	lsrs	r0, r5, #8
   1580a:	f362 210f 	bfi	r1, r2, #8, #8
   1580e:	f365 0e07 	bfi	lr, r5, #0, #8
   15812:	9103      	str	r1, [sp, #12]
   15814:	f360 2e0f 	bfi	lr, r0, #8, #8
   15818:	0c28      	lsrs	r0, r5, #16
   1581a:	f360 4e17 	bfi	lr, r0, #16, #8
   1581e:	9803      	ldr	r0, [sp, #12]
   15820:	0c1a      	lsrs	r2, r3, #16
   15822:	f362 4017 	bfi	r0, r2, #16, #8
   15826:	0e1b      	lsrs	r3, r3, #24
   15828:	f363 601f 	bfi	r0, r3, #24, #8
   1582c:	9b08      	ldr	r3, [sp, #32]
   1582e:	f366 2c0f 	bfi	ip, r6, #8, #8
   15832:	60d8      	str	r0, [r3, #12]
   15834:	2000      	movs	r0, #0
   15836:	9e00      	ldr	r6, [sp, #0]
   15838:	0a3c      	lsrs	r4, r7, #8
   1583a:	f367 0a07 	bfi	sl, r7, #0, #8
   1583e:	9900      	ldr	r1, [sp, #0]
   15840:	0c36      	lsrs	r6, r6, #16
   15842:	f364 2a0f 	bfi	sl, r4, #8, #8
   15846:	0c3c      	lsrs	r4, r7, #16
   15848:	f366 4c17 	bfi	ip, r6, #16, #8
   1584c:	0e09      	lsrs	r1, r1, #24
   1584e:	f364 4a17 	bfi	sl, r4, #16, #8
   15852:	0e3f      	lsrs	r7, r7, #24
   15854:	0e2d      	lsrs	r5, r5, #24
   15856:	f361 6c1f 	bfi	ip, r1, #24, #8
   1585a:	f367 6a1f 	bfi	sl, r7, #24, #8
   1585e:	f365 6e1f 	bfi	lr, r5, #24, #8
   15862:	f8c3 c000 	str.w	ip, [r3]
   15866:	f8c3 a004 	str.w	sl, [r3, #4]
   1586a:	f8c3 e008 	str.w	lr, [r3, #8]
   1586e:	b00b      	add	sp, #44	; 0x2c
   15870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015874 <mbedtls_aes_crypt_ecb>:
   15874:	b410      	push	{r4}
   15876:	4614      	mov	r4, r2
   15878:	2901      	cmp	r1, #1
   1587a:	461a      	mov	r2, r3
   1587c:	4621      	mov	r1, r4
   1587e:	d003      	beq.n	15888 <mbedtls_aes_crypt_ecb+0x14>
   15880:	f85d 4b04 	ldr.w	r4, [sp], #4
   15884:	f7ff bdcc 	b.w	15420 <mbedtls_internal_aes_decrypt>
   15888:	f85d 4b04 	ldr.w	r4, [sp], #4
   1588c:	f7ff bb92 	b.w	14fb4 <mbedtls_internal_aes_encrypt>

00015890 <mbedtls_asn1_write_len.part.0>:
   15890:	b430      	push	{r4, r5}
   15892:	4603      	mov	r3, r0
   15894:	6800      	ldr	r0, [r0, #0]
   15896:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1589a:	eba0 0101 	sub.w	r1, r0, r1
   1589e:	d214      	bcs.n	158ca <mbedtls_asn1_write_len.part.0+0x3a>
   158a0:	2902      	cmp	r1, #2
   158a2:	dd51      	ble.n	15948 <mbedtls_asn1_write_len.part.0+0xb8>
   158a4:	1e41      	subs	r1, r0, #1
   158a6:	6019      	str	r1, [r3, #0]
   158a8:	f800 2c01 	strb.w	r2, [r0, #-1]
   158ac:	6819      	ldr	r1, [r3, #0]
   158ae:	2482      	movs	r4, #130	; 0x82
   158b0:	1e48      	subs	r0, r1, #1
   158b2:	6018      	str	r0, [r3, #0]
   158b4:	2003      	movs	r0, #3
   158b6:	0a12      	lsrs	r2, r2, #8
   158b8:	f801 2c01 	strb.w	r2, [r1, #-1]
   158bc:	681a      	ldr	r2, [r3, #0]
   158be:	1e51      	subs	r1, r2, #1
   158c0:	6019      	str	r1, [r3, #0]
   158c2:	f802 4c01 	strb.w	r4, [r2, #-1]
   158c6:	bc30      	pop	{r4, r5}
   158c8:	4770      	bx	lr
   158ca:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   158ce:	d21a      	bcs.n	15906 <mbedtls_asn1_write_len.part.0+0x76>
   158d0:	2903      	cmp	r1, #3
   158d2:	dd39      	ble.n	15948 <mbedtls_asn1_write_len.part.0+0xb8>
   158d4:	2483      	movs	r4, #131	; 0x83
   158d6:	1e41      	subs	r1, r0, #1
   158d8:	6019      	str	r1, [r3, #0]
   158da:	f800 2c01 	strb.w	r2, [r0, #-1]
   158de:	6819      	ldr	r1, [r3, #0]
   158e0:	0a10      	lsrs	r0, r2, #8
   158e2:	1e4d      	subs	r5, r1, #1
   158e4:	601d      	str	r5, [r3, #0]
   158e6:	f801 0c01 	strb.w	r0, [r1, #-1]
   158ea:	6819      	ldr	r1, [r3, #0]
   158ec:	0c12      	lsrs	r2, r2, #16
   158ee:	1e48      	subs	r0, r1, #1
   158f0:	6018      	str	r0, [r3, #0]
   158f2:	f801 2c01 	strb.w	r2, [r1, #-1]
   158f6:	681a      	ldr	r2, [r3, #0]
   158f8:	2004      	movs	r0, #4
   158fa:	1e51      	subs	r1, r2, #1
   158fc:	6019      	str	r1, [r3, #0]
   158fe:	f802 4c01 	strb.w	r4, [r2, #-1]
   15902:	bc30      	pop	{r4, r5}
   15904:	4770      	bx	lr
   15906:	2904      	cmp	r1, #4
   15908:	dd1e      	ble.n	15948 <mbedtls_asn1_write_len.part.0+0xb8>
   1590a:	2484      	movs	r4, #132	; 0x84
   1590c:	1e41      	subs	r1, r0, #1
   1590e:	6019      	str	r1, [r3, #0]
   15910:	f800 2c01 	strb.w	r2, [r0, #-1]
   15914:	6819      	ldr	r1, [r3, #0]
   15916:	0a10      	lsrs	r0, r2, #8
   15918:	1e4d      	subs	r5, r1, #1
   1591a:	601d      	str	r5, [r3, #0]
   1591c:	f801 0c01 	strb.w	r0, [r1, #-1]
   15920:	6819      	ldr	r1, [r3, #0]
   15922:	0c10      	lsrs	r0, r2, #16
   15924:	1e4d      	subs	r5, r1, #1
   15926:	601d      	str	r5, [r3, #0]
   15928:	f801 0c01 	strb.w	r0, [r1, #-1]
   1592c:	6819      	ldr	r1, [r3, #0]
   1592e:	0e12      	lsrs	r2, r2, #24
   15930:	1e48      	subs	r0, r1, #1
   15932:	6018      	str	r0, [r3, #0]
   15934:	f801 2c01 	strb.w	r2, [r1, #-1]
   15938:	681a      	ldr	r2, [r3, #0]
   1593a:	2005      	movs	r0, #5
   1593c:	1e51      	subs	r1, r2, #1
   1593e:	6019      	str	r1, [r3, #0]
   15940:	f802 4c01 	strb.w	r4, [r2, #-1]
   15944:	bc30      	pop	{r4, r5}
   15946:	4770      	bx	lr
   15948:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   1594c:	e7bb      	b.n	158c6 <mbedtls_asn1_write_len.part.0+0x36>
   1594e:	bf00      	nop

00015950 <mbedtls_asn1_write_len>:
   15950:	b430      	push	{r4, r5}
   15952:	6804      	ldr	r4, [r0, #0]
   15954:	2a7f      	cmp	r2, #127	; 0x7f
   15956:	4603      	mov	r3, r0
   15958:	eba4 0101 	sub.w	r1, r4, r1
   1595c:	d808      	bhi.n	15970 <mbedtls_asn1_write_len+0x20>
   1595e:	2900      	cmp	r1, #0
   15960:	dd6c      	ble.n	15a3c <mbedtls_asn1_write_len+0xec>
   15962:	1e61      	subs	r1, r4, #1
   15964:	6001      	str	r1, [r0, #0]
   15966:	2001      	movs	r0, #1
   15968:	f804 2c01 	strb.w	r2, [r4, #-1]
   1596c:	bc30      	pop	{r4, r5}
   1596e:	4770      	bx	lr
   15970:	2aff      	cmp	r2, #255	; 0xff
   15972:	d80e      	bhi.n	15992 <mbedtls_asn1_write_len+0x42>
   15974:	2901      	cmp	r1, #1
   15976:	dd61      	ble.n	15a3c <mbedtls_asn1_write_len+0xec>
   15978:	2181      	movs	r1, #129	; 0x81
   1597a:	1e60      	subs	r0, r4, #1
   1597c:	6018      	str	r0, [r3, #0]
   1597e:	f804 2c01 	strb.w	r2, [r4, #-1]
   15982:	681a      	ldr	r2, [r3, #0]
   15984:	2002      	movs	r0, #2
   15986:	1e54      	subs	r4, r2, #1
   15988:	601c      	str	r4, [r3, #0]
   1598a:	f802 1c01 	strb.w	r1, [r2, #-1]
   1598e:	bc30      	pop	{r4, r5}
   15990:	4770      	bx	lr
   15992:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   15996:	d31c      	bcc.n	159d2 <mbedtls_asn1_write_len+0x82>
   15998:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1599c:	d22e      	bcs.n	159fc <mbedtls_asn1_write_len+0xac>
   1599e:	2903      	cmp	r1, #3
   159a0:	dd4c      	ble.n	15a3c <mbedtls_asn1_write_len+0xec>
   159a2:	2583      	movs	r5, #131	; 0x83
   159a4:	1e61      	subs	r1, r4, #1
   159a6:	6001      	str	r1, [r0, #0]
   159a8:	f804 2c01 	strb.w	r2, [r4, #-1]
   159ac:	6801      	ldr	r1, [r0, #0]
   159ae:	0a10      	lsrs	r0, r2, #8
   159b0:	1e4c      	subs	r4, r1, #1
   159b2:	601c      	str	r4, [r3, #0]
   159b4:	f801 0c01 	strb.w	r0, [r1, #-1]
   159b8:	6819      	ldr	r1, [r3, #0]
   159ba:	0c12      	lsrs	r2, r2, #16
   159bc:	1e48      	subs	r0, r1, #1
   159be:	6018      	str	r0, [r3, #0]
   159c0:	f801 2c01 	strb.w	r2, [r1, #-1]
   159c4:	681a      	ldr	r2, [r3, #0]
   159c6:	2004      	movs	r0, #4
   159c8:	1e51      	subs	r1, r2, #1
   159ca:	6019      	str	r1, [r3, #0]
   159cc:	f802 5c01 	strb.w	r5, [r2, #-1]
   159d0:	e7cc      	b.n	1596c <mbedtls_asn1_write_len+0x1c>
   159d2:	2902      	cmp	r1, #2
   159d4:	dd32      	ble.n	15a3c <mbedtls_asn1_write_len+0xec>
   159d6:	2582      	movs	r5, #130	; 0x82
   159d8:	1e61      	subs	r1, r4, #1
   159da:	6001      	str	r1, [r0, #0]
   159dc:	f804 2c01 	strb.w	r2, [r4, #-1]
   159e0:	6801      	ldr	r1, [r0, #0]
   159e2:	0a12      	lsrs	r2, r2, #8
   159e4:	1e48      	subs	r0, r1, #1
   159e6:	6018      	str	r0, [r3, #0]
   159e8:	f801 2c01 	strb.w	r2, [r1, #-1]
   159ec:	681a      	ldr	r2, [r3, #0]
   159ee:	2003      	movs	r0, #3
   159f0:	1e51      	subs	r1, r2, #1
   159f2:	6019      	str	r1, [r3, #0]
   159f4:	f802 5c01 	strb.w	r5, [r2, #-1]
   159f8:	bc30      	pop	{r4, r5}
   159fa:	4770      	bx	lr
   159fc:	2904      	cmp	r1, #4
   159fe:	dd1d      	ble.n	15a3c <mbedtls_asn1_write_len+0xec>
   15a00:	2584      	movs	r5, #132	; 0x84
   15a02:	1e61      	subs	r1, r4, #1
   15a04:	6001      	str	r1, [r0, #0]
   15a06:	f804 2c01 	strb.w	r2, [r4, #-1]
   15a0a:	6801      	ldr	r1, [r0, #0]
   15a0c:	0a10      	lsrs	r0, r2, #8
   15a0e:	1e4c      	subs	r4, r1, #1
   15a10:	601c      	str	r4, [r3, #0]
   15a12:	f801 0c01 	strb.w	r0, [r1, #-1]
   15a16:	6819      	ldr	r1, [r3, #0]
   15a18:	0c10      	lsrs	r0, r2, #16
   15a1a:	1e4c      	subs	r4, r1, #1
   15a1c:	601c      	str	r4, [r3, #0]
   15a1e:	f801 0c01 	strb.w	r0, [r1, #-1]
   15a22:	6819      	ldr	r1, [r3, #0]
   15a24:	0e12      	lsrs	r2, r2, #24
   15a26:	1e48      	subs	r0, r1, #1
   15a28:	6018      	str	r0, [r3, #0]
   15a2a:	f801 2c01 	strb.w	r2, [r1, #-1]
   15a2e:	681a      	ldr	r2, [r3, #0]
   15a30:	2005      	movs	r0, #5
   15a32:	1e51      	subs	r1, r2, #1
   15a34:	6019      	str	r1, [r3, #0]
   15a36:	f802 5c01 	strb.w	r5, [r2, #-1]
   15a3a:	e797      	b.n	1596c <mbedtls_asn1_write_len+0x1c>
   15a3c:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   15a40:	e794      	b.n	1596c <mbedtls_asn1_write_len+0x1c>
   15a42:	bf00      	nop

00015a44 <mbedtls_asn1_write_tag>:
   15a44:	6803      	ldr	r3, [r0, #0]
   15a46:	1a59      	subs	r1, r3, r1
   15a48:	2900      	cmp	r1, #0
   15a4a:	dd05      	ble.n	15a58 <mbedtls_asn1_write_tag+0x14>
   15a4c:	1e59      	subs	r1, r3, #1
   15a4e:	6001      	str	r1, [r0, #0]
   15a50:	2001      	movs	r0, #1
   15a52:	f803 2c01 	strb.w	r2, [r3, #-1]
   15a56:	4770      	bx	lr
   15a58:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   15a5c:	4770      	bx	lr
   15a5e:	bf00      	nop

00015a60 <mbedtls_asn1_write_oid>:
   15a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a62:	6805      	ldr	r5, [r0, #0]
   15a64:	42a9      	cmp	r1, r5
   15a66:	d83f      	bhi.n	15ae8 <mbedtls_asn1_write_oid+0x88>
   15a68:	460f      	mov	r7, r1
   15a6a:	1a69      	subs	r1, r5, r1
   15a6c:	428b      	cmp	r3, r1
   15a6e:	d83b      	bhi.n	15ae8 <mbedtls_asn1_write_oid+0x88>
   15a70:	4606      	mov	r6, r0
   15a72:	461c      	mov	r4, r3
   15a74:	1ae8      	subs	r0, r5, r3
   15a76:	4611      	mov	r1, r2
   15a78:	6030      	str	r0, [r6, #0]
   15a7a:	461a      	mov	r2, r3
   15a7c:	f010 f9f3 	bl	25e66 <memcpy>
   15a80:	2c00      	cmp	r4, #0
   15a82:	4620      	mov	r0, r4
   15a84:	db15      	blt.n	15ab2 <mbedtls_asn1_write_oid+0x52>
   15a86:	2c7f      	cmp	r4, #127	; 0x7f
   15a88:	d814      	bhi.n	15ab4 <mbedtls_asn1_write_oid+0x54>
   15a8a:	6833      	ldr	r3, [r6, #0]
   15a8c:	1bda      	subs	r2, r3, r7
   15a8e:	2a00      	cmp	r2, #0
   15a90:	dd2a      	ble.n	15ae8 <mbedtls_asn1_write_oid+0x88>
   15a92:	2001      	movs	r0, #1
   15a94:	1e5a      	subs	r2, r3, #1
   15a96:	6032      	str	r2, [r6, #0]
   15a98:	f803 4c01 	strb.w	r4, [r3, #-1]
   15a9c:	6833      	ldr	r3, [r6, #0]
   15a9e:	3401      	adds	r4, #1
   15aa0:	1bdf      	subs	r7, r3, r7
   15aa2:	2f00      	cmp	r7, #0
   15aa4:	dd20      	ble.n	15ae8 <mbedtls_asn1_write_oid+0x88>
   15aa6:	2206      	movs	r2, #6
   15aa8:	1e59      	subs	r1, r3, #1
   15aaa:	6031      	str	r1, [r6, #0]
   15aac:	4420      	add	r0, r4
   15aae:	f803 2c01 	strb.w	r2, [r3, #-1]
   15ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ab4:	2cff      	cmp	r4, #255	; 0xff
   15ab6:	d80f      	bhi.n	15ad8 <mbedtls_asn1_write_oid+0x78>
   15ab8:	6833      	ldr	r3, [r6, #0]
   15aba:	1bda      	subs	r2, r3, r7
   15abc:	2a01      	cmp	r2, #1
   15abe:	dd13      	ble.n	15ae8 <mbedtls_asn1_write_oid+0x88>
   15ac0:	2281      	movs	r2, #129	; 0x81
   15ac2:	1e59      	subs	r1, r3, #1
   15ac4:	6031      	str	r1, [r6, #0]
   15ac6:	f803 4c01 	strb.w	r4, [r3, #-1]
   15aca:	6833      	ldr	r3, [r6, #0]
   15acc:	2002      	movs	r0, #2
   15ace:	1e59      	subs	r1, r3, #1
   15ad0:	6031      	str	r1, [r6, #0]
   15ad2:	f803 2c01 	strb.w	r2, [r3, #-1]
   15ad6:	e7e1      	b.n	15a9c <mbedtls_asn1_write_oid+0x3c>
   15ad8:	4622      	mov	r2, r4
   15ada:	4639      	mov	r1, r7
   15adc:	4630      	mov	r0, r6
   15ade:	f7ff fed7 	bl	15890 <mbedtls_asn1_write_len.part.0>
   15ae2:	2800      	cmp	r0, #0
   15ae4:	dada      	bge.n	15a9c <mbedtls_asn1_write_oid+0x3c>
   15ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ae8:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   15aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15aee:	bf00      	nop

00015af0 <mbedtls_asn1_write_algorithm_identifier>:
   15af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15af4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15af8:	6805      	ldr	r5, [r0, #0]
   15afa:	f1b8 0f00 	cmp.w	r8, #0
   15afe:	d113      	bne.n	15b28 <mbedtls_asn1_write_algorithm_identifier+0x38>
   15b00:	1a6c      	subs	r4, r5, r1
   15b02:	2c00      	cmp	r4, #0
   15b04:	f340 8087 	ble.w	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b08:	1e6c      	subs	r4, r5, #1
   15b0a:	6004      	str	r4, [r0, #0]
   15b0c:	f805 8c01 	strb.w	r8, [r5, #-1]
   15b10:	6804      	ldr	r4, [r0, #0]
   15b12:	1a65      	subs	r5, r4, r1
   15b14:	2d00      	cmp	r5, #0
   15b16:	dd7e      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b18:	2505      	movs	r5, #5
   15b1a:	f04f 0802 	mov.w	r8, #2
   15b1e:	1e66      	subs	r6, r4, #1
   15b20:	6006      	str	r6, [r0, #0]
   15b22:	f804 5c01 	strb.w	r5, [r4, #-1]
   15b26:	6805      	ldr	r5, [r0, #0]
   15b28:	42a9      	cmp	r1, r5
   15b2a:	d874      	bhi.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b2c:	1a6c      	subs	r4, r5, r1
   15b2e:	42a3      	cmp	r3, r4
   15b30:	d871      	bhi.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b32:	4606      	mov	r6, r0
   15b34:	461c      	mov	r4, r3
   15b36:	1ae8      	subs	r0, r5, r3
   15b38:	460f      	mov	r7, r1
   15b3a:	6030      	str	r0, [r6, #0]
   15b3c:	4611      	mov	r1, r2
   15b3e:	461a      	mov	r2, r3
   15b40:	f010 f991 	bl	25e66 <memcpy>
   15b44:	2c00      	cmp	r4, #0
   15b46:	4620      	mov	r0, r4
   15b48:	db2f      	blt.n	15baa <mbedtls_asn1_write_algorithm_identifier+0xba>
   15b4a:	2c7f      	cmp	r4, #127	; 0x7f
   15b4c:	d841      	bhi.n	15bd2 <mbedtls_asn1_write_algorithm_identifier+0xe2>
   15b4e:	6833      	ldr	r3, [r6, #0]
   15b50:	1bda      	subs	r2, r3, r7
   15b52:	2a00      	cmp	r2, #0
   15b54:	dd5f      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b56:	2001      	movs	r0, #1
   15b58:	1e5a      	subs	r2, r3, #1
   15b5a:	6032      	str	r2, [r6, #0]
   15b5c:	f803 4c01 	strb.w	r4, [r3, #-1]
   15b60:	6833      	ldr	r3, [r6, #0]
   15b62:	3401      	adds	r4, #1
   15b64:	1bda      	subs	r2, r3, r7
   15b66:	2a00      	cmp	r2, #0
   15b68:	dd55      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b6a:	2206      	movs	r2, #6
   15b6c:	4404      	add	r4, r0
   15b6e:	1e59      	subs	r1, r3, #1
   15b70:	2c00      	cmp	r4, #0
   15b72:	6031      	str	r1, [r6, #0]
   15b74:	4620      	mov	r0, r4
   15b76:	f803 2c01 	strb.w	r2, [r3, #-1]
   15b7a:	db16      	blt.n	15baa <mbedtls_asn1_write_algorithm_identifier+0xba>
   15b7c:	4444      	add	r4, r8
   15b7e:	2c7f      	cmp	r4, #127	; 0x7f
   15b80:	d815      	bhi.n	15bae <mbedtls_asn1_write_algorithm_identifier+0xbe>
   15b82:	6833      	ldr	r3, [r6, #0]
   15b84:	1bda      	subs	r2, r3, r7
   15b86:	2a00      	cmp	r2, #0
   15b88:	dd45      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b8a:	2001      	movs	r0, #1
   15b8c:	1e5a      	subs	r2, r3, #1
   15b8e:	6032      	str	r2, [r6, #0]
   15b90:	f803 4c01 	strb.w	r4, [r3, #-1]
   15b94:	6833      	ldr	r3, [r6, #0]
   15b96:	3401      	adds	r4, #1
   15b98:	1bdf      	subs	r7, r3, r7
   15b9a:	2f00      	cmp	r7, #0
   15b9c:	dd3b      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15b9e:	2230      	movs	r2, #48	; 0x30
   15ba0:	1e59      	subs	r1, r3, #1
   15ba2:	6031      	str	r1, [r6, #0]
   15ba4:	4420      	add	r0, r4
   15ba6:	f803 2c01 	strb.w	r2, [r3, #-1]
   15baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bae:	2cff      	cmp	r4, #255	; 0xff
   15bb0:	d821      	bhi.n	15bf6 <mbedtls_asn1_write_algorithm_identifier+0x106>
   15bb2:	6833      	ldr	r3, [r6, #0]
   15bb4:	1bda      	subs	r2, r3, r7
   15bb6:	2a01      	cmp	r2, #1
   15bb8:	dd2d      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15bba:	2281      	movs	r2, #129	; 0x81
   15bbc:	1e59      	subs	r1, r3, #1
   15bbe:	6031      	str	r1, [r6, #0]
   15bc0:	f803 4c01 	strb.w	r4, [r3, #-1]
   15bc4:	6833      	ldr	r3, [r6, #0]
   15bc6:	2002      	movs	r0, #2
   15bc8:	1e59      	subs	r1, r3, #1
   15bca:	6031      	str	r1, [r6, #0]
   15bcc:	f803 2c01 	strb.w	r2, [r3, #-1]
   15bd0:	e7e0      	b.n	15b94 <mbedtls_asn1_write_algorithm_identifier+0xa4>
   15bd2:	2cff      	cmp	r4, #255	; 0xff
   15bd4:	d817      	bhi.n	15c06 <mbedtls_asn1_write_algorithm_identifier+0x116>
   15bd6:	6833      	ldr	r3, [r6, #0]
   15bd8:	1bda      	subs	r2, r3, r7
   15bda:	2a01      	cmp	r2, #1
   15bdc:	dd1b      	ble.n	15c16 <mbedtls_asn1_write_algorithm_identifier+0x126>
   15bde:	2281      	movs	r2, #129	; 0x81
   15be0:	1e59      	subs	r1, r3, #1
   15be2:	6031      	str	r1, [r6, #0]
   15be4:	f803 4c01 	strb.w	r4, [r3, #-1]
   15be8:	6833      	ldr	r3, [r6, #0]
   15bea:	2002      	movs	r0, #2
   15bec:	1e59      	subs	r1, r3, #1
   15bee:	6031      	str	r1, [r6, #0]
   15bf0:	f803 2c01 	strb.w	r2, [r3, #-1]
   15bf4:	e7b4      	b.n	15b60 <mbedtls_asn1_write_algorithm_identifier+0x70>
   15bf6:	4622      	mov	r2, r4
   15bf8:	4639      	mov	r1, r7
   15bfa:	4630      	mov	r0, r6
   15bfc:	f7ff fe48 	bl	15890 <mbedtls_asn1_write_len.part.0>
   15c00:	2800      	cmp	r0, #0
   15c02:	dbd2      	blt.n	15baa <mbedtls_asn1_write_algorithm_identifier+0xba>
   15c04:	e7c6      	b.n	15b94 <mbedtls_asn1_write_algorithm_identifier+0xa4>
   15c06:	4622      	mov	r2, r4
   15c08:	4639      	mov	r1, r7
   15c0a:	4630      	mov	r0, r6
   15c0c:	f7ff fe40 	bl	15890 <mbedtls_asn1_write_len.part.0>
   15c10:	2800      	cmp	r0, #0
   15c12:	daa5      	bge.n	15b60 <mbedtls_asn1_write_algorithm_identifier+0x70>
   15c14:	e7c9      	b.n	15baa <mbedtls_asn1_write_algorithm_identifier+0xba>
   15c16:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   15c1a:	e7c6      	b.n	15baa <mbedtls_asn1_write_algorithm_identifier+0xba>

00015c1c <mbedtls_base64_encode>:
   15c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c20:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   15c24:	f1bc 0f00 	cmp.w	ip, #0
   15c28:	d065      	beq.n	15cf6 <mbedtls_base64_encode+0xda>
   15c2a:	4c42      	ldr	r4, [pc, #264]	; (15d34 <mbedtls_base64_encode+0x118>)
   15c2c:	fba4 540c 	umull	r5, r4, r4, ip
   15c30:	0864      	lsrs	r4, r4, #1
   15c32:	eb04 0844 	add.w	r8, r4, r4, lsl #1
   15c36:	45c4      	cmp	ip, r8
   15c38:	bf18      	it	ne
   15c3a:	3401      	addne	r4, #1
   15c3c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   15c40:	d271      	bcs.n	15d26 <mbedtls_base64_encode+0x10a>
   15c42:	00a4      	lsls	r4, r4, #2
   15c44:	3401      	adds	r4, #1
   15c46:	428c      	cmp	r4, r1
   15c48:	d869      	bhi.n	15d1e <mbedtls_base64_encode+0x102>
   15c4a:	2800      	cmp	r0, #0
   15c4c:	d067      	beq.n	15d1e <mbedtls_base64_encode+0x102>
   15c4e:	f1b8 0f00 	cmp.w	r8, #0
   15c52:	d061      	beq.n	15d18 <mbedtls_base64_encode+0xfc>
   15c54:	4686      	mov	lr, r0
   15c56:	2700      	movs	r7, #0
   15c58:	4e37      	ldr	r6, [pc, #220]	; (15d38 <mbedtls_base64_encode+0x11c>)
   15c5a:	1cdc      	adds	r4, r3, #3
   15c5c:	2500      	movs	r5, #0
   15c5e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   15c62:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   15c66:	f814 bc01 	ldrb.w	fp, [r4, #-1]
   15c6a:	ea4f 09a1 	mov.w	r9, r1, asr #2
   15c6e:	0109      	lsls	r1, r1, #4
   15c70:	f001 0130 	and.w	r1, r1, #48	; 0x30
   15c74:	eb06 1a13 	add.w	sl, r6, r3, lsr #4
   15c78:	f816 9009 	ldrb.w	r9, [r6, r9]
   15c7c:	009b      	lsls	r3, r3, #2
   15c7e:	f81a a001 	ldrb.w	sl, [sl, r1]
   15c82:	f003 013c 	and.w	r1, r3, #60	; 0x3c
   15c86:	eb06 139b 	add.w	r3, r6, fp, lsr #6
   15c8a:	5c59      	ldrb	r1, [r3, r1]
   15c8c:	f369 0507 	bfi	r5, r9, #0, #8
   15c90:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
   15c94:	5cf3      	ldrb	r3, [r6, r3]
   15c96:	f36a 250f 	bfi	r5, sl, #8, #8
   15c9a:	f361 4517 	bfi	r5, r1, #16, #8
   15c9e:	3703      	adds	r7, #3
   15ca0:	f363 651f 	bfi	r5, r3, #24, #8
   15ca4:	f10e 0104 	add.w	r1, lr, #4
   15ca8:	45b8      	cmp	r8, r7
   15caa:	f8ce 5000 	str.w	r5, [lr]
   15cae:	4623      	mov	r3, r4
   15cb0:	468e      	mov	lr, r1
   15cb2:	f104 0403 	add.w	r4, r4, #3
   15cb6:	d8d1      	bhi.n	15c5c <mbedtls_base64_encode+0x40>
   15cb8:	45bc      	cmp	ip, r7
   15cba:	d914      	bls.n	15ce6 <mbedtls_base64_encode+0xca>
   15cbc:	781c      	ldrb	r4, [r3, #0]
   15cbe:	4d1e      	ldr	r5, [pc, #120]	; (15d38 <mbedtls_base64_encode+0x11c>)
   15cc0:	3701      	adds	r7, #1
   15cc2:	10a6      	asrs	r6, r4, #2
   15cc4:	4567      	cmp	r7, ip
   15cc6:	ea4f 1404 	mov.w	r4, r4, lsl #4
   15cca:	f004 0430 	and.w	r4, r4, #48	; 0x30
   15cce:	f815 e006 	ldrb.w	lr, [r5, r6]
   15cd2:	d315      	bcc.n	15d00 <mbedtls_base64_encode+0xe4>
   15cd4:	263d      	movs	r6, #61	; 0x3d
   15cd6:	5d2b      	ldrb	r3, [r5, r4]
   15cd8:	f881 e000 	strb.w	lr, [r1]
   15cdc:	704b      	strb	r3, [r1, #1]
   15cde:	233d      	movs	r3, #61	; 0x3d
   15ce0:	708e      	strb	r6, [r1, #2]
   15ce2:	70cb      	strb	r3, [r1, #3]
   15ce4:	3104      	adds	r1, #4
   15ce6:	2300      	movs	r3, #0
   15ce8:	469c      	mov	ip, r3
   15cea:	1a08      	subs	r0, r1, r0
   15cec:	6010      	str	r0, [r2, #0]
   15cee:	700b      	strb	r3, [r1, #0]
   15cf0:	4660      	mov	r0, ip
   15cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf6:	f8c2 c000 	str.w	ip, [r2]
   15cfa:	4660      	mov	r0, ip
   15cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d00:	785b      	ldrb	r3, [r3, #1]
   15d02:	f881 e000 	strb.w	lr, [r1]
   15d06:	eb05 1613 	add.w	r6, r5, r3, lsr #4
   15d0a:	5d34      	ldrb	r4, [r6, r4]
   15d0c:	009b      	lsls	r3, r3, #2
   15d0e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   15d12:	704c      	strb	r4, [r1, #1]
   15d14:	5cee      	ldrb	r6, [r5, r3]
   15d16:	e7e2      	b.n	15cde <mbedtls_base64_encode+0xc2>
   15d18:	4647      	mov	r7, r8
   15d1a:	4601      	mov	r1, r0
   15d1c:	e7cc      	b.n	15cb8 <mbedtls_base64_encode+0x9c>
   15d1e:	6014      	str	r4, [r2, #0]
   15d20:	f06f 0c29 	mvn.w	ip, #41	; 0x29
   15d24:	e7e4      	b.n	15cf0 <mbedtls_base64_encode+0xd4>
   15d26:	f04f 33ff 	mov.w	r3, #4294967295
   15d2a:	f06f 0c29 	mvn.w	ip, #41	; 0x29
   15d2e:	6013      	str	r3, [r2, #0]
   15d30:	e7de      	b.n	15cf0 <mbedtls_base64_encode+0xd4>
   15d32:	bf00      	nop
   15d34:	aaaaaaab 	.word	0xaaaaaaab
   15d38:	00029f24 	.word	0x00029f24

00015d3c <mpi_mul_hlp>:
   15d3c:	280f      	cmp	r0, #15
   15d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d42:	4686      	mov	lr, r0
   15d44:	f240 82e0 	bls.w	16308 <mpi_mul_hlp+0x5cc>
   15d48:	f04f 0800 	mov.w	r8, #0
   15d4c:	4684      	mov	ip, r0
   15d4e:	f101 0440 	add.w	r4, r1, #64	; 0x40
   15d52:	f102 0040 	add.w	r0, r2, #64	; 0x40
   15d56:	f854 6c40 	ldr.w	r6, [r4, #-64]
   15d5a:	f850 5c40 	ldr.w	r5, [r0, #-64]
   15d5e:	fba3 6706 	umull	r6, r7, r3, r6
   15d62:	eb18 0806 	adds.w	r8, r8, r6
   15d66:	bf2c      	ite	cs
   15d68:	f04f 0901 	movcs.w	r9, #1
   15d6c:	f04f 0900 	movcc.w	r9, #0
   15d70:	eb15 0508 	adds.w	r5, r5, r8
   15d74:	444f      	add	r7, r9
   15d76:	f04f 0900 	mov.w	r9, #0
   15d7a:	bf28      	it	cs
   15d7c:	f04f 0901 	movcs.w	r9, #1
   15d80:	f840 5c40 	str.w	r5, [r0, #-64]
   15d84:	f854 6c3c 	ldr.w	r6, [r4, #-60]
   15d88:	44b9      	add	r9, r7
   15d8a:	fba3 ab06 	umull	sl, fp, r3, r6
   15d8e:	eb19 090a 	adds.w	r9, r9, sl
   15d92:	bf2c      	ite	cs
   15d94:	f04f 0801 	movcs.w	r8, #1
   15d98:	f04f 0800 	movcc.w	r8, #0
   15d9c:	f850 6c3c 	ldr.w	r6, [r0, #-60]
   15da0:	eb08 050b 	add.w	r5, r8, fp
   15da4:	eb16 0609 	adds.w	r6, r6, r9
   15da8:	f04f 0800 	mov.w	r8, #0
   15dac:	bf28      	it	cs
   15dae:	f04f 0801 	movcs.w	r8, #1
   15db2:	f840 6c3c 	str.w	r6, [r0, #-60]
   15db6:	f854 6c38 	ldr.w	r6, [r4, #-56]
   15dba:	44a8      	add	r8, r5
   15dbc:	fba3 6706 	umull	r6, r7, r3, r6
   15dc0:	eb18 0806 	adds.w	r8, r8, r6
   15dc4:	bf2c      	ite	cs
   15dc6:	f04f 0901 	movcs.w	r9, #1
   15dca:	f04f 0900 	movcc.w	r9, #0
   15dce:	f850 5c38 	ldr.w	r5, [r0, #-56]
   15dd2:	444f      	add	r7, r9
   15dd4:	eb15 0508 	adds.w	r5, r5, r8
   15dd8:	f04f 0900 	mov.w	r9, #0
   15ddc:	bf28      	it	cs
   15dde:	f04f 0901 	movcs.w	r9, #1
   15de2:	f840 5c38 	str.w	r5, [r0, #-56]
   15de6:	f854 6c34 	ldr.w	r6, [r4, #-52]
   15dea:	44b9      	add	r9, r7
   15dec:	fba3 ab06 	umull	sl, fp, r3, r6
   15df0:	eb19 090a 	adds.w	r9, r9, sl
   15df4:	bf2c      	ite	cs
   15df6:	f04f 0801 	movcs.w	r8, #1
   15dfa:	f04f 0800 	movcc.w	r8, #0
   15dfe:	f850 6c34 	ldr.w	r6, [r0, #-52]
   15e02:	eb08 050b 	add.w	r5, r8, fp
   15e06:	eb16 0609 	adds.w	r6, r6, r9
   15e0a:	f04f 0800 	mov.w	r8, #0
   15e0e:	bf28      	it	cs
   15e10:	f04f 0801 	movcs.w	r8, #1
   15e14:	f840 6c34 	str.w	r6, [r0, #-52]
   15e18:	f854 6c30 	ldr.w	r6, [r4, #-48]
   15e1c:	44a8      	add	r8, r5
   15e1e:	fba3 6706 	umull	r6, r7, r3, r6
   15e22:	eb18 0806 	adds.w	r8, r8, r6
   15e26:	bf2c      	ite	cs
   15e28:	f04f 0901 	movcs.w	r9, #1
   15e2c:	f04f 0900 	movcc.w	r9, #0
   15e30:	f850 5c30 	ldr.w	r5, [r0, #-48]
   15e34:	444f      	add	r7, r9
   15e36:	eb15 0508 	adds.w	r5, r5, r8
   15e3a:	f04f 0900 	mov.w	r9, #0
   15e3e:	bf28      	it	cs
   15e40:	f04f 0901 	movcs.w	r9, #1
   15e44:	f840 5c30 	str.w	r5, [r0, #-48]
   15e48:	f854 6c2c 	ldr.w	r6, [r4, #-44]
   15e4c:	44b9      	add	r9, r7
   15e4e:	fba3 ab06 	umull	sl, fp, r3, r6
   15e52:	eb19 090a 	adds.w	r9, r9, sl
   15e56:	bf2c      	ite	cs
   15e58:	f04f 0801 	movcs.w	r8, #1
   15e5c:	f04f 0800 	movcc.w	r8, #0
   15e60:	f850 6c2c 	ldr.w	r6, [r0, #-44]
   15e64:	eb08 050b 	add.w	r5, r8, fp
   15e68:	eb16 0609 	adds.w	r6, r6, r9
   15e6c:	f04f 0800 	mov.w	r8, #0
   15e70:	bf28      	it	cs
   15e72:	f04f 0801 	movcs.w	r8, #1
   15e76:	f840 6c2c 	str.w	r6, [r0, #-44]
   15e7a:	f854 6c28 	ldr.w	r6, [r4, #-40]
   15e7e:	44a8      	add	r8, r5
   15e80:	fba3 6706 	umull	r6, r7, r3, r6
   15e84:	eb18 0806 	adds.w	r8, r8, r6
   15e88:	bf2c      	ite	cs
   15e8a:	f04f 0901 	movcs.w	r9, #1
   15e8e:	f04f 0900 	movcc.w	r9, #0
   15e92:	f850 5c28 	ldr.w	r5, [r0, #-40]
   15e96:	444f      	add	r7, r9
   15e98:	eb15 0508 	adds.w	r5, r5, r8
   15e9c:	f04f 0900 	mov.w	r9, #0
   15ea0:	bf28      	it	cs
   15ea2:	f04f 0901 	movcs.w	r9, #1
   15ea6:	f840 5c28 	str.w	r5, [r0, #-40]
   15eaa:	f854 6c24 	ldr.w	r6, [r4, #-36]
   15eae:	44b9      	add	r9, r7
   15eb0:	fba3 ab06 	umull	sl, fp, r3, r6
   15eb4:	eb19 090a 	adds.w	r9, r9, sl
   15eb8:	bf2c      	ite	cs
   15eba:	f04f 0801 	movcs.w	r8, #1
   15ebe:	f04f 0800 	movcc.w	r8, #0
   15ec2:	f850 6c24 	ldr.w	r6, [r0, #-36]
   15ec6:	eb08 050b 	add.w	r5, r8, fp
   15eca:	eb16 0609 	adds.w	r6, r6, r9
   15ece:	f04f 0800 	mov.w	r8, #0
   15ed2:	bf28      	it	cs
   15ed4:	f04f 0801 	movcs.w	r8, #1
   15ed8:	f840 6c24 	str.w	r6, [r0, #-36]
   15edc:	f854 6c20 	ldr.w	r6, [r4, #-32]
   15ee0:	44a8      	add	r8, r5
   15ee2:	fba3 6706 	umull	r6, r7, r3, r6
   15ee6:	eb18 0806 	adds.w	r8, r8, r6
   15eea:	bf2c      	ite	cs
   15eec:	f04f 0901 	movcs.w	r9, #1
   15ef0:	f04f 0900 	movcc.w	r9, #0
   15ef4:	f850 5c20 	ldr.w	r5, [r0, #-32]
   15ef8:	444f      	add	r7, r9
   15efa:	eb15 0508 	adds.w	r5, r5, r8
   15efe:	f04f 0900 	mov.w	r9, #0
   15f02:	bf28      	it	cs
   15f04:	f04f 0901 	movcs.w	r9, #1
   15f08:	f840 5c20 	str.w	r5, [r0, #-32]
   15f0c:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   15f10:	44b9      	add	r9, r7
   15f12:	fba3 ab06 	umull	sl, fp, r3, r6
   15f16:	eb19 090a 	adds.w	r9, r9, sl
   15f1a:	bf2c      	ite	cs
   15f1c:	f04f 0801 	movcs.w	r8, #1
   15f20:	f04f 0800 	movcc.w	r8, #0
   15f24:	f850 6c1c 	ldr.w	r6, [r0, #-28]
   15f28:	eb08 050b 	add.w	r5, r8, fp
   15f2c:	eb16 0609 	adds.w	r6, r6, r9
   15f30:	f04f 0800 	mov.w	r8, #0
   15f34:	bf28      	it	cs
   15f36:	f04f 0801 	movcs.w	r8, #1
   15f3a:	f840 6c1c 	str.w	r6, [r0, #-28]
   15f3e:	f854 6c18 	ldr.w	r6, [r4, #-24]
   15f42:	44a8      	add	r8, r5
   15f44:	fba3 6706 	umull	r6, r7, r3, r6
   15f48:	eb18 0806 	adds.w	r8, r8, r6
   15f4c:	bf2c      	ite	cs
   15f4e:	f04f 0901 	movcs.w	r9, #1
   15f52:	f04f 0900 	movcc.w	r9, #0
   15f56:	f850 5c18 	ldr.w	r5, [r0, #-24]
   15f5a:	444f      	add	r7, r9
   15f5c:	eb15 0508 	adds.w	r5, r5, r8
   15f60:	f04f 0900 	mov.w	r9, #0
   15f64:	bf28      	it	cs
   15f66:	f04f 0901 	movcs.w	r9, #1
   15f6a:	f840 5c18 	str.w	r5, [r0, #-24]
   15f6e:	f854 6c14 	ldr.w	r6, [r4, #-20]
   15f72:	44b9      	add	r9, r7
   15f74:	fba3 ab06 	umull	sl, fp, r3, r6
   15f78:	eb19 090a 	adds.w	r9, r9, sl
   15f7c:	bf2c      	ite	cs
   15f7e:	f04f 0801 	movcs.w	r8, #1
   15f82:	f04f 0800 	movcc.w	r8, #0
   15f86:	f850 6c14 	ldr.w	r6, [r0, #-20]
   15f8a:	eb08 050b 	add.w	r5, r8, fp
   15f8e:	eb16 0609 	adds.w	r6, r6, r9
   15f92:	f04f 0800 	mov.w	r8, #0
   15f96:	bf28      	it	cs
   15f98:	f04f 0801 	movcs.w	r8, #1
   15f9c:	f840 6c14 	str.w	r6, [r0, #-20]
   15fa0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   15fa4:	44a8      	add	r8, r5
   15fa6:	fba3 6706 	umull	r6, r7, r3, r6
   15faa:	eb18 0806 	adds.w	r8, r8, r6
   15fae:	bf2c      	ite	cs
   15fb0:	f04f 0901 	movcs.w	r9, #1
   15fb4:	f04f 0900 	movcc.w	r9, #0
   15fb8:	f850 5c10 	ldr.w	r5, [r0, #-16]
   15fbc:	444f      	add	r7, r9
   15fbe:	eb15 0508 	adds.w	r5, r5, r8
   15fc2:	f04f 0900 	mov.w	r9, #0
   15fc6:	bf28      	it	cs
   15fc8:	f04f 0901 	movcs.w	r9, #1
   15fcc:	f840 5c10 	str.w	r5, [r0, #-16]
   15fd0:	f854 6c0c 	ldr.w	r6, [r4, #-12]
   15fd4:	44b9      	add	r9, r7
   15fd6:	fba3 ab06 	umull	sl, fp, r3, r6
   15fda:	eb19 090a 	adds.w	r9, r9, sl
   15fde:	bf2c      	ite	cs
   15fe0:	f04f 0801 	movcs.w	r8, #1
   15fe4:	f04f 0800 	movcc.w	r8, #0
   15fe8:	f850 6c0c 	ldr.w	r6, [r0, #-12]
   15fec:	eb08 050b 	add.w	r5, r8, fp
   15ff0:	eb16 0609 	adds.w	r6, r6, r9
   15ff4:	f04f 0800 	mov.w	r8, #0
   15ff8:	bf28      	it	cs
   15ffa:	f04f 0801 	movcs.w	r8, #1
   15ffe:	f840 6c0c 	str.w	r6, [r0, #-12]
   16002:	f854 6c08 	ldr.w	r6, [r4, #-8]
   16006:	44a8      	add	r8, r5
   16008:	fba3 6706 	umull	r6, r7, r3, r6
   1600c:	eb18 0806 	adds.w	r8, r8, r6
   16010:	bf2c      	ite	cs
   16012:	f04f 0901 	movcs.w	r9, #1
   16016:	f04f 0900 	movcc.w	r9, #0
   1601a:	f850 5c08 	ldr.w	r5, [r0, #-8]
   1601e:	444f      	add	r7, r9
   16020:	eb15 0508 	adds.w	r5, r5, r8
   16024:	f04f 0900 	mov.w	r9, #0
   16028:	bf28      	it	cs
   1602a:	f04f 0901 	movcs.w	r9, #1
   1602e:	f840 5c08 	str.w	r5, [r0, #-8]
   16032:	f854 6c04 	ldr.w	r6, [r4, #-4]
   16036:	44b9      	add	r9, r7
   16038:	fba3 ab06 	umull	sl, fp, r3, r6
   1603c:	eb19 090a 	adds.w	r9, r9, sl
   16040:	bf2c      	ite	cs
   16042:	f04f 0801 	movcs.w	r8, #1
   16046:	f04f 0800 	movcc.w	r8, #0
   1604a:	f850 6c04 	ldr.w	r6, [r0, #-4]
   1604e:	eb08 050b 	add.w	r5, r8, fp
   16052:	eb16 0609 	adds.w	r6, r6, r9
   16056:	f04f 0800 	mov.w	r8, #0
   1605a:	bf28      	it	cs
   1605c:	f04f 0801 	movcs.w	r8, #1
   16060:	f1ac 0c10 	sub.w	ip, ip, #16
   16064:	f1bc 0f0f 	cmp.w	ip, #15
   16068:	f840 6c04 	str.w	r6, [r0, #-4]
   1606c:	44a8      	add	r8, r5
   1606e:	f104 0440 	add.w	r4, r4, #64	; 0x40
   16072:	f100 0040 	add.w	r0, r0, #64	; 0x40
   16076:	f63f ae6e 	bhi.w	15d56 <mpi_mul_hlp+0x1a>
   1607a:	f1ae 0010 	sub.w	r0, lr, #16
   1607e:	0900      	lsrs	r0, r0, #4
   16080:	3001      	adds	r0, #1
   16082:	0180      	lsls	r0, r0, #6
   16084:	4401      	add	r1, r0
   16086:	4402      	add	r2, r0
   16088:	f00e 000f 	and.w	r0, lr, #15
   1608c:	2807      	cmp	r0, #7
   1608e:	6817      	ldr	r7, [r2, #0]
   16090:	f240 8092 	bls.w	161b8 <mpi_mul_hlp+0x47c>
   16094:	680c      	ldr	r4, [r1, #0]
   16096:	6856      	ldr	r6, [r2, #4]
   16098:	fba3 9a04 	umull	r9, sl, r3, r4
   1609c:	eb18 0809 	adds.w	r8, r8, r9
   160a0:	bf2c      	ite	cs
   160a2:	f04f 0c01 	movcs.w	ip, #1
   160a6:	f04f 0c00 	movcc.w	ip, #0
   160aa:	eb17 0708 	adds.w	r7, r7, r8
   160ae:	bf2c      	ite	cs
   160b0:	2401      	movcs	r4, #1
   160b2:	2400      	movcc	r4, #0
   160b4:	6017      	str	r7, [r2, #0]
   160b6:	684f      	ldr	r7, [r1, #4]
   160b8:	eb0a 050c 	add.w	r5, sl, ip
   160bc:	fba3 8907 	umull	r8, r9, r3, r7
   160c0:	442c      	add	r4, r5
   160c2:	eb14 0408 	adds.w	r4, r4, r8
   160c6:	bf2c      	ite	cs
   160c8:	2501      	movcs	r5, #1
   160ca:	2500      	movcc	r5, #0
   160cc:	19a6      	adds	r6, r4, r6
   160ce:	eb05 0709 	add.w	r7, r5, r9
   160d2:	f04f 0500 	mov.w	r5, #0
   160d6:	bf28      	it	cs
   160d8:	2501      	movcs	r5, #1
   160da:	6056      	str	r6, [r2, #4]
   160dc:	688e      	ldr	r6, [r1, #8]
   160de:	443d      	add	r5, r7
   160e0:	fba3 7806 	umull	r7, r8, r3, r6
   160e4:	19ed      	adds	r5, r5, r7
   160e6:	bf2c      	ite	cs
   160e8:	2401      	movcs	r4, #1
   160ea:	2400      	movcc	r4, #0
   160ec:	6896      	ldr	r6, [r2, #8]
   160ee:	eb08 0704 	add.w	r7, r8, r4
   160f2:	19ad      	adds	r5, r5, r6
   160f4:	f04f 0400 	mov.w	r4, #0
   160f8:	bf28      	it	cs
   160fa:	2401      	movcs	r4, #1
   160fc:	6095      	str	r5, [r2, #8]
   160fe:	68ce      	ldr	r6, [r1, #12]
   16100:	443c      	add	r4, r7
   16102:	fba3 7806 	umull	r7, r8, r3, r6
   16106:	19e4      	adds	r4, r4, r7
   16108:	bf2c      	ite	cs
   1610a:	2501      	movcs	r5, #1
   1610c:	2500      	movcc	r5, #0
   1610e:	68d6      	ldr	r6, [r2, #12]
   16110:	eb08 0705 	add.w	r7, r8, r5
   16114:	19a4      	adds	r4, r4, r6
   16116:	f04f 0500 	mov.w	r5, #0
   1611a:	bf28      	it	cs
   1611c:	2501      	movcs	r5, #1
   1611e:	60d4      	str	r4, [r2, #12]
   16120:	690e      	ldr	r6, [r1, #16]
   16122:	443d      	add	r5, r7
   16124:	fba3 7806 	umull	r7, r8, r3, r6
   16128:	19ed      	adds	r5, r5, r7
   1612a:	bf2c      	ite	cs
   1612c:	2401      	movcs	r4, #1
   1612e:	2400      	movcc	r4, #0
   16130:	6916      	ldr	r6, [r2, #16]
   16132:	eb08 0704 	add.w	r7, r8, r4
   16136:	19ad      	adds	r5, r5, r6
   16138:	f04f 0400 	mov.w	r4, #0
   1613c:	bf28      	it	cs
   1613e:	2401      	movcs	r4, #1
   16140:	6115      	str	r5, [r2, #16]
   16142:	694e      	ldr	r6, [r1, #20]
   16144:	443c      	add	r4, r7
   16146:	fba3 7806 	umull	r7, r8, r3, r6
   1614a:	19e4      	adds	r4, r4, r7
   1614c:	bf2c      	ite	cs
   1614e:	2501      	movcs	r5, #1
   16150:	2500      	movcc	r5, #0
   16152:	6956      	ldr	r6, [r2, #20]
   16154:	eb08 0705 	add.w	r7, r8, r5
   16158:	19a4      	adds	r4, r4, r6
   1615a:	f04f 0500 	mov.w	r5, #0
   1615e:	bf28      	it	cs
   16160:	2501      	movcs	r5, #1
   16162:	6154      	str	r4, [r2, #20]
   16164:	698e      	ldr	r6, [r1, #24]
   16166:	443d      	add	r5, r7
   16168:	fba3 7806 	umull	r7, r8, r3, r6
   1616c:	19ed      	adds	r5, r5, r7
   1616e:	bf2c      	ite	cs
   16170:	2401      	movcs	r4, #1
   16172:	2400      	movcc	r4, #0
   16174:	6996      	ldr	r6, [r2, #24]
   16176:	eb08 0704 	add.w	r7, r8, r4
   1617a:	19ad      	adds	r5, r5, r6
   1617c:	f04f 0400 	mov.w	r4, #0
   16180:	bf28      	it	cs
   16182:	2401      	movcs	r4, #1
   16184:	6195      	str	r5, [r2, #24]
   16186:	69ce      	ldr	r6, [r1, #28]
   16188:	443c      	add	r4, r7
   1618a:	fba3 9a06 	umull	r9, sl, r3, r6
   1618e:	eb14 0409 	adds.w	r4, r4, r9
   16192:	bf2c      	ite	cs
   16194:	f04f 0801 	movcs.w	r8, #1
   16198:	f04f 0800 	movcc.w	r8, #0
   1619c:	69d6      	ldr	r6, [r2, #28]
   1619e:	eb08 050a 	add.w	r5, r8, sl
   161a2:	19a4      	adds	r4, r4, r6
   161a4:	f04f 0800 	mov.w	r8, #0
   161a8:	bf28      	it	cs
   161aa:	f04f 0801 	movcs.w	r8, #1
   161ae:	61d4      	str	r4, [r2, #28]
   161b0:	3120      	adds	r1, #32
   161b2:	44a8      	add	r8, r5
   161b4:	3808      	subs	r0, #8
   161b6:	3220      	adds	r2, #32
   161b8:	2800      	cmp	r0, #0
   161ba:	f000 8097 	beq.w	162ec <mpi_mul_hlp+0x5b0>
   161be:	680c      	ldr	r4, [r1, #0]
   161c0:	6816      	ldr	r6, [r2, #0]
   161c2:	fba3 9a04 	umull	r9, sl, r3, r4
   161c6:	eb19 0808 	adds.w	r8, r9, r8
   161ca:	bf2c      	ite	cs
   161cc:	2401      	movcs	r4, #1
   161ce:	2400      	movcc	r4, #0
   161d0:	eb16 0608 	adds.w	r6, r6, r8
   161d4:	f04f 0500 	mov.w	r5, #0
   161d8:	bf28      	it	cs
   161da:	2501      	movcs	r5, #1
   161dc:	4454      	add	r4, sl
   161de:	2801      	cmp	r0, #1
   161e0:	eb05 0804 	add.w	r8, r5, r4
   161e4:	6016      	str	r6, [r2, #0]
   161e6:	d07f      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   161e8:	684c      	ldr	r4, [r1, #4]
   161ea:	6856      	ldr	r6, [r2, #4]
   161ec:	fba3 9a04 	umull	r9, sl, r3, r4
   161f0:	eb19 0808 	adds.w	r8, r9, r8
   161f4:	bf2c      	ite	cs
   161f6:	2401      	movcs	r4, #1
   161f8:	2400      	movcc	r4, #0
   161fa:	eb16 0608 	adds.w	r6, r6, r8
   161fe:	f04f 0500 	mov.w	r5, #0
   16202:	bf28      	it	cs
   16204:	2501      	movcs	r5, #1
   16206:	4454      	add	r4, sl
   16208:	2802      	cmp	r0, #2
   1620a:	eb05 0804 	add.w	r8, r5, r4
   1620e:	6056      	str	r6, [r2, #4]
   16210:	d06a      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   16212:	688c      	ldr	r4, [r1, #8]
   16214:	6896      	ldr	r6, [r2, #8]
   16216:	fba3 9a04 	umull	r9, sl, r3, r4
   1621a:	eb19 0808 	adds.w	r8, r9, r8
   1621e:	bf2c      	ite	cs
   16220:	2401      	movcs	r4, #1
   16222:	2400      	movcc	r4, #0
   16224:	eb16 0608 	adds.w	r6, r6, r8
   16228:	f04f 0500 	mov.w	r5, #0
   1622c:	bf28      	it	cs
   1622e:	2501      	movcs	r5, #1
   16230:	4454      	add	r4, sl
   16232:	2803      	cmp	r0, #3
   16234:	eb05 0804 	add.w	r8, r5, r4
   16238:	6096      	str	r6, [r2, #8]
   1623a:	d055      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   1623c:	68cc      	ldr	r4, [r1, #12]
   1623e:	68d6      	ldr	r6, [r2, #12]
   16240:	fba3 9a04 	umull	r9, sl, r3, r4
   16244:	eb19 0808 	adds.w	r8, r9, r8
   16248:	bf2c      	ite	cs
   1624a:	2401      	movcs	r4, #1
   1624c:	2400      	movcc	r4, #0
   1624e:	eb16 0608 	adds.w	r6, r6, r8
   16252:	f04f 0500 	mov.w	r5, #0
   16256:	bf28      	it	cs
   16258:	2501      	movcs	r5, #1
   1625a:	4454      	add	r4, sl
   1625c:	2804      	cmp	r0, #4
   1625e:	eb05 0804 	add.w	r8, r5, r4
   16262:	60d6      	str	r6, [r2, #12]
   16264:	d040      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   16266:	690c      	ldr	r4, [r1, #16]
   16268:	6916      	ldr	r6, [r2, #16]
   1626a:	fba3 9a04 	umull	r9, sl, r3, r4
   1626e:	eb19 0408 	adds.w	r4, r9, r8
   16272:	bf2c      	ite	cs
   16274:	f04f 0801 	movcs.w	r8, #1
   16278:	f04f 0800 	movcc.w	r8, #0
   1627c:	19a6      	adds	r6, r4, r6
   1627e:	eb0a 0508 	add.w	r5, sl, r8
   16282:	f04f 0800 	mov.w	r8, #0
   16286:	bf28      	it	cs
   16288:	f04f 0801 	movcs.w	r8, #1
   1628c:	2805      	cmp	r0, #5
   1628e:	44a8      	add	r8, r5
   16290:	6116      	str	r6, [r2, #16]
   16292:	d029      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   16294:	694c      	ldr	r4, [r1, #20]
   16296:	6956      	ldr	r6, [r2, #20]
   16298:	fba3 9a04 	umull	r9, sl, r3, r4
   1629c:	eb18 0409 	adds.w	r4, r8, r9
   162a0:	bf2c      	ite	cs
   162a2:	f04f 0801 	movcs.w	r8, #1
   162a6:	f04f 0800 	movcc.w	r8, #0
   162aa:	19a6      	adds	r6, r4, r6
   162ac:	eb0a 0508 	add.w	r5, sl, r8
   162b0:	f04f 0800 	mov.w	r8, #0
   162b4:	bf28      	it	cs
   162b6:	f04f 0801 	movcs.w	r8, #1
   162ba:	2806      	cmp	r0, #6
   162bc:	44a8      	add	r8, r5
   162be:	6156      	str	r6, [r2, #20]
   162c0:	d012      	beq.n	162e8 <mpi_mul_hlp+0x5ac>
   162c2:	698c      	ldr	r4, [r1, #24]
   162c4:	6991      	ldr	r1, [r2, #24]
   162c6:	fba3 4504 	umull	r4, r5, r3, r4
   162ca:	eb14 0808 	adds.w	r8, r4, r8
   162ce:	bf2c      	ite	cs
   162d0:	2301      	movcs	r3, #1
   162d2:	2300      	movcc	r3, #0
   162d4:	eb11 0108 	adds.w	r1, r1, r8
   162d8:	f04f 0400 	mov.w	r4, #0
   162dc:	bf28      	it	cs
   162de:	2401      	movcs	r4, #1
   162e0:	442b      	add	r3, r5
   162e2:	eb04 0803 	add.w	r8, r4, r3
   162e6:	6191      	str	r1, [r2, #24]
   162e8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   162ec:	6815      	ldr	r5, [r2, #0]
   162ee:	2300      	movs	r3, #0
   162f0:	eb15 0508 	adds.w	r5, r5, r8
   162f4:	bf28      	it	cs
   162f6:	2301      	movcs	r3, #1
   162f8:	f842 5b04 	str.w	r5, [r2], #4
   162fc:	f04f 0801 	mov.w	r8, #1
   16300:	2b00      	cmp	r3, #0
   16302:	d1f3      	bne.n	162ec <mpi_mul_hlp+0x5b0>
   16304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16308:	f04f 0800 	mov.w	r8, #0
   1630c:	e6be      	b.n	1608c <mpi_mul_hlp+0x350>
   1630e:	bf00      	nop

00016310 <mbedtls_mpi_cmp_mpi.constprop.6>:
   16310:	6843      	ldr	r3, [r0, #4]
   16312:	2b00      	cmp	r3, #0
   16314:	d033      	beq.n	1637e <mbedtls_mpi_cmp_mpi.constprop.6+0x6e>
   16316:	b430      	push	{r4, r5}
   16318:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1631c:	6885      	ldr	r5, [r0, #8]
   1631e:	3a01      	subs	r2, #1
   16320:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
   16324:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   16328:	b11c      	cbz	r4, 16332 <mbedtls_mpi_cmp_mpi.constprop.6+0x22>
   1632a:	e009      	b.n	16340 <mbedtls_mpi_cmp_mpi.constprop.6+0x30>
   1632c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   16330:	b934      	cbnz	r4, 16340 <mbedtls_mpi_cmp_mpi.constprop.6+0x30>
   16332:	3b01      	subs	r3, #1
   16334:	d1fa      	bne.n	1632c <mbedtls_mpi_cmp_mpi.constprop.6+0x1c>
   16336:	688b      	ldr	r3, [r1, #8]
   16338:	6818      	ldr	r0, [r3, #0]
   1633a:	b9d0      	cbnz	r0, 16372 <mbedtls_mpi_cmp_mpi.constprop.6+0x62>
   1633c:	bc30      	pop	{r4, r5}
   1633e:	4770      	bx	lr
   16340:	688a      	ldr	r2, [r1, #8]
   16342:	6812      	ldr	r2, [r2, #0]
   16344:	b192      	cbz	r2, 1636c <mbedtls_mpi_cmp_mpi.constprop.6+0x5c>
   16346:	2b01      	cmp	r3, #1
   16348:	d810      	bhi.n	1636c <mbedtls_mpi_cmp_mpi.constprop.6+0x5c>
   1634a:	6800      	ldr	r0, [r0, #0]
   1634c:	680b      	ldr	r3, [r1, #0]
   1634e:	2800      	cmp	r0, #0
   16350:	dd01      	ble.n	16356 <mbedtls_mpi_cmp_mpi.constprop.6+0x46>
   16352:	2b00      	cmp	r3, #0
   16354:	db11      	blt.n	1637a <mbedtls_mpi_cmp_mpi.constprop.6+0x6a>
   16356:	2b00      	cmp	r3, #0
   16358:	dd01      	ble.n	1635e <mbedtls_mpi_cmp_mpi.constprop.6+0x4e>
   1635a:	2800      	cmp	r0, #0
   1635c:	db16      	blt.n	1638c <mbedtls_mpi_cmp_mpi.constprop.6+0x7c>
   1635e:	682b      	ldr	r3, [r5, #0]
   16360:	4293      	cmp	r3, r2
   16362:	d8eb      	bhi.n	1633c <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   16364:	d306      	bcc.n	16374 <mbedtls_mpi_cmp_mpi.constprop.6+0x64>
   16366:	bc30      	pop	{r4, r5}
   16368:	2000      	movs	r0, #0
   1636a:	4770      	bx	lr
   1636c:	6800      	ldr	r0, [r0, #0]
   1636e:	bc30      	pop	{r4, r5}
   16370:	4770      	bx	lr
   16372:	6808      	ldr	r0, [r1, #0]
   16374:	4240      	negs	r0, r0
   16376:	bc30      	pop	{r4, r5}
   16378:	4770      	bx	lr
   1637a:	2001      	movs	r0, #1
   1637c:	e7de      	b.n	1633c <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   1637e:	688b      	ldr	r3, [r1, #8]
   16380:	6818      	ldr	r0, [r3, #0]
   16382:	b900      	cbnz	r0, 16386 <mbedtls_mpi_cmp_mpi.constprop.6+0x76>
   16384:	4770      	bx	lr
   16386:	6808      	ldr	r0, [r1, #0]
   16388:	4240      	negs	r0, r0
   1638a:	e7fb      	b.n	16384 <mbedtls_mpi_cmp_mpi.constprop.6+0x74>
   1638c:	f04f 30ff 	mov.w	r0, #4294967295
   16390:	e7d4      	b.n	1633c <mbedtls_mpi_cmp_mpi.constprop.6+0x2c>
   16392:	bf00      	nop

00016394 <mbedtls_mpi_init>:
   16394:	b120      	cbz	r0, 163a0 <mbedtls_mpi_init+0xc>
   16396:	2300      	movs	r3, #0
   16398:	2201      	movs	r2, #1
   1639a:	e9c0 2300 	strd	r2, r3, [r0]
   1639e:	6083      	str	r3, [r0, #8]
   163a0:	4770      	bx	lr
   163a2:	bf00      	nop

000163a4 <mbedtls_mpi_free>:
   163a4:	b1b0      	cbz	r0, 163d4 <mbedtls_mpi_free+0x30>
   163a6:	b510      	push	{r4, lr}
   163a8:	4604      	mov	r4, r0
   163aa:	6880      	ldr	r0, [r0, #8]
   163ac:	b160      	cbz	r0, 163c8 <mbedtls_mpi_free+0x24>
   163ae:	6862      	ldr	r2, [r4, #4]
   163b0:	1e53      	subs	r3, r2, #1
   163b2:	b13a      	cbz	r2, 163c4 <mbedtls_mpi_free+0x20>
   163b4:	2200      	movs	r2, #0
   163b6:	3b01      	subs	r3, #1
   163b8:	1c59      	adds	r1, r3, #1
   163ba:	6002      	str	r2, [r0, #0]
   163bc:	f100 0004 	add.w	r0, r0, #4
   163c0:	d1f9      	bne.n	163b6 <mbedtls_mpi_free+0x12>
   163c2:	68a0      	ldr	r0, [r4, #8]
   163c4:	f7fe fa72 	bl	148ac <nrf_free>
   163c8:	2300      	movs	r3, #0
   163ca:	2201      	movs	r2, #1
   163cc:	e9c4 2300 	strd	r2, r3, [r4]
   163d0:	60a3      	str	r3, [r4, #8]
   163d2:	bd10      	pop	{r4, pc}
   163d4:	4770      	bx	lr
   163d6:	bf00      	nop

000163d8 <mbedtls_mpi_shrink>:
   163d8:	b570      	push	{r4, r5, r6, lr}
   163da:	6842      	ldr	r2, [r0, #4]
   163dc:	4605      	mov	r5, r0
   163de:	428a      	cmp	r2, r1
   163e0:	460c      	mov	r4, r1
   163e2:	d807      	bhi.n	163f4 <mbedtls_mpi_shrink+0x1c>
   163e4:	f242 7310 	movw	r3, #10000	; 0x2710
   163e8:	4299      	cmp	r1, r3
   163ea:	d851      	bhi.n	16490 <mbedtls_mpi_shrink+0xb8>
   163ec:	428a      	cmp	r2, r1
   163ee:	d335      	bcc.n	1645c <mbedtls_mpi_shrink+0x84>
   163f0:	2000      	movs	r0, #0
   163f2:	bd70      	pop	{r4, r5, r6, pc}
   163f4:	1e51      	subs	r1, r2, #1
   163f6:	d010      	beq.n	1641a <mbedtls_mpi_shrink+0x42>
   163f8:	6883      	ldr	r3, [r0, #8]
   163fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   163fe:	2800      	cmp	r0, #0
   16400:	d149      	bne.n	16496 <mbedtls_mpi_shrink+0xbe>
   16402:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16406:	3a01      	subs	r2, #1
   16408:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1640c:	e003      	b.n	16416 <mbedtls_mpi_shrink+0x3e>
   1640e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   16412:	b918      	cbnz	r0, 1641c <mbedtls_mpi_shrink+0x44>
   16414:	4611      	mov	r1, r2
   16416:	1e4a      	subs	r2, r1, #1
   16418:	d1f9      	bne.n	1640e <mbedtls_mpi_shrink+0x36>
   1641a:	2101      	movs	r1, #1
   1641c:	428c      	cmp	r4, r1
   1641e:	bf38      	it	cc
   16420:	460c      	movcc	r4, r1
   16422:	2104      	movs	r1, #4
   16424:	4620      	mov	r0, r4
   16426:	f7fe fa2d 	bl	14884 <nrf_calloc>
   1642a:	4606      	mov	r6, r0
   1642c:	b380      	cbz	r0, 16490 <mbedtls_mpi_shrink+0xb8>
   1642e:	68a9      	ldr	r1, [r5, #8]
   16430:	b181      	cbz	r1, 16454 <mbedtls_mpi_shrink+0x7c>
   16432:	00a2      	lsls	r2, r4, #2
   16434:	f00f fd17 	bl	25e66 <memcpy>
   16438:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1643c:	1e53      	subs	r3, r2, #1
   1643e:	b13a      	cbz	r2, 16450 <mbedtls_mpi_shrink+0x78>
   16440:	2200      	movs	r2, #0
   16442:	3b01      	subs	r3, #1
   16444:	1c59      	adds	r1, r3, #1
   16446:	6002      	str	r2, [r0, #0]
   16448:	f100 0004 	add.w	r0, r0, #4
   1644c:	d1f9      	bne.n	16442 <mbedtls_mpi_shrink+0x6a>
   1644e:	68a8      	ldr	r0, [r5, #8]
   16450:	f7fe fa2c 	bl	148ac <nrf_free>
   16454:	e9c5 4601 	strd	r4, r6, [r5, #4]
   16458:	2000      	movs	r0, #0
   1645a:	bd70      	pop	{r4, r5, r6, pc}
   1645c:	2104      	movs	r1, #4
   1645e:	4620      	mov	r0, r4
   16460:	f7fe fa10 	bl	14884 <nrf_calloc>
   16464:	4606      	mov	r6, r0
   16466:	b198      	cbz	r0, 16490 <mbedtls_mpi_shrink+0xb8>
   16468:	68a9      	ldr	r1, [r5, #8]
   1646a:	2900      	cmp	r1, #0
   1646c:	d0f2      	beq.n	16454 <mbedtls_mpi_shrink+0x7c>
   1646e:	686a      	ldr	r2, [r5, #4]
   16470:	0092      	lsls	r2, r2, #2
   16472:	f00f fcf8 	bl	25e66 <memcpy>
   16476:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   1647a:	1e53      	subs	r3, r2, #1
   1647c:	2a00      	cmp	r2, #0
   1647e:	d0e7      	beq.n	16450 <mbedtls_mpi_shrink+0x78>
   16480:	2200      	movs	r2, #0
   16482:	3b01      	subs	r3, #1
   16484:	1c59      	adds	r1, r3, #1
   16486:	6002      	str	r2, [r0, #0]
   16488:	f100 0004 	add.w	r0, r0, #4
   1648c:	d1f9      	bne.n	16482 <mbedtls_mpi_shrink+0xaa>
   1648e:	e7de      	b.n	1644e <mbedtls_mpi_shrink+0x76>
   16490:	f06f 000f 	mvn.w	r0, #15
   16494:	bd70      	pop	{r4, r5, r6, pc}
   16496:	4611      	mov	r1, r2
   16498:	e7c0      	b.n	1641c <mbedtls_mpi_shrink+0x44>
   1649a:	bf00      	nop

0001649c <mbedtls_mpi_copy>:
   1649c:	4288      	cmp	r0, r1
   1649e:	d052      	beq.n	16546 <mbedtls_mpi_copy+0xaa>
   164a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164a2:	688a      	ldr	r2, [r1, #8]
   164a4:	460e      	mov	r6, r1
   164a6:	4605      	mov	r5, r0
   164a8:	2a00      	cmp	r2, #0
   164aa:	d04e      	beq.n	1654a <mbedtls_mpi_copy+0xae>
   164ac:	6849      	ldr	r1, [r1, #4]
   164ae:	1e4b      	subs	r3, r1, #1
   164b0:	d00e      	beq.n	164d0 <mbedtls_mpi_copy+0x34>
   164b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   164b6:	2800      	cmp	r0, #0
   164b8:	d13b      	bne.n	16532 <mbedtls_mpi_copy+0x96>
   164ba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   164be:	3901      	subs	r1, #1
   164c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   164c4:	e002      	b.n	164cc <mbedtls_mpi_copy+0x30>
   164c6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   164ca:	bb90      	cbnz	r0, 16532 <mbedtls_mpi_copy+0x96>
   164cc:	3b01      	subs	r3, #1
   164ce:	d1fa      	bne.n	164c6 <mbedtls_mpi_copy+0x2a>
   164d0:	2401      	movs	r4, #1
   164d2:	6833      	ldr	r3, [r6, #0]
   164d4:	602b      	str	r3, [r5, #0]
   164d6:	686a      	ldr	r2, [r5, #4]
   164d8:	42a2      	cmp	r2, r4
   164da:	d30c      	bcc.n	164f6 <mbedtls_mpi_copy+0x5a>
   164dc:	68af      	ldr	r7, [r5, #8]
   164de:	0092      	lsls	r2, r2, #2
   164e0:	2100      	movs	r1, #0
   164e2:	4638      	mov	r0, r7
   164e4:	f00f fcec 	bl	25ec0 <memset>
   164e8:	00a2      	lsls	r2, r4, #2
   164ea:	68b1      	ldr	r1, [r6, #8]
   164ec:	68a8      	ldr	r0, [r5, #8]
   164ee:	f00f fcba 	bl	25e66 <memcpy>
   164f2:	2000      	movs	r0, #0
   164f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   164f6:	2104      	movs	r1, #4
   164f8:	4620      	mov	r0, r4
   164fa:	f7fe f9c3 	bl	14884 <nrf_calloc>
   164fe:	4607      	mov	r7, r0
   16500:	b1f0      	cbz	r0, 16540 <mbedtls_mpi_copy+0xa4>
   16502:	68a9      	ldr	r1, [r5, #8]
   16504:	b189      	cbz	r1, 1652a <mbedtls_mpi_copy+0x8e>
   16506:	686a      	ldr	r2, [r5, #4]
   16508:	0092      	lsls	r2, r2, #2
   1650a:	f00f fcac 	bl	25e66 <memcpy>
   1650e:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   16512:	1e53      	subs	r3, r2, #1
   16514:	b13a      	cbz	r2, 16526 <mbedtls_mpi_copy+0x8a>
   16516:	2200      	movs	r2, #0
   16518:	3b01      	subs	r3, #1
   1651a:	1c59      	adds	r1, r3, #1
   1651c:	6002      	str	r2, [r0, #0]
   1651e:	f100 0004 	add.w	r0, r0, #4
   16522:	d1f9      	bne.n	16518 <mbedtls_mpi_copy+0x7c>
   16524:	68a8      	ldr	r0, [r5, #8]
   16526:	f7fe f9c1 	bl	148ac <nrf_free>
   1652a:	4622      	mov	r2, r4
   1652c:	e9c5 4701 	strd	r4, r7, [r5, #4]
   16530:	e7d5      	b.n	164de <mbedtls_mpi_copy+0x42>
   16532:	f242 7210 	movw	r2, #10000	; 0x2710
   16536:	6831      	ldr	r1, [r6, #0]
   16538:	1c5c      	adds	r4, r3, #1
   1653a:	4294      	cmp	r4, r2
   1653c:	6029      	str	r1, [r5, #0]
   1653e:	d9ca      	bls.n	164d6 <mbedtls_mpi_copy+0x3a>
   16540:	f06f 000f 	mvn.w	r0, #15
   16544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16546:	2000      	movs	r0, #0
   16548:	4770      	bx	lr
   1654a:	2800      	cmp	r0, #0
   1654c:	d0d1      	beq.n	164f2 <mbedtls_mpi_copy+0x56>
   1654e:	6880      	ldr	r0, [r0, #8]
   16550:	b158      	cbz	r0, 1656a <mbedtls_mpi_copy+0xce>
   16552:	6869      	ldr	r1, [r5, #4]
   16554:	1e4b      	subs	r3, r1, #1
   16556:	b131      	cbz	r1, 16566 <mbedtls_mpi_copy+0xca>
   16558:	3b01      	subs	r3, #1
   1655a:	1c5c      	adds	r4, r3, #1
   1655c:	6002      	str	r2, [r0, #0]
   1655e:	f100 0004 	add.w	r0, r0, #4
   16562:	d1f9      	bne.n	16558 <mbedtls_mpi_copy+0xbc>
   16564:	68a8      	ldr	r0, [r5, #8]
   16566:	f7fe f9a1 	bl	148ac <nrf_free>
   1656a:	2000      	movs	r0, #0
   1656c:	2301      	movs	r3, #1
   1656e:	e9c5 3000 	strd	r3, r0, [r5]
   16572:	60a8      	str	r0, [r5, #8]
   16574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16576:	bf00      	nop

00016578 <mbedtls_mpi_sub_abs.constprop.8>:
   16578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1657a:	684b      	ldr	r3, [r1, #4]
   1657c:	460d      	mov	r5, r1
   1657e:	b085      	sub	sp, #20
   16580:	4614      	mov	r4, r2
   16582:	4606      	mov	r6, r0
   16584:	6851      	ldr	r1, [r2, #4]
   16586:	b17b      	cbz	r3, 165a8 <mbedtls_mpi_sub_abs.constprop.8+0x30>
   16588:	68a8      	ldr	r0, [r5, #8]
   1658a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1658e:	3a01      	subs	r2, #1
   16590:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   16594:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   16598:	b127      	cbz	r7, 165a4 <mbedtls_mpi_sub_abs.constprop.8+0x2c>
   1659a:	e04f      	b.n	1663c <mbedtls_mpi_sub_abs.constprop.8+0xc4>
   1659c:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   165a0:	2a00      	cmp	r2, #0
   165a2:	d14b      	bne.n	1663c <mbedtls_mpi_sub_abs.constprop.8+0xc4>
   165a4:	3b01      	subs	r3, #1
   165a6:	d1f9      	bne.n	1659c <mbedtls_mpi_sub_abs.constprop.8+0x24>
   165a8:	b189      	cbz	r1, 165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   165aa:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   165ae:	68a7      	ldr	r7, [r4, #8]
   165b0:	3801      	subs	r0, #1
   165b2:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   165b6:	2a00      	cmp	r2, #0
   165b8:	f040 8099 	bne.w	166ee <mbedtls_mpi_sub_abs.constprop.8+0x176>
   165bc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   165c0:	e003      	b.n	165ca <mbedtls_mpi_sub_abs.constprop.8+0x52>
   165c2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   165c6:	2a00      	cmp	r2, #0
   165c8:	d142      	bne.n	16650 <mbedtls_mpi_sub_abs.constprop.8+0xd8>
   165ca:	3901      	subs	r1, #1
   165cc:	d1f9      	bne.n	165c2 <mbedtls_mpi_sub_abs.constprop.8+0x4a>
   165ce:	2300      	movs	r3, #0
   165d0:	2201      	movs	r2, #1
   165d2:	42b4      	cmp	r4, r6
   165d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   165d8:	9303      	str	r3, [sp, #12]
   165da:	d07f      	beq.n	166dc <mbedtls_mpi_sub_abs.constprop.8+0x164>
   165dc:	42b5      	cmp	r5, r6
   165de:	d005      	beq.n	165ec <mbedtls_mpi_sub_abs.constprop.8+0x74>
   165e0:	4629      	mov	r1, r5
   165e2:	4630      	mov	r0, r6
   165e4:	f7ff ff5a 	bl	1649c <mbedtls_mpi_copy>
   165e8:	4607      	mov	r7, r0
   165ea:	b9a8      	cbnz	r0, 16618 <mbedtls_mpi_sub_abs.constprop.8+0xa0>
   165ec:	2301      	movs	r3, #1
   165ee:	6033      	str	r3, [r6, #0]
   165f0:	6860      	ldr	r0, [r4, #4]
   165f2:	b180      	cbz	r0, 16616 <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   165f4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   165f8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   165fc:	3b01      	subs	r3, #1
   165fe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   16602:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   16606:	b122      	cbz	r2, 16612 <mbedtls_mpi_sub_abs.constprop.8+0x9a>
   16608:	e042      	b.n	16690 <mbedtls_mpi_sub_abs.constprop.8+0x118>
   1660a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1660e:	2a00      	cmp	r2, #0
   16610:	d13e      	bne.n	16690 <mbedtls_mpi_sub_abs.constprop.8+0x118>
   16612:	3801      	subs	r0, #1
   16614:	d1f9      	bne.n	1660a <mbedtls_mpi_sub_abs.constprop.8+0x92>
   16616:	2700      	movs	r7, #0
   16618:	9803      	ldr	r0, [sp, #12]
   1661a:	b160      	cbz	r0, 16636 <mbedtls_mpi_sub_abs.constprop.8+0xbe>
   1661c:	9a02      	ldr	r2, [sp, #8]
   1661e:	1e53      	subs	r3, r2, #1
   16620:	b13a      	cbz	r2, 16632 <mbedtls_mpi_sub_abs.constprop.8+0xba>
   16622:	2200      	movs	r2, #0
   16624:	3b01      	subs	r3, #1
   16626:	1c59      	adds	r1, r3, #1
   16628:	6002      	str	r2, [r0, #0]
   1662a:	f100 0004 	add.w	r0, r0, #4
   1662e:	d1f9      	bne.n	16624 <mbedtls_mpi_sub_abs.constprop.8+0xac>
   16630:	9803      	ldr	r0, [sp, #12]
   16632:	f7fe f93b 	bl	148ac <nrf_free>
   16636:	4638      	mov	r0, r7
   16638:	b005      	add	sp, #20
   1663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1663c:	2900      	cmp	r1, #0
   1663e:	d0c6      	beq.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   16640:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   16644:	68a7      	ldr	r7, [r4, #8]
   16646:	3801      	subs	r0, #1
   16648:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   1664c:	2a00      	cmp	r2, #0
   1664e:	d0b5      	beq.n	165bc <mbedtls_mpi_sub_abs.constprop.8+0x44>
   16650:	428b      	cmp	r3, r1
   16652:	d8bc      	bhi.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   16654:	d34b      	bcc.n	166ee <mbedtls_mpi_sub_abs.constprop.8+0x176>
   16656:	2b00      	cmp	r3, #0
   16658:	d0b9      	beq.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   1665a:	68a8      	ldr	r0, [r5, #8]
   1665c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   16660:	3901      	subs	r1, #1
   16662:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
   16666:	f857 e021 	ldr.w	lr, [r7, r1, lsl #2]
   1666a:	0089      	lsls	r1, r1, #2
   1666c:	45e6      	cmp	lr, ip
   1666e:	4408      	add	r0, r1
   16670:	eb07 0201 	add.w	r2, r7, r1
   16674:	d3ab      	bcc.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   16676:	d83a      	bhi.n	166ee <mbedtls_mpi_sub_abs.constprop.8+0x176>
   16678:	4601      	mov	r1, r0
   1667a:	e006      	b.n	1668a <mbedtls_mpi_sub_abs.constprop.8+0x112>
   1667c:	f851 7d04 	ldr.w	r7, [r1, #-4]!
   16680:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   16684:	4287      	cmp	r7, r0
   16686:	d8a2      	bhi.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   16688:	d331      	bcc.n	166ee <mbedtls_mpi_sub_abs.constprop.8+0x176>
   1668a:	3b01      	subs	r3, #1
   1668c:	d1f6      	bne.n	1667c <mbedtls_mpi_sub_abs.constprop.8+0x104>
   1668e:	e79e      	b.n	165ce <mbedtls_mpi_sub_abs.constprop.8+0x56>
   16690:	2500      	movs	r5, #0
   16692:	462b      	mov	r3, r5
   16694:	68b1      	ldr	r1, [r6, #8]
   16696:	f851 6b04 	ldr.w	r6, [r1], #4
   1669a:	3501      	adds	r5, #1
   1669c:	1af2      	subs	r2, r6, r3
   1669e:	f841 2c04 	str.w	r2, [r1, #-4]
   166a2:	f85c 7b04 	ldr.w	r7, [ip], #4
   166a6:	460c      	mov	r4, r1
   166a8:	42ba      	cmp	r2, r7
   166aa:	bf2c      	ite	cs
   166ac:	f04f 0e00 	movcs.w	lr, #0
   166b0:	f04f 0e01 	movcc.w	lr, #1
   166b4:	1bd2      	subs	r2, r2, r7
   166b6:	429e      	cmp	r6, r3
   166b8:	bf2c      	ite	cs
   166ba:	4673      	movcs	r3, lr
   166bc:	f10e 0301 	addcc.w	r3, lr, #1
   166c0:	4285      	cmp	r5, r0
   166c2:	f841 2c04 	str.w	r2, [r1, #-4]
   166c6:	d3e6      	bcc.n	16696 <mbedtls_mpi_sub_abs.constprop.8+0x11e>
   166c8:	b90b      	cbnz	r3, 166ce <mbedtls_mpi_sub_abs.constprop.8+0x156>
   166ca:	e7a4      	b.n	16616 <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   166cc:	2301      	movs	r3, #1
   166ce:	6822      	ldr	r2, [r4, #0]
   166d0:	1ad1      	subs	r1, r2, r3
   166d2:	429a      	cmp	r2, r3
   166d4:	f844 1b04 	str.w	r1, [r4], #4
   166d8:	d3f8      	bcc.n	166cc <mbedtls_mpi_sub_abs.constprop.8+0x154>
   166da:	e79c      	b.n	16616 <mbedtls_mpi_sub_abs.constprop.8+0x9e>
   166dc:	4621      	mov	r1, r4
   166de:	a801      	add	r0, sp, #4
   166e0:	f7ff fedc 	bl	1649c <mbedtls_mpi_copy>
   166e4:	4607      	mov	r7, r0
   166e6:	2800      	cmp	r0, #0
   166e8:	d196      	bne.n	16618 <mbedtls_mpi_sub_abs.constprop.8+0xa0>
   166ea:	ac01      	add	r4, sp, #4
   166ec:	e776      	b.n	165dc <mbedtls_mpi_sub_abs.constprop.8+0x64>
   166ee:	f06f 0709 	mvn.w	r7, #9
   166f2:	4638      	mov	r0, r7
   166f4:	b005      	add	sp, #20
   166f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000166f8 <mbedtls_mpi_safe_cond_assign>:
   166f8:	f242 7310 	movw	r3, #10000	; 0x2710
   166fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16700:	684f      	ldr	r7, [r1, #4]
   16702:	4256      	negs	r6, r2
   16704:	4316      	orrs	r6, r2
   16706:	429f      	cmp	r7, r3
   16708:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   1670c:	d84f      	bhi.n	167ae <mbedtls_mpi_safe_cond_assign+0xb6>
   1670e:	6842      	ldr	r2, [r0, #4]
   16710:	4604      	mov	r4, r0
   16712:	4297      	cmp	r7, r2
   16714:	460d      	mov	r5, r1
   16716:	d82c      	bhi.n	16772 <mbedtls_mpi_safe_cond_assign+0x7a>
   16718:	6829      	ldr	r1, [r5, #0]
   1671a:	6823      	ldr	r3, [r4, #0]
   1671c:	fb01 f106 	mul.w	r1, r1, r6
   16720:	f1c6 0701 	rsb	r7, r6, #1
   16724:	fb03 1307 	mla	r3, r3, r7, r1
   16728:	6023      	str	r3, [r4, #0]
   1672a:	686b      	ldr	r3, [r5, #4]
   1672c:	b18b      	cbz	r3, 16752 <mbedtls_mpi_safe_cond_assign+0x5a>
   1672e:	2300      	movs	r3, #0
   16730:	68a1      	ldr	r1, [r4, #8]
   16732:	68aa      	ldr	r2, [r5, #8]
   16734:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   16738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1673c:	fb00 f007 	mul.w	r0, r0, r7
   16740:	fb02 0206 	mla	r2, r2, r6, r0
   16744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   16748:	686a      	ldr	r2, [r5, #4]
   1674a:	3301      	adds	r3, #1
   1674c:	429a      	cmp	r2, r3
   1674e:	d8ef      	bhi.n	16730 <mbedtls_mpi_safe_cond_assign+0x38>
   16750:	6862      	ldr	r2, [r4, #4]
   16752:	4293      	cmp	r3, r2
   16754:	d20a      	bcs.n	1676c <mbedtls_mpi_safe_cond_assign+0x74>
   16756:	009a      	lsls	r2, r3, #2
   16758:	68a0      	ldr	r0, [r4, #8]
   1675a:	3301      	adds	r3, #1
   1675c:	5881      	ldr	r1, [r0, r2]
   1675e:	fb07 f101 	mul.w	r1, r7, r1
   16762:	5081      	str	r1, [r0, r2]
   16764:	6861      	ldr	r1, [r4, #4]
   16766:	3204      	adds	r2, #4
   16768:	4299      	cmp	r1, r3
   1676a:	d8f5      	bhi.n	16758 <mbedtls_mpi_safe_cond_assign+0x60>
   1676c:	2000      	movs	r0, #0
   1676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16772:	2104      	movs	r1, #4
   16774:	4638      	mov	r0, r7
   16776:	f7fe f885 	bl	14884 <nrf_calloc>
   1677a:	4680      	mov	r8, r0
   1677c:	b1b8      	cbz	r0, 167ae <mbedtls_mpi_safe_cond_assign+0xb6>
   1677e:	68a1      	ldr	r1, [r4, #8]
   16780:	b189      	cbz	r1, 167a6 <mbedtls_mpi_safe_cond_assign+0xae>
   16782:	6862      	ldr	r2, [r4, #4]
   16784:	0092      	lsls	r2, r2, #2
   16786:	f00f fb6e 	bl	25e66 <memcpy>
   1678a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   1678e:	1e53      	subs	r3, r2, #1
   16790:	b13a      	cbz	r2, 167a2 <mbedtls_mpi_safe_cond_assign+0xaa>
   16792:	2200      	movs	r2, #0
   16794:	3b01      	subs	r3, #1
   16796:	1c59      	adds	r1, r3, #1
   16798:	6002      	str	r2, [r0, #0]
   1679a:	f100 0004 	add.w	r0, r0, #4
   1679e:	d1f9      	bne.n	16794 <mbedtls_mpi_safe_cond_assign+0x9c>
   167a0:	68a0      	ldr	r0, [r4, #8]
   167a2:	f7fe f883 	bl	148ac <nrf_free>
   167a6:	463a      	mov	r2, r7
   167a8:	e9c4 7801 	strd	r7, r8, [r4, #4]
   167ac:	e7b4      	b.n	16718 <mbedtls_mpi_safe_cond_assign+0x20>
   167ae:	f06f 000f 	mvn.w	r0, #15
   167b2:	e7dc      	b.n	1676e <mbedtls_mpi_safe_cond_assign+0x76>

000167b4 <mbedtls_mpi_lset>:
   167b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167b6:	6845      	ldr	r5, [r0, #4]
   167b8:	4604      	mov	r4, r0
   167ba:	460e      	mov	r6, r1
   167bc:	b19d      	cbz	r5, 167e6 <mbedtls_mpi_lset+0x32>
   167be:	6887      	ldr	r7, [r0, #8]
   167c0:	00aa      	lsls	r2, r5, #2
   167c2:	4638      	mov	r0, r7
   167c4:	2100      	movs	r1, #0
   167c6:	f00f fb7b 	bl	25ec0 <memset>
   167ca:	2e00      	cmp	r6, #0
   167cc:	bfac      	ite	ge
   167ce:	2301      	movge	r3, #1
   167d0:	f04f 33ff 	movlt.w	r3, #4294967295
   167d4:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
   167d8:	68a2      	ldr	r2, [r4, #8]
   167da:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
   167de:	6011      	str	r1, [r2, #0]
   167e0:	6023      	str	r3, [r4, #0]
   167e2:	2000      	movs	r0, #0
   167e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167e6:	2104      	movs	r1, #4
   167e8:	2001      	movs	r0, #1
   167ea:	f7fe f84b 	bl	14884 <nrf_calloc>
   167ee:	4607      	mov	r7, r0
   167f0:	b1b8      	cbz	r0, 16822 <mbedtls_mpi_lset+0x6e>
   167f2:	68a1      	ldr	r1, [r4, #8]
   167f4:	b181      	cbz	r1, 16818 <mbedtls_mpi_lset+0x64>
   167f6:	6862      	ldr	r2, [r4, #4]
   167f8:	0092      	lsls	r2, r2, #2
   167fa:	f00f fb34 	bl	25e66 <memcpy>
   167fe:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   16802:	1e53      	subs	r3, r2, #1
   16804:	b132      	cbz	r2, 16814 <mbedtls_mpi_lset+0x60>
   16806:	3b01      	subs	r3, #1
   16808:	1c5a      	adds	r2, r3, #1
   1680a:	6005      	str	r5, [r0, #0]
   1680c:	f100 0004 	add.w	r0, r0, #4
   16810:	d1f9      	bne.n	16806 <mbedtls_mpi_lset+0x52>
   16812:	68a0      	ldr	r0, [r4, #8]
   16814:	f7fe f84a 	bl	148ac <nrf_free>
   16818:	2301      	movs	r3, #1
   1681a:	2204      	movs	r2, #4
   1681c:	e9c4 3701 	strd	r3, r7, [r4, #4]
   16820:	e7cf      	b.n	167c2 <mbedtls_mpi_lset+0xe>
   16822:	f06f 000f 	mvn.w	r0, #15
   16826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016828 <mbedtls_mpi_get_bit>:
   16828:	6843      	ldr	r3, [r0, #4]
   1682a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
   1682e:	d209      	bcs.n	16844 <mbedtls_mpi_get_bit+0x1c>
   16830:	6883      	ldr	r3, [r0, #8]
   16832:	094a      	lsrs	r2, r1, #5
   16834:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   16838:	f001 011f 	and.w	r1, r1, #31
   1683c:	40c8      	lsrs	r0, r1
   1683e:	f000 0001 	and.w	r0, r0, #1
   16842:	4770      	bx	lr
   16844:	2000      	movs	r0, #0
   16846:	4770      	bx	lr

00016848 <mbedtls_mpi_bitlen>:
   16848:	6843      	ldr	r3, [r0, #4]
   1684a:	b313      	cbz	r3, 16892 <mbedtls_mpi_bitlen+0x4a>
   1684c:	b410      	push	{r4}
   1684e:	6882      	ldr	r2, [r0, #8]
   16850:	1e58      	subs	r0, r3, #1
   16852:	d024      	beq.n	1689e <mbedtls_mpi_bitlen+0x56>
   16854:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   16858:	b9e9      	cbnz	r1, 16896 <mbedtls_mpi_bitlen+0x4e>
   1685a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1685e:	3b01      	subs	r3, #1
   16860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16864:	e002      	b.n	1686c <mbedtls_mpi_bitlen+0x24>
   16866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1686a:	b9a1      	cbnz	r1, 16896 <mbedtls_mpi_bitlen+0x4e>
   1686c:	3801      	subs	r0, #1
   1686e:	d1fa      	bne.n	16866 <mbedtls_mpi_bitlen+0x1e>
   16870:	2420      	movs	r4, #32
   16872:	6811      	ldr	r1, [r2, #0]
   16874:	2200      	movs	r2, #0
   16876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1687a:	e002      	b.n	16882 <mbedtls_mpi_bitlen+0x3a>
   1687c:	3201      	adds	r2, #1
   1687e:	2a20      	cmp	r2, #32
   16880:	d004      	beq.n	1688c <mbedtls_mpi_bitlen+0x44>
   16882:	420b      	tst	r3, r1
   16884:	ea4f 0353 	mov.w	r3, r3, lsr #1
   16888:	d0f8      	beq.n	1687c <mbedtls_mpi_bitlen+0x34>
   1688a:	1aa0      	subs	r0, r4, r2
   1688c:	f85d 4b04 	ldr.w	r4, [sp], #4
   16890:	4770      	bx	lr
   16892:	4618      	mov	r0, r3
   16894:	4770      	bx	lr
   16896:	0140      	lsls	r0, r0, #5
   16898:	f100 0420 	add.w	r4, r0, #32
   1689c:	e7ea      	b.n	16874 <mbedtls_mpi_bitlen+0x2c>
   1689e:	6811      	ldr	r1, [r2, #0]
   168a0:	2420      	movs	r4, #32
   168a2:	e7e7      	b.n	16874 <mbedtls_mpi_bitlen+0x2c>

000168a4 <mbedtls_mpi_size>:
   168a4:	6843      	ldr	r3, [r0, #4]
   168a6:	b323      	cbz	r3, 168f2 <mbedtls_mpi_size+0x4e>
   168a8:	b410      	push	{r4}
   168aa:	6882      	ldr	r2, [r0, #8]
   168ac:	1e58      	subs	r0, r3, #1
   168ae:	d026      	beq.n	168fe <mbedtls_mpi_size+0x5a>
   168b0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   168b4:	b9f9      	cbnz	r1, 168f6 <mbedtls_mpi_size+0x52>
   168b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   168ba:	3b01      	subs	r3, #1
   168bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   168c0:	e002      	b.n	168c8 <mbedtls_mpi_size+0x24>
   168c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   168c6:	b9b1      	cbnz	r1, 168f6 <mbedtls_mpi_size+0x52>
   168c8:	3801      	subs	r0, #1
   168ca:	d1fa      	bne.n	168c2 <mbedtls_mpi_size+0x1e>
   168cc:	2420      	movs	r4, #32
   168ce:	6811      	ldr	r1, [r2, #0]
   168d0:	2200      	movs	r2, #0
   168d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   168d6:	e002      	b.n	168de <mbedtls_mpi_size+0x3a>
   168d8:	3201      	adds	r2, #1
   168da:	2a20      	cmp	r2, #32
   168dc:	d004      	beq.n	168e8 <mbedtls_mpi_size+0x44>
   168de:	420b      	tst	r3, r1
   168e0:	ea4f 0353 	mov.w	r3, r3, lsr #1
   168e4:	d0f8      	beq.n	168d8 <mbedtls_mpi_size+0x34>
   168e6:	1aa0      	subs	r0, r4, r2
   168e8:	3007      	adds	r0, #7
   168ea:	08c0      	lsrs	r0, r0, #3
   168ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   168f0:	4770      	bx	lr
   168f2:	4618      	mov	r0, r3
   168f4:	4770      	bx	lr
   168f6:	0140      	lsls	r0, r0, #5
   168f8:	f100 0420 	add.w	r4, r0, #32
   168fc:	e7e8      	b.n	168d0 <mbedtls_mpi_size+0x2c>
   168fe:	6811      	ldr	r1, [r2, #0]
   16900:	2420      	movs	r4, #32
   16902:	e7e5      	b.n	168d0 <mbedtls_mpi_size+0x2c>

00016904 <mbedtls_mpi_read_binary>:
   16904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16908:	4605      	mov	r5, r0
   1690a:	460f      	mov	r7, r1
   1690c:	4616      	mov	r6, r2
   1690e:	2a00      	cmp	r2, #0
   16910:	d07e      	beq.n	16a10 <mbedtls_mpi_read_binary+0x10c>
   16912:	780c      	ldrb	r4, [r1, #0]
   16914:	460b      	mov	r3, r1
   16916:	b124      	cbz	r4, 16922 <mbedtls_mpi_read_binary+0x1e>
   16918:	e07e      	b.n	16a18 <mbedtls_mpi_read_binary+0x114>
   1691a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1691e:	2a00      	cmp	r2, #0
   16920:	d146      	bne.n	169b0 <mbedtls_mpi_read_binary+0xac>
   16922:	3401      	adds	r4, #1
   16924:	42a6      	cmp	r6, r4
   16926:	d1f8      	bne.n	1691a <mbedtls_mpi_read_binary+0x16>
   16928:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1692c:	f1b8 0f00 	cmp.w	r8, #0
   16930:	d169      	bne.n	16a06 <mbedtls_mpi_read_binary+0x102>
   16932:	2104      	movs	r1, #4
   16934:	2001      	movs	r0, #1
   16936:	f7fd ffa5 	bl	14884 <nrf_calloc>
   1693a:	4681      	mov	r9, r0
   1693c:	2800      	cmp	r0, #0
   1693e:	d06d      	beq.n	16a1c <mbedtls_mpi_read_binary+0x118>
   16940:	68a9      	ldr	r1, [r5, #8]
   16942:	b189      	cbz	r1, 16968 <mbedtls_mpi_read_binary+0x64>
   16944:	686a      	ldr	r2, [r5, #4]
   16946:	0092      	lsls	r2, r2, #2
   16948:	f00f fa8d 	bl	25e66 <memcpy>
   1694c:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   16950:	1e53      	subs	r3, r2, #1
   16952:	b13a      	cbz	r2, 16964 <mbedtls_mpi_read_binary+0x60>
   16954:	4642      	mov	r2, r8
   16956:	3b01      	subs	r3, #1
   16958:	1c59      	adds	r1, r3, #1
   1695a:	6002      	str	r2, [r0, #0]
   1695c:	f100 0004 	add.w	r0, r0, #4
   16960:	d1f9      	bne.n	16956 <mbedtls_mpi_read_binary+0x52>
   16962:	68a8      	ldr	r0, [r5, #8]
   16964:	f7fd ffa2 	bl	148ac <nrf_free>
   16968:	2301      	movs	r3, #1
   1696a:	2204      	movs	r2, #4
   1696c:	e9c5 3901 	strd	r3, r9, [r5, #4]
   16970:	2100      	movs	r1, #0
   16972:	4648      	mov	r0, r9
   16974:	f00f faa4 	bl	25ec0 <memset>
   16978:	2300      	movs	r3, #0
   1697a:	2201      	movs	r2, #1
   1697c:	68a9      	ldr	r1, [r5, #8]
   1697e:	42a6      	cmp	r6, r4
   16980:	600b      	str	r3, [r1, #0]
   16982:	602a      	str	r2, [r5, #0]
   16984:	d911      	bls.n	169aa <mbedtls_mpi_read_binary+0xa6>
   16986:	eb07 0c06 	add.w	ip, r7, r6
   1698a:	1b34      	subs	r4, r6, r4
   1698c:	68ae      	ldr	r6, [r5, #8]
   1698e:	f023 0103 	bic.w	r1, r3, #3
   16992:	00df      	lsls	r7, r3, #3
   16994:	f81c 0d01 	ldrb.w	r0, [ip, #-1]!
   16998:	5872      	ldr	r2, [r6, r1]
   1699a:	f007 0718 	and.w	r7, r7, #24
   1699e:	40b8      	lsls	r0, r7
   169a0:	3301      	adds	r3, #1
   169a2:	4302      	orrs	r2, r0
   169a4:	42a3      	cmp	r3, r4
   169a6:	5072      	str	r2, [r6, r1]
   169a8:	d1f0      	bne.n	1698c <mbedtls_mpi_read_binary+0x88>
   169aa:	2000      	movs	r0, #0
   169ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   169b0:	1b32      	subs	r2, r6, r4
   169b2:	f012 0803 	ands.w	r8, r2, #3
   169b6:	bf18      	it	ne
   169b8:	f04f 0801 	movne.w	r8, #1
   169bc:	f242 7310 	movw	r3, #10000	; 0x2710
   169c0:	eb08 0892 	add.w	r8, r8, r2, lsr #2
   169c4:	4598      	cmp	r8, r3
   169c6:	d829      	bhi.n	16a1c <mbedtls_mpi_read_binary+0x118>
   169c8:	686b      	ldr	r3, [r5, #4]
   169ca:	4598      	cmp	r8, r3
   169cc:	d929      	bls.n	16a22 <mbedtls_mpi_read_binary+0x11e>
   169ce:	2104      	movs	r1, #4
   169d0:	4640      	mov	r0, r8
   169d2:	f7fd ff57 	bl	14884 <nrf_calloc>
   169d6:	4681      	mov	r9, r0
   169d8:	b300      	cbz	r0, 16a1c <mbedtls_mpi_read_binary+0x118>
   169da:	68a9      	ldr	r1, [r5, #8]
   169dc:	b189      	cbz	r1, 16a02 <mbedtls_mpi_read_binary+0xfe>
   169de:	686a      	ldr	r2, [r5, #4]
   169e0:	0092      	lsls	r2, r2, #2
   169e2:	f00f fa40 	bl	25e66 <memcpy>
   169e6:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   169ea:	1e53      	subs	r3, r2, #1
   169ec:	b13a      	cbz	r2, 169fe <mbedtls_mpi_read_binary+0xfa>
   169ee:	2200      	movs	r2, #0
   169f0:	3b01      	subs	r3, #1
   169f2:	1c59      	adds	r1, r3, #1
   169f4:	6002      	str	r2, [r0, #0]
   169f6:	f100 0004 	add.w	r0, r0, #4
   169fa:	d1f9      	bne.n	169f0 <mbedtls_mpi_read_binary+0xec>
   169fc:	68a8      	ldr	r0, [r5, #8]
   169fe:	f7fd ff55 	bl	148ac <nrf_free>
   16a02:	e9c5 8901 	strd	r8, r9, [r5, #4]
   16a06:	ea4f 0288 	mov.w	r2, r8, lsl #2
   16a0a:	f8d5 9008 	ldr.w	r9, [r5, #8]
   16a0e:	e7af      	b.n	16970 <mbedtls_mpi_read_binary+0x6c>
   16a10:	f8d0 8004 	ldr.w	r8, [r0, #4]
   16a14:	4614      	mov	r4, r2
   16a16:	e789      	b.n	1692c <mbedtls_mpi_read_binary+0x28>
   16a18:	2400      	movs	r4, #0
   16a1a:	e7ca      	b.n	169b2 <mbedtls_mpi_read_binary+0xae>
   16a1c:	f06f 000f 	mvn.w	r0, #15
   16a20:	e7c4      	b.n	169ac <mbedtls_mpi_read_binary+0xa8>
   16a22:	4698      	mov	r8, r3
   16a24:	e782      	b.n	1692c <mbedtls_mpi_read_binary+0x28>
   16a26:	bf00      	nop

00016a28 <mbedtls_mpi_write_binary>:
   16a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a2c:	6844      	ldr	r4, [r0, #4]
   16a2e:	4688      	mov	r8, r1
   16a30:	2c00      	cmp	r4, #0
   16a32:	d03e      	beq.n	16ab2 <mbedtls_mpi_write_binary+0x8a>
   16a34:	4615      	mov	r5, r2
   16a36:	1e62      	subs	r2, r4, #1
   16a38:	4607      	mov	r7, r0
   16a3a:	6880      	ldr	r0, [r0, #8]
   16a3c:	d040      	beq.n	16ac0 <mbedtls_mpi_write_binary+0x98>
   16a3e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   16a42:	bb99      	cbnz	r1, 16aac <mbedtls_mpi_write_binary+0x84>
   16a44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   16a48:	3b01      	subs	r3, #1
   16a4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   16a4e:	e002      	b.n	16a56 <mbedtls_mpi_write_binary+0x2e>
   16a50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   16a54:	bb51      	cbnz	r1, 16aac <mbedtls_mpi_write_binary+0x84>
   16a56:	3a01      	subs	r2, #1
   16a58:	d1fa      	bne.n	16a50 <mbedtls_mpi_write_binary+0x28>
   16a5a:	2627      	movs	r6, #39	; 0x27
   16a5c:	6801      	ldr	r1, [r0, #0]
   16a5e:	2200      	movs	r2, #0
   16a60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   16a64:	e002      	b.n	16a6c <mbedtls_mpi_write_binary+0x44>
   16a66:	3201      	adds	r2, #1
   16a68:	2a20      	cmp	r2, #32
   16a6a:	d003      	beq.n	16a74 <mbedtls_mpi_write_binary+0x4c>
   16a6c:	420b      	tst	r3, r1
   16a6e:	ea4f 0353 	mov.w	r3, r3, lsr #1
   16a72:	d0f8      	beq.n	16a66 <mbedtls_mpi_write_binary+0x3e>
   16a74:	1ab6      	subs	r6, r6, r2
   16a76:	08f6      	lsrs	r6, r6, #3
   16a78:	42b5      	cmp	r5, r6
   16a7a:	d324      	bcc.n	16ac6 <mbedtls_mpi_write_binary+0x9e>
   16a7c:	462a      	mov	r2, r5
   16a7e:	2100      	movs	r1, #0
   16a80:	4640      	mov	r0, r8
   16a82:	f00f fa1d 	bl	25ec0 <memset>
   16a86:	b176      	cbz	r6, 16aa6 <mbedtls_mpi_write_binary+0x7e>
   16a88:	2300      	movs	r3, #0
   16a8a:	44a8      	add	r8, r5
   16a8c:	68b9      	ldr	r1, [r7, #8]
   16a8e:	f023 0203 	bic.w	r2, r3, #3
   16a92:	588c      	ldr	r4, [r1, r2]
   16a94:	00dd      	lsls	r5, r3, #3
   16a96:	f005 0518 	and.w	r5, r5, #24
   16a9a:	3301      	adds	r3, #1
   16a9c:	40ec      	lsrs	r4, r5
   16a9e:	42b3      	cmp	r3, r6
   16aa0:	f808 4d01 	strb.w	r4, [r8, #-1]!
   16aa4:	d1f2      	bne.n	16a8c <mbedtls_mpi_write_binary+0x64>
   16aa6:	2000      	movs	r0, #0
   16aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16aac:	0156      	lsls	r6, r2, #5
   16aae:	3627      	adds	r6, #39	; 0x27
   16ab0:	e7d5      	b.n	16a5e <mbedtls_mpi_write_binary+0x36>
   16ab2:	4608      	mov	r0, r1
   16ab4:	4621      	mov	r1, r4
   16ab6:	f00f fa03 	bl	25ec0 <memset>
   16aba:	4620      	mov	r0, r4
   16abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ac0:	6801      	ldr	r1, [r0, #0]
   16ac2:	2627      	movs	r6, #39	; 0x27
   16ac4:	e7cb      	b.n	16a5e <mbedtls_mpi_write_binary+0x36>
   16ac6:	f06f 0007 	mvn.w	r0, #7
   16aca:	e7ed      	b.n	16aa8 <mbedtls_mpi_write_binary+0x80>

00016acc <mbedtls_mpi_shift_l>:
   16acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ad0:	6843      	ldr	r3, [r0, #4]
   16ad2:	4604      	mov	r4, r0
   16ad4:	094d      	lsrs	r5, r1, #5
   16ad6:	f001 061f 	and.w	r6, r1, #31
   16ada:	b343      	cbz	r3, 16b2e <mbedtls_mpi_shift_l+0x62>
   16adc:	1e5a      	subs	r2, r3, #1
   16ade:	f8d0 e008 	ldr.w	lr, [r0, #8]
   16ae2:	f000 8099 	beq.w	16c18 <mbedtls_mpi_shift_l+0x14c>
   16ae6:	f85e c022 	ldr.w	ip, [lr, r2, lsl #2]
   16aea:	f1bc 0f00 	cmp.w	ip, #0
   16aee:	f040 809c 	bne.w	16c2a <mbedtls_mpi_shift_l+0x15e>
   16af2:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   16af6:	3801      	subs	r0, #1
   16af8:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   16afc:	e003      	b.n	16b06 <mbedtls_mpi_shift_l+0x3a>
   16afe:	f850 7d04 	ldr.w	r7, [r0, #-4]!
   16b02:	2f00      	cmp	r7, #0
   16b04:	d15e      	bne.n	16bc4 <mbedtls_mpi_shift_l+0xf8>
   16b06:	3a01      	subs	r2, #1
   16b08:	d1f9      	bne.n	16afe <mbedtls_mpi_shift_l+0x32>
   16b0a:	f04f 0820 	mov.w	r8, #32
   16b0e:	f8de 7000 	ldr.w	r7, [lr]
   16b12:	2000      	movs	r0, #0
   16b14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16b18:	e002      	b.n	16b20 <mbedtls_mpi_shift_l+0x54>
   16b1a:	3001      	adds	r0, #1
   16b1c:	2820      	cmp	r0, #32
   16b1e:	d005      	beq.n	16b2c <mbedtls_mpi_shift_l+0x60>
   16b20:	423a      	tst	r2, r7
   16b22:	ea4f 0252 	mov.w	r2, r2, lsr #1
   16b26:	d0f8      	beq.n	16b1a <mbedtls_mpi_shift_l+0x4e>
   16b28:	eba8 0c00 	sub.w	ip, r8, r0
   16b2c:	4461      	add	r1, ip
   16b2e:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
   16b32:	d90b      	bls.n	16b4c <mbedtls_mpi_shift_l+0x80>
   16b34:	f011 021f 	ands.w	r2, r1, #31
   16b38:	bf18      	it	ne
   16b3a:	2201      	movne	r2, #1
   16b3c:	f242 7010 	movw	r0, #10000	; 0x2710
   16b40:	eb02 1751 	add.w	r7, r2, r1, lsr #5
   16b44:	4287      	cmp	r7, r0
   16b46:	d86d      	bhi.n	16c24 <mbedtls_mpi_shift_l+0x158>
   16b48:	429f      	cmp	r7, r3
   16b4a:	d840      	bhi.n	16bce <mbedtls_mpi_shift_l+0x102>
   16b4c:	b1f5      	cbz	r5, 16b8c <mbedtls_mpi_shift_l+0xc0>
   16b4e:	429d      	cmp	r5, r3
   16b50:	d25d      	bcs.n	16c0e <mbedtls_mpi_shift_l+0x142>
   16b52:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
   16b56:	1b7f      	subs	r7, r7, r5
   16b58:	19da      	adds	r2, r3, r7
   16b5a:	ebc7 7787 	rsb	r7, r7, r7, lsl #30
   16b5e:	0092      	lsls	r2, r2, #2
   16b60:	00bf      	lsls	r7, r7, #2
   16b62:	68a0      	ldr	r0, [r4, #8]
   16b64:	3b01      	subs	r3, #1
   16b66:	19c1      	adds	r1, r0, r7
   16b68:	5880      	ldr	r0, [r0, r2]
   16b6a:	4411      	add	r1, r2
   16b6c:	429d      	cmp	r5, r3
   16b6e:	f841 0c04 	str.w	r0, [r1, #-4]
   16b72:	f1a2 0204 	sub.w	r2, r2, #4
   16b76:	d1f4      	bne.n	16b62 <mbedtls_mpi_shift_l+0x96>
   16b78:	2100      	movs	r1, #0
   16b7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16b7e:	3b01      	subs	r3, #1
   16b80:	009b      	lsls	r3, r3, #2
   16b82:	68a2      	ldr	r2, [r4, #8]
   16b84:	50d1      	str	r1, [r2, r3]
   16b86:	3b04      	subs	r3, #4
   16b88:	1d1a      	adds	r2, r3, #4
   16b8a:	d1fa      	bne.n	16b82 <mbedtls_mpi_shift_l+0xb6>
   16b8c:	b1be      	cbz	r6, 16bbe <mbedtls_mpi_shift_l+0xf2>
   16b8e:	6863      	ldr	r3, [r4, #4]
   16b90:	429d      	cmp	r5, r3
   16b92:	d214      	bcs.n	16bbe <mbedtls_mpi_shift_l+0xf2>
   16b94:	2700      	movs	r7, #0
   16b96:	f1c6 0c20 	rsb	ip, r6, #32
   16b9a:	00ab      	lsls	r3, r5, #2
   16b9c:	68a0      	ldr	r0, [r4, #8]
   16b9e:	3501      	adds	r5, #1
   16ba0:	58c1      	ldr	r1, [r0, r3]
   16ba2:	fa01 f206 	lsl.w	r2, r1, r6
   16ba6:	50c2      	str	r2, [r0, r3]
   16ba8:	68a0      	ldr	r0, [r4, #8]
   16baa:	58c2      	ldr	r2, [r0, r3]
   16bac:	433a      	orrs	r2, r7
   16bae:	50c2      	str	r2, [r0, r3]
   16bb0:	6862      	ldr	r2, [r4, #4]
   16bb2:	fa21 f70c 	lsr.w	r7, r1, ip
   16bb6:	42aa      	cmp	r2, r5
   16bb8:	f103 0304 	add.w	r3, r3, #4
   16bbc:	d8ee      	bhi.n	16b9c <mbedtls_mpi_shift_l+0xd0>
   16bbe:	2000      	movs	r0, #0
   16bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16bc4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
   16bc8:	f10c 0820 	add.w	r8, ip, #32
   16bcc:	e7a1      	b.n	16b12 <mbedtls_mpi_shift_l+0x46>
   16bce:	2104      	movs	r1, #4
   16bd0:	4638      	mov	r0, r7
   16bd2:	f7fd fe57 	bl	14884 <nrf_calloc>
   16bd6:	4680      	mov	r8, r0
   16bd8:	b320      	cbz	r0, 16c24 <mbedtls_mpi_shift_l+0x158>
   16bda:	68a1      	ldr	r1, [r4, #8]
   16bdc:	b189      	cbz	r1, 16c02 <mbedtls_mpi_shift_l+0x136>
   16bde:	6862      	ldr	r2, [r4, #4]
   16be0:	0092      	lsls	r2, r2, #2
   16be2:	f00f f940 	bl	25e66 <memcpy>
   16be6:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   16bea:	1e53      	subs	r3, r2, #1
   16bec:	b13a      	cbz	r2, 16bfe <mbedtls_mpi_shift_l+0x132>
   16bee:	2200      	movs	r2, #0
   16bf0:	3b01      	subs	r3, #1
   16bf2:	1c59      	adds	r1, r3, #1
   16bf4:	6002      	str	r2, [r0, #0]
   16bf6:	f100 0004 	add.w	r0, r0, #4
   16bfa:	d1f9      	bne.n	16bf0 <mbedtls_mpi_shift_l+0x124>
   16bfc:	68a0      	ldr	r0, [r4, #8]
   16bfe:	f7fd fe55 	bl	148ac <nrf_free>
   16c02:	463b      	mov	r3, r7
   16c04:	e9c4 7801 	strd	r7, r8, [r4, #4]
   16c08:	2d00      	cmp	r5, #0
   16c0a:	d0bf      	beq.n	16b8c <mbedtls_mpi_shift_l+0xc0>
   16c0c:	e79f      	b.n	16b4e <mbedtls_mpi_shift_l+0x82>
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d1b2      	bne.n	16b78 <mbedtls_mpi_shift_l+0xac>
   16c12:	2e00      	cmp	r6, #0
   16c14:	d1bb      	bne.n	16b8e <mbedtls_mpi_shift_l+0xc2>
   16c16:	e7d2      	b.n	16bbe <mbedtls_mpi_shift_l+0xf2>
   16c18:	f8de 7000 	ldr.w	r7, [lr]
   16c1c:	4694      	mov	ip, r2
   16c1e:	f04f 0820 	mov.w	r8, #32
   16c22:	e776      	b.n	16b12 <mbedtls_mpi_shift_l+0x46>
   16c24:	f06f 000f 	mvn.w	r0, #15
   16c28:	e7ca      	b.n	16bc0 <mbedtls_mpi_shift_l+0xf4>
   16c2a:	0152      	lsls	r2, r2, #5
   16c2c:	4667      	mov	r7, ip
   16c2e:	f102 0820 	add.w	r8, r2, #32
   16c32:	4694      	mov	ip, r2
   16c34:	e76d      	b.n	16b12 <mbedtls_mpi_shift_l+0x46>
   16c36:	bf00      	nop

00016c38 <mbedtls_mpi_shift_r>:
   16c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c3a:	6844      	ldr	r4, [r0, #4]
   16c3c:	094d      	lsrs	r5, r1, #5
   16c3e:	42ac      	cmp	r4, r5
   16c40:	d33a      	bcc.n	16cb8 <mbedtls_mpi_shift_r+0x80>
   16c42:	f001 011f 	and.w	r1, r1, #31
   16c46:	d032      	beq.n	16cae <mbedtls_mpi_shift_r+0x76>
   16c48:	b1b5      	cbz	r5, 16c78 <mbedtls_mpi_shift_r+0x40>
   16c4a:	2300      	movs	r3, #0
   16c4c:	00aa      	lsls	r2, r5, #2
   16c4e:	6884      	ldr	r4, [r0, #8]
   16c50:	58a6      	ldr	r6, [r4, r2]
   16c52:	3204      	adds	r2, #4
   16c54:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
   16c58:	6844      	ldr	r4, [r0, #4]
   16c5a:	3301      	adds	r3, #1
   16c5c:	1b66      	subs	r6, r4, r5
   16c5e:	429e      	cmp	r6, r3
   16c60:	d8f5      	bhi.n	16c4e <mbedtls_mpi_shift_r+0x16>
   16c62:	429c      	cmp	r4, r3
   16c64:	d908      	bls.n	16c78 <mbedtls_mpi_shift_r+0x40>
   16c66:	2500      	movs	r5, #0
   16c68:	009a      	lsls	r2, r3, #2
   16c6a:	6884      	ldr	r4, [r0, #8]
   16c6c:	3301      	adds	r3, #1
   16c6e:	50a5      	str	r5, [r4, r2]
   16c70:	6844      	ldr	r4, [r0, #4]
   16c72:	3204      	adds	r2, #4
   16c74:	429c      	cmp	r4, r3
   16c76:	d8f8      	bhi.n	16c6a <mbedtls_mpi_shift_r+0x32>
   16c78:	b1b9      	cbz	r1, 16caa <mbedtls_mpi_shift_r+0x72>
   16c7a:	b1b4      	cbz	r4, 16caa <mbedtls_mpi_shift_r+0x72>
   16c7c:	2700      	movs	r7, #0
   16c7e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   16c82:	3b01      	subs	r3, #1
   16c84:	009b      	lsls	r3, r3, #2
   16c86:	f1c1 0c20 	rsb	ip, r1, #32
   16c8a:	6886      	ldr	r6, [r0, #8]
   16c8c:	3c01      	subs	r4, #1
   16c8e:	58f5      	ldr	r5, [r6, r3]
   16c90:	fa25 f201 	lsr.w	r2, r5, r1
   16c94:	50f2      	str	r2, [r6, r3]
   16c96:	6886      	ldr	r6, [r0, #8]
   16c98:	58f2      	ldr	r2, [r6, r3]
   16c9a:	ea42 0207 	orr.w	r2, r2, r7
   16c9e:	50f2      	str	r2, [r6, r3]
   16ca0:	fa05 f70c 	lsl.w	r7, r5, ip
   16ca4:	f1a3 0304 	sub.w	r3, r3, #4
   16ca8:	d1ef      	bne.n	16c8a <mbedtls_mpi_shift_r+0x52>
   16caa:	2000      	movs	r0, #0
   16cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16cae:	b919      	cbnz	r1, 16cb8 <mbedtls_mpi_shift_r+0x80>
   16cb0:	2c00      	cmp	r4, #0
   16cb2:	d0fa      	beq.n	16caa <mbedtls_mpi_shift_r+0x72>
   16cb4:	460b      	mov	r3, r1
   16cb6:	e7d6      	b.n	16c66 <mbedtls_mpi_shift_r+0x2e>
   16cb8:	4605      	mov	r5, r0
   16cba:	b164      	cbz	r4, 16cd6 <mbedtls_mpi_shift_r+0x9e>
   16cbc:	6886      	ldr	r6, [r0, #8]
   16cbe:	00a2      	lsls	r2, r4, #2
   16cc0:	4630      	mov	r0, r6
   16cc2:	2100      	movs	r1, #0
   16cc4:	f00f f8fc 	bl	25ec0 <memset>
   16cc8:	2300      	movs	r3, #0
   16cca:	2201      	movs	r2, #1
   16ccc:	68a9      	ldr	r1, [r5, #8]
   16cce:	4618      	mov	r0, r3
   16cd0:	600b      	str	r3, [r1, #0]
   16cd2:	602a      	str	r2, [r5, #0]
   16cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16cd6:	2104      	movs	r1, #4
   16cd8:	2001      	movs	r0, #1
   16cda:	f7fd fdd3 	bl	14884 <nrf_calloc>
   16cde:	4606      	mov	r6, r0
   16ce0:	b1b8      	cbz	r0, 16d12 <mbedtls_mpi_shift_r+0xda>
   16ce2:	68a9      	ldr	r1, [r5, #8]
   16ce4:	b181      	cbz	r1, 16d08 <mbedtls_mpi_shift_r+0xd0>
   16ce6:	686a      	ldr	r2, [r5, #4]
   16ce8:	0092      	lsls	r2, r2, #2
   16cea:	f00f f8bc 	bl	25e66 <memcpy>
   16cee:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   16cf2:	1e53      	subs	r3, r2, #1
   16cf4:	b132      	cbz	r2, 16d04 <mbedtls_mpi_shift_r+0xcc>
   16cf6:	3b01      	subs	r3, #1
   16cf8:	1c5a      	adds	r2, r3, #1
   16cfa:	6004      	str	r4, [r0, #0]
   16cfc:	f100 0004 	add.w	r0, r0, #4
   16d00:	d1f9      	bne.n	16cf6 <mbedtls_mpi_shift_r+0xbe>
   16d02:	68a8      	ldr	r0, [r5, #8]
   16d04:	f7fd fdd2 	bl	148ac <nrf_free>
   16d08:	2301      	movs	r3, #1
   16d0a:	2204      	movs	r2, #4
   16d0c:	e9c5 3601 	strd	r3, r6, [r5, #4]
   16d10:	e7d6      	b.n	16cc0 <mbedtls_mpi_shift_r+0x88>
   16d12:	f06f 000f 	mvn.w	r0, #15
   16d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016d18 <mbedtls_mpi_cmp_mpi>:
   16d18:	b470      	push	{r4, r5, r6}
   16d1a:	6843      	ldr	r3, [r0, #4]
   16d1c:	684a      	ldr	r2, [r1, #4]
   16d1e:	b173      	cbz	r3, 16d3e <mbedtls_mpi_cmp_mpi+0x26>
   16d20:	6884      	ldr	r4, [r0, #8]
   16d22:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
   16d26:	3d01      	subs	r5, #1
   16d28:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   16d2c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   16d30:	b11e      	cbz	r6, 16d3a <mbedtls_mpi_cmp_mpi+0x22>
   16d32:	e01a      	b.n	16d6a <mbedtls_mpi_cmp_mpi+0x52>
   16d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   16d38:	b9bd      	cbnz	r5, 16d6a <mbedtls_mpi_cmp_mpi+0x52>
   16d3a:	3b01      	subs	r3, #1
   16d3c:	d1fa      	bne.n	16d34 <mbedtls_mpi_cmp_mpi+0x1c>
   16d3e:	b18a      	cbz	r2, 16d64 <mbedtls_mpi_cmp_mpi+0x4c>
   16d40:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
   16d44:	688e      	ldr	r6, [r1, #8]
   16d46:	3c01      	subs	r4, #1
   16d48:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   16d4c:	b9cd      	cbnz	r5, 16d82 <mbedtls_mpi_cmp_mpi+0x6a>
   16d4e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   16d52:	e002      	b.n	16d5a <mbedtls_mpi_cmp_mpi+0x42>
   16d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   16d58:	b98d      	cbnz	r5, 16d7e <mbedtls_mpi_cmp_mpi+0x66>
   16d5a:	3a01      	subs	r2, #1
   16d5c:	d1fa      	bne.n	16d54 <mbedtls_mpi_cmp_mpi+0x3c>
   16d5e:	2b00      	cmp	r3, #0
   16d60:	d037      	beq.n	16dd2 <mbedtls_mpi_cmp_mpi+0xba>
   16d62:	6802      	ldr	r2, [r0, #0]
   16d64:	4610      	mov	r0, r2
   16d66:	bc70      	pop	{r4, r5, r6}
   16d68:	4770      	bx	lr
   16d6a:	2a00      	cmp	r2, #0
   16d6c:	d0f9      	beq.n	16d62 <mbedtls_mpi_cmp_mpi+0x4a>
   16d6e:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
   16d72:	688e      	ldr	r6, [r1, #8]
   16d74:	3c01      	subs	r4, #1
   16d76:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   16d7a:	2d00      	cmp	r5, #0
   16d7c:	d0e7      	beq.n	16d4e <mbedtls_mpi_cmp_mpi+0x36>
   16d7e:	4293      	cmp	r3, r2
   16d80:	d8ef      	bhi.n	16d62 <mbedtls_mpi_cmp_mpi+0x4a>
   16d82:	4293      	cmp	r3, r2
   16d84:	6809      	ldr	r1, [r1, #0]
   16d86:	d203      	bcs.n	16d90 <mbedtls_mpi_cmp_mpi+0x78>
   16d88:	bc70      	pop	{r4, r5, r6}
   16d8a:	424a      	negs	r2, r1
   16d8c:	4610      	mov	r0, r2
   16d8e:	4770      	bx	lr
   16d90:	6802      	ldr	r2, [r0, #0]
   16d92:	2a00      	cmp	r2, #0
   16d94:	dd01      	ble.n	16d9a <mbedtls_mpi_cmp_mpi+0x82>
   16d96:	2900      	cmp	r1, #0
   16d98:	db24      	blt.n	16de4 <mbedtls_mpi_cmp_mpi+0xcc>
   16d9a:	2900      	cmp	r1, #0
   16d9c:	dd01      	ble.n	16da2 <mbedtls_mpi_cmp_mpi+0x8a>
   16d9e:	2a00      	cmp	r2, #0
   16da0:	db1d      	blt.n	16dde <mbedtls_mpi_cmp_mpi+0xc6>
   16da2:	b1b3      	cbz	r3, 16dd2 <mbedtls_mpi_cmp_mpi+0xba>
   16da4:	6884      	ldr	r4, [r0, #8]
   16da6:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   16daa:	3901      	subs	r1, #1
   16dac:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
   16db0:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
   16db4:	0089      	lsls	r1, r1, #2
   16db6:	4285      	cmp	r5, r0
   16db8:	440c      	add	r4, r1
   16dba:	4431      	add	r1, r6
   16dbc:	d8d2      	bhi.n	16d64 <mbedtls_mpi_cmp_mpi+0x4c>
   16dbe:	d30c      	bcc.n	16dda <mbedtls_mpi_cmp_mpi+0xc2>
   16dc0:	3b01      	subs	r3, #1
   16dc2:	d006      	beq.n	16dd2 <mbedtls_mpi_cmp_mpi+0xba>
   16dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   16dc8:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   16dcc:	4285      	cmp	r5, r0
   16dce:	d9f6      	bls.n	16dbe <mbedtls_mpi_cmp_mpi+0xa6>
   16dd0:	e7c8      	b.n	16d64 <mbedtls_mpi_cmp_mpi+0x4c>
   16dd2:	461a      	mov	r2, r3
   16dd4:	bc70      	pop	{r4, r5, r6}
   16dd6:	4610      	mov	r0, r2
   16dd8:	4770      	bx	lr
   16dda:	4252      	negs	r2, r2
   16ddc:	e7c2      	b.n	16d64 <mbedtls_mpi_cmp_mpi+0x4c>
   16dde:	f04f 32ff 	mov.w	r2, #4294967295
   16de2:	e7bf      	b.n	16d64 <mbedtls_mpi_cmp_mpi+0x4c>
   16de4:	2201      	movs	r2, #1
   16de6:	e7bd      	b.n	16d64 <mbedtls_mpi_cmp_mpi+0x4c>

00016de8 <mbedtls_mpi_cmp_int>:
   16de8:	b4f0      	push	{r4, r5, r6, r7}
   16dea:	2900      	cmp	r1, #0
   16dec:	4605      	mov	r5, r0
   16dee:	6843      	ldr	r3, [r0, #4]
   16df0:	db32      	blt.n	16e58 <mbedtls_mpi_cmp_int+0x70>
   16df2:	2b00      	cmp	r3, #0
   16df4:	d042      	beq.n	16e7c <mbedtls_mpi_cmp_int+0x94>
   16df6:	6886      	ldr	r6, [r0, #8]
   16df8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16dfc:	3a01      	subs	r2, #1
   16dfe:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   16e02:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   16e06:	b968      	cbnz	r0, 16e24 <mbedtls_mpi_cmp_int+0x3c>
   16e08:	f04f 30ff 	mov.w	r0, #4294967295
   16e0c:	2701      	movs	r7, #1
   16e0e:	e002      	b.n	16e16 <mbedtls_mpi_cmp_int+0x2e>
   16e10:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   16e14:	b93c      	cbnz	r4, 16e26 <mbedtls_mpi_cmp_int+0x3e>
   16e16:	3b01      	subs	r3, #1
   16e18:	d1fa      	bne.n	16e10 <mbedtls_mpi_cmp_int+0x28>
   16e1a:	2900      	cmp	r1, #0
   16e1c:	bf08      	it	eq
   16e1e:	2000      	moveq	r0, #0
   16e20:	bcf0      	pop	{r4, r5, r6, r7}
   16e22:	4770      	bx	lr
   16e24:	2701      	movs	r7, #1
   16e26:	b1a1      	cbz	r1, 16e52 <mbedtls_mpi_cmp_int+0x6a>
   16e28:	2b01      	cmp	r3, #1
   16e2a:	d812      	bhi.n	16e52 <mbedtls_mpi_cmp_int+0x6a>
   16e2c:	6828      	ldr	r0, [r5, #0]
   16e2e:	2800      	cmp	r0, #0
   16e30:	dd01      	ble.n	16e36 <mbedtls_mpi_cmp_int+0x4e>
   16e32:	1c7b      	adds	r3, r7, #1
   16e34:	d01e      	beq.n	16e74 <mbedtls_mpi_cmp_int+0x8c>
   16e36:	2f01      	cmp	r7, #1
   16e38:	d101      	bne.n	16e3e <mbedtls_mpi_cmp_int+0x56>
   16e3a:	2800      	cmp	r0, #0
   16e3c:	db24      	blt.n	16e88 <mbedtls_mpi_cmp_int+0xa0>
   16e3e:	2900      	cmp	r1, #0
   16e40:	6833      	ldr	r3, [r6, #0]
   16e42:	bfb8      	it	lt
   16e44:	4249      	neglt	r1, r1
   16e46:	4299      	cmp	r1, r3
   16e48:	d3ea      	bcc.n	16e20 <mbedtls_mpi_cmp_int+0x38>
   16e4a:	d815      	bhi.n	16e78 <mbedtls_mpi_cmp_int+0x90>
   16e4c:	bcf0      	pop	{r4, r5, r6, r7}
   16e4e:	2000      	movs	r0, #0
   16e50:	4770      	bx	lr
   16e52:	6828      	ldr	r0, [r5, #0]
   16e54:	bcf0      	pop	{r4, r5, r6, r7}
   16e56:	4770      	bx	lr
   16e58:	b163      	cbz	r3, 16e74 <mbedtls_mpi_cmp_int+0x8c>
   16e5a:	6886      	ldr	r6, [r0, #8]
   16e5c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16e60:	3a01      	subs	r2, #1
   16e62:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   16e66:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   16e6a:	b950      	cbnz	r0, 16e82 <mbedtls_mpi_cmp_int+0x9a>
   16e6c:	2001      	movs	r0, #1
   16e6e:	f04f 37ff 	mov.w	r7, #4294967295
   16e72:	e7d0      	b.n	16e16 <mbedtls_mpi_cmp_int+0x2e>
   16e74:	2001      	movs	r0, #1
   16e76:	e7d3      	b.n	16e20 <mbedtls_mpi_cmp_int+0x38>
   16e78:	4240      	negs	r0, r0
   16e7a:	e7d1      	b.n	16e20 <mbedtls_mpi_cmp_int+0x38>
   16e7c:	f04f 30ff 	mov.w	r0, #4294967295
   16e80:	e7cb      	b.n	16e1a <mbedtls_mpi_cmp_int+0x32>
   16e82:	f04f 37ff 	mov.w	r7, #4294967295
   16e86:	e7cf      	b.n	16e28 <mbedtls_mpi_cmp_int+0x40>
   16e88:	f04f 30ff 	mov.w	r0, #4294967295
   16e8c:	e7c8      	b.n	16e20 <mbedtls_mpi_cmp_int+0x38>
   16e8e:	bf00      	nop

00016e90 <mbedtls_mpi_add_abs>:
   16e90:	4290      	cmp	r0, r2
   16e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e96:	4607      	mov	r7, r0
   16e98:	460c      	mov	r4, r1
   16e9a:	d006      	beq.n	16eaa <mbedtls_mpi_add_abs+0x1a>
   16e9c:	4288      	cmp	r0, r1
   16e9e:	4615      	mov	r5, r2
   16ea0:	d002      	beq.n	16ea8 <mbedtls_mpi_add_abs+0x18>
   16ea2:	f7ff fafb 	bl	1649c <mbedtls_mpi_copy>
   16ea6:	b9a0      	cbnz	r0, 16ed2 <mbedtls_mpi_add_abs+0x42>
   16ea8:	462c      	mov	r4, r5
   16eaa:	2301      	movs	r3, #1
   16eac:	603b      	str	r3, [r7, #0]
   16eae:	6865      	ldr	r5, [r4, #4]
   16eb0:	b175      	cbz	r5, 16ed0 <mbedtls_mpi_add_abs+0x40>
   16eb2:	68a3      	ldr	r3, [r4, #8]
   16eb4:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
   16eb8:	3a01      	subs	r2, #1
   16eba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   16ebe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   16ec2:	b119      	cbz	r1, 16ecc <mbedtls_mpi_add_abs+0x3c>
   16ec4:	e007      	b.n	16ed6 <mbedtls_mpi_add_abs+0x46>
   16ec6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   16eca:	b921      	cbnz	r1, 16ed6 <mbedtls_mpi_add_abs+0x46>
   16ecc:	3d01      	subs	r5, #1
   16ece:	d1fa      	bne.n	16ec6 <mbedtls_mpi_add_abs+0x36>
   16ed0:	2000      	movs	r0, #0
   16ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16ed6:	f242 7210 	movw	r2, #10000	; 0x2710
   16eda:	4295      	cmp	r5, r2
   16edc:	d875      	bhi.n	16fca <mbedtls_mpi_add_abs+0x13a>
   16ede:	687a      	ldr	r2, [r7, #4]
   16ee0:	42aa      	cmp	r2, r5
   16ee2:	d276      	bcs.n	16fd2 <mbedtls_mpi_add_abs+0x142>
   16ee4:	2104      	movs	r1, #4
   16ee6:	4628      	mov	r0, r5
   16ee8:	f7fd fccc 	bl	14884 <nrf_calloc>
   16eec:	4606      	mov	r6, r0
   16eee:	2800      	cmp	r0, #0
   16ef0:	d06b      	beq.n	16fca <mbedtls_mpi_add_abs+0x13a>
   16ef2:	68b9      	ldr	r1, [r7, #8]
   16ef4:	b189      	cbz	r1, 16f1a <mbedtls_mpi_add_abs+0x8a>
   16ef6:	687a      	ldr	r2, [r7, #4]
   16ef8:	0092      	lsls	r2, r2, #2
   16efa:	f00e ffb4 	bl	25e66 <memcpy>
   16efe:	e9d7 2001 	ldrd	r2, r0, [r7, #4]
   16f02:	1e53      	subs	r3, r2, #1
   16f04:	b13a      	cbz	r2, 16f16 <mbedtls_mpi_add_abs+0x86>
   16f06:	2200      	movs	r2, #0
   16f08:	3b01      	subs	r3, #1
   16f0a:	1c59      	adds	r1, r3, #1
   16f0c:	6002      	str	r2, [r0, #0]
   16f0e:	f100 0004 	add.w	r0, r0, #4
   16f12:	d1f9      	bne.n	16f08 <mbedtls_mpi_add_abs+0x78>
   16f14:	68b8      	ldr	r0, [r7, #8]
   16f16:	f7fd fcc9 	bl	148ac <nrf_free>
   16f1a:	e9c7 5601 	strd	r5, r6, [r7, #4]
   16f1e:	68a3      	ldr	r3, [r4, #8]
   16f20:	2400      	movs	r4, #0
   16f22:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   16f26:	f1a3 0c04 	sub.w	ip, r3, #4
   16f2a:	eb06 000a 	add.w	r0, r6, sl
   16f2e:	2200      	movs	r2, #0
   16f30:	6833      	ldr	r3, [r6, #0]
   16f32:	f10c 0c04 	add.w	ip, ip, #4
   16f36:	f8dc 1000 	ldr.w	r1, [ip]
   16f3a:	191b      	adds	r3, r3, r4
   16f3c:	4614      	mov	r4, r2
   16f3e:	bf28      	it	cs
   16f40:	2201      	movcs	r2, #1
   16f42:	185b      	adds	r3, r3, r1
   16f44:	bf28      	it	cs
   16f46:	2401      	movcs	r4, #1
   16f48:	f846 3b04 	str.w	r3, [r6], #4
   16f4c:	4286      	cmp	r6, r0
   16f4e:	4414      	add	r4, r2
   16f50:	d1ed      	bne.n	16f2e <mbedtls_mpi_add_abs+0x9e>
   16f52:	2c00      	cmp	r4, #0
   16f54:	d0bc      	beq.n	16ed0 <mbedtls_mpi_add_abs+0x40>
   16f56:	f242 7810 	movw	r8, #10000	; 0x2710
   16f5a:	f04f 0900 	mov.w	r9, #0
   16f5e:	e00f      	b.n	16f80 <mbedtls_mpi_add_abs+0xf0>
   16f60:	68bd      	ldr	r5, [r7, #8]
   16f62:	eb05 000a 	add.w	r0, r5, sl
   16f66:	6803      	ldr	r3, [r0, #0]
   16f68:	2200      	movs	r2, #0
   16f6a:	191c      	adds	r4, r3, r4
   16f6c:	bf28      	it	cs
   16f6e:	2201      	movcs	r2, #1
   16f70:	f840 4b04 	str.w	r4, [r0], #4
   16f74:	f10a 0a04 	add.w	sl, sl, #4
   16f78:	4635      	mov	r5, r6
   16f7a:	2401      	movs	r4, #1
   16f7c:	2a00      	cmp	r2, #0
   16f7e:	d0a7      	beq.n	16ed0 <mbedtls_mpi_add_abs+0x40>
   16f80:	687b      	ldr	r3, [r7, #4]
   16f82:	1c6e      	adds	r6, r5, #1
   16f84:	42ab      	cmp	r3, r5
   16f86:	d8ee      	bhi.n	16f66 <mbedtls_mpi_add_abs+0xd6>
   16f88:	4546      	cmp	r6, r8
   16f8a:	d81e      	bhi.n	16fca <mbedtls_mpi_add_abs+0x13a>
   16f8c:	42b3      	cmp	r3, r6
   16f8e:	d2e7      	bcs.n	16f60 <mbedtls_mpi_add_abs+0xd0>
   16f90:	2104      	movs	r1, #4
   16f92:	4630      	mov	r0, r6
   16f94:	f7fd fc76 	bl	14884 <nrf_calloc>
   16f98:	4605      	mov	r5, r0
   16f9a:	b1b0      	cbz	r0, 16fca <mbedtls_mpi_add_abs+0x13a>
   16f9c:	68b9      	ldr	r1, [r7, #8]
   16f9e:	b189      	cbz	r1, 16fc4 <mbedtls_mpi_add_abs+0x134>
   16fa0:	687a      	ldr	r2, [r7, #4]
   16fa2:	0092      	lsls	r2, r2, #2
   16fa4:	f00e ff5f 	bl	25e66 <memcpy>
   16fa8:	e9d7 2001 	ldrd	r2, r0, [r7, #4]
   16fac:	1e53      	subs	r3, r2, #1
   16fae:	b13a      	cbz	r2, 16fc0 <mbedtls_mpi_add_abs+0x130>
   16fb0:	3b01      	subs	r3, #1
   16fb2:	1c5a      	adds	r2, r3, #1
   16fb4:	f8c0 9000 	str.w	r9, [r0]
   16fb8:	f100 0004 	add.w	r0, r0, #4
   16fbc:	d1f8      	bne.n	16fb0 <mbedtls_mpi_add_abs+0x120>
   16fbe:	68b8      	ldr	r0, [r7, #8]
   16fc0:	f7fd fc74 	bl	148ac <nrf_free>
   16fc4:	e9c7 6501 	strd	r6, r5, [r7, #4]
   16fc8:	e7cb      	b.n	16f62 <mbedtls_mpi_add_abs+0xd2>
   16fca:	f06f 000f 	mvn.w	r0, #15
   16fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16fd2:	68be      	ldr	r6, [r7, #8]
   16fd4:	e7a4      	b.n	16f20 <mbedtls_mpi_add_abs+0x90>
   16fd6:	bf00      	nop

00016fd8 <mbedtls_mpi_sub_abs>:
   16fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fda:	684b      	ldr	r3, [r1, #4]
   16fdc:	460d      	mov	r5, r1
   16fde:	b085      	sub	sp, #20
   16fe0:	4614      	mov	r4, r2
   16fe2:	4606      	mov	r6, r0
   16fe4:	6851      	ldr	r1, [r2, #4]
   16fe6:	b17b      	cbz	r3, 17008 <mbedtls_mpi_sub_abs+0x30>
   16fe8:	68a8      	ldr	r0, [r5, #8]
   16fea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16fee:	3a01      	subs	r2, #1
   16ff0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   16ff4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   16ff8:	b127      	cbz	r7, 17004 <mbedtls_mpi_sub_abs+0x2c>
   16ffa:	e04f      	b.n	1709c <mbedtls_mpi_sub_abs+0xc4>
   16ffc:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   17000:	2a00      	cmp	r2, #0
   17002:	d14b      	bne.n	1709c <mbedtls_mpi_sub_abs+0xc4>
   17004:	3b01      	subs	r3, #1
   17006:	d1f9      	bne.n	16ffc <mbedtls_mpi_sub_abs+0x24>
   17008:	b189      	cbz	r1, 1702e <mbedtls_mpi_sub_abs+0x56>
   1700a:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   1700e:	68a7      	ldr	r7, [r4, #8]
   17010:	3801      	subs	r0, #1
   17012:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   17016:	2a00      	cmp	r2, #0
   17018:	f040 8099 	bne.w	1714e <mbedtls_mpi_sub_abs+0x176>
   1701c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17020:	e003      	b.n	1702a <mbedtls_mpi_sub_abs+0x52>
   17022:	f850 2d04 	ldr.w	r2, [r0, #-4]!
   17026:	2a00      	cmp	r2, #0
   17028:	d142      	bne.n	170b0 <mbedtls_mpi_sub_abs+0xd8>
   1702a:	3901      	subs	r1, #1
   1702c:	d1f9      	bne.n	17022 <mbedtls_mpi_sub_abs+0x4a>
   1702e:	2300      	movs	r3, #0
   17030:	2201      	movs	r2, #1
   17032:	42b4      	cmp	r4, r6
   17034:	e9cd 2301 	strd	r2, r3, [sp, #4]
   17038:	9303      	str	r3, [sp, #12]
   1703a:	d07f      	beq.n	1713c <mbedtls_mpi_sub_abs+0x164>
   1703c:	42b5      	cmp	r5, r6
   1703e:	d005      	beq.n	1704c <mbedtls_mpi_sub_abs+0x74>
   17040:	4629      	mov	r1, r5
   17042:	4630      	mov	r0, r6
   17044:	f7ff fa2a 	bl	1649c <mbedtls_mpi_copy>
   17048:	4607      	mov	r7, r0
   1704a:	b9a8      	cbnz	r0, 17078 <mbedtls_mpi_sub_abs+0xa0>
   1704c:	2301      	movs	r3, #1
   1704e:	6033      	str	r3, [r6, #0]
   17050:	6860      	ldr	r0, [r4, #4]
   17052:	b180      	cbz	r0, 17076 <mbedtls_mpi_sub_abs+0x9e>
   17054:	f8d4 c008 	ldr.w	ip, [r4, #8]
   17058:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1705c:	3b01      	subs	r3, #1
   1705e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   17062:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
   17066:	b122      	cbz	r2, 17072 <mbedtls_mpi_sub_abs+0x9a>
   17068:	e042      	b.n	170f0 <mbedtls_mpi_sub_abs+0x118>
   1706a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1706e:	2a00      	cmp	r2, #0
   17070:	d13e      	bne.n	170f0 <mbedtls_mpi_sub_abs+0x118>
   17072:	3801      	subs	r0, #1
   17074:	d1f9      	bne.n	1706a <mbedtls_mpi_sub_abs+0x92>
   17076:	2700      	movs	r7, #0
   17078:	9803      	ldr	r0, [sp, #12]
   1707a:	b160      	cbz	r0, 17096 <mbedtls_mpi_sub_abs+0xbe>
   1707c:	9a02      	ldr	r2, [sp, #8]
   1707e:	1e53      	subs	r3, r2, #1
   17080:	b13a      	cbz	r2, 17092 <mbedtls_mpi_sub_abs+0xba>
   17082:	2200      	movs	r2, #0
   17084:	3b01      	subs	r3, #1
   17086:	1c59      	adds	r1, r3, #1
   17088:	6002      	str	r2, [r0, #0]
   1708a:	f100 0004 	add.w	r0, r0, #4
   1708e:	d1f9      	bne.n	17084 <mbedtls_mpi_sub_abs+0xac>
   17090:	9803      	ldr	r0, [sp, #12]
   17092:	f7fd fc0b 	bl	148ac <nrf_free>
   17096:	4638      	mov	r0, r7
   17098:	b005      	add	sp, #20
   1709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1709c:	2900      	cmp	r1, #0
   1709e:	d0c6      	beq.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170a0:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
   170a4:	68a7      	ldr	r7, [r4, #8]
   170a6:	3801      	subs	r0, #1
   170a8:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   170ac:	2a00      	cmp	r2, #0
   170ae:	d0b5      	beq.n	1701c <mbedtls_mpi_sub_abs+0x44>
   170b0:	428b      	cmp	r3, r1
   170b2:	d8bc      	bhi.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170b4:	d34b      	bcc.n	1714e <mbedtls_mpi_sub_abs+0x176>
   170b6:	2b00      	cmp	r3, #0
   170b8:	d0b9      	beq.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170ba:	68a8      	ldr	r0, [r5, #8]
   170bc:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   170c0:	3901      	subs	r1, #1
   170c2:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
   170c6:	f857 e021 	ldr.w	lr, [r7, r1, lsl #2]
   170ca:	0089      	lsls	r1, r1, #2
   170cc:	45e6      	cmp	lr, ip
   170ce:	4408      	add	r0, r1
   170d0:	eb07 0201 	add.w	r2, r7, r1
   170d4:	d3ab      	bcc.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170d6:	d83a      	bhi.n	1714e <mbedtls_mpi_sub_abs+0x176>
   170d8:	4601      	mov	r1, r0
   170da:	e006      	b.n	170ea <mbedtls_mpi_sub_abs+0x112>
   170dc:	f851 7d04 	ldr.w	r7, [r1, #-4]!
   170e0:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   170e4:	4287      	cmp	r7, r0
   170e6:	d8a2      	bhi.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170e8:	d331      	bcc.n	1714e <mbedtls_mpi_sub_abs+0x176>
   170ea:	3b01      	subs	r3, #1
   170ec:	d1f6      	bne.n	170dc <mbedtls_mpi_sub_abs+0x104>
   170ee:	e79e      	b.n	1702e <mbedtls_mpi_sub_abs+0x56>
   170f0:	2500      	movs	r5, #0
   170f2:	462b      	mov	r3, r5
   170f4:	68b1      	ldr	r1, [r6, #8]
   170f6:	f851 6b04 	ldr.w	r6, [r1], #4
   170fa:	3501      	adds	r5, #1
   170fc:	1af2      	subs	r2, r6, r3
   170fe:	f841 2c04 	str.w	r2, [r1, #-4]
   17102:	f85c 7b04 	ldr.w	r7, [ip], #4
   17106:	460c      	mov	r4, r1
   17108:	42ba      	cmp	r2, r7
   1710a:	bf2c      	ite	cs
   1710c:	f04f 0e00 	movcs.w	lr, #0
   17110:	f04f 0e01 	movcc.w	lr, #1
   17114:	1bd2      	subs	r2, r2, r7
   17116:	429e      	cmp	r6, r3
   17118:	bf2c      	ite	cs
   1711a:	4673      	movcs	r3, lr
   1711c:	f10e 0301 	addcc.w	r3, lr, #1
   17120:	4285      	cmp	r5, r0
   17122:	f841 2c04 	str.w	r2, [r1, #-4]
   17126:	d3e6      	bcc.n	170f6 <mbedtls_mpi_sub_abs+0x11e>
   17128:	b90b      	cbnz	r3, 1712e <mbedtls_mpi_sub_abs+0x156>
   1712a:	e7a4      	b.n	17076 <mbedtls_mpi_sub_abs+0x9e>
   1712c:	2301      	movs	r3, #1
   1712e:	6822      	ldr	r2, [r4, #0]
   17130:	1ad1      	subs	r1, r2, r3
   17132:	429a      	cmp	r2, r3
   17134:	f844 1b04 	str.w	r1, [r4], #4
   17138:	d3f8      	bcc.n	1712c <mbedtls_mpi_sub_abs+0x154>
   1713a:	e79c      	b.n	17076 <mbedtls_mpi_sub_abs+0x9e>
   1713c:	4621      	mov	r1, r4
   1713e:	a801      	add	r0, sp, #4
   17140:	f7ff f9ac 	bl	1649c <mbedtls_mpi_copy>
   17144:	4607      	mov	r7, r0
   17146:	2800      	cmp	r0, #0
   17148:	d196      	bne.n	17078 <mbedtls_mpi_sub_abs+0xa0>
   1714a:	ac01      	add	r4, sp, #4
   1714c:	e776      	b.n	1703c <mbedtls_mpi_sub_abs+0x64>
   1714e:	f06f 0709 	mvn.w	r7, #9
   17152:	4638      	mov	r0, r7
   17154:	b005      	add	sp, #20
   17156:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017158 <mbedtls_mpi_add_mpi>:
   17158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1715c:	680c      	ldr	r4, [r1, #0]
   1715e:	6813      	ldr	r3, [r2, #0]
   17160:	4605      	mov	r5, r0
   17162:	fb03 f304 	mul.w	r3, r3, r4
   17166:	2b00      	cmp	r3, #0
   17168:	da39      	bge.n	171de <mbedtls_mpi_add_mpi+0x86>
   1716a:	684b      	ldr	r3, [r1, #4]
   1716c:	4617      	mov	r7, r2
   1716e:	460e      	mov	r6, r1
   17170:	6852      	ldr	r2, [r2, #4]
   17172:	b183      	cbz	r3, 17196 <mbedtls_mpi_add_mpi+0x3e>
   17174:	6889      	ldr	r1, [r1, #8]
   17176:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   1717a:	3801      	subs	r0, #1
   1717c:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   17180:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   17184:	f1bc 0f00 	cmp.w	ip, #0
   17188:	d003      	beq.n	17192 <mbedtls_mpi_add_mpi+0x3a>
   1718a:	e02e      	b.n	171ea <mbedtls_mpi_add_mpi+0x92>
   1718c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17190:	bb58      	cbnz	r0, 171ea <mbedtls_mpi_add_mpi+0x92>
   17192:	3b01      	subs	r3, #1
   17194:	d1fa      	bne.n	1718c <mbedtls_mpi_add_mpi+0x34>
   17196:	b17a      	cbz	r2, 171b8 <mbedtls_mpi_add_mpi+0x60>
   17198:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   1719c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   171a0:	3901      	subs	r1, #1
   171a2:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   171a6:	b978      	cbnz	r0, 171c8 <mbedtls_mpi_add_mpi+0x70>
   171a8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   171ac:	e002      	b.n	171b4 <mbedtls_mpi_add_mpi+0x5c>
   171ae:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   171b2:	bb28      	cbnz	r0, 17200 <mbedtls_mpi_add_mpi+0xa8>
   171b4:	3a01      	subs	r2, #1
   171b6:	d1fa      	bne.n	171ae <mbedtls_mpi_add_mpi+0x56>
   171b8:	463a      	mov	r2, r7
   171ba:	4631      	mov	r1, r6
   171bc:	4628      	mov	r0, r5
   171be:	f7ff ff0b 	bl	16fd8 <mbedtls_mpi_sub_abs>
   171c2:	b148      	cbz	r0, 171d8 <mbedtls_mpi_add_mpi+0x80>
   171c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171c8:	4632      	mov	r2, r6
   171ca:	4639      	mov	r1, r7
   171cc:	4628      	mov	r0, r5
   171ce:	f7ff ff03 	bl	16fd8 <mbedtls_mpi_sub_abs>
   171d2:	2800      	cmp	r0, #0
   171d4:	d1f6      	bne.n	171c4 <mbedtls_mpi_add_mpi+0x6c>
   171d6:	4264      	negs	r4, r4
   171d8:	602c      	str	r4, [r5, #0]
   171da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   171de:	f7ff fe57 	bl	16e90 <mbedtls_mpi_add_abs>
   171e2:	2800      	cmp	r0, #0
   171e4:	d1ee      	bne.n	171c4 <mbedtls_mpi_add_mpi+0x6c>
   171e6:	602c      	str	r4, [r5, #0]
   171e8:	e7f7      	b.n	171da <mbedtls_mpi_add_mpi+0x82>
   171ea:	2a00      	cmp	r2, #0
   171ec:	d0e4      	beq.n	171b8 <mbedtls_mpi_add_mpi+0x60>
   171ee:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   171f2:	f8d7 c008 	ldr.w	ip, [r7, #8]
   171f6:	3901      	subs	r1, #1
   171f8:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   171fc:	2800      	cmp	r0, #0
   171fe:	d0d3      	beq.n	171a8 <mbedtls_mpi_add_mpi+0x50>
   17200:	4293      	cmp	r3, r2
   17202:	d8d9      	bhi.n	171b8 <mbedtls_mpi_add_mpi+0x60>
   17204:	d3e0      	bcc.n	171c8 <mbedtls_mpi_add_mpi+0x70>
   17206:	2b00      	cmp	r3, #0
   17208:	d0d6      	beq.n	171b8 <mbedtls_mpi_add_mpi+0x60>
   1720a:	68b0      	ldr	r0, [r6, #8]
   1720c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   17210:	3901      	subs	r1, #1
   17212:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
   17216:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
   1721a:	0089      	lsls	r1, r1, #2
   1721c:	45f0      	cmp	r8, lr
   1721e:	4408      	add	r0, r1
   17220:	eb0c 0201 	add.w	r2, ip, r1
   17224:	d8c8      	bhi.n	171b8 <mbedtls_mpi_add_mpi+0x60>
   17226:	d3cf      	bcc.n	171c8 <mbedtls_mpi_add_mpi+0x70>
   17228:	4601      	mov	r1, r0
   1722a:	e006      	b.n	1723a <mbedtls_mpi_add_mpi+0xe2>
   1722c:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   17230:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   17234:	4584      	cmp	ip, r0
   17236:	d8bf      	bhi.n	171b8 <mbedtls_mpi_add_mpi+0x60>
   17238:	d3c6      	bcc.n	171c8 <mbedtls_mpi_add_mpi+0x70>
   1723a:	3b01      	subs	r3, #1
   1723c:	d1f6      	bne.n	1722c <mbedtls_mpi_add_mpi+0xd4>
   1723e:	e7bb      	b.n	171b8 <mbedtls_mpi_add_mpi+0x60>

00017240 <mbedtls_mpi_sub_mpi>:
   17240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17244:	680c      	ldr	r4, [r1, #0]
   17246:	6813      	ldr	r3, [r2, #0]
   17248:	4605      	mov	r5, r0
   1724a:	fb03 f304 	mul.w	r3, r3, r4
   1724e:	2b00      	cmp	r3, #0
   17250:	dd64      	ble.n	1731c <mbedtls_mpi_sub_mpi+0xdc>
   17252:	684b      	ldr	r3, [r1, #4]
   17254:	4617      	mov	r7, r2
   17256:	460e      	mov	r6, r1
   17258:	6852      	ldr	r2, [r2, #4]
   1725a:	b183      	cbz	r3, 1727e <mbedtls_mpi_sub_mpi+0x3e>
   1725c:	6889      	ldr	r1, [r1, #8]
   1725e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   17262:	3801      	subs	r0, #1
   17264:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   17268:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1726c:	f1bc 0f00 	cmp.w	ip, #0
   17270:	d003      	beq.n	1727a <mbedtls_mpi_sub_mpi+0x3a>
   17272:	e01f      	b.n	172b4 <mbedtls_mpi_sub_mpi+0x74>
   17274:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17278:	b9e0      	cbnz	r0, 172b4 <mbedtls_mpi_sub_mpi+0x74>
   1727a:	3b01      	subs	r3, #1
   1727c:	d1fa      	bne.n	17274 <mbedtls_mpi_sub_mpi+0x34>
   1727e:	b182      	cbz	r2, 172a2 <mbedtls_mpi_sub_mpi+0x62>
   17280:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   17284:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17288:	3901      	subs	r1, #1
   1728a:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   1728e:	2800      	cmp	r0, #0
   17290:	d13b      	bne.n	1730a <mbedtls_mpi_sub_mpi+0xca>
   17292:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   17296:	e002      	b.n	1729e <mbedtls_mpi_sub_mpi+0x5e>
   17298:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1729c:	b9a8      	cbnz	r0, 172ca <mbedtls_mpi_sub_mpi+0x8a>
   1729e:	3a01      	subs	r2, #1
   172a0:	d1fa      	bne.n	17298 <mbedtls_mpi_sub_mpi+0x58>
   172a2:	463a      	mov	r2, r7
   172a4:	4631      	mov	r1, r6
   172a6:	4628      	mov	r0, r5
   172a8:	f7ff fe96 	bl	16fd8 <mbedtls_mpi_sub_abs>
   172ac:	b900      	cbnz	r0, 172b0 <mbedtls_mpi_sub_mpi+0x70>
   172ae:	602c      	str	r4, [r5, #0]
   172b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172b4:	2a00      	cmp	r2, #0
   172b6:	d0f4      	beq.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   172b8:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
   172bc:	f8d7 c008 	ldr.w	ip, [r7, #8]
   172c0:	3901      	subs	r1, #1
   172c2:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   172c6:	2800      	cmp	r0, #0
   172c8:	d0e3      	beq.n	17292 <mbedtls_mpi_sub_mpi+0x52>
   172ca:	4293      	cmp	r3, r2
   172cc:	d8e9      	bhi.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   172ce:	d31c      	bcc.n	1730a <mbedtls_mpi_sub_mpi+0xca>
   172d0:	2b00      	cmp	r3, #0
   172d2:	d0e6      	beq.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   172d4:	68b0      	ldr	r0, [r6, #8]
   172d6:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   172da:	3901      	subs	r1, #1
   172dc:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
   172e0:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
   172e4:	0089      	lsls	r1, r1, #2
   172e6:	45f0      	cmp	r8, lr
   172e8:	4408      	add	r0, r1
   172ea:	eb0c 0201 	add.w	r2, ip, r1
   172ee:	d8d8      	bhi.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   172f0:	d30b      	bcc.n	1730a <mbedtls_mpi_sub_mpi+0xca>
   172f2:	4601      	mov	r1, r0
   172f4:	e006      	b.n	17304 <mbedtls_mpi_sub_mpi+0xc4>
   172f6:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   172fa:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   172fe:	4584      	cmp	ip, r0
   17300:	d8cf      	bhi.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   17302:	d302      	bcc.n	1730a <mbedtls_mpi_sub_mpi+0xca>
   17304:	3b01      	subs	r3, #1
   17306:	d1f6      	bne.n	172f6 <mbedtls_mpi_sub_mpi+0xb6>
   17308:	e7cb      	b.n	172a2 <mbedtls_mpi_sub_mpi+0x62>
   1730a:	4632      	mov	r2, r6
   1730c:	4639      	mov	r1, r7
   1730e:	4628      	mov	r0, r5
   17310:	f7ff fe62 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17314:	2800      	cmp	r0, #0
   17316:	d1cb      	bne.n	172b0 <mbedtls_mpi_sub_mpi+0x70>
   17318:	4264      	negs	r4, r4
   1731a:	e7c8      	b.n	172ae <mbedtls_mpi_sub_mpi+0x6e>
   1731c:	f7ff fdb8 	bl	16e90 <mbedtls_mpi_add_abs>
   17320:	2800      	cmp	r0, #0
   17322:	d0c4      	beq.n	172ae <mbedtls_mpi_sub_mpi+0x6e>
   17324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017328 <mbedtls_mpi_sub_int>:
   17328:	2a00      	cmp	r2, #0
   1732a:	bfac      	ite	ge
   1732c:	2301      	movge	r3, #1
   1732e:	f04f 33ff 	movlt.w	r3, #4294967295
   17332:	b5f0      	push	{r4, r5, r6, r7, lr}
   17334:	2601      	movs	r6, #1
   17336:	680d      	ldr	r5, [r1, #0]
   17338:	ea82 7ce2 	eor.w	ip, r2, r2, asr #31
   1733c:	fb05 f703 	mul.w	r7, r5, r3
   17340:	b085      	sub	sp, #20
   17342:	ebac 7ce2 	sub.w	ip, ip, r2, asr #31
   17346:	2f00      	cmp	r7, #0
   17348:	9602      	str	r6, [sp, #8]
   1734a:	e9cd c300 	strd	ip, r3, [sp]
   1734e:	f8cd d00c 	str.w	sp, [sp, #12]
   17352:	4606      	mov	r6, r0
   17354:	dd2c      	ble.n	173b0 <mbedtls_mpi_sub_int+0x88>
   17356:	684b      	ldr	r3, [r1, #4]
   17358:	460c      	mov	r4, r1
   1735a:	b173      	cbz	r3, 1737a <mbedtls_mpi_sub_int+0x52>
   1735c:	68a7      	ldr	r7, [r4, #8]
   1735e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   17362:	3901      	subs	r1, #1
   17364:	f857 0021 	ldr.w	r0, [r7, r1, lsl #2]
   17368:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1736c:	b118      	cbz	r0, 17376 <mbedtls_mpi_sub_int+0x4e>
   1736e:	e00e      	b.n	1738e <mbedtls_mpi_sub_int+0x66>
   17370:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17374:	b958      	cbnz	r0, 1738e <mbedtls_mpi_sub_int+0x66>
   17376:	3b01      	subs	r3, #1
   17378:	d1fa      	bne.n	17370 <mbedtls_mpi_sub_int+0x48>
   1737a:	b982      	cbnz	r2, 1739e <mbedtls_mpi_sub_int+0x76>
   1737c:	4621      	mov	r1, r4
   1737e:	aa01      	add	r2, sp, #4
   17380:	4630      	mov	r0, r6
   17382:	f7ff f8f9 	bl	16578 <mbedtls_mpi_sub_abs.constprop.8>
   17386:	b900      	cbnz	r0, 1738a <mbedtls_mpi_sub_int+0x62>
   17388:	6035      	str	r5, [r6, #0]
   1738a:	b005      	add	sp, #20
   1738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1738e:	2a00      	cmp	r2, #0
   17390:	d0f4      	beq.n	1737c <mbedtls_mpi_sub_int+0x54>
   17392:	2b01      	cmp	r3, #1
   17394:	d8f2      	bhi.n	1737c <mbedtls_mpi_sub_int+0x54>
   17396:	683b      	ldr	r3, [r7, #0]
   17398:	459c      	cmp	ip, r3
   1739a:	d3ef      	bcc.n	1737c <mbedtls_mpi_sub_int+0x54>
   1739c:	d9ee      	bls.n	1737c <mbedtls_mpi_sub_int+0x54>
   1739e:	4622      	mov	r2, r4
   173a0:	a901      	add	r1, sp, #4
   173a2:	4630      	mov	r0, r6
   173a4:	f7ff fe18 	bl	16fd8 <mbedtls_mpi_sub_abs>
   173a8:	2800      	cmp	r0, #0
   173aa:	d1ee      	bne.n	1738a <mbedtls_mpi_sub_int+0x62>
   173ac:	426d      	negs	r5, r5
   173ae:	e7eb      	b.n	17388 <mbedtls_mpi_sub_int+0x60>
   173b0:	aa01      	add	r2, sp, #4
   173b2:	f7ff fd6d 	bl	16e90 <mbedtls_mpi_add_abs>
   173b6:	2800      	cmp	r0, #0
   173b8:	d0e6      	beq.n	17388 <mbedtls_mpi_sub_int+0x60>
   173ba:	b005      	add	sp, #20
   173bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   173be:	bf00      	nop

000173c0 <mbedtls_mpi_mul_mpi>:
   173c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173c4:	4606      	mov	r6, r0
   173c6:	2300      	movs	r3, #0
   173c8:	2001      	movs	r0, #1
   173ca:	b086      	sub	sp, #24
   173cc:	428e      	cmp	r6, r1
   173ce:	4690      	mov	r8, r2
   173d0:	9000      	str	r0, [sp, #0]
   173d2:	9003      	str	r0, [sp, #12]
   173d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   173d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
   173dc:	f000 80d1 	beq.w	17582 <mbedtls_mpi_mul_mpi+0x1c2>
   173e0:	460f      	mov	r7, r1
   173e2:	4546      	cmp	r6, r8
   173e4:	f000 80d5 	beq.w	17592 <mbedtls_mpi_mul_mpi+0x1d2>
   173e8:	687d      	ldr	r5, [r7, #4]
   173ea:	b185      	cbz	r5, 1740e <mbedtls_mpi_mul_mpi+0x4e>
   173ec:	68bb      	ldr	r3, [r7, #8]
   173ee:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
   173f2:	3a01      	subs	r2, #1
   173f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   173f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   173fc:	b129      	cbz	r1, 1740a <mbedtls_mpi_mul_mpi+0x4a>
   173fe:	e0ba      	b.n	17576 <mbedtls_mpi_mul_mpi+0x1b6>
   17400:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   17404:	2a00      	cmp	r2, #0
   17406:	f040 80b6 	bne.w	17576 <mbedtls_mpi_mul_mpi+0x1b6>
   1740a:	3d01      	subs	r5, #1
   1740c:	d1f8      	bne.n	17400 <mbedtls_mpi_mul_mpi+0x40>
   1740e:	f8d8 4004 	ldr.w	r4, [r8, #4]
   17412:	2500      	movs	r5, #0
   17414:	2c00      	cmp	r4, #0
   17416:	d03d      	beq.n	17494 <mbedtls_mpi_mul_mpi+0xd4>
   17418:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1741c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   17420:	3a01      	subs	r2, #1
   17422:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17426:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1742a:	b119      	cbz	r1, 17434 <mbedtls_mpi_mul_mpi+0x74>
   1742c:	e004      	b.n	17438 <mbedtls_mpi_mul_mpi+0x78>
   1742e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   17432:	b90a      	cbnz	r2, 17438 <mbedtls_mpi_mul_mpi+0x78>
   17434:	3c01      	subs	r4, #1
   17436:	d1fa      	bne.n	1742e <mbedtls_mpi_mul_mpi+0x6e>
   17438:	f242 7310 	movw	r3, #10000	; 0x2710
   1743c:	eb04 0905 	add.w	r9, r4, r5
   17440:	4599      	cmp	r9, r3
   17442:	f200 80b0 	bhi.w	175a6 <mbedtls_mpi_mul_mpi+0x1e6>
   17446:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1744a:	45d1      	cmp	r9, sl
   1744c:	d925      	bls.n	1749a <mbedtls_mpi_mul_mpi+0xda>
   1744e:	2104      	movs	r1, #4
   17450:	4648      	mov	r0, r9
   17452:	f7fd fa17 	bl	14884 <nrf_calloc>
   17456:	4682      	mov	sl, r0
   17458:	2800      	cmp	r0, #0
   1745a:	f000 80a4 	beq.w	175a6 <mbedtls_mpi_mul_mpi+0x1e6>
   1745e:	68b1      	ldr	r1, [r6, #8]
   17460:	b189      	cbz	r1, 17486 <mbedtls_mpi_mul_mpi+0xc6>
   17462:	6872      	ldr	r2, [r6, #4]
   17464:	0092      	lsls	r2, r2, #2
   17466:	f00e fcfe 	bl	25e66 <memcpy>
   1746a:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   1746e:	1e53      	subs	r3, r2, #1
   17470:	b13a      	cbz	r2, 17482 <mbedtls_mpi_mul_mpi+0xc2>
   17472:	2200      	movs	r2, #0
   17474:	3b01      	subs	r3, #1
   17476:	1c59      	adds	r1, r3, #1
   17478:	6002      	str	r2, [r0, #0]
   1747a:	f100 0004 	add.w	r0, r0, #4
   1747e:	d1f9      	bne.n	17474 <mbedtls_mpi_mul_mpi+0xb4>
   17480:	68b0      	ldr	r0, [r6, #8]
   17482:	f7fd fa13 	bl	148ac <nrf_free>
   17486:	e9c6 9a01 	strd	r9, sl, [r6, #4]
   1748a:	ea4f 0289 	mov.w	r2, r9, lsl #2
   1748e:	f8d6 9008 	ldr.w	r9, [r6, #8]
   17492:	e025      	b.n	174e0 <mbedtls_mpi_mul_mpi+0x120>
   17494:	4625      	mov	r5, r4
   17496:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1749a:	f1ba 0f00 	cmp.w	sl, #0
   1749e:	f040 8085 	bne.w	175ac <mbedtls_mpi_mul_mpi+0x1ec>
   174a2:	2104      	movs	r1, #4
   174a4:	2001      	movs	r0, #1
   174a6:	f7fd f9ed 	bl	14884 <nrf_calloc>
   174aa:	4681      	mov	r9, r0
   174ac:	2800      	cmp	r0, #0
   174ae:	d07a      	beq.n	175a6 <mbedtls_mpi_mul_mpi+0x1e6>
   174b0:	68b1      	ldr	r1, [r6, #8]
   174b2:	b189      	cbz	r1, 174d8 <mbedtls_mpi_mul_mpi+0x118>
   174b4:	6872      	ldr	r2, [r6, #4]
   174b6:	0092      	lsls	r2, r2, #2
   174b8:	f00e fcd5 	bl	25e66 <memcpy>
   174bc:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   174c0:	1e53      	subs	r3, r2, #1
   174c2:	b13a      	cbz	r2, 174d4 <mbedtls_mpi_mul_mpi+0x114>
   174c4:	4652      	mov	r2, sl
   174c6:	3b01      	subs	r3, #1
   174c8:	1c59      	adds	r1, r3, #1
   174ca:	6002      	str	r2, [r0, #0]
   174cc:	f100 0004 	add.w	r0, r0, #4
   174d0:	d1f9      	bne.n	174c6 <mbedtls_mpi_mul_mpi+0x106>
   174d2:	68b0      	ldr	r0, [r6, #8]
   174d4:	f7fd f9ea 	bl	148ac <nrf_free>
   174d8:	2301      	movs	r3, #1
   174da:	2204      	movs	r2, #4
   174dc:	e9c6 3901 	strd	r3, r9, [r6, #4]
   174e0:	2100      	movs	r1, #0
   174e2:	4648      	mov	r0, r9
   174e4:	f00e fcec 	bl	25ec0 <memset>
   174e8:	2100      	movs	r1, #0
   174ea:	2301      	movs	r3, #1
   174ec:	68b2      	ldr	r2, [r6, #8]
   174ee:	6011      	str	r1, [r2, #0]
   174f0:	6033      	str	r3, [r6, #0]
   174f2:	b19c      	cbz	r4, 1751c <mbedtls_mpi_mul_mpi+0x15c>
   174f4:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   174f8:	f109 39ff 	add.w	r9, r9, #4294967295
   174fc:	ea4f 0989 	mov.w	r9, r9, lsl #2
   17500:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17504:	68b2      	ldr	r2, [r6, #8]
   17506:	f853 3009 	ldr.w	r3, [r3, r9]
   1750a:	444a      	add	r2, r9
   1750c:	68b9      	ldr	r1, [r7, #8]
   1750e:	4628      	mov	r0, r5
   17510:	f7fe fc14 	bl	15d3c <mpi_mul_hlp>
   17514:	3c01      	subs	r4, #1
   17516:	f1a9 0904 	sub.w	r9, r9, #4
   1751a:	d1f1      	bne.n	17500 <mbedtls_mpi_mul_mpi+0x140>
   1751c:	2400      	movs	r4, #0
   1751e:	683a      	ldr	r2, [r7, #0]
   17520:	f8d8 3000 	ldr.w	r3, [r8]
   17524:	fb03 f302 	mul.w	r3, r3, r2
   17528:	6033      	str	r3, [r6, #0]
   1752a:	9805      	ldr	r0, [sp, #20]
   1752c:	b160      	cbz	r0, 17548 <mbedtls_mpi_mul_mpi+0x188>
   1752e:	9a04      	ldr	r2, [sp, #16]
   17530:	1e53      	subs	r3, r2, #1
   17532:	b13a      	cbz	r2, 17544 <mbedtls_mpi_mul_mpi+0x184>
   17534:	2200      	movs	r2, #0
   17536:	3b01      	subs	r3, #1
   17538:	1c5d      	adds	r5, r3, #1
   1753a:	6002      	str	r2, [r0, #0]
   1753c:	f100 0004 	add.w	r0, r0, #4
   17540:	d1f9      	bne.n	17536 <mbedtls_mpi_mul_mpi+0x176>
   17542:	9805      	ldr	r0, [sp, #20]
   17544:	f7fd f9b2 	bl	148ac <nrf_free>
   17548:	2200      	movs	r2, #0
   1754a:	2301      	movs	r3, #1
   1754c:	9802      	ldr	r0, [sp, #8]
   1754e:	e9cd 3203 	strd	r3, r2, [sp, #12]
   17552:	9205      	str	r2, [sp, #20]
   17554:	b158      	cbz	r0, 1756e <mbedtls_mpi_mul_mpi+0x1ae>
   17556:	9901      	ldr	r1, [sp, #4]
   17558:	1e4b      	subs	r3, r1, #1
   1755a:	b131      	cbz	r1, 1756a <mbedtls_mpi_mul_mpi+0x1aa>
   1755c:	3b01      	subs	r3, #1
   1755e:	1c59      	adds	r1, r3, #1
   17560:	6002      	str	r2, [r0, #0]
   17562:	f100 0004 	add.w	r0, r0, #4
   17566:	d1f9      	bne.n	1755c <mbedtls_mpi_mul_mpi+0x19c>
   17568:	9802      	ldr	r0, [sp, #8]
   1756a:	f7fd f99f 	bl	148ac <nrf_free>
   1756e:	4620      	mov	r0, r4
   17570:	b006      	add	sp, #24
   17572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17576:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1757a:	2c00      	cmp	r4, #0
   1757c:	f47f af4c 	bne.w	17418 <mbedtls_mpi_mul_mpi+0x58>
   17580:	e75a      	b.n	17438 <mbedtls_mpi_mul_mpi+0x78>
   17582:	4668      	mov	r0, sp
   17584:	f7fe ff8a 	bl	1649c <mbedtls_mpi_copy>
   17588:	4604      	mov	r4, r0
   1758a:	2800      	cmp	r0, #0
   1758c:	d1cd      	bne.n	1752a <mbedtls_mpi_mul_mpi+0x16a>
   1758e:	466f      	mov	r7, sp
   17590:	e727      	b.n	173e2 <mbedtls_mpi_mul_mpi+0x22>
   17592:	a803      	add	r0, sp, #12
   17594:	4631      	mov	r1, r6
   17596:	f7fe ff81 	bl	1649c <mbedtls_mpi_copy>
   1759a:	4604      	mov	r4, r0
   1759c:	2800      	cmp	r0, #0
   1759e:	d1c4      	bne.n	1752a <mbedtls_mpi_mul_mpi+0x16a>
   175a0:	f10d 080c 	add.w	r8, sp, #12
   175a4:	e720      	b.n	173e8 <mbedtls_mpi_mul_mpi+0x28>
   175a6:	f06f 040f 	mvn.w	r4, #15
   175aa:	e7be      	b.n	1752a <mbedtls_mpi_mul_mpi+0x16a>
   175ac:	46d1      	mov	r9, sl
   175ae:	e76c      	b.n	1748a <mbedtls_mpi_mul_mpi+0xca>

000175b0 <mbedtls_mpi_mul_int>:
   175b0:	2301      	movs	r3, #1
   175b2:	b500      	push	{lr}
   175b4:	b085      	sub	sp, #20
   175b6:	9200      	str	r2, [sp, #0]
   175b8:	aa01      	add	r2, sp, #4
   175ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
   175be:	f8cd d00c 	str.w	sp, [sp, #12]
   175c2:	f7ff fefd 	bl	173c0 <mbedtls_mpi_mul_mpi>
   175c6:	b005      	add	sp, #20
   175c8:	f85d fb04 	ldr.w	pc, [sp], #4

000175cc <mbedtls_mpi_div_mpi>:
   175cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175d0:	685e      	ldr	r6, [r3, #4]
   175d2:	b0a3      	sub	sp, #140	; 0x8c
   175d4:	b196      	cbz	r6, 175fc <mbedtls_mpi_div_mpi+0x30>
   175d6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   175da:	f106 4980 	add.w	r9, r6, #1073741824	; 0x40000000
   175de:	f109 39ff 	add.w	r9, r9, #4294967295
   175e2:	f858 5029 	ldr.w	r5, [r8, r9, lsl #2]
   175e6:	eb08 0e89 	add.w	lr, r8, r9, lsl #2
   175ea:	b96d      	cbnz	r5, 17608 <mbedtls_mpi_div_mpi+0x3c>
   175ec:	46f4      	mov	ip, lr
   175ee:	4637      	mov	r7, r6
   175f0:	e002      	b.n	175f8 <mbedtls_mpi_div_mpi+0x2c>
   175f2:	f85c 4d04 	ldr.w	r4, [ip, #-4]!
   175f6:	b93c      	cbnz	r4, 17608 <mbedtls_mpi_div_mpi+0x3c>
   175f8:	3f01      	subs	r7, #1
   175fa:	d1fa      	bne.n	175f2 <mbedtls_mpi_div_mpi+0x26>
   175fc:	f06f 060b 	mvn.w	r6, #11
   17600:	4630      	mov	r0, r6
   17602:	b023      	add	sp, #140	; 0x8c
   17604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17608:	681d      	ldr	r5, [r3, #0]
   1760a:	2d00      	cmp	r5, #0
   1760c:	d0f6      	beq.n	175fc <mbedtls_mpi_div_mpi+0x30>
   1760e:	4614      	mov	r4, r2
   17610:	468a      	mov	sl, r1
   17612:	2200      	movs	r2, #0
   17614:	2101      	movs	r1, #1
   17616:	469b      	mov	fp, r3
   17618:	6863      	ldr	r3, [r4, #4]
   1761a:	4605      	mov	r5, r0
   1761c:	9110      	str	r1, [sp, #64]	; 0x40
   1761e:	9113      	str	r1, [sp, #76]	; 0x4c
   17620:	9116      	str	r1, [sp, #88]	; 0x58
   17622:	9119      	str	r1, [sp, #100]	; 0x64
   17624:	911c      	str	r1, [sp, #112]	; 0x70
   17626:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
   1762a:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
   1762e:	e9cd 2217 	strd	r2, r2, [sp, #92]	; 0x5c
   17632:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
   17636:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
   1763a:	2b00      	cmp	r3, #0
   1763c:	f000 821a 	beq.w	17a74 <mbedtls_mpi_div_mpi+0x4a8>
   17640:	68a2      	ldr	r2, [r4, #8]
   17642:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   17646:	3901      	subs	r1, #1
   17648:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1764c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   17650:	b120      	cbz	r0, 1765c <mbedtls_mpi_div_mpi+0x90>
   17652:	e07b      	b.n	1774c <mbedtls_mpi_div_mpi+0x180>
   17654:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   17658:	2900      	cmp	r1, #0
   1765a:	d177      	bne.n	1774c <mbedtls_mpi_div_mpi+0x180>
   1765c:	3b01      	subs	r3, #1
   1765e:	d1f9      	bne.n	17654 <mbedtls_mpi_div_mpi+0x88>
   17660:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   17664:	2a00      	cmp	r2, #0
   17666:	d177      	bne.n	17758 <mbedtls_mpi_div_mpi+0x18c>
   17668:	4672      	mov	r2, lr
   1766a:	e003      	b.n	17674 <mbedtls_mpi_div_mpi+0xa8>
   1766c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   17670:	2900      	cmp	r1, #0
   17672:	d16f      	bne.n	17754 <mbedtls_mpi_div_mpi+0x188>
   17674:	3e01      	subs	r6, #1
   17676:	d1f9      	bne.n	1766c <mbedtls_mpi_div_mpi+0xa0>
   17678:	a810      	add	r0, sp, #64	; 0x40
   1767a:	4621      	mov	r1, r4
   1767c:	f7fe ff0e 	bl	1649c <mbedtls_mpi_copy>
   17680:	4606      	mov	r6, r0
   17682:	2800      	cmp	r0, #0
   17684:	f000 8092 	beq.w	177ac <mbedtls_mpi_div_mpi+0x1e0>
   17688:	2700      	movs	r7, #0
   1768a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1768c:	b160      	cbz	r0, 176a8 <mbedtls_mpi_div_mpi+0xdc>
   1768e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17690:	1e53      	subs	r3, r2, #1
   17692:	b13a      	cbz	r2, 176a4 <mbedtls_mpi_div_mpi+0xd8>
   17694:	2200      	movs	r2, #0
   17696:	3b01      	subs	r3, #1
   17698:	1c5c      	adds	r4, r3, #1
   1769a:	6002      	str	r2, [r0, #0]
   1769c:	f100 0004 	add.w	r0, r0, #4
   176a0:	d1f9      	bne.n	17696 <mbedtls_mpi_div_mpi+0xca>
   176a2:	9812      	ldr	r0, [sp, #72]	; 0x48
   176a4:	f7fd f902 	bl	148ac <nrf_free>
   176a8:	2200      	movs	r2, #0
   176aa:	2301      	movs	r3, #1
   176ac:	9815      	ldr	r0, [sp, #84]	; 0x54
   176ae:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   176b2:	9212      	str	r2, [sp, #72]	; 0x48
   176b4:	b158      	cbz	r0, 176ce <mbedtls_mpi_div_mpi+0x102>
   176b6:	9914      	ldr	r1, [sp, #80]	; 0x50
   176b8:	1e4b      	subs	r3, r1, #1
   176ba:	b131      	cbz	r1, 176ca <mbedtls_mpi_div_mpi+0xfe>
   176bc:	3b01      	subs	r3, #1
   176be:	1c59      	adds	r1, r3, #1
   176c0:	6002      	str	r2, [r0, #0]
   176c2:	f100 0004 	add.w	r0, r0, #4
   176c6:	d1f9      	bne.n	176bc <mbedtls_mpi_div_mpi+0xf0>
   176c8:	9815      	ldr	r0, [sp, #84]	; 0x54
   176ca:	f7fd f8ef 	bl	148ac <nrf_free>
   176ce:	2200      	movs	r2, #0
   176d0:	2301      	movs	r3, #1
   176d2:	9818      	ldr	r0, [sp, #96]	; 0x60
   176d4:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   176d8:	9215      	str	r2, [sp, #84]	; 0x54
   176da:	b158      	cbz	r0, 176f4 <mbedtls_mpi_div_mpi+0x128>
   176dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   176de:	1e4b      	subs	r3, r1, #1
   176e0:	b131      	cbz	r1, 176f0 <mbedtls_mpi_div_mpi+0x124>
   176e2:	3b01      	subs	r3, #1
   176e4:	1c5d      	adds	r5, r3, #1
   176e6:	6002      	str	r2, [r0, #0]
   176e8:	f100 0004 	add.w	r0, r0, #4
   176ec:	d1f9      	bne.n	176e2 <mbedtls_mpi_div_mpi+0x116>
   176ee:	9818      	ldr	r0, [sp, #96]	; 0x60
   176f0:	f7fd f8dc 	bl	148ac <nrf_free>
   176f4:	2200      	movs	r2, #0
   176f6:	2301      	movs	r3, #1
   176f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   176fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   176fe:	9218      	str	r2, [sp, #96]	; 0x60
   17700:	b158      	cbz	r0, 1771a <mbedtls_mpi_div_mpi+0x14e>
   17702:	991a      	ldr	r1, [sp, #104]	; 0x68
   17704:	1e4b      	subs	r3, r1, #1
   17706:	b131      	cbz	r1, 17716 <mbedtls_mpi_div_mpi+0x14a>
   17708:	3b01      	subs	r3, #1
   1770a:	1c5c      	adds	r4, r3, #1
   1770c:	6002      	str	r2, [r0, #0]
   1770e:	f100 0004 	add.w	r0, r0, #4
   17712:	d1f9      	bne.n	17708 <mbedtls_mpi_div_mpi+0x13c>
   17714:	981b      	ldr	r0, [sp, #108]	; 0x6c
   17716:	f7fd f8c9 	bl	148ac <nrf_free>
   1771a:	2100      	movs	r1, #0
   1771c:	2301      	movs	r3, #1
   1771e:	911b      	str	r1, [sp, #108]	; 0x6c
   17720:	e9cd 3119 	strd	r3, r1, [sp, #100]	; 0x64
   17724:	2f00      	cmp	r7, #0
   17726:	f43f af6b 	beq.w	17600 <mbedtls_mpi_div_mpi+0x34>
   1772a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1772c:	1e53      	subs	r3, r2, #1
   1772e:	b132      	cbz	r2, 1773e <mbedtls_mpi_div_mpi+0x172>
   17730:	463a      	mov	r2, r7
   17732:	3b01      	subs	r3, #1
   17734:	1c58      	adds	r0, r3, #1
   17736:	6011      	str	r1, [r2, #0]
   17738:	f102 0204 	add.w	r2, r2, #4
   1773c:	d1f9      	bne.n	17732 <mbedtls_mpi_div_mpi+0x166>
   1773e:	4638      	mov	r0, r7
   17740:	f7fd f8b4 	bl	148ac <nrf_free>
   17744:	4630      	mov	r0, r6
   17746:	b023      	add	sp, #140	; 0x8c
   17748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1774c:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   17750:	2a00      	cmp	r2, #0
   17752:	d089      	beq.n	17668 <mbedtls_mpi_div_mpi+0x9c>
   17754:	429e      	cmp	r6, r3
   17756:	d38f      	bcc.n	17678 <mbedtls_mpi_div_mpi+0xac>
   17758:	429e      	cmp	r6, r3
   1775a:	f200 8190 	bhi.w	17a7e <mbedtls_mpi_div_mpi+0x4b2>
   1775e:	2b00      	cmp	r3, #0
   17760:	d08a      	beq.n	17678 <mbedtls_mpi_div_mpi+0xac>
   17762:	68a1      	ldr	r1, [r4, #8]
   17764:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   17768:	3a01      	subs	r2, #1
   1776a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1776e:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
   17772:	0092      	lsls	r2, r2, #2
   17774:	4286      	cmp	r6, r0
   17776:	4411      	add	r1, r2
   17778:	4490      	add	r8, r2
   1777a:	f4ff af7d 	bcc.w	17678 <mbedtls_mpi_div_mpi+0xac>
   1777e:	f200 817e 	bhi.w	17a7e <mbedtls_mpi_div_mpi+0x4b2>
   17782:	460a      	mov	r2, r1
   17784:	e008      	b.n	17798 <mbedtls_mpi_div_mpi+0x1cc>
   17786:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   1778a:	f858 1d04 	ldr.w	r1, [r8, #-4]!
   1778e:	4288      	cmp	r0, r1
   17790:	f63f af72 	bhi.w	17678 <mbedtls_mpi_div_mpi+0xac>
   17794:	f0c0 8173 	bcc.w	17a7e <mbedtls_mpi_div_mpi+0x4b2>
   17798:	3b01      	subs	r3, #1
   1779a:	d1f4      	bne.n	17786 <mbedtls_mpi_div_mpi+0x1ba>
   1779c:	a810      	add	r0, sp, #64	; 0x40
   1779e:	4621      	mov	r1, r4
   177a0:	f7fe fe7c 	bl	1649c <mbedtls_mpi_copy>
   177a4:	4606      	mov	r6, r0
   177a6:	2800      	cmp	r0, #0
   177a8:	f47f af6e 	bne.w	17688 <mbedtls_mpi_div_mpi+0xbc>
   177ac:	a813      	add	r0, sp, #76	; 0x4c
   177ae:	4659      	mov	r1, fp
   177b0:	f7fe fe74 	bl	1649c <mbedtls_mpi_copy>
   177b4:	4606      	mov	r6, r0
   177b6:	2800      	cmp	r0, #0
   177b8:	f47f af66 	bne.w	17688 <mbedtls_mpi_div_mpi+0xbc>
   177bc:	f242 7210 	movw	r2, #10000	; 0x2710
   177c0:	2301      	movs	r3, #1
   177c2:	6867      	ldr	r7, [r4, #4]
   177c4:	9313      	str	r3, [sp, #76]	; 0x4c
   177c6:	3702      	adds	r7, #2
   177c8:	4297      	cmp	r7, r2
   177ca:	9310      	str	r3, [sp, #64]	; 0x40
   177cc:	f200 8193 	bhi.w	17af6 <mbedtls_mpi_div_mpi+0x52a>
   177d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   177d4:	4547      	cmp	r7, r8
   177d6:	d91d      	bls.n	17814 <mbedtls_mpi_div_mpi+0x248>
   177d8:	2104      	movs	r1, #4
   177da:	4638      	mov	r0, r7
   177dc:	f7fd f852 	bl	14884 <nrf_calloc>
   177e0:	4681      	mov	r9, r0
   177e2:	2800      	cmp	r0, #0
   177e4:	f000 8187 	beq.w	17af6 <mbedtls_mpi_div_mpi+0x52a>
   177e8:	9918      	ldr	r1, [sp, #96]	; 0x60
   177ea:	b181      	cbz	r1, 1780e <mbedtls_mpi_div_mpi+0x242>
   177ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   177ee:	0092      	lsls	r2, r2, #2
   177f0:	f00e fb39 	bl	25e66 <memcpy>
   177f4:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
   177f8:	1e53      	subs	r3, r2, #1
   177fa:	b132      	cbz	r2, 1780a <mbedtls_mpi_div_mpi+0x23e>
   177fc:	3b01      	subs	r3, #1
   177fe:	1c5a      	adds	r2, r3, #1
   17800:	6006      	str	r6, [r0, #0]
   17802:	f100 0004 	add.w	r0, r0, #4
   17806:	d1f9      	bne.n	177fc <mbedtls_mpi_div_mpi+0x230>
   17808:	9818      	ldr	r0, [sp, #96]	; 0x60
   1780a:	f7fd f84f 	bl	148ac <nrf_free>
   1780e:	46b8      	mov	r8, r7
   17810:	e9cd 7917 	strd	r7, r9, [sp, #92]	; 0x5c
   17814:	f1b8 0f00 	cmp.w	r8, #0
   17818:	f000 8171 	beq.w	17afe <mbedtls_mpi_div_mpi+0x532>
   1781c:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1781e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   17822:	2700      	movs	r7, #0
   17824:	4630      	mov	r0, r6
   17826:	4639      	mov	r1, r7
   17828:	f00e fb4a 	bl	25ec0 <memset>
   1782c:	2201      	movs	r2, #1
   1782e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17830:	601f      	str	r7, [r3, #0]
   17832:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17834:	9216      	str	r2, [sp, #88]	; 0x58
   17836:	4293      	cmp	r3, r2
   17838:	f240 81b2 	bls.w	17ba0 <mbedtls_mpi_div_mpi+0x5d4>
   1783c:	2104      	movs	r1, #4
   1783e:	2003      	movs	r0, #3
   17840:	f7fd f820 	bl	14884 <nrf_calloc>
   17844:	4607      	mov	r7, r0
   17846:	2800      	cmp	r0, #0
   17848:	f000 8155 	beq.w	17af6 <mbedtls_mpi_div_mpi+0x52a>
   1784c:	2303      	movs	r3, #3
   1784e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17850:	e9cd 301d 	strd	r3, r0, [sp, #116]	; 0x74
   17854:	9203      	str	r2, [sp, #12]
   17856:	2a00      	cmp	r2, #0
   17858:	f000 8171 	beq.w	17b3e <mbedtls_mpi_div_mpi+0x572>
   1785c:	f1b2 0901 	subs.w	r9, r2, #1
   17860:	9915      	ldr	r1, [sp, #84]	; 0x54
   17862:	f000 81cf 	beq.w	17c04 <mbedtls_mpi_div_mpi+0x638>
   17866:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
   1786a:	2800      	cmp	r0, #0
   1786c:	f040 81c5 	bne.w	17bfa <mbedtls_mpi_div_mpi+0x62e>
   17870:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17874:	3a01      	subs	r2, #1
   17876:	464b      	mov	r3, r9
   17878:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1787c:	e004      	b.n	17888 <mbedtls_mpi_div_mpi+0x2bc>
   1787e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   17882:	2800      	cmp	r0, #0
   17884:	f040 81ae 	bne.w	17be4 <mbedtls_mpi_div_mpi+0x618>
   17888:	3b01      	subs	r3, #1
   1788a:	d1f8      	bne.n	1787e <mbedtls_mpi_div_mpi+0x2b2>
   1788c:	2620      	movs	r6, #32
   1788e:	6808      	ldr	r0, [r1, #0]
   17890:	2200      	movs	r2, #0
   17892:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   17896:	e002      	b.n	1789e <mbedtls_mpi_div_mpi+0x2d2>
   17898:	3201      	adds	r2, #1
   1789a:	2a20      	cmp	r2, #32
   1789c:	d004      	beq.n	178a8 <mbedtls_mpi_div_mpi+0x2dc>
   1789e:	4201      	tst	r1, r0
   178a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   178a4:	d0f8      	beq.n	17898 <mbedtls_mpi_div_mpi+0x2cc>
   178a6:	1ab3      	subs	r3, r6, r2
   178a8:	f003 031f 	and.w	r3, r3, #31
   178ac:	2b1f      	cmp	r3, #31
   178ae:	f040 819f 	bne.w	17bf0 <mbedtls_mpi_div_mpi+0x624>
   178b2:	2300      	movs	r3, #0
   178b4:	9302      	str	r3, [sp, #8]
   178b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   178b8:	a813      	add	r0, sp, #76	; 0x4c
   178ba:	9304      	str	r3, [sp, #16]
   178bc:	3b01      	subs	r3, #1
   178be:	eba3 0809 	sub.w	r8, r3, r9
   178c2:	9301      	str	r3, [sp, #4]
   178c4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   178c8:	4619      	mov	r1, r3
   178ca:	9305      	str	r3, [sp, #20]
   178cc:	f7ff f8fe 	bl	16acc <mbedtls_mpi_shift_l>
   178d0:	4606      	mov	r6, r0
   178d2:	2800      	cmp	r0, #0
   178d4:	f47f aed9 	bne.w	1768a <mbedtls_mpi_div_mpi+0xbe>
   178d8:	ea4f 0888 	mov.w	r8, r8, lsl #2
   178dc:	e00d      	b.n	178fa <mbedtls_mpi_div_mpi+0x32e>
   178de:	9818      	ldr	r0, [sp, #96]	; 0x60
   178e0:	a910      	add	r1, sp, #64	; 0x40
   178e2:	f850 3008 	ldr.w	r3, [r0, r8]
   178e6:	aa13      	add	r2, sp, #76	; 0x4c
   178e8:	3301      	adds	r3, #1
   178ea:	f840 3008 	str.w	r3, [r0, r8]
   178ee:	4608      	mov	r0, r1
   178f0:	f7ff fca6 	bl	17240 <mbedtls_mpi_sub_mpi>
   178f4:	2800      	cmp	r0, #0
   178f6:	f040 8179 	bne.w	17bec <mbedtls_mpi_div_mpi+0x620>
   178fa:	a913      	add	r1, sp, #76	; 0x4c
   178fc:	a810      	add	r0, sp, #64	; 0x40
   178fe:	f7ff fa0b 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   17902:	2800      	cmp	r0, #0
   17904:	daeb      	bge.n	178de <mbedtls_mpi_div_mpi+0x312>
   17906:	9905      	ldr	r1, [sp, #20]
   17908:	a813      	add	r0, sp, #76	; 0x4c
   1790a:	f7ff f995 	bl	16c38 <mbedtls_mpi_shift_r>
   1790e:	4606      	mov	r6, r0
   17910:	2800      	cmp	r0, #0
   17912:	f47f aeba 	bne.w	1768a <mbedtls_mpi_div_mpi+0xbe>
   17916:	f06f 0303 	mvn.w	r3, #3
   1791a:	9a03      	ldr	r2, [sp, #12]
   1791c:	e9cd b508 	strd	fp, r5, [sp, #32]
   17920:	f102 4780 	add.w	r7, r2, #1073741824	; 0x40000000
   17924:	9a04      	ldr	r2, [sp, #16]
   17926:	fb03 f309 	mul.w	r3, r3, r9
   1792a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1792e:	3a02      	subs	r2, #2
   17930:	0092      	lsls	r2, r2, #2
   17932:	4615      	mov	r5, r2
   17934:	9305      	str	r3, [sp, #20]
   17936:	ea4f 0389 	mov.w	r3, r9, lsl #2
   1793a:	9303      	str	r3, [sp, #12]
   1793c:	ebc9 63c9 	rsb	r3, r9, r9, lsl #27
   17940:	3f02      	subs	r7, #2
   17942:	e9cd 3006 	strd	r3, r0, [sp, #24]
   17946:	e9cd a40a 	strd	sl, r4, [sp, #40]	; 0x28
   1794a:	00b9      	lsls	r1, r7, #2
   1794c:	9104      	str	r1, [sp, #16]
   1794e:	9b01      	ldr	r3, [sp, #4]
   17950:	454b      	cmp	r3, r9
   17952:	f240 8173 	bls.w	17c3c <mbedtls_mpi_div_mpi+0x670>
   17956:	9803      	ldr	r0, [sp, #12]
   17958:	9912      	ldr	r1, [sp, #72]	; 0x48
   1795a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1795c:	f105 0a04 	add.w	sl, r5, #4
   17960:	5812      	ldr	r2, [r2, r0]
   17962:	f851 300a 	ldr.w	r3, [r1, sl]
   17966:	9805      	ldr	r0, [sp, #20]
   17968:	4293      	cmp	r3, r2
   1796a:	eb00 0405 	add.w	r4, r0, r5
   1796e:	9e18      	ldr	r6, [sp, #96]	; 0x60
   17970:	f0c0 814c 	bcc.w	17c0c <mbedtls_mpi_div_mpi+0x640>
   17974:	f04f 33ff 	mov.w	r3, #4294967295
   17978:	5133      	str	r3, [r6, r4]
   1797a:	2601      	movs	r6, #1
   1797c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1797e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   17980:	5913      	ldr	r3, [r2, r4]
   17982:	f1a5 0b04 	sub.w	fp, r5, #4
   17986:	4433      	add	r3, r6
   17988:	5113      	str	r3, [r2, r4]
   1798a:	e04b      	b.n	17a24 <mbedtls_mpi_div_mpi+0x458>
   1798c:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   17990:	0092      	lsls	r2, r2, #2
   17992:	4640      	mov	r0, r8
   17994:	2100      	movs	r1, #0
   17996:	f00e fa93 	bl	25ec0 <memset>
   1799a:	2200      	movs	r2, #0
   1799c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1799e:	601a      	str	r2, [r3, #0]
   179a0:	9619      	str	r6, [sp, #100]	; 0x64
   179a2:	f1b9 0f00 	cmp.w	r9, #0
   179a6:	f000 80f9 	beq.w	17b9c <mbedtls_mpi_div_mpi+0x5d0>
   179aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   179ac:	9a04      	ldr	r2, [sp, #16]
   179ae:	589b      	ldr	r3, [r3, r2]
   179b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   179b2:	9903      	ldr	r1, [sp, #12]
   179b4:	6013      	str	r3, [r2, #0]
   179b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   179b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   179ba:	5852      	ldr	r2, [r2, r1]
   179bc:	a919      	add	r1, sp, #100	; 0x64
   179be:	605a      	str	r2, [r3, #4]
   179c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   179c2:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
   179c6:	591b      	ldr	r3, [r3, r4]
   179c8:	aa1f      	add	r2, sp, #124	; 0x7c
   179ca:	4608      	mov	r0, r1
   179cc:	930f      	str	r3, [sp, #60]	; 0x3c
   179ce:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
   179d2:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   179d6:	f7ff fcf3 	bl	173c0 <mbedtls_mpi_mul_mpi>
   179da:	2800      	cmp	r0, #0
   179dc:	f040 8106 	bne.w	17bec <mbedtls_mpi_div_mpi+0x620>
   179e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   179e2:	2a00      	cmp	r2, #0
   179e4:	f000 80c2 	beq.w	17b6c <mbedtls_mpi_div_mpi+0x5a0>
   179e8:	0092      	lsls	r2, r2, #2
   179ea:	2100      	movs	r1, #0
   179ec:	4638      	mov	r0, r7
   179ee:	f00e fa67 	bl	25ec0 <memset>
   179f2:	2300      	movs	r3, #0
   179f4:	603b      	str	r3, [r7, #0]
   179f6:	9b01      	ldr	r3, [sp, #4]
   179f8:	961c      	str	r6, [sp, #112]	; 0x70
   179fa:	2b01      	cmp	r3, #1
   179fc:	a91c      	add	r1, sp, #112	; 0x70
   179fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a00:	f000 80ed 	beq.w	17bde <mbedtls_mpi_div_mpi+0x612>
   17a04:	f853 300b 	ldr.w	r3, [r3, fp]
   17a08:	a819      	add	r0, sp, #100	; 0x64
   17a0a:	603b      	str	r3, [r7, #0]
   17a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a0e:	595b      	ldr	r3, [r3, r5]
   17a10:	607b      	str	r3, [r7, #4]
   17a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17a14:	f853 300a 	ldr.w	r3, [r3, sl]
   17a18:	60bb      	str	r3, [r7, #8]
   17a1a:	f7ff f97d 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   17a1e:	2800      	cmp	r0, #0
   17a20:	f340 811c 	ble.w	17c5c <mbedtls_mpi_div_mpi+0x690>
   17a24:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17a26:	5913      	ldr	r3, [r2, r4]
   17a28:	3b01      	subs	r3, #1
   17a2a:	5113      	str	r3, [r2, r4]
   17a2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17a2e:	2a00      	cmp	r2, #0
   17a30:	d1ac      	bne.n	1798c <mbedtls_mpi_div_mpi+0x3c0>
   17a32:	2104      	movs	r1, #4
   17a34:	2001      	movs	r0, #1
   17a36:	f7fc ff25 	bl	14884 <nrf_calloc>
   17a3a:	4680      	mov	r8, r0
   17a3c:	2800      	cmp	r0, #0
   17a3e:	f000 8140 	beq.w	17cc2 <mbedtls_mpi_div_mpi+0x6f6>
   17a42:	991b      	ldr	r1, [sp, #108]	; 0x6c
   17a44:	b191      	cbz	r1, 17a6c <mbedtls_mpi_div_mpi+0x4a0>
   17a46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17a48:	0092      	lsls	r2, r2, #2
   17a4a:	f00e fa0c 	bl	25e66 <memcpy>
   17a4e:	e9dd 101a 	ldrd	r1, r0, [sp, #104]	; 0x68
   17a52:	4602      	mov	r2, r0
   17a54:	1e4b      	subs	r3, r1, #1
   17a56:	b139      	cbz	r1, 17a68 <mbedtls_mpi_div_mpi+0x49c>
   17a58:	2100      	movs	r1, #0
   17a5a:	3b01      	subs	r3, #1
   17a5c:	6011      	str	r1, [r2, #0]
   17a5e:	1c59      	adds	r1, r3, #1
   17a60:	f102 0204 	add.w	r2, r2, #4
   17a64:	d1f8      	bne.n	17a58 <mbedtls_mpi_div_mpi+0x48c>
   17a66:	981b      	ldr	r0, [sp, #108]	; 0x6c
   17a68:	f7fc ff20 	bl	148ac <nrf_free>
   17a6c:	2204      	movs	r2, #4
   17a6e:	e9cd 681a 	strd	r6, r8, [sp, #104]	; 0x68
   17a72:	e78e      	b.n	17992 <mbedtls_mpi_div_mpi+0x3c6>
   17a74:	f858 2029 	ldr.w	r2, [r8, r9, lsl #2]
   17a78:	2a00      	cmp	r2, #0
   17a7a:	f43f adf5 	beq.w	17668 <mbedtls_mpi_div_mpi+0x9c>
   17a7e:	b355      	cbz	r5, 17ad6 <mbedtls_mpi_div_mpi+0x50a>
   17a80:	686e      	ldr	r6, [r5, #4]
   17a82:	b9ee      	cbnz	r6, 17ac0 <mbedtls_mpi_div_mpi+0x4f4>
   17a84:	2104      	movs	r1, #4
   17a86:	2001      	movs	r0, #1
   17a88:	f7fc fefc 	bl	14884 <nrf_calloc>
   17a8c:	4607      	mov	r7, r0
   17a8e:	b390      	cbz	r0, 17af6 <mbedtls_mpi_div_mpi+0x52a>
   17a90:	68a9      	ldr	r1, [r5, #8]
   17a92:	b181      	cbz	r1, 17ab6 <mbedtls_mpi_div_mpi+0x4ea>
   17a94:	686a      	ldr	r2, [r5, #4]
   17a96:	0092      	lsls	r2, r2, #2
   17a98:	f00e f9e5 	bl	25e66 <memcpy>
   17a9c:	e9d5 2001 	ldrd	r2, r0, [r5, #4]
   17aa0:	1e53      	subs	r3, r2, #1
   17aa2:	b132      	cbz	r2, 17ab2 <mbedtls_mpi_div_mpi+0x4e6>
   17aa4:	3b01      	subs	r3, #1
   17aa6:	1c59      	adds	r1, r3, #1
   17aa8:	6006      	str	r6, [r0, #0]
   17aaa:	f100 0004 	add.w	r0, r0, #4
   17aae:	d1f9      	bne.n	17aa4 <mbedtls_mpi_div_mpi+0x4d8>
   17ab0:	68a8      	ldr	r0, [r5, #8]
   17ab2:	f7fc fefb 	bl	148ac <nrf_free>
   17ab6:	2301      	movs	r3, #1
   17ab8:	2204      	movs	r2, #4
   17aba:	e9c5 3701 	strd	r3, r7, [r5, #4]
   17abe:	e001      	b.n	17ac4 <mbedtls_mpi_div_mpi+0x4f8>
   17ac0:	68af      	ldr	r7, [r5, #8]
   17ac2:	00b2      	lsls	r2, r6, #2
   17ac4:	2100      	movs	r1, #0
   17ac6:	4638      	mov	r0, r7
   17ac8:	f00e f9fa 	bl	25ec0 <memset>
   17acc:	2100      	movs	r1, #0
   17ace:	2301      	movs	r3, #1
   17ad0:	68aa      	ldr	r2, [r5, #8]
   17ad2:	6011      	str	r1, [r2, #0]
   17ad4:	602b      	str	r3, [r5, #0]
   17ad6:	f1ba 0f00 	cmp.w	sl, #0
   17ada:	d007      	beq.n	17aec <mbedtls_mpi_div_mpi+0x520>
   17adc:	4621      	mov	r1, r4
   17ade:	4650      	mov	r0, sl
   17ae0:	f7fe fcdc 	bl	1649c <mbedtls_mpi_copy>
   17ae4:	4606      	mov	r6, r0
   17ae6:	2800      	cmp	r0, #0
   17ae8:	f47f adce 	bne.w	17688 <mbedtls_mpi_div_mpi+0xbc>
   17aec:	2600      	movs	r6, #0
   17aee:	4630      	mov	r0, r6
   17af0:	b023      	add	sp, #140	; 0x8c
   17af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af6:	2700      	movs	r7, #0
   17af8:	f06f 060f 	mvn.w	r6, #15
   17afc:	e5c5      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17afe:	2104      	movs	r1, #4
   17b00:	2001      	movs	r0, #1
   17b02:	f7fc febf 	bl	14884 <nrf_calloc>
   17b06:	4606      	mov	r6, r0
   17b08:	2800      	cmp	r0, #0
   17b0a:	d0f4      	beq.n	17af6 <mbedtls_mpi_div_mpi+0x52a>
   17b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
   17b0e:	b189      	cbz	r1, 17b34 <mbedtls_mpi_div_mpi+0x568>
   17b10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   17b12:	0092      	lsls	r2, r2, #2
   17b14:	f00e f9a7 	bl	25e66 <memcpy>
   17b18:	e9dd 3017 	ldrd	r3, r0, [sp, #92]	; 0x5c
   17b1c:	1e5a      	subs	r2, r3, #1
   17b1e:	b13b      	cbz	r3, 17b30 <mbedtls_mpi_div_mpi+0x564>
   17b20:	4643      	mov	r3, r8
   17b22:	3a01      	subs	r2, #1
   17b24:	1c57      	adds	r7, r2, #1
   17b26:	6003      	str	r3, [r0, #0]
   17b28:	f100 0004 	add.w	r0, r0, #4
   17b2c:	d1f9      	bne.n	17b22 <mbedtls_mpi_div_mpi+0x556>
   17b2e:	9818      	ldr	r0, [sp, #96]	; 0x60
   17b30:	f7fc febc 	bl	148ac <nrf_free>
   17b34:	2301      	movs	r3, #1
   17b36:	2204      	movs	r2, #4
   17b38:	e9cd 3617 	strd	r3, r6, [sp, #92]	; 0x5c
   17b3c:	e671      	b.n	17822 <mbedtls_mpi_div_mpi+0x256>
   17b3e:	231f      	movs	r3, #31
   17b40:	4619      	mov	r1, r3
   17b42:	9302      	str	r3, [sp, #8]
   17b44:	a810      	add	r0, sp, #64	; 0x40
   17b46:	f7fe ffc1 	bl	16acc <mbedtls_mpi_shift_l>
   17b4a:	4606      	mov	r6, r0
   17b4c:	2800      	cmp	r0, #0
   17b4e:	f47f ad9c 	bne.w	1768a <mbedtls_mpi_div_mpi+0xbe>
   17b52:	9902      	ldr	r1, [sp, #8]
   17b54:	a813      	add	r0, sp, #76	; 0x4c
   17b56:	f7fe ffb9 	bl	16acc <mbedtls_mpi_shift_l>
   17b5a:	4606      	mov	r6, r0
   17b5c:	2800      	cmp	r0, #0
   17b5e:	f47f ad94 	bne.w	1768a <mbedtls_mpi_div_mpi+0xbe>
   17b62:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17b64:	9303      	str	r3, [sp, #12]
   17b66:	f103 39ff 	add.w	r9, r3, #4294967295
   17b6a:	e6a4      	b.n	178b6 <mbedtls_mpi_div_mpi+0x2ea>
   17b6c:	2104      	movs	r1, #4
   17b6e:	2001      	movs	r0, #1
   17b70:	920d      	str	r2, [sp, #52]	; 0x34
   17b72:	f7fc fe87 	bl	14884 <nrf_calloc>
   17b76:	4603      	mov	r3, r0
   17b78:	2800      	cmp	r0, #0
   17b7a:	f000 80a2 	beq.w	17cc2 <mbedtls_mpi_div_mpi+0x6f6>
   17b7e:	b147      	cbz	r7, 17b92 <mbedtls_mpi_div_mpi+0x5c6>
   17b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17b82:	4639      	mov	r1, r7
   17b84:	900c      	str	r0, [sp, #48]	; 0x30
   17b86:	f00e f96e 	bl	25e66 <memcpy>
   17b8a:	4638      	mov	r0, r7
   17b8c:	f7fc fe8e 	bl	148ac <nrf_free>
   17b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17b92:	461f      	mov	r7, r3
   17b94:	2204      	movs	r2, #4
   17b96:	e9cd 631d 	strd	r6, r3, [sp, #116]	; 0x74
   17b9a:	e726      	b.n	179ea <mbedtls_mpi_div_mpi+0x41e>
   17b9c:	464b      	mov	r3, r9
   17b9e:	e707      	b.n	179b0 <mbedtls_mpi_div_mpi+0x3e4>
   17ba0:	2104      	movs	r1, #4
   17ba2:	2002      	movs	r0, #2
   17ba4:	f7fc fe6e 	bl	14884 <nrf_calloc>
   17ba8:	4606      	mov	r6, r0
   17baa:	2800      	cmp	r0, #0
   17bac:	d0a3      	beq.n	17af6 <mbedtls_mpi_div_mpi+0x52a>
   17bae:	991b      	ldr	r1, [sp, #108]	; 0x6c
   17bb0:	b189      	cbz	r1, 17bd6 <mbedtls_mpi_div_mpi+0x60a>
   17bb2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17bb4:	0092      	lsls	r2, r2, #2
   17bb6:	f00e f956 	bl	25e66 <memcpy>
   17bba:	e9dd 131a 	ldrd	r1, r3, [sp, #104]	; 0x68
   17bbe:	4618      	mov	r0, r3
   17bc0:	1e4a      	subs	r2, r1, #1
   17bc2:	b131      	cbz	r1, 17bd2 <mbedtls_mpi_div_mpi+0x606>
   17bc4:	3a01      	subs	r2, #1
   17bc6:	1c50      	adds	r0, r2, #1
   17bc8:	601f      	str	r7, [r3, #0]
   17bca:	f103 0304 	add.w	r3, r3, #4
   17bce:	d1f9      	bne.n	17bc4 <mbedtls_mpi_div_mpi+0x5f8>
   17bd0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   17bd2:	f7fc fe6b 	bl	148ac <nrf_free>
   17bd6:	2302      	movs	r3, #2
   17bd8:	e9cd 361a 	strd	r3, r6, [sp, #104]	; 0x68
   17bdc:	e62e      	b.n	1783c <mbedtls_mpi_div_mpi+0x270>
   17bde:	595b      	ldr	r3, [r3, r5]
   17be0:	a819      	add	r0, sp, #100	; 0x64
   17be2:	e715      	b.n	17a10 <mbedtls_mpi_div_mpi+0x444>
   17be4:	015b      	lsls	r3, r3, #5
   17be6:	f103 0620 	add.w	r6, r3, #32
   17bea:	e651      	b.n	17890 <mbedtls_mpi_div_mpi+0x2c4>
   17bec:	4606      	mov	r6, r0
   17bee:	e54c      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17bf0:	f1c3 031f 	rsb	r3, r3, #31
   17bf4:	9302      	str	r3, [sp, #8]
   17bf6:	4619      	mov	r1, r3
   17bf8:	e7a4      	b.n	17b44 <mbedtls_mpi_div_mpi+0x578>
   17bfa:	ea4f 1349 	mov.w	r3, r9, lsl #5
   17bfe:	f103 0620 	add.w	r6, r3, #32
   17c02:	e645      	b.n	17890 <mbedtls_mpi_div_mpi+0x2c4>
   17c04:	6808      	ldr	r0, [r1, #0]
   17c06:	2620      	movs	r6, #32
   17c08:	464b      	mov	r3, r9
   17c0a:	e641      	b.n	17890 <mbedtls_mpi_div_mpi+0x2c4>
   17c0c:	594f      	ldr	r7, [r1, r5]
   17c0e:	b192      	cbz	r2, 17c36 <mbedtls_mpi_div_mpi+0x66a>
   17c10:	469c      	mov	ip, r3
   17c12:	f04f 0b00 	mov.w	fp, #0
   17c16:	4661      	mov	r1, ip
   17c18:	465b      	mov	r3, fp
   17c1a:	ea4b 0007 	orr.w	r0, fp, r7
   17c1e:	f7f4 fae1 	bl	c1e4 <__aeabi_uldivmod>
   17c22:	2300      	movs	r3, #0
   17c24:	f04f 32ff 	mov.w	r2, #4294967295
   17c28:	428b      	cmp	r3, r1
   17c2a:	bf08      	it	eq
   17c2c:	4282      	cmpeq	r2, r0
   17c2e:	d200      	bcs.n	17c32 <mbedtls_mpi_div_mpi+0x666>
   17c30:	4610      	mov	r0, r2
   17c32:	5130      	str	r0, [r6, r4]
   17c34:	e6a1      	b.n	1797a <mbedtls_mpi_div_mpi+0x3ae>
   17c36:	f04f 30ff 	mov.w	r0, #4294967295
   17c3a:	e7fa      	b.n	17c32 <mbedtls_mpi_div_mpi+0x666>
   17c3c:	e9dd 6b07 	ldrd	r6, fp, [sp, #28]
   17c40:	e9dd 5a09 	ldrd	r5, sl, [sp, #36]	; 0x24
   17c44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   17c46:	2d00      	cmp	r5, #0
   17c48:	d05f      	beq.n	17d0a <mbedtls_mpi_div_mpi+0x73e>
   17c4a:	a916      	add	r1, sp, #88	; 0x58
   17c4c:	4628      	mov	r0, r5
   17c4e:	f7fe fc25 	bl	1649c <mbedtls_mpi_copy>
   17c52:	2800      	cmp	r0, #0
   17c54:	d053      	beq.n	17cfe <mbedtls_mpi_div_mpi+0x732>
   17c56:	4606      	mov	r6, r0
   17c58:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   17c5a:	e516      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17c5c:	2501      	movs	r5, #1
   17c5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17c60:	aa1f      	add	r2, sp, #124	; 0x7c
   17c62:	591b      	ldr	r3, [r3, r4]
   17c64:	a913      	add	r1, sp, #76	; 0x4c
   17c66:	a819      	add	r0, sp, #100	; 0x64
   17c68:	930f      	str	r3, [sp, #60]	; 0x3c
   17c6a:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   17c6e:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
   17c72:	f7ff fba5 	bl	173c0 <mbedtls_mpi_mul_mpi>
   17c76:	2800      	cmp	r0, #0
   17c78:	d1b8      	bne.n	17bec <mbedtls_mpi_div_mpi+0x620>
   17c7a:	9b06      	ldr	r3, [sp, #24]
   17c7c:	9a01      	ldr	r2, [sp, #4]
   17c7e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   17c82:	3b01      	subs	r3, #1
   17c84:	4413      	add	r3, r2
   17c86:	015e      	lsls	r6, r3, #5
   17c88:	4631      	mov	r1, r6
   17c8a:	a819      	add	r0, sp, #100	; 0x64
   17c8c:	f7fe ff1e 	bl	16acc <mbedtls_mpi_shift_l>
   17c90:	2800      	cmp	r0, #0
   17c92:	d1ab      	bne.n	17bec <mbedtls_mpi_div_mpi+0x620>
   17c94:	a910      	add	r1, sp, #64	; 0x40
   17c96:	aa19      	add	r2, sp, #100	; 0x64
   17c98:	4608      	mov	r0, r1
   17c9a:	f7ff fad1 	bl	17240 <mbedtls_mpi_sub_mpi>
   17c9e:	4603      	mov	r3, r0
   17ca0:	bb58      	cbnz	r0, 17cfa <mbedtls_mpi_div_mpi+0x72e>
   17ca2:	a91f      	add	r1, sp, #124	; 0x7c
   17ca4:	a810      	add	r0, sp, #64	; 0x40
   17ca6:	930f      	str	r3, [sp, #60]	; 0x3c
   17ca8:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
   17cac:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
   17cb0:	f7fe fb2e 	bl	16310 <mbedtls_mpi_cmp_mpi.constprop.6>
   17cb4:	2800      	cmp	r0, #0
   17cb6:	db07      	blt.n	17cc8 <mbedtls_mpi_div_mpi+0x6fc>
   17cb8:	9b01      	ldr	r3, [sp, #4]
   17cba:	465d      	mov	r5, fp
   17cbc:	3b01      	subs	r3, #1
   17cbe:	9301      	str	r3, [sp, #4]
   17cc0:	e645      	b.n	1794e <mbedtls_mpi_div_mpi+0x382>
   17cc2:	f06f 060f 	mvn.w	r6, #15
   17cc6:	e4e0      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17cc8:	a913      	add	r1, sp, #76	; 0x4c
   17cca:	a819      	add	r0, sp, #100	; 0x64
   17ccc:	f7fe fbe6 	bl	1649c <mbedtls_mpi_copy>
   17cd0:	2800      	cmp	r0, #0
   17cd2:	d18b      	bne.n	17bec <mbedtls_mpi_div_mpi+0x620>
   17cd4:	4631      	mov	r1, r6
   17cd6:	a819      	add	r0, sp, #100	; 0x64
   17cd8:	f7fe fef8 	bl	16acc <mbedtls_mpi_shift_l>
   17cdc:	2800      	cmp	r0, #0
   17cde:	d185      	bne.n	17bec <mbedtls_mpi_div_mpi+0x620>
   17ce0:	a910      	add	r1, sp, #64	; 0x40
   17ce2:	aa19      	add	r2, sp, #100	; 0x64
   17ce4:	4608      	mov	r0, r1
   17ce6:	f7ff fa37 	bl	17158 <mbedtls_mpi_add_mpi>
   17cea:	2800      	cmp	r0, #0
   17cec:	f47f af7e 	bne.w	17bec <mbedtls_mpi_div_mpi+0x620>
   17cf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17cf2:	5913      	ldr	r3, [r2, r4]
   17cf4:	3b01      	subs	r3, #1
   17cf6:	5113      	str	r3, [r2, r4]
   17cf8:	e7de      	b.n	17cb8 <mbedtls_mpi_div_mpi+0x6ec>
   17cfa:	4606      	mov	r6, r0
   17cfc:	e4c5      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17cfe:	f8db 3000 	ldr.w	r3, [fp]
   17d02:	6822      	ldr	r2, [r4, #0]
   17d04:	fb03 f302 	mul.w	r3, r3, r2
   17d08:	602b      	str	r3, [r5, #0]
   17d0a:	f1ba 0f00 	cmp.w	sl, #0
   17d0e:	d005      	beq.n	17d1c <mbedtls_mpi_div_mpi+0x750>
   17d10:	9902      	ldr	r1, [sp, #8]
   17d12:	a810      	add	r0, sp, #64	; 0x40
   17d14:	f7fe ff90 	bl	16c38 <mbedtls_mpi_shift_r>
   17d18:	4606      	mov	r6, r0
   17d1a:	b108      	cbz	r0, 17d20 <mbedtls_mpi_div_mpi+0x754>
   17d1c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   17d1e:	e4b4      	b.n	1768a <mbedtls_mpi_div_mpi+0xbe>
   17d20:	6823      	ldr	r3, [r4, #0]
   17d22:	a910      	add	r1, sp, #64	; 0x40
   17d24:	4650      	mov	r0, sl
   17d26:	9310      	str	r3, [sp, #64]	; 0x40
   17d28:	f7fe fbb8 	bl	1649c <mbedtls_mpi_copy>
   17d2c:	4606      	mov	r6, r0
   17d2e:	2800      	cmp	r0, #0
   17d30:	d1f4      	bne.n	17d1c <mbedtls_mpi_div_mpi+0x750>
   17d32:	2401      	movs	r4, #1
   17d34:	ab0f      	add	r3, sp, #60	; 0x3c
   17d36:	a91f      	add	r1, sp, #124	; 0x7c
   17d38:	4650      	mov	r0, sl
   17d3a:	960f      	str	r6, [sp, #60]	; 0x3c
   17d3c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   17d40:	9321      	str	r3, [sp, #132]	; 0x84
   17d42:	f7fe fae5 	bl	16310 <mbedtls_mpi_cmp_mpi.constprop.6>
   17d46:	2800      	cmp	r0, #0
   17d48:	d1e8      	bne.n	17d1c <mbedtls_mpi_div_mpi+0x750>
   17d4a:	f8ca 4000 	str.w	r4, [sl]
   17d4e:	e7e5      	b.n	17d1c <mbedtls_mpi_div_mpi+0x750>

00017d50 <mbedtls_mpi_mod_mpi>:
   17d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d54:	6853      	ldr	r3, [r2, #4]
   17d56:	4617      	mov	r7, r2
   17d58:	b183      	cbz	r3, 17d7c <mbedtls_mpi_mod_mpi+0x2c>
   17d5a:	6894      	ldr	r4, [r2, #8]
   17d5c:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
   17d60:	3d01      	subs	r5, #1
   17d62:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   17d66:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   17d6a:	b12a      	cbz	r2, 17d78 <mbedtls_mpi_mod_mpi+0x28>
   17d6c:	e11a      	b.n	17fa4 <mbedtls_mpi_mod_mpi+0x254>
   17d6e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   17d72:	2d00      	cmp	r5, #0
   17d74:	f040 8116 	bne.w	17fa4 <mbedtls_mpi_mod_mpi+0x254>
   17d78:	3b01      	subs	r3, #1
   17d7a:	d1f8      	bne.n	17d6e <mbedtls_mpi_mod_mpi+0x1e>
   17d7c:	460a      	mov	r2, r1
   17d7e:	4606      	mov	r6, r0
   17d80:	4601      	mov	r1, r0
   17d82:	463b      	mov	r3, r7
   17d84:	2000      	movs	r0, #0
   17d86:	f7ff fc21 	bl	175cc <mbedtls_mpi_div_mpi>
   17d8a:	2800      	cmp	r0, #0
   17d8c:	d151      	bne.n	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17d8e:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
   17d92:	6871      	ldr	r1, [r6, #4]
   17d94:	b191      	cbz	r1, 17dbc <mbedtls_mpi_mod_mpi+0x6c>
   17d96:	68b0      	ldr	r0, [r6, #8]
   17d98:	eb01 0308 	add.w	r3, r1, r8
   17d9c:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
   17da0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   17da4:	f1bc 0f00 	cmp.w	ip, #0
   17da8:	d156      	bne.n	17e58 <mbedtls_mpi_mod_mpi+0x108>
   17daa:	4614      	mov	r4, r2
   17dac:	460b      	mov	r3, r1
   17dae:	e003      	b.n	17db8 <mbedtls_mpi_mod_mpi+0x68>
   17db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   17db4:	2d00      	cmp	r5, #0
   17db6:	d14f      	bne.n	17e58 <mbedtls_mpi_mod_mpi+0x108>
   17db8:	3b01      	subs	r3, #1
   17dba:	d1f9      	bne.n	17db0 <mbedtls_mpi_mod_mpi+0x60>
   17dbc:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
   17dc0:	4639      	mov	r1, r7
   17dc2:	4630      	mov	r0, r6
   17dc4:	f7fe ffa8 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   17dc8:	2800      	cmp	r0, #0
   17dca:	db42      	blt.n	17e52 <mbedtls_mpi_mod_mpi+0x102>
   17dcc:	6835      	ldr	r5, [r6, #0]
   17dce:	683b      	ldr	r3, [r7, #0]
   17dd0:	fb03 f305 	mul.w	r3, r3, r5
   17dd4:	2b00      	cmp	r3, #0
   17dd6:	dd2e      	ble.n	17e36 <mbedtls_mpi_mod_mpi+0xe6>
   17dd8:	6873      	ldr	r3, [r6, #4]
   17dda:	687a      	ldr	r2, [r7, #4]
   17ddc:	b183      	cbz	r3, 17e00 <mbedtls_mpi_mod_mpi+0xb0>
   17dde:	68b1      	ldr	r1, [r6, #8]
   17de0:	1918      	adds	r0, r3, r4
   17de2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
   17de6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   17dea:	f1bc 0f00 	cmp.w	ip, #0
   17dee:	d005      	beq.n	17dfc <mbedtls_mpi_mod_mpi+0xac>
   17df0:	e090      	b.n	17f14 <mbedtls_mpi_mod_mpi+0x1c4>
   17df2:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17df6:	2800      	cmp	r0, #0
   17df8:	f040 808c 	bne.w	17f14 <mbedtls_mpi_mod_mpi+0x1c4>
   17dfc:	3b01      	subs	r3, #1
   17dfe:	d1f8      	bne.n	17df2 <mbedtls_mpi_mod_mpi+0xa2>
   17e00:	b18a      	cbz	r2, 17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17e02:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17e06:	1911      	adds	r1, r2, r4
   17e08:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   17e0c:	2800      	cmp	r0, #0
   17e0e:	f040 80be 	bne.w	17f8e <mbedtls_mpi_mod_mpi+0x23e>
   17e12:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   17e16:	e004      	b.n	17e22 <mbedtls_mpi_mod_mpi+0xd2>
   17e18:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17e1c:	2800      	cmp	r0, #0
   17e1e:	f040 8083 	bne.w	17f28 <mbedtls_mpi_mod_mpi+0x1d8>
   17e22:	3a01      	subs	r2, #1
   17e24:	d1f8      	bne.n	17e18 <mbedtls_mpi_mod_mpi+0xc8>
   17e26:	463a      	mov	r2, r7
   17e28:	4631      	mov	r1, r6
   17e2a:	4630      	mov	r0, r6
   17e2c:	f7ff f8d4 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17e30:	b140      	cbz	r0, 17e44 <mbedtls_mpi_mod_mpi+0xf4>
   17e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e36:	463a      	mov	r2, r7
   17e38:	4631      	mov	r1, r6
   17e3a:	4630      	mov	r0, r6
   17e3c:	f7ff f828 	bl	16e90 <mbedtls_mpi_add_abs>
   17e40:	2800      	cmp	r0, #0
   17e42:	d1f6      	bne.n	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17e44:	6035      	str	r5, [r6, #0]
   17e46:	4639      	mov	r1, r7
   17e48:	4630      	mov	r0, r6
   17e4a:	f7fe ff65 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   17e4e:	2800      	cmp	r0, #0
   17e50:	dabc      	bge.n	17dcc <mbedtls_mpi_mod_mpi+0x7c>
   17e52:	2000      	movs	r0, #0
   17e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e58:	6834      	ldr	r4, [r6, #0]
   17e5a:	2c00      	cmp	r4, #0
   17e5c:	daae      	bge.n	17dbc <mbedtls_mpi_mod_mpi+0x6c>
   17e5e:	683b      	ldr	r3, [r7, #0]
   17e60:	fb03 f304 	mul.w	r3, r3, r4
   17e64:	2b00      	cmp	r3, #0
   17e66:	da23      	bge.n	17eb0 <mbedtls_mpi_mod_mpi+0x160>
   17e68:	f1bc 0f00 	cmp.w	ip, #0
   17e6c:	d129      	bne.n	17ec2 <mbedtls_mpi_mod_mpi+0x172>
   17e6e:	4613      	mov	r3, r2
   17e70:	e002      	b.n	17e78 <mbedtls_mpi_mod_mpi+0x128>
   17e72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   17e76:	bb22      	cbnz	r2, 17ec2 <mbedtls_mpi_mod_mpi+0x172>
   17e78:	3901      	subs	r1, #1
   17e7a:	d1fa      	bne.n	17e72 <mbedtls_mpi_mod_mpi+0x122>
   17e7c:	687b      	ldr	r3, [r7, #4]
   17e7e:	b173      	cbz	r3, 17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17e80:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17e84:	eb03 0208 	add.w	r2, r3, r8
   17e88:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
   17e8c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   17e90:	b11d      	cbz	r5, 17e9a <mbedtls_mpi_mod_mpi+0x14a>
   17e92:	e071      	b.n	17f78 <mbedtls_mpi_mod_mpi+0x228>
   17e94:	f852 5d04 	ldr.w	r5, [r2, #-4]!
   17e98:	bb05      	cbnz	r5, 17edc <mbedtls_mpi_mod_mpi+0x18c>
   17e9a:	3b01      	subs	r3, #1
   17e9c:	d1fa      	bne.n	17e94 <mbedtls_mpi_mod_mpi+0x144>
   17e9e:	463a      	mov	r2, r7
   17ea0:	4631      	mov	r1, r6
   17ea2:	4630      	mov	r0, r6
   17ea4:	f7ff f898 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d1c2      	bne.n	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17eac:	6034      	str	r4, [r6, #0]
   17eae:	e770      	b.n	17d92 <mbedtls_mpi_mod_mpi+0x42>
   17eb0:	463a      	mov	r2, r7
   17eb2:	4631      	mov	r1, r6
   17eb4:	4630      	mov	r0, r6
   17eb6:	f7fe ffeb 	bl	16e90 <mbedtls_mpi_add_abs>
   17eba:	2800      	cmp	r0, #0
   17ebc:	d0f6      	beq.n	17eac <mbedtls_mpi_mod_mpi+0x15c>
   17ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ec2:	687b      	ldr	r3, [r7, #4]
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d0ea      	beq.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17ec8:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17ecc:	eb03 0208 	add.w	r2, r3, r8
   17ed0:	f85c 5022 	ldr.w	r5, [ip, r2, lsl #2]
   17ed4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   17ed8:	2d00      	cmp	r5, #0
   17eda:	d0de      	beq.n	17e9a <mbedtls_mpi_mod_mpi+0x14a>
   17edc:	4299      	cmp	r1, r3
   17ede:	d8de      	bhi.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17ee0:	d34a      	bcc.n	17f78 <mbedtls_mpi_mod_mpi+0x228>
   17ee2:	2900      	cmp	r1, #0
   17ee4:	d0db      	beq.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17ee6:	eb01 0308 	add.w	r3, r1, r8
   17eea:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   17eee:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
   17ef2:	009b      	lsls	r3, r3, #2
   17ef4:	4295      	cmp	r5, r2
   17ef6:	4418      	add	r0, r3
   17ef8:	4463      	add	r3, ip
   17efa:	d3d0      	bcc.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17efc:	d907      	bls.n	17f0e <mbedtls_mpi_mod_mpi+0x1be>
   17efe:	e03b      	b.n	17f78 <mbedtls_mpi_mod_mpi+0x228>
   17f00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   17f04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   17f08:	4295      	cmp	r5, r2
   17f0a:	d8c8      	bhi.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17f0c:	d334      	bcc.n	17f78 <mbedtls_mpi_mod_mpi+0x228>
   17f0e:	3901      	subs	r1, #1
   17f10:	d1f6      	bne.n	17f00 <mbedtls_mpi_mod_mpi+0x1b0>
   17f12:	e7c4      	b.n	17e9e <mbedtls_mpi_mod_mpi+0x14e>
   17f14:	2a00      	cmp	r2, #0
   17f16:	d086      	beq.n	17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17f18:	f8d7 c008 	ldr.w	ip, [r7, #8]
   17f1c:	1911      	adds	r1, r2, r4
   17f1e:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
   17f22:	2800      	cmp	r0, #0
   17f24:	f43f af75 	beq.w	17e12 <mbedtls_mpi_mod_mpi+0xc2>
   17f28:	4293      	cmp	r3, r2
   17f2a:	f63f af7c 	bhi.w	17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17f2e:	d32e      	bcc.n	17f8e <mbedtls_mpi_mod_mpi+0x23e>
   17f30:	2b00      	cmp	r3, #0
   17f32:	f43f af78 	beq.w	17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17f36:	68b1      	ldr	r1, [r6, #8]
   17f38:	191a      	adds	r2, r3, r4
   17f3a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   17f3e:	f85c e022 	ldr.w	lr, [ip, r2, lsl #2]
   17f42:	0092      	lsls	r2, r2, #2
   17f44:	4586      	cmp	lr, r0
   17f46:	4411      	add	r1, r2
   17f48:	4462      	add	r2, ip
   17f4a:	f4ff af6c 	bcc.w	17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17f4e:	d908      	bls.n	17f62 <mbedtls_mpi_mod_mpi+0x212>
   17f50:	e01d      	b.n	17f8e <mbedtls_mpi_mod_mpi+0x23e>
   17f52:	f851 cd04 	ldr.w	ip, [r1, #-4]!
   17f56:	f852 0d04 	ldr.w	r0, [r2, #-4]!
   17f5a:	4584      	cmp	ip, r0
   17f5c:	f63f af63 	bhi.w	17e26 <mbedtls_mpi_mod_mpi+0xd6>
   17f60:	d315      	bcc.n	17f8e <mbedtls_mpi_mod_mpi+0x23e>
   17f62:	3b01      	subs	r3, #1
   17f64:	d1f5      	bne.n	17f52 <mbedtls_mpi_mod_mpi+0x202>
   17f66:	463a      	mov	r2, r7
   17f68:	4631      	mov	r1, r6
   17f6a:	4630      	mov	r0, r6
   17f6c:	f7ff f834 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17f70:	2800      	cmp	r0, #0
   17f72:	f47f af5e 	bne.w	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17f76:	e765      	b.n	17e44 <mbedtls_mpi_mod_mpi+0xf4>
   17f78:	4632      	mov	r2, r6
   17f7a:	4639      	mov	r1, r7
   17f7c:	4630      	mov	r0, r6
   17f7e:	f7ff f82b 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17f82:	2800      	cmp	r0, #0
   17f84:	f47f af55 	bne.w	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17f88:	4264      	negs	r4, r4
   17f8a:	6034      	str	r4, [r6, #0]
   17f8c:	e701      	b.n	17d92 <mbedtls_mpi_mod_mpi+0x42>
   17f8e:	4632      	mov	r2, r6
   17f90:	4639      	mov	r1, r7
   17f92:	4630      	mov	r0, r6
   17f94:	f7ff f820 	bl	16fd8 <mbedtls_mpi_sub_abs>
   17f98:	2800      	cmp	r0, #0
   17f9a:	f47f af4a 	bne.w	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17f9e:	426d      	negs	r5, r5
   17fa0:	6035      	str	r5, [r6, #0]
   17fa2:	e70d      	b.n	17dc0 <mbedtls_mpi_mod_mpi+0x70>
   17fa4:	683b      	ldr	r3, [r7, #0]
   17fa6:	2b00      	cmp	r3, #0
   17fa8:	f6bf aee8 	bge.w	17d7c <mbedtls_mpi_mod_mpi+0x2c>
   17fac:	f06f 0009 	mvn.w	r0, #9
   17fb0:	e73f      	b.n	17e32 <mbedtls_mpi_mod_mpi+0xe2>
   17fb2:	bf00      	nop

00017fb4 <mbedtls_mpi_gcd>:
   17fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fb8:	460f      	mov	r7, r1
   17fba:	2501      	movs	r5, #1
   17fbc:	2100      	movs	r1, #0
   17fbe:	68bb      	ldr	r3, [r7, #8]
   17fc0:	b086      	sub	sp, #24
   17fc2:	4604      	mov	r4, r0
   17fc4:	4616      	mov	r6, r2
   17fc6:	9500      	str	r5, [sp, #0]
   17fc8:	9503      	str	r5, [sp, #12]
   17fca:	e9cd 1101 	strd	r1, r1, [sp, #4]
   17fce:	e9cd 1104 	strd	r1, r1, [sp, #16]
   17fd2:	2b00      	cmp	r3, #0
   17fd4:	d040      	beq.n	18058 <mbedtls_mpi_gcd+0xa4>
   17fd6:	6879      	ldr	r1, [r7, #4]
   17fd8:	1e4a      	subs	r2, r1, #1
   17fda:	d011      	beq.n	18000 <mbedtls_mpi_gcd+0x4c>
   17fdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17fe0:	2800      	cmp	r0, #0
   17fe2:	f040 80c4 	bne.w	1816e <mbedtls_mpi_gcd+0x1ba>
   17fe6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   17fea:	3901      	subs	r1, #1
   17fec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   17ff0:	e004      	b.n	17ffc <mbedtls_mpi_gcd+0x48>
   17ff2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   17ff6:	2900      	cmp	r1, #0
   17ff8:	f040 80b9 	bne.w	1816e <mbedtls_mpi_gcd+0x1ba>
   17ffc:	3a01      	subs	r2, #1
   17ffe:	d1f8      	bne.n	17ff2 <mbedtls_mpi_gcd+0x3e>
   18000:	2501      	movs	r5, #1
   18002:	683b      	ldr	r3, [r7, #0]
   18004:	9300      	str	r3, [sp, #0]
   18006:	2104      	movs	r1, #4
   18008:	4628      	mov	r0, r5
   1800a:	f7fc fc3b 	bl	14884 <nrf_calloc>
   1800e:	4680      	mov	r8, r0
   18010:	2800      	cmp	r0, #0
   18012:	f000 813c 	beq.w	1828e <mbedtls_mpi_gcd+0x2da>
   18016:	9902      	ldr	r1, [sp, #8]
   18018:	b189      	cbz	r1, 1803e <mbedtls_mpi_gcd+0x8a>
   1801a:	9a01      	ldr	r2, [sp, #4]
   1801c:	0092      	lsls	r2, r2, #2
   1801e:	f00d ff22 	bl	25e66 <memcpy>
   18022:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
   18026:	1e53      	subs	r3, r2, #1
   18028:	b13a      	cbz	r2, 1803a <mbedtls_mpi_gcd+0x86>
   1802a:	2200      	movs	r2, #0
   1802c:	3b01      	subs	r3, #1
   1802e:	1c59      	adds	r1, r3, #1
   18030:	6002      	str	r2, [r0, #0]
   18032:	f100 0004 	add.w	r0, r0, #4
   18036:	d1f9      	bne.n	1802c <mbedtls_mpi_gcd+0x78>
   18038:	9802      	ldr	r0, [sp, #8]
   1803a:	f7fc fc37 	bl	148ac <nrf_free>
   1803e:	e9cd 5801 	strd	r5, r8, [sp, #4]
   18042:	00ad      	lsls	r5, r5, #2
   18044:	462a      	mov	r2, r5
   18046:	2100      	movs	r1, #0
   18048:	4640      	mov	r0, r8
   1804a:	f00d ff39 	bl	25ec0 <memset>
   1804e:	462a      	mov	r2, r5
   18050:	68b9      	ldr	r1, [r7, #8]
   18052:	9802      	ldr	r0, [sp, #8]
   18054:	f00d ff07 	bl	25e66 <memcpy>
   18058:	4631      	mov	r1, r6
   1805a:	a803      	add	r0, sp, #12
   1805c:	f7fe fa1e 	bl	1649c <mbedtls_mpi_copy>
   18060:	4607      	mov	r7, r0
   18062:	2800      	cmp	r0, #0
   18064:	d15d      	bne.n	18122 <mbedtls_mpi_gcd+0x16e>
   18066:	9e01      	ldr	r6, [sp, #4]
   18068:	2e00      	cmp	r6, #0
   1806a:	f000 810e 	beq.w	1828a <mbedtls_mpi_gcd+0x2d6>
   1806e:	4601      	mov	r1, r0
   18070:	9d02      	ldr	r5, [sp, #8]
   18072:	3d04      	subs	r5, #4
   18074:	2200      	movs	r2, #0
   18076:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1807a:	e004      	b.n	18086 <mbedtls_mpi_gcd+0xd2>
   1807c:	2a20      	cmp	r2, #32
   1807e:	f101 0101 	add.w	r1, r1, #1
   18082:	f000 8081 	beq.w	18188 <mbedtls_mpi_gcd+0x1d4>
   18086:	fa20 f302 	lsr.w	r3, r0, r2
   1808a:	f013 0301 	ands.w	r3, r3, #1
   1808e:	f102 0201 	add.w	r2, r2, #1
   18092:	d0f3      	beq.n	1807c <mbedtls_mpi_gcd+0xc8>
   18094:	9d04      	ldr	r5, [sp, #16]
   18096:	b1b5      	cbz	r5, 180c6 <mbedtls_mpi_gcd+0x112>
   18098:	2000      	movs	r0, #0
   1809a:	4684      	mov	ip, r0
   1809c:	9f05      	ldr	r7, [sp, #20]
   1809e:	3f04      	subs	r7, #4
   180a0:	2200      	movs	r2, #0
   180a2:	f857 6f04 	ldr.w	r6, [r7, #4]!
   180a6:	e003      	b.n	180b0 <mbedtls_mpi_gcd+0xfc>
   180a8:	2a20      	cmp	r2, #32
   180aa:	f100 0001 	add.w	r0, r0, #1
   180ae:	d071      	beq.n	18194 <mbedtls_mpi_gcd+0x1e0>
   180b0:	fa26 f302 	lsr.w	r3, r6, r2
   180b4:	f013 0301 	ands.w	r3, r3, #1
   180b8:	f102 0201 	add.w	r2, r2, #1
   180bc:	d0f4      	beq.n	180a8 <mbedtls_mpi_gcd+0xf4>
   180be:	4281      	cmp	r1, r0
   180c0:	bf28      	it	cs
   180c2:	4601      	movcs	r1, r0
   180c4:	460d      	mov	r5, r1
   180c6:	4668      	mov	r0, sp
   180c8:	4629      	mov	r1, r5
   180ca:	f7fe fdb5 	bl	16c38 <mbedtls_mpi_shift_r>
   180ce:	4607      	mov	r7, r0
   180d0:	bb38      	cbnz	r0, 18122 <mbedtls_mpi_gcd+0x16e>
   180d2:	4629      	mov	r1, r5
   180d4:	a803      	add	r0, sp, #12
   180d6:	f7fe fdaf 	bl	16c38 <mbedtls_mpi_shift_r>
   180da:	4607      	mov	r7, r0
   180dc:	bb08      	cbnz	r0, 18122 <mbedtls_mpi_gcd+0x16e>
   180de:	2301      	movs	r3, #1
   180e0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
   180e4:	9303      	str	r3, [sp, #12]
   180e6:	9300      	str	r3, [sp, #0]
   180e8:	9f01      	ldr	r7, [sp, #4]
   180ea:	b17f      	cbz	r7, 1810c <mbedtls_mpi_gcd+0x158>
   180ec:	9802      	ldr	r0, [sp, #8]
   180ee:	19ba      	adds	r2, r7, r6
   180f0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   180f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   180f8:	2b00      	cmp	r3, #0
   180fa:	d151      	bne.n	181a0 <mbedtls_mpi_gcd+0x1ec>
   180fc:	463b      	mov	r3, r7
   180fe:	e003      	b.n	18108 <mbedtls_mpi_gcd+0x154>
   18100:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   18104:	2900      	cmp	r1, #0
   18106:	d14b      	bne.n	181a0 <mbedtls_mpi_gcd+0x1ec>
   18108:	3b01      	subs	r3, #1
   1810a:	d1f9      	bne.n	18100 <mbedtls_mpi_gcd+0x14c>
   1810c:	4629      	mov	r1, r5
   1810e:	a803      	add	r0, sp, #12
   18110:	f7fe fcdc 	bl	16acc <mbedtls_mpi_shift_l>
   18114:	4607      	mov	r7, r0
   18116:	b920      	cbnz	r0, 18122 <mbedtls_mpi_gcd+0x16e>
   18118:	a903      	add	r1, sp, #12
   1811a:	4620      	mov	r0, r4
   1811c:	f7fe f9be 	bl	1649c <mbedtls_mpi_copy>
   18120:	4607      	mov	r7, r0
   18122:	9802      	ldr	r0, [sp, #8]
   18124:	b160      	cbz	r0, 18140 <mbedtls_mpi_gcd+0x18c>
   18126:	9a01      	ldr	r2, [sp, #4]
   18128:	1e53      	subs	r3, r2, #1
   1812a:	b13a      	cbz	r2, 1813c <mbedtls_mpi_gcd+0x188>
   1812c:	2200      	movs	r2, #0
   1812e:	3b01      	subs	r3, #1
   18130:	1c5c      	adds	r4, r3, #1
   18132:	6002      	str	r2, [r0, #0]
   18134:	f100 0004 	add.w	r0, r0, #4
   18138:	d1f9      	bne.n	1812e <mbedtls_mpi_gcd+0x17a>
   1813a:	9802      	ldr	r0, [sp, #8]
   1813c:	f7fc fbb6 	bl	148ac <nrf_free>
   18140:	2200      	movs	r2, #0
   18142:	2301      	movs	r3, #1
   18144:	9805      	ldr	r0, [sp, #20]
   18146:	e9cd 3200 	strd	r3, r2, [sp]
   1814a:	9202      	str	r2, [sp, #8]
   1814c:	b158      	cbz	r0, 18166 <mbedtls_mpi_gcd+0x1b2>
   1814e:	9904      	ldr	r1, [sp, #16]
   18150:	1e4b      	subs	r3, r1, #1
   18152:	b131      	cbz	r1, 18162 <mbedtls_mpi_gcd+0x1ae>
   18154:	3b01      	subs	r3, #1
   18156:	1c59      	adds	r1, r3, #1
   18158:	6002      	str	r2, [r0, #0]
   1815a:	f100 0004 	add.w	r0, r0, #4
   1815e:	d1f9      	bne.n	18154 <mbedtls_mpi_gcd+0x1a0>
   18160:	9805      	ldr	r0, [sp, #20]
   18162:	f7fc fba3 	bl	148ac <nrf_free>
   18166:	4638      	mov	r0, r7
   18168:	b006      	add	sp, #24
   1816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1816e:	f242 7310 	movw	r3, #10000	; 0x2710
   18172:	6839      	ldr	r1, [r7, #0]
   18174:	1c55      	adds	r5, r2, #1
   18176:	429d      	cmp	r5, r3
   18178:	9100      	str	r1, [sp, #0]
   1817a:	f200 8083 	bhi.w	18284 <mbedtls_mpi_gcd+0x2d0>
   1817e:	2d00      	cmp	r5, #0
   18180:	f47f af41 	bne.w	18006 <mbedtls_mpi_gcd+0x52>
   18184:	46a8      	mov	r8, r5
   18186:	e75d      	b.n	18044 <mbedtls_mpi_gcd+0x90>
   18188:	3701      	adds	r7, #1
   1818a:	42be      	cmp	r6, r7
   1818c:	f47f af72 	bne.w	18074 <mbedtls_mpi_gcd+0xc0>
   18190:	4619      	mov	r1, r3
   18192:	e77f      	b.n	18094 <mbedtls_mpi_gcd+0xe0>
   18194:	f10c 0c01 	add.w	ip, ip, #1
   18198:	45ac      	cmp	ip, r5
   1819a:	d181      	bne.n	180a0 <mbedtls_mpi_gcd+0xec>
   1819c:	461d      	mov	r5, r3
   1819e:	e792      	b.n	180c6 <mbedtls_mpi_gcd+0x112>
   181a0:	9b00      	ldr	r3, [sp, #0]
   181a2:	2b00      	cmp	r3, #0
   181a4:	d0b2      	beq.n	1810c <mbedtls_mpi_gcd+0x158>
   181a6:	2100      	movs	r1, #0
   181a8:	468e      	mov	lr, r1
   181aa:	f1a0 0c04 	sub.w	ip, r0, #4
   181ae:	2200      	movs	r2, #0
   181b0:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   181b4:	e003      	b.n	181be <mbedtls_mpi_gcd+0x20a>
   181b6:	2a20      	cmp	r2, #32
   181b8:	f101 0101 	add.w	r1, r1, #1
   181bc:	d042      	beq.n	18244 <mbedtls_mpi_gcd+0x290>
   181be:	fa20 f302 	lsr.w	r3, r0, r2
   181c2:	f013 0301 	ands.w	r3, r3, #1
   181c6:	f102 0201 	add.w	r2, r2, #1
   181ca:	d0f4      	beq.n	181b6 <mbedtls_mpi_gcd+0x202>
   181cc:	4668      	mov	r0, sp
   181ce:	f7fe fd33 	bl	16c38 <mbedtls_mpi_shift_r>
   181d2:	4607      	mov	r7, r0
   181d4:	2800      	cmp	r0, #0
   181d6:	d1a4      	bne.n	18122 <mbedtls_mpi_gcd+0x16e>
   181d8:	f8dd c010 	ldr.w	ip, [sp, #16]
   181dc:	f1bc 0f00 	cmp.w	ip, #0
   181e0:	d04e      	beq.n	18280 <mbedtls_mpi_gcd+0x2cc>
   181e2:	4601      	mov	r1, r0
   181e4:	4686      	mov	lr, r0
   181e6:	9f05      	ldr	r7, [sp, #20]
   181e8:	3f04      	subs	r7, #4
   181ea:	2200      	movs	r2, #0
   181ec:	f857 0f04 	ldr.w	r0, [r7, #4]!
   181f0:	e003      	b.n	181fa <mbedtls_mpi_gcd+0x246>
   181f2:	2a20      	cmp	r2, #32
   181f4:	f101 0101 	add.w	r1, r1, #1
   181f8:	d02a      	beq.n	18250 <mbedtls_mpi_gcd+0x29c>
   181fa:	fa20 f302 	lsr.w	r3, r0, r2
   181fe:	f013 0301 	ands.w	r3, r3, #1
   18202:	f102 0201 	add.w	r2, r2, #1
   18206:	d0f4      	beq.n	181f2 <mbedtls_mpi_gcd+0x23e>
   18208:	a803      	add	r0, sp, #12
   1820a:	f7fe fd15 	bl	16c38 <mbedtls_mpi_shift_r>
   1820e:	4607      	mov	r7, r0
   18210:	2800      	cmp	r0, #0
   18212:	d186      	bne.n	18122 <mbedtls_mpi_gcd+0x16e>
   18214:	a903      	add	r1, sp, #12
   18216:	4668      	mov	r0, sp
   18218:	f7fe fd7e 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1821c:	2800      	cmp	r0, #0
   1821e:	db1d      	blt.n	1825c <mbedtls_mpi_gcd+0x2a8>
   18220:	aa03      	add	r2, sp, #12
   18222:	4669      	mov	r1, sp
   18224:	4668      	mov	r0, sp
   18226:	f7fe fed7 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1822a:	4607      	mov	r7, r0
   1822c:	2800      	cmp	r0, #0
   1822e:	f47f af78 	bne.w	18122 <mbedtls_mpi_gcd+0x16e>
   18232:	2101      	movs	r1, #1
   18234:	4668      	mov	r0, sp
   18236:	f7fe fcff 	bl	16c38 <mbedtls_mpi_shift_r>
   1823a:	4607      	mov	r7, r0
   1823c:	2800      	cmp	r0, #0
   1823e:	f43f af53 	beq.w	180e8 <mbedtls_mpi_gcd+0x134>
   18242:	e76e      	b.n	18122 <mbedtls_mpi_gcd+0x16e>
   18244:	f10e 0e01 	add.w	lr, lr, #1
   18248:	45be      	cmp	lr, r7
   1824a:	d1b0      	bne.n	181ae <mbedtls_mpi_gcd+0x1fa>
   1824c:	4619      	mov	r1, r3
   1824e:	e7bd      	b.n	181cc <mbedtls_mpi_gcd+0x218>
   18250:	f10e 0e01 	add.w	lr, lr, #1
   18254:	45e6      	cmp	lr, ip
   18256:	d1c8      	bne.n	181ea <mbedtls_mpi_gcd+0x236>
   18258:	4619      	mov	r1, r3
   1825a:	e7d5      	b.n	18208 <mbedtls_mpi_gcd+0x254>
   1825c:	a903      	add	r1, sp, #12
   1825e:	466a      	mov	r2, sp
   18260:	4608      	mov	r0, r1
   18262:	f7fe feb9 	bl	16fd8 <mbedtls_mpi_sub_abs>
   18266:	4607      	mov	r7, r0
   18268:	2800      	cmp	r0, #0
   1826a:	f47f af5a 	bne.w	18122 <mbedtls_mpi_gcd+0x16e>
   1826e:	2101      	movs	r1, #1
   18270:	a803      	add	r0, sp, #12
   18272:	f7fe fce1 	bl	16c38 <mbedtls_mpi_shift_r>
   18276:	4607      	mov	r7, r0
   18278:	2800      	cmp	r0, #0
   1827a:	f43f af35 	beq.w	180e8 <mbedtls_mpi_gcd+0x134>
   1827e:	e750      	b.n	18122 <mbedtls_mpi_gcd+0x16e>
   18280:	4661      	mov	r1, ip
   18282:	e7c1      	b.n	18208 <mbedtls_mpi_gcd+0x254>
   18284:	f06f 070f 	mvn.w	r7, #15
   18288:	e75a      	b.n	18140 <mbedtls_mpi_gcd+0x18c>
   1828a:	4631      	mov	r1, r6
   1828c:	e702      	b.n	18094 <mbedtls_mpi_gcd+0xe0>
   1828e:	9802      	ldr	r0, [sp, #8]
   18290:	f06f 070f 	mvn.w	r7, #15
   18294:	e746      	b.n	18124 <mbedtls_mpi_gcd+0x170>
   18296:	bf00      	nop

00018298 <mbedtls_mpi_fill_random>:
   18298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1829c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   182a0:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   182a4:	f200 80a5 	bhi.w	183f2 <mbedtls_mpi_fill_random+0x15a>
   182a8:	460d      	mov	r5, r1
   182aa:	4617      	mov	r7, r2
   182ac:	4606      	mov	r6, r0
   182ae:	4669      	mov	r1, sp
   182b0:	4618      	mov	r0, r3
   182b2:	462a      	mov	r2, r5
   182b4:	47b8      	blx	r7
   182b6:	4607      	mov	r7, r0
   182b8:	b120      	cbz	r0, 182c4 <mbedtls_mpi_fill_random+0x2c>
   182ba:	4638      	mov	r0, r7
   182bc:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   182c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   182c4:	2d00      	cmp	r5, #0
   182c6:	f000 808a 	beq.w	183de <mbedtls_mpi_fill_random+0x146>
   182ca:	f89d 3000 	ldrb.w	r3, [sp]
   182ce:	2b00      	cmp	r3, #0
   182d0:	f040 8089 	bne.w	183e6 <mbedtls_mpi_fill_random+0x14e>
   182d4:	466b      	mov	r3, sp
   182d6:	4604      	mov	r4, r0
   182d8:	e003      	b.n	182e2 <mbedtls_mpi_fill_random+0x4a>
   182da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   182de:	2a00      	cmp	r2, #0
   182e0:	d14d      	bne.n	1837e <mbedtls_mpi_fill_random+0xe6>
   182e2:	3401      	adds	r4, #1
   182e4:	42a5      	cmp	r5, r4
   182e6:	d1f8      	bne.n	182da <mbedtls_mpi_fill_random+0x42>
   182e8:	f8d6 8004 	ldr.w	r8, [r6, #4]
   182ec:	f1b8 0f00 	cmp.w	r8, #0
   182f0:	d170      	bne.n	183d4 <mbedtls_mpi_fill_random+0x13c>
   182f2:	2104      	movs	r1, #4
   182f4:	2001      	movs	r0, #1
   182f6:	f7fc fac5 	bl	14884 <nrf_calloc>
   182fa:	4681      	mov	r9, r0
   182fc:	2800      	cmp	r0, #0
   182fe:	d075      	beq.n	183ec <mbedtls_mpi_fill_random+0x154>
   18300:	68b1      	ldr	r1, [r6, #8]
   18302:	b189      	cbz	r1, 18328 <mbedtls_mpi_fill_random+0x90>
   18304:	6872      	ldr	r2, [r6, #4]
   18306:	0092      	lsls	r2, r2, #2
   18308:	f00d fdad 	bl	25e66 <memcpy>
   1830c:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   18310:	1e53      	subs	r3, r2, #1
   18312:	b13a      	cbz	r2, 18324 <mbedtls_mpi_fill_random+0x8c>
   18314:	4642      	mov	r2, r8
   18316:	3b01      	subs	r3, #1
   18318:	1c59      	adds	r1, r3, #1
   1831a:	6002      	str	r2, [r0, #0]
   1831c:	f100 0004 	add.w	r0, r0, #4
   18320:	d1f9      	bne.n	18316 <mbedtls_mpi_fill_random+0x7e>
   18322:	68b0      	ldr	r0, [r6, #8]
   18324:	f7fc fac2 	bl	148ac <nrf_free>
   18328:	2301      	movs	r3, #1
   1832a:	2204      	movs	r2, #4
   1832c:	e9c6 3901 	strd	r3, r9, [r6, #4]
   18330:	2100      	movs	r1, #0
   18332:	4648      	mov	r0, r9
   18334:	f00d fdc4 	bl	25ec0 <memset>
   18338:	2300      	movs	r3, #0
   1833a:	2201      	movs	r2, #1
   1833c:	68b1      	ldr	r1, [r6, #8]
   1833e:	42a5      	cmp	r5, r4
   18340:	600b      	str	r3, [r1, #0]
   18342:	6032      	str	r2, [r6, #0]
   18344:	d9b9      	bls.n	182ba <mbedtls_mpi_fill_random+0x22>
   18346:	eb0d 0205 	add.w	r2, sp, r5
   1834a:	1b2c      	subs	r4, r5, r4
   1834c:	68b1      	ldr	r1, [r6, #8]
   1834e:	f023 0803 	bic.w	r8, r3, #3
   18352:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
   18356:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1835a:	f851 0008 	ldr.w	r0, [r1, r8]
   1835e:	f00e 0e18 	and.w	lr, lr, #24
   18362:	fa0c fc0e 	lsl.w	ip, ip, lr
   18366:	3301      	adds	r3, #1
   18368:	ea40 000c 	orr.w	r0, r0, ip
   1836c:	42a3      	cmp	r3, r4
   1836e:	f841 0008 	str.w	r0, [r1, r8]
   18372:	d1eb      	bne.n	1834c <mbedtls_mpi_fill_random+0xb4>
   18374:	4638      	mov	r0, r7
   18376:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   1837a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1837e:	1b2a      	subs	r2, r5, r4
   18380:	f012 0803 	ands.w	r8, r2, #3
   18384:	bf18      	it	ne
   18386:	f04f 0801 	movne.w	r8, #1
   1838a:	f242 7310 	movw	r3, #10000	; 0x2710
   1838e:	eb08 0892 	add.w	r8, r8, r2, lsr #2
   18392:	4598      	cmp	r8, r3
   18394:	d82a      	bhi.n	183ec <mbedtls_mpi_fill_random+0x154>
   18396:	6873      	ldr	r3, [r6, #4]
   18398:	4598      	cmp	r8, r3
   1839a:	d92d      	bls.n	183f8 <mbedtls_mpi_fill_random+0x160>
   1839c:	2104      	movs	r1, #4
   1839e:	4640      	mov	r0, r8
   183a0:	f7fc fa70 	bl	14884 <nrf_calloc>
   183a4:	4681      	mov	r9, r0
   183a6:	b308      	cbz	r0, 183ec <mbedtls_mpi_fill_random+0x154>
   183a8:	68b1      	ldr	r1, [r6, #8]
   183aa:	b189      	cbz	r1, 183d0 <mbedtls_mpi_fill_random+0x138>
   183ac:	6872      	ldr	r2, [r6, #4]
   183ae:	0092      	lsls	r2, r2, #2
   183b0:	f00d fd59 	bl	25e66 <memcpy>
   183b4:	e9d6 2001 	ldrd	r2, r0, [r6, #4]
   183b8:	1e53      	subs	r3, r2, #1
   183ba:	b13a      	cbz	r2, 183cc <mbedtls_mpi_fill_random+0x134>
   183bc:	2200      	movs	r2, #0
   183be:	3b01      	subs	r3, #1
   183c0:	1c59      	adds	r1, r3, #1
   183c2:	6002      	str	r2, [r0, #0]
   183c4:	f100 0004 	add.w	r0, r0, #4
   183c8:	d1f9      	bne.n	183be <mbedtls_mpi_fill_random+0x126>
   183ca:	68b0      	ldr	r0, [r6, #8]
   183cc:	f7fc fa6e 	bl	148ac <nrf_free>
   183d0:	e9c6 8901 	strd	r8, r9, [r6, #4]
   183d4:	ea4f 0288 	mov.w	r2, r8, lsl #2
   183d8:	f8d6 9008 	ldr.w	r9, [r6, #8]
   183dc:	e7a8      	b.n	18330 <mbedtls_mpi_fill_random+0x98>
   183de:	f8d6 8004 	ldr.w	r8, [r6, #4]
   183e2:	462c      	mov	r4, r5
   183e4:	e782      	b.n	182ec <mbedtls_mpi_fill_random+0x54>
   183e6:	462a      	mov	r2, r5
   183e8:	4604      	mov	r4, r0
   183ea:	e7c9      	b.n	18380 <mbedtls_mpi_fill_random+0xe8>
   183ec:	f06f 070f 	mvn.w	r7, #15
   183f0:	e763      	b.n	182ba <mbedtls_mpi_fill_random+0x22>
   183f2:	f06f 0703 	mvn.w	r7, #3
   183f6:	e760      	b.n	182ba <mbedtls_mpi_fill_random+0x22>
   183f8:	4698      	mov	r8, r3
   183fa:	e777      	b.n	182ec <mbedtls_mpi_fill_random+0x54>

000183fc <mbedtls_mpi_inv_mod>:
   183fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18400:	6853      	ldr	r3, [r2, #4]
   18402:	b0a1      	sub	sp, #132	; 0x84
   18404:	b17b      	cbz	r3, 18426 <mbedtls_mpi_inv_mod+0x2a>
   18406:	6894      	ldr	r4, [r2, #8]
   18408:	f103 4c80 	add.w	ip, r3, #1073741824	; 0x40000000
   1840c:	f10c 3cff 	add.w	ip, ip, #4294967295
   18410:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
   18414:	eb04 048c 	add.w	r4, r4, ip, lsl #2
   18418:	b11d      	cbz	r5, 18422 <mbedtls_mpi_inv_mod+0x26>
   1841a:	e00a      	b.n	18432 <mbedtls_mpi_inv_mod+0x36>
   1841c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   18420:	b93d      	cbnz	r5, 18432 <mbedtls_mpi_inv_mod+0x36>
   18422:	3b01      	subs	r3, #1
   18424:	d1fa      	bne.n	1841c <mbedtls_mpi_inv_mod+0x20>
   18426:	f06f 0403 	mvn.w	r4, #3
   1842a:	4620      	mov	r0, r4
   1842c:	b021      	add	sp, #132	; 0x84
   1842e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18432:	6813      	ldr	r3, [r2, #0]
   18434:	2b00      	cmp	r3, #0
   18436:	ddf6      	ble.n	18426 <mbedtls_mpi_inv_mod+0x2a>
   18438:	2401      	movs	r4, #1
   1843a:	2300      	movs	r3, #0
   1843c:	4606      	mov	r6, r0
   1843e:	a802      	add	r0, sp, #8
   18440:	9405      	str	r4, [sp, #20]
   18442:	9408      	str	r4, [sp, #32]
   18444:	940b      	str	r4, [sp, #44]	; 0x2c
   18446:	940e      	str	r4, [sp, #56]	; 0x38
   18448:	9402      	str	r4, [sp, #8]
   1844a:	9411      	str	r4, [sp, #68]	; 0x44
   1844c:	9414      	str	r4, [sp, #80]	; 0x50
   1844e:	9417      	str	r4, [sp, #92]	; 0x5c
   18450:	941a      	str	r4, [sp, #104]	; 0x68
   18452:	460f      	mov	r7, r1
   18454:	4615      	mov	r5, r2
   18456:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1845a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1845e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   18462:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   18466:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1846a:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   1846e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   18472:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
   18476:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
   1847a:	f7ff fd9b 	bl	17fb4 <mbedtls_mpi_gcd>
   1847e:	4604      	mov	r4, r0
   18480:	b9a0      	cbnz	r0, 184ac <mbedtls_mpi_inv_mod+0xb0>
   18482:	9b03      	ldr	r3, [sp, #12]
   18484:	b183      	cbz	r3, 184a8 <mbedtls_mpi_inv_mod+0xac>
   18486:	9904      	ldr	r1, [sp, #16]
   18488:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1848c:	3c01      	subs	r4, #1
   1848e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   18492:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   18496:	b12a      	cbz	r2, 184a4 <mbedtls_mpi_inv_mod+0xa8>
   18498:	e0b5      	b.n	18606 <mbedtls_mpi_inv_mod+0x20a>
   1849a:	f854 2d04 	ldr.w	r2, [r4, #-4]!
   1849e:	2a00      	cmp	r2, #0
   184a0:	f040 80b1 	bne.w	18606 <mbedtls_mpi_inv_mod+0x20a>
   184a4:	3b01      	subs	r3, #1
   184a6:	d1f8      	bne.n	1849a <mbedtls_mpi_inv_mod+0x9e>
   184a8:	f06f 040d 	mvn.w	r4, #13
   184ac:	9807      	ldr	r0, [sp, #28]
   184ae:	b160      	cbz	r0, 184ca <mbedtls_mpi_inv_mod+0xce>
   184b0:	9a06      	ldr	r2, [sp, #24]
   184b2:	1e53      	subs	r3, r2, #1
   184b4:	b13a      	cbz	r2, 184c6 <mbedtls_mpi_inv_mod+0xca>
   184b6:	2200      	movs	r2, #0
   184b8:	3b01      	subs	r3, #1
   184ba:	1c59      	adds	r1, r3, #1
   184bc:	6002      	str	r2, [r0, #0]
   184be:	f100 0004 	add.w	r0, r0, #4
   184c2:	d1f9      	bne.n	184b8 <mbedtls_mpi_inv_mod+0xbc>
   184c4:	9807      	ldr	r0, [sp, #28]
   184c6:	f7fc f9f1 	bl	148ac <nrf_free>
   184ca:	2200      	movs	r2, #0
   184cc:	2301      	movs	r3, #1
   184ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   184d0:	e9cd 3205 	strd	r3, r2, [sp, #20]
   184d4:	9207      	str	r2, [sp, #28]
   184d6:	b158      	cbz	r0, 184f0 <mbedtls_mpi_inv_mod+0xf4>
   184d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   184da:	1e4b      	subs	r3, r1, #1
   184dc:	b131      	cbz	r1, 184ec <mbedtls_mpi_inv_mod+0xf0>
   184de:	3b01      	subs	r3, #1
   184e0:	1c5f      	adds	r7, r3, #1
   184e2:	6002      	str	r2, [r0, #0]
   184e4:	f100 0004 	add.w	r0, r0, #4
   184e8:	d1f9      	bne.n	184de <mbedtls_mpi_inv_mod+0xe2>
   184ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   184ec:	f7fc f9de 	bl	148ac <nrf_free>
   184f0:	2200      	movs	r2, #0
   184f2:	2301      	movs	r3, #1
   184f4:	980d      	ldr	r0, [sp, #52]	; 0x34
   184f6:	e9cd 3208 	strd	r3, r2, [sp, #32]
   184fa:	920a      	str	r2, [sp, #40]	; 0x28
   184fc:	b158      	cbz	r0, 18516 <mbedtls_mpi_inv_mod+0x11a>
   184fe:	990c      	ldr	r1, [sp, #48]	; 0x30
   18500:	1e4b      	subs	r3, r1, #1
   18502:	b131      	cbz	r1, 18512 <mbedtls_mpi_inv_mod+0x116>
   18504:	3b01      	subs	r3, #1
   18506:	1c5e      	adds	r6, r3, #1
   18508:	6002      	str	r2, [r0, #0]
   1850a:	f100 0004 	add.w	r0, r0, #4
   1850e:	d1f9      	bne.n	18504 <mbedtls_mpi_inv_mod+0x108>
   18510:	980d      	ldr	r0, [sp, #52]	; 0x34
   18512:	f7fc f9cb 	bl	148ac <nrf_free>
   18516:	2200      	movs	r2, #0
   18518:	2301      	movs	r3, #1
   1851a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1851c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   18520:	920d      	str	r2, [sp, #52]	; 0x34
   18522:	b158      	cbz	r0, 1853c <mbedtls_mpi_inv_mod+0x140>
   18524:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18526:	1e4b      	subs	r3, r1, #1
   18528:	b131      	cbz	r1, 18538 <mbedtls_mpi_inv_mod+0x13c>
   1852a:	3b01      	subs	r3, #1
   1852c:	1c5d      	adds	r5, r3, #1
   1852e:	6002      	str	r2, [r0, #0]
   18530:	f100 0004 	add.w	r0, r0, #4
   18534:	d1f9      	bne.n	1852a <mbedtls_mpi_inv_mod+0x12e>
   18536:	9810      	ldr	r0, [sp, #64]	; 0x40
   18538:	f7fc f9b8 	bl	148ac <nrf_free>
   1853c:	2200      	movs	r2, #0
   1853e:	2301      	movs	r3, #1
   18540:	9804      	ldr	r0, [sp, #16]
   18542:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   18546:	9210      	str	r2, [sp, #64]	; 0x40
   18548:	b158      	cbz	r0, 18562 <mbedtls_mpi_inv_mod+0x166>
   1854a:	9903      	ldr	r1, [sp, #12]
   1854c:	1e4b      	subs	r3, r1, #1
   1854e:	b131      	cbz	r1, 1855e <mbedtls_mpi_inv_mod+0x162>
   18550:	3b01      	subs	r3, #1
   18552:	1c59      	adds	r1, r3, #1
   18554:	6002      	str	r2, [r0, #0]
   18556:	f100 0004 	add.w	r0, r0, #4
   1855a:	d1f9      	bne.n	18550 <mbedtls_mpi_inv_mod+0x154>
   1855c:	9804      	ldr	r0, [sp, #16]
   1855e:	f7fc f9a5 	bl	148ac <nrf_free>
   18562:	2200      	movs	r2, #0
   18564:	2301      	movs	r3, #1
   18566:	9813      	ldr	r0, [sp, #76]	; 0x4c
   18568:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1856c:	9204      	str	r2, [sp, #16]
   1856e:	b158      	cbz	r0, 18588 <mbedtls_mpi_inv_mod+0x18c>
   18570:	9912      	ldr	r1, [sp, #72]	; 0x48
   18572:	1e4b      	subs	r3, r1, #1
   18574:	b131      	cbz	r1, 18584 <mbedtls_mpi_inv_mod+0x188>
   18576:	3b01      	subs	r3, #1
   18578:	1c5f      	adds	r7, r3, #1
   1857a:	6002      	str	r2, [r0, #0]
   1857c:	f100 0004 	add.w	r0, r0, #4
   18580:	d1f9      	bne.n	18576 <mbedtls_mpi_inv_mod+0x17a>
   18582:	9813      	ldr	r0, [sp, #76]	; 0x4c
   18584:	f7fc f992 	bl	148ac <nrf_free>
   18588:	2200      	movs	r2, #0
   1858a:	2301      	movs	r3, #1
   1858c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1858e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   18592:	9213      	str	r2, [sp, #76]	; 0x4c
   18594:	b158      	cbz	r0, 185ae <mbedtls_mpi_inv_mod+0x1b2>
   18596:	9915      	ldr	r1, [sp, #84]	; 0x54
   18598:	1e4b      	subs	r3, r1, #1
   1859a:	b131      	cbz	r1, 185aa <mbedtls_mpi_inv_mod+0x1ae>
   1859c:	3b01      	subs	r3, #1
   1859e:	1c5e      	adds	r6, r3, #1
   185a0:	6002      	str	r2, [r0, #0]
   185a2:	f100 0004 	add.w	r0, r0, #4
   185a6:	d1f9      	bne.n	1859c <mbedtls_mpi_inv_mod+0x1a0>
   185a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   185aa:	f7fc f97f 	bl	148ac <nrf_free>
   185ae:	2200      	movs	r2, #0
   185b0:	2301      	movs	r3, #1
   185b2:	9819      	ldr	r0, [sp, #100]	; 0x64
   185b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   185b8:	9216      	str	r2, [sp, #88]	; 0x58
   185ba:	b158      	cbz	r0, 185d4 <mbedtls_mpi_inv_mod+0x1d8>
   185bc:	9918      	ldr	r1, [sp, #96]	; 0x60
   185be:	1e4b      	subs	r3, r1, #1
   185c0:	b131      	cbz	r1, 185d0 <mbedtls_mpi_inv_mod+0x1d4>
   185c2:	3b01      	subs	r3, #1
   185c4:	1c5d      	adds	r5, r3, #1
   185c6:	6002      	str	r2, [r0, #0]
   185c8:	f100 0004 	add.w	r0, r0, #4
   185cc:	d1f9      	bne.n	185c2 <mbedtls_mpi_inv_mod+0x1c6>
   185ce:	9819      	ldr	r0, [sp, #100]	; 0x64
   185d0:	f7fc f96c 	bl	148ac <nrf_free>
   185d4:	2200      	movs	r2, #0
   185d6:	2301      	movs	r3, #1
   185d8:	981c      	ldr	r0, [sp, #112]	; 0x70
   185da:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
   185de:	9219      	str	r2, [sp, #100]	; 0x64
   185e0:	2800      	cmp	r0, #0
   185e2:	f43f af22 	beq.w	1842a <mbedtls_mpi_inv_mod+0x2e>
   185e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   185e8:	1e4b      	subs	r3, r1, #1
   185ea:	b131      	cbz	r1, 185fa <mbedtls_mpi_inv_mod+0x1fe>
   185ec:	3b01      	subs	r3, #1
   185ee:	1c59      	adds	r1, r3, #1
   185f0:	6002      	str	r2, [r0, #0]
   185f2:	f100 0004 	add.w	r0, r0, #4
   185f6:	d1f9      	bne.n	185ec <mbedtls_mpi_inv_mod+0x1f0>
   185f8:	981c      	ldr	r0, [sp, #112]	; 0x70
   185fa:	f7fc f957 	bl	148ac <nrf_free>
   185fe:	4620      	mov	r0, r4
   18600:	b021      	add	sp, #132	; 0x84
   18602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18606:	2b01      	cmp	r3, #1
   18608:	9a02      	ldr	r2, [sp, #8]
   1860a:	d96b      	bls.n	186e4 <mbedtls_mpi_inv_mod+0x2e8>
   1860c:	2a00      	cmp	r2, #0
   1860e:	f47f af4b 	bne.w	184a8 <mbedtls_mpi_inv_mod+0xac>
   18612:	4639      	mov	r1, r7
   18614:	a805      	add	r0, sp, #20
   18616:	462a      	mov	r2, r5
   18618:	f7ff fb9a 	bl	17d50 <mbedtls_mpi_mod_mpi>
   1861c:	4604      	mov	r4, r0
   1861e:	2800      	cmp	r0, #0
   18620:	f47f af44 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18624:	a808      	add	r0, sp, #32
   18626:	a905      	add	r1, sp, #20
   18628:	f7fd ff38 	bl	1649c <mbedtls_mpi_copy>
   1862c:	4604      	mov	r4, r0
   1862e:	2800      	cmp	r0, #0
   18630:	f47f af3c 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18634:	a811      	add	r0, sp, #68	; 0x44
   18636:	4629      	mov	r1, r5
   18638:	f7fd ff30 	bl	1649c <mbedtls_mpi_copy>
   1863c:	4604      	mov	r4, r0
   1863e:	2800      	cmp	r0, #0
   18640:	f47f af34 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18644:	a814      	add	r0, sp, #80	; 0x50
   18646:	4629      	mov	r1, r5
   18648:	f7fd ff28 	bl	1649c <mbedtls_mpi_copy>
   1864c:	4604      	mov	r4, r0
   1864e:	2800      	cmp	r0, #0
   18650:	f47f af2c 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18654:	a80b      	add	r0, sp, #44	; 0x2c
   18656:	2101      	movs	r1, #1
   18658:	f7fe f8ac 	bl	167b4 <mbedtls_mpi_lset>
   1865c:	4604      	mov	r4, r0
   1865e:	2800      	cmp	r0, #0
   18660:	f47f af24 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18664:	4601      	mov	r1, r0
   18666:	a80e      	add	r0, sp, #56	; 0x38
   18668:	f7fe f8a4 	bl	167b4 <mbedtls_mpi_lset>
   1866c:	4604      	mov	r4, r0
   1866e:	2800      	cmp	r0, #0
   18670:	f47f af1c 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18674:	4601      	mov	r1, r0
   18676:	a817      	add	r0, sp, #92	; 0x5c
   18678:	f7fe f89c 	bl	167b4 <mbedtls_mpi_lset>
   1867c:	4604      	mov	r4, r0
   1867e:	2800      	cmp	r0, #0
   18680:	f47f af14 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18684:	a81a      	add	r0, sp, #104	; 0x68
   18686:	2101      	movs	r1, #1
   18688:	f7fe f894 	bl	167b4 <mbedtls_mpi_lset>
   1868c:	4604      	mov	r4, r0
   1868e:	2800      	cmp	r0, #0
   18690:	f47f af0c 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18694:	4681      	mov	r9, r0
   18696:	f04f 0801 	mov.w	r8, #1
   1869a:	af01      	add	r7, sp, #4
   1869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1869e:	681b      	ldr	r3, [r3, #0]
   186a0:	07da      	lsls	r2, r3, #31
   186a2:	d42c      	bmi.n	186fe <mbedtls_mpi_inv_mod+0x302>
   186a4:	2101      	movs	r1, #1
   186a6:	a808      	add	r0, sp, #32
   186a8:	f7fe fac6 	bl	16c38 <mbedtls_mpi_shift_r>
   186ac:	4604      	mov	r4, r0
   186ae:	2800      	cmp	r0, #0
   186b0:	f47f aefc 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   186b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   186b6:	681b      	ldr	r3, [r3, #0]
   186b8:	07d8      	lsls	r0, r3, #31
   186ba:	d444      	bmi.n	18746 <mbedtls_mpi_inv_mod+0x34a>
   186bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   186be:	681b      	ldr	r3, [r3, #0]
   186c0:	07d9      	lsls	r1, r3, #31
   186c2:	d440      	bmi.n	18746 <mbedtls_mpi_inv_mod+0x34a>
   186c4:	2101      	movs	r1, #1
   186c6:	a80b      	add	r0, sp, #44	; 0x2c
   186c8:	f7fe fab6 	bl	16c38 <mbedtls_mpi_shift_r>
   186cc:	4604      	mov	r4, r0
   186ce:	2800      	cmp	r0, #0
   186d0:	f47f aeec 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   186d4:	2101      	movs	r1, #1
   186d6:	a80e      	add	r0, sp, #56	; 0x38
   186d8:	f7fe faae 	bl	16c38 <mbedtls_mpi_shift_r>
   186dc:	4604      	mov	r4, r0
   186de:	2800      	cmp	r0, #0
   186e0:	d0dc      	beq.n	1869c <mbedtls_mpi_inv_mod+0x2a0>
   186e2:	e6e3      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   186e4:	2a00      	cmp	r2, #0
   186e6:	f6ff aedf 	blt.w	184a8 <mbedtls_mpi_inv_mod+0xac>
   186ea:	680b      	ldr	r3, [r1, #0]
   186ec:	2b01      	cmp	r3, #1
   186ee:	d88d      	bhi.n	1860c <mbedtls_mpi_inv_mod+0x210>
   186f0:	2b00      	cmp	r3, #0
   186f2:	d18e      	bne.n	18612 <mbedtls_mpi_inv_mod+0x216>
   186f4:	4252      	negs	r2, r2
   186f6:	2a00      	cmp	r2, #0
   186f8:	f47f aed6 	bne.w	184a8 <mbedtls_mpi_inv_mod+0xac>
   186fc:	e789      	b.n	18612 <mbedtls_mpi_inv_mod+0x216>
   186fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18700:	681b      	ldr	r3, [r3, #0]
   18702:	07d8      	lsls	r0, r3, #31
   18704:	d443      	bmi.n	1878e <mbedtls_mpi_inv_mod+0x392>
   18706:	2101      	movs	r1, #1
   18708:	a814      	add	r0, sp, #80	; 0x50
   1870a:	f7fe fa95 	bl	16c38 <mbedtls_mpi_shift_r>
   1870e:	4604      	mov	r4, r0
   18710:	2800      	cmp	r0, #0
   18712:	f47f aecb 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18716:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18718:	681b      	ldr	r3, [r3, #0]
   1871a:	07db      	lsls	r3, r3, #31
   1871c:	d425      	bmi.n	1876a <mbedtls_mpi_inv_mod+0x36e>
   1871e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18720:	681b      	ldr	r3, [r3, #0]
   18722:	07dc      	lsls	r4, r3, #31
   18724:	d421      	bmi.n	1876a <mbedtls_mpi_inv_mod+0x36e>
   18726:	2101      	movs	r1, #1
   18728:	a817      	add	r0, sp, #92	; 0x5c
   1872a:	f7fe fa85 	bl	16c38 <mbedtls_mpi_shift_r>
   1872e:	4604      	mov	r4, r0
   18730:	2800      	cmp	r0, #0
   18732:	f47f aebb 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18736:	2101      	movs	r1, #1
   18738:	a81a      	add	r0, sp, #104	; 0x68
   1873a:	f7fe fa7d 	bl	16c38 <mbedtls_mpi_shift_r>
   1873e:	4604      	mov	r4, r0
   18740:	2800      	cmp	r0, #0
   18742:	d0dc      	beq.n	186fe <mbedtls_mpi_inv_mod+0x302>
   18744:	e6b2      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   18746:	a90b      	add	r1, sp, #44	; 0x2c
   18748:	aa11      	add	r2, sp, #68	; 0x44
   1874a:	4608      	mov	r0, r1
   1874c:	f7fe fd04 	bl	17158 <mbedtls_mpi_add_mpi>
   18750:	4604      	mov	r4, r0
   18752:	2800      	cmp	r0, #0
   18754:	f47f aeaa 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18758:	a90e      	add	r1, sp, #56	; 0x38
   1875a:	aa05      	add	r2, sp, #20
   1875c:	4608      	mov	r0, r1
   1875e:	f7fe fd6f 	bl	17240 <mbedtls_mpi_sub_mpi>
   18762:	4604      	mov	r4, r0
   18764:	2800      	cmp	r0, #0
   18766:	d0ad      	beq.n	186c4 <mbedtls_mpi_inv_mod+0x2c8>
   18768:	e6a0      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   1876a:	a917      	add	r1, sp, #92	; 0x5c
   1876c:	aa11      	add	r2, sp, #68	; 0x44
   1876e:	4608      	mov	r0, r1
   18770:	f7fe fcf2 	bl	17158 <mbedtls_mpi_add_mpi>
   18774:	4604      	mov	r4, r0
   18776:	2800      	cmp	r0, #0
   18778:	f47f ae98 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   1877c:	a91a      	add	r1, sp, #104	; 0x68
   1877e:	aa05      	add	r2, sp, #20
   18780:	4608      	mov	r0, r1
   18782:	f7fe fd5d 	bl	17240 <mbedtls_mpi_sub_mpi>
   18786:	4604      	mov	r4, r0
   18788:	2800      	cmp	r0, #0
   1878a:	d0cc      	beq.n	18726 <mbedtls_mpi_inv_mod+0x32a>
   1878c:	e68e      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   1878e:	a914      	add	r1, sp, #80	; 0x50
   18790:	a808      	add	r0, sp, #32
   18792:	f7fe fac1 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   18796:	2800      	cmp	r0, #0
   18798:	db3d      	blt.n	18816 <mbedtls_mpi_inv_mod+0x41a>
   1879a:	a908      	add	r1, sp, #32
   1879c:	aa14      	add	r2, sp, #80	; 0x50
   1879e:	4608      	mov	r0, r1
   187a0:	f7fe fd4e 	bl	17240 <mbedtls_mpi_sub_mpi>
   187a4:	4604      	mov	r4, r0
   187a6:	2800      	cmp	r0, #0
   187a8:	f47f ae80 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   187ac:	a90b      	add	r1, sp, #44	; 0x2c
   187ae:	aa17      	add	r2, sp, #92	; 0x5c
   187b0:	4608      	mov	r0, r1
   187b2:	f7fe fd45 	bl	17240 <mbedtls_mpi_sub_mpi>
   187b6:	4604      	mov	r4, r0
   187b8:	2800      	cmp	r0, #0
   187ba:	f47f ae77 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   187be:	a90e      	add	r1, sp, #56	; 0x38
   187c0:	aa1a      	add	r2, sp, #104	; 0x68
   187c2:	4608      	mov	r0, r1
   187c4:	f7fe fd3c 	bl	17240 <mbedtls_mpi_sub_mpi>
   187c8:	4604      	mov	r4, r0
   187ca:	2800      	cmp	r0, #0
   187cc:	f47f ae6e 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   187d0:	a91d      	add	r1, sp, #116	; 0x74
   187d2:	a808      	add	r0, sp, #32
   187d4:	f8cd 9004 	str.w	r9, [sp, #4]
   187d8:	e9cd 881d 	strd	r8, r8, [sp, #116]	; 0x74
   187dc:	971f      	str	r7, [sp, #124]	; 0x7c
   187de:	f7fd fd97 	bl	16310 <mbedtls_mpi_cmp_mpi.constprop.6>
   187e2:	2800      	cmp	r0, #0
   187e4:	f47f af5a 	bne.w	1869c <mbedtls_mpi_inv_mod+0x2a0>
   187e8:	4680      	mov	r8, r0
   187ea:	f04f 0901 	mov.w	r9, #1
   187ee:	a91d      	add	r1, sp, #116	; 0x74
   187f0:	a817      	add	r0, sp, #92	; 0x5c
   187f2:	f8cd 8004 	str.w	r8, [sp, #4]
   187f6:	e9cd 991d 	strd	r9, r9, [sp, #116]	; 0x74
   187fa:	971f      	str	r7, [sp, #124]	; 0x7c
   187fc:	f7fd fd88 	bl	16310 <mbedtls_mpi_cmp_mpi.constprop.6>
   18800:	2800      	cmp	r0, #0
   18802:	da23      	bge.n	1884c <mbedtls_mpi_inv_mod+0x450>
   18804:	a917      	add	r1, sp, #92	; 0x5c
   18806:	462a      	mov	r2, r5
   18808:	4608      	mov	r0, r1
   1880a:	f7fe fca5 	bl	17158 <mbedtls_mpi_add_mpi>
   1880e:	4604      	mov	r4, r0
   18810:	2800      	cmp	r0, #0
   18812:	d0ec      	beq.n	187ee <mbedtls_mpi_inv_mod+0x3f2>
   18814:	e64a      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   18816:	a914      	add	r1, sp, #80	; 0x50
   18818:	aa08      	add	r2, sp, #32
   1881a:	4608      	mov	r0, r1
   1881c:	f7fe fd10 	bl	17240 <mbedtls_mpi_sub_mpi>
   18820:	4604      	mov	r4, r0
   18822:	2800      	cmp	r0, #0
   18824:	f47f ae42 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   18828:	a917      	add	r1, sp, #92	; 0x5c
   1882a:	aa0b      	add	r2, sp, #44	; 0x2c
   1882c:	4608      	mov	r0, r1
   1882e:	f7fe fd07 	bl	17240 <mbedtls_mpi_sub_mpi>
   18832:	4604      	mov	r4, r0
   18834:	2800      	cmp	r0, #0
   18836:	f47f ae39 	bne.w	184ac <mbedtls_mpi_inv_mod+0xb0>
   1883a:	a91a      	add	r1, sp, #104	; 0x68
   1883c:	aa0e      	add	r2, sp, #56	; 0x38
   1883e:	4608      	mov	r0, r1
   18840:	f7fe fcfe 	bl	17240 <mbedtls_mpi_sub_mpi>
   18844:	4604      	mov	r4, r0
   18846:	2800      	cmp	r0, #0
   18848:	d0c2      	beq.n	187d0 <mbedtls_mpi_inv_mod+0x3d4>
   1884a:	e62f      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   1884c:	4629      	mov	r1, r5
   1884e:	a817      	add	r0, sp, #92	; 0x5c
   18850:	f7fe fa62 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   18854:	2800      	cmp	r0, #0
   18856:	db08      	blt.n	1886a <mbedtls_mpi_inv_mod+0x46e>
   18858:	a917      	add	r1, sp, #92	; 0x5c
   1885a:	462a      	mov	r2, r5
   1885c:	4608      	mov	r0, r1
   1885e:	f7fe fcef 	bl	17240 <mbedtls_mpi_sub_mpi>
   18862:	4604      	mov	r4, r0
   18864:	2800      	cmp	r0, #0
   18866:	d0f1      	beq.n	1884c <mbedtls_mpi_inv_mod+0x450>
   18868:	e620      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   1886a:	a917      	add	r1, sp, #92	; 0x5c
   1886c:	4630      	mov	r0, r6
   1886e:	f7fd fe15 	bl	1649c <mbedtls_mpi_copy>
   18872:	4604      	mov	r4, r0
   18874:	e61a      	b.n	184ac <mbedtls_mpi_inv_mod+0xb0>
   18876:	bf00      	nop

00018878 <block_cipher_df>:
   18878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1887c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   18880:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
   18884:	f200 8119 	bhi.w	18aba <block_cipher_df+0x242>
   18888:	4692      	mov	sl, r2
   1888a:	460c      	mov	r4, r1
   1888c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   18890:	2100      	movs	r1, #0
   18892:	4681      	mov	r9, r0
   18894:	a860      	add	r0, sp, #384	; 0x180
   18896:	f00d fb13 	bl	25ec0 <memset>
   1889a:	a81a      	add	r0, sp, #104	; 0x68
   1889c:	f7fc f828 	bl	148f0 <mbedtls_aes_init>
   188a0:	2000      	movs	r0, #0
   188a2:	2330      	movs	r3, #48	; 0x30
   188a4:	ad66      	add	r5, sp, #408	; 0x198
   188a6:	ea4f 221a 	mov.w	r2, sl, lsr #8
   188aa:	f8ad 0190 	strh.w	r0, [sp, #400]	; 0x190
   188ae:	f88d 2192 	strb.w	r2, [sp, #402]	; 0x192
   188b2:	4621      	mov	r1, r4
   188b4:	4652      	mov	r2, sl
   188b6:	4628      	mov	r0, r5
   188b8:	f88d 3197 	strb.w	r3, [sp, #407]	; 0x197
   188bc:	f88d a193 	strb.w	sl, [sp, #403]	; 0x193
   188c0:	ae06      	add	r6, sp, #24
   188c2:	f00d fad0 	bl	25e66 <memcpy>
   188c6:	2280      	movs	r2, #128	; 0x80
   188c8:	4633      	mov	r3, r6
   188ca:	f805 200a 	strb.w	r2, [r5, sl]
   188ce:	af0e      	add	r7, sp, #56	; 0x38
   188d0:	1b99      	subs	r1, r3, r6
   188d2:	f803 1b01 	strb.w	r1, [r3], #1
   188d6:	429f      	cmp	r7, r3
   188d8:	d1fa      	bne.n	188d0 <block_cipher_df+0x58>
   188da:	f44f 7280 	mov.w	r2, #256	; 0x100
   188de:	4631      	mov	r1, r6
   188e0:	a81a      	add	r0, sp, #104	; 0x68
   188e2:	f7fc f811 	bl	14908 <mbedtls_aes_setkey_enc>
   188e6:	4683      	mov	fp, r0
   188e8:	2800      	cmp	r0, #0
   188ea:	f040 80c8 	bne.w	18a7e <block_cipher_df+0x206>
   188ee:	9001      	str	r0, [sp, #4]
   188f0:	f10a 0a19 	add.w	sl, sl, #25
   188f4:	ac02      	add	r4, sp, #8
   188f6:	2210      	movs	r2, #16
   188f8:	2100      	movs	r1, #0
   188fa:	4620      	mov	r0, r4
   188fc:	f00d fae0 	bl	25ec0 <memset>
   18900:	46d0      	mov	r8, sl
   18902:	ad64      	add	r5, sp, #400	; 0x190
   18904:	7822      	ldrb	r2, [r4, #0]
   18906:	f815 3c10 	ldrb.w	r3, [r5, #-16]
   1890a:	f894 c001 	ldrb.w	ip, [r4, #1]
   1890e:	f815 1c0f 	ldrb.w	r1, [r5, #-15]
   18912:	78a0      	ldrb	r0, [r4, #2]
   18914:	4053      	eors	r3, r2
   18916:	f815 2c0e 	ldrb.w	r2, [r5, #-14]
   1891a:	ea8c 0c01 	eor.w	ip, ip, r1
   1891e:	4050      	eors	r0, r2
   18920:	78e1      	ldrb	r1, [r4, #3]
   18922:	f815 2c0d 	ldrb.w	r2, [r5, #-13]
   18926:	f894 e004 	ldrb.w	lr, [r4, #4]
   1892a:	4051      	eors	r1, r2
   1892c:	f815 2c0c 	ldrb.w	r2, [r5, #-12]
   18930:	7023      	strb	r3, [r4, #0]
   18932:	ea8e 0202 	eor.w	r2, lr, r2
   18936:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
   1893a:	f894 e005 	ldrb.w	lr, [r4, #5]
   1893e:	f884 c001 	strb.w	ip, [r4, #1]
   18942:	ea8e 0303 	eor.w	r3, lr, r3
   18946:	f815 cc0a 	ldrb.w	ip, [r5, #-10]
   1894a:	f894 e006 	ldrb.w	lr, [r4, #6]
   1894e:	70a0      	strb	r0, [r4, #2]
   18950:	ea8e 0c0c 	eor.w	ip, lr, ip
   18954:	f815 0c09 	ldrb.w	r0, [r5, #-9]
   18958:	f894 e007 	ldrb.w	lr, [r4, #7]
   1895c:	70e1      	strb	r1, [r4, #3]
   1895e:	ea8e 0000 	eor.w	r0, lr, r0
   18962:	f815 1c08 	ldrb.w	r1, [r5, #-8]
   18966:	f894 e008 	ldrb.w	lr, [r4, #8]
   1896a:	7122      	strb	r2, [r4, #4]
   1896c:	ea8e 0101 	eor.w	r1, lr, r1
   18970:	f815 2c07 	ldrb.w	r2, [r5, #-7]
   18974:	f894 e009 	ldrb.w	lr, [r4, #9]
   18978:	7163      	strb	r3, [r4, #5]
   1897a:	ea8e 0202 	eor.w	r2, lr, r2
   1897e:	7aa3      	ldrb	r3, [r4, #10]
   18980:	f815 ec06 	ldrb.w	lr, [r5, #-6]
   18984:	f884 c006 	strb.w	ip, [r4, #6]
   18988:	ea83 030e 	eor.w	r3, r3, lr
   1898c:	71e0      	strb	r0, [r4, #7]
   1898e:	7221      	strb	r1, [r4, #8]
   18990:	7262      	strb	r2, [r4, #9]
   18992:	72a3      	strb	r3, [r4, #10]
   18994:	7ae1      	ldrb	r1, [r4, #11]
   18996:	f815 3c05 	ldrb.w	r3, [r5, #-5]
   1899a:	f894 c00c 	ldrb.w	ip, [r4, #12]
   1899e:	7b60      	ldrb	r0, [r4, #13]
   189a0:	404b      	eors	r3, r1
   189a2:	f815 2c04 	ldrb.w	r2, [r5, #-4]
   189a6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
   189aa:	ea8c 0202 	eor.w	r2, ip, r2
   189ae:	4041      	eors	r1, r0
   189b0:	f894 c00e 	ldrb.w	ip, [r4, #14]
   189b4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   189b8:	f894 e00f 	ldrb.w	lr, [r4, #15]
   189bc:	ea8c 0000 	eor.w	r0, ip, r0
   189c0:	f815 cc01 	ldrb.w	ip, [r5, #-1]
   189c4:	72e3      	strb	r3, [r4, #11]
   189c6:	ea8e 0c0c 	eor.w	ip, lr, ip
   189ca:	7322      	strb	r2, [r4, #12]
   189cc:	7361      	strb	r1, [r4, #13]
   189ce:	73a0      	strb	r0, [r4, #14]
   189d0:	4623      	mov	r3, r4
   189d2:	4622      	mov	r2, r4
   189d4:	2101      	movs	r1, #1
   189d6:	a81a      	add	r0, sp, #104	; 0x68
   189d8:	f884 c00f 	strb.w	ip, [r4, #15]
   189dc:	f7fc ff4a 	bl	15874 <mbedtls_aes_crypt_ecb>
   189e0:	f1b8 0f10 	cmp.w	r8, #16
   189e4:	4683      	mov	fp, r0
   189e6:	bf94      	ite	ls
   189e8:	eba8 0808 	subls.w	r8, r8, r8
   189ec:	f1a8 0810 	subhi.w	r8, r8, #16
   189f0:	2800      	cmp	r0, #0
   189f2:	d145      	bne.n	18a80 <block_cipher_df+0x208>
   189f4:	3510      	adds	r5, #16
   189f6:	f1b8 0f00 	cmp.w	r8, #0
   189fa:	d183      	bne.n	18904 <block_cipher_df+0x8c>
   189fc:	9d01      	ldr	r5, [sp, #4]
   189fe:	2210      	movs	r2, #16
   18a00:	4621      	mov	r1, r4
   18a02:	1978      	adds	r0, r7, r5
   18a04:	f00d fa2f 	bl	25e66 <memcpy>
   18a08:	f89d 3183 	ldrb.w	r3, [sp, #387]	; 0x183
   18a0c:	f105 0210 	add.w	r2, r5, #16
   18a10:	3301      	adds	r3, #1
   18a12:	2a30      	cmp	r2, #48	; 0x30
   18a14:	9201      	str	r2, [sp, #4]
   18a16:	f88d 3183 	strb.w	r3, [sp, #387]	; 0x183
   18a1a:	f47f af6c 	bne.w	188f6 <block_cipher_df+0x7e>
   18a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   18a22:	4639      	mov	r1, r7
   18a24:	a81a      	add	r0, sp, #104	; 0x68
   18a26:	f7fb ff6f 	bl	14908 <mbedtls_aes_setkey_enc>
   18a2a:	4683      	mov	fp, r0
   18a2c:	bb40      	cbnz	r0, 18a80 <block_cipher_df+0x208>
   18a2e:	464d      	mov	r5, r9
   18a30:	f109 0830 	add.w	r8, r9, #48	; 0x30
   18a34:	ab16      	add	r3, sp, #88	; 0x58
   18a36:	461a      	mov	r2, r3
   18a38:	2101      	movs	r1, #1
   18a3a:	a81a      	add	r0, sp, #104	; 0x68
   18a3c:	f7fc ff1a 	bl	15874 <mbedtls_aes_crypt_ecb>
   18a40:	4683      	mov	fp, r0
   18a42:	b9e8      	cbnz	r0, 18a80 <block_cipher_df+0x208>
   18a44:	2210      	movs	r2, #16
   18a46:	4628      	mov	r0, r5
   18a48:	a916      	add	r1, sp, #88	; 0x58
   18a4a:	4415      	add	r5, r2
   18a4c:	f00d fa0b 	bl	25e66 <memcpy>
   18a50:	4545      	cmp	r5, r8
   18a52:	d1ef      	bne.n	18a34 <block_cipher_df+0x1bc>
   18a54:	a81a      	add	r0, sp, #104	; 0x68
   18a56:	f7fb ff51 	bl	148fc <mbedtls_aes_free>
   18a5a:	a860      	add	r0, sp, #384	; 0x180
   18a5c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   18a60:	f002 fafa 	bl	1b058 <mbedtls_platform_zeroize>
   18a64:	4638      	mov	r0, r7
   18a66:	2130      	movs	r1, #48	; 0x30
   18a68:	f002 faf6 	bl	1b058 <mbedtls_platform_zeroize>
   18a6c:	4630      	mov	r0, r6
   18a6e:	2120      	movs	r1, #32
   18a70:	f002 faf2 	bl	1b058 <mbedtls_platform_zeroize>
   18a74:	4620      	mov	r0, r4
   18a76:	2110      	movs	r1, #16
   18a78:	f002 faee 	bl	1b058 <mbedtls_platform_zeroize>
   18a7c:	e018      	b.n	18ab0 <block_cipher_df+0x238>
   18a7e:	ac02      	add	r4, sp, #8
   18a80:	a81a      	add	r0, sp, #104	; 0x68
   18a82:	f7fb ff3b 	bl	148fc <mbedtls_aes_free>
   18a86:	a860      	add	r0, sp, #384	; 0x180
   18a88:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   18a8c:	f002 fae4 	bl	1b058 <mbedtls_platform_zeroize>
   18a90:	4638      	mov	r0, r7
   18a92:	2130      	movs	r1, #48	; 0x30
   18a94:	f002 fae0 	bl	1b058 <mbedtls_platform_zeroize>
   18a98:	4630      	mov	r0, r6
   18a9a:	2120      	movs	r1, #32
   18a9c:	f002 fadc 	bl	1b058 <mbedtls_platform_zeroize>
   18aa0:	4620      	mov	r0, r4
   18aa2:	2110      	movs	r1, #16
   18aa4:	f002 fad8 	bl	1b058 <mbedtls_platform_zeroize>
   18aa8:	4648      	mov	r0, r9
   18aaa:	2130      	movs	r1, #48	; 0x30
   18aac:	f002 fad4 	bl	1b058 <mbedtls_platform_zeroize>
   18ab0:	4658      	mov	r0, fp
   18ab2:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
   18ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aba:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   18abe:	e7f7      	b.n	18ab0 <block_cipher_df+0x238>

00018ac0 <mbedtls_ctr_drbg_init>:
   18ac0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18ac4:	2100      	movs	r1, #0
   18ac6:	f00d b9fb 	b.w	25ec0 <memset>
   18aca:	bf00      	nop

00018acc <mbedtls_ctr_drbg_free>:
   18acc:	b158      	cbz	r0, 18ae6 <mbedtls_ctr_drbg_free+0x1a>
   18ace:	b510      	push	{r4, lr}
   18ad0:	4604      	mov	r4, r0
   18ad2:	3020      	adds	r0, #32
   18ad4:	f7fb ff12 	bl	148fc <mbedtls_aes_free>
   18ad8:	4620      	mov	r0, r4
   18ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ade:	f44f 71a0 	mov.w	r1, #320	; 0x140
   18ae2:	f002 bab9 	b.w	1b058 <mbedtls_platform_zeroize>
   18ae6:	4770      	bx	lr

00018ae8 <mbedtls_ctr_drbg_reseed>:
   18ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18aea:	6983      	ldr	r3, [r0, #24]
   18aec:	b0ed      	sub	sp, #436	; 0x1b4
   18aee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   18af2:	f200 80e1 	bhi.w	18cb8 <mbedtls_ctr_drbg_reseed+0x1d0>
   18af6:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
   18afa:	4293      	cmp	r3, r2
   18afc:	f0c0 80dc 	bcc.w	18cb8 <mbedtls_ctr_drbg_reseed+0x1d0>
   18b00:	4604      	mov	r4, r0
   18b02:	4615      	mov	r5, r2
   18b04:	460e      	mov	r6, r1
   18b06:	f44f 72c0 	mov.w	r2, #384	; 0x180
   18b0a:	2100      	movs	r1, #0
   18b0c:	a80c      	add	r0, sp, #48	; 0x30
   18b0e:	f00d f9d7 	bl	25ec0 <memset>
   18b12:	a90c      	add	r1, sp, #48	; 0x30
   18b14:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   18b18:	69a2      	ldr	r2, [r4, #24]
   18b1a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   18b1e:	4798      	blx	r3
   18b20:	2800      	cmp	r0, #0
   18b22:	f040 80cc 	bne.w	18cbe <mbedtls_ctr_drbg_reseed+0x1d6>
   18b26:	69a7      	ldr	r7, [r4, #24]
   18b28:	b106      	cbz	r6, 18b2c <mbedtls_ctr_drbg_reseed+0x44>
   18b2a:	b94d      	cbnz	r5, 18b40 <mbedtls_ctr_drbg_reseed+0x58>
   18b2c:	a90c      	add	r1, sp, #48	; 0x30
   18b2e:	463a      	mov	r2, r7
   18b30:	4608      	mov	r0, r1
   18b32:	f7ff fea1 	bl	18878 <block_cipher_df>
   18b36:	4605      	mov	r5, r0
   18b38:	b188      	cbz	r0, 18b5e <mbedtls_ctr_drbg_reseed+0x76>
   18b3a:	4628      	mov	r0, r5
   18b3c:	b06d      	add	sp, #436	; 0x1b4
   18b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18b40:	ab0c      	add	r3, sp, #48	; 0x30
   18b42:	462a      	mov	r2, r5
   18b44:	19d8      	adds	r0, r3, r7
   18b46:	4631      	mov	r1, r6
   18b48:	f00d f98d 	bl	25e66 <memcpy>
   18b4c:	442f      	add	r7, r5
   18b4e:	a90c      	add	r1, sp, #48	; 0x30
   18b50:	463a      	mov	r2, r7
   18b52:	4608      	mov	r0, r1
   18b54:	f7ff fe90 	bl	18878 <block_cipher_df>
   18b58:	4605      	mov	r5, r0
   18b5a:	2800      	cmp	r0, #0
   18b5c:	d1ed      	bne.n	18b3a <mbedtls_ctr_drbg_reseed+0x52>
   18b5e:	4668      	mov	r0, sp
   18b60:	2230      	movs	r2, #48	; 0x30
   18b62:	4629      	mov	r1, r5
   18b64:	f00d f9ac 	bl	25ec0 <memset>
   18b68:	462e      	mov	r6, r5
   18b6a:	f104 0720 	add.w	r7, r4, #32
   18b6e:	7be2      	ldrb	r2, [r4, #15]
   18b70:	eb0d 0306 	add.w	r3, sp, r6
   18b74:	3201      	adds	r2, #1
   18b76:	b2d2      	uxtb	r2, r2
   18b78:	73e2      	strb	r2, [r4, #15]
   18b7a:	2a00      	cmp	r2, #0
   18b7c:	d14d      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18b7e:	7ba2      	ldrb	r2, [r4, #14]
   18b80:	3201      	adds	r2, #1
   18b82:	b2d2      	uxtb	r2, r2
   18b84:	73a2      	strb	r2, [r4, #14]
   18b86:	2a00      	cmp	r2, #0
   18b88:	d147      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18b8a:	7b62      	ldrb	r2, [r4, #13]
   18b8c:	3201      	adds	r2, #1
   18b8e:	b2d2      	uxtb	r2, r2
   18b90:	7362      	strb	r2, [r4, #13]
   18b92:	2a00      	cmp	r2, #0
   18b94:	d141      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18b96:	7b22      	ldrb	r2, [r4, #12]
   18b98:	3201      	adds	r2, #1
   18b9a:	b2d2      	uxtb	r2, r2
   18b9c:	7322      	strb	r2, [r4, #12]
   18b9e:	2a00      	cmp	r2, #0
   18ba0:	d13b      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18ba2:	7ae2      	ldrb	r2, [r4, #11]
   18ba4:	3201      	adds	r2, #1
   18ba6:	b2d2      	uxtb	r2, r2
   18ba8:	72e2      	strb	r2, [r4, #11]
   18baa:	2a00      	cmp	r2, #0
   18bac:	d135      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bae:	7aa2      	ldrb	r2, [r4, #10]
   18bb0:	3201      	adds	r2, #1
   18bb2:	b2d2      	uxtb	r2, r2
   18bb4:	72a2      	strb	r2, [r4, #10]
   18bb6:	2a00      	cmp	r2, #0
   18bb8:	d12f      	bne.n	18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bba:	7a62      	ldrb	r2, [r4, #9]
   18bbc:	3201      	adds	r2, #1
   18bbe:	b2d2      	uxtb	r2, r2
   18bc0:	7262      	strb	r2, [r4, #9]
   18bc2:	bb52      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bc4:	7a22      	ldrb	r2, [r4, #8]
   18bc6:	3201      	adds	r2, #1
   18bc8:	b2d2      	uxtb	r2, r2
   18bca:	7222      	strb	r2, [r4, #8]
   18bcc:	bb2a      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bce:	79e2      	ldrb	r2, [r4, #7]
   18bd0:	3201      	adds	r2, #1
   18bd2:	b2d2      	uxtb	r2, r2
   18bd4:	71e2      	strb	r2, [r4, #7]
   18bd6:	bb02      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bd8:	79a2      	ldrb	r2, [r4, #6]
   18bda:	3201      	adds	r2, #1
   18bdc:	b2d2      	uxtb	r2, r2
   18bde:	71a2      	strb	r2, [r4, #6]
   18be0:	b9da      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18be2:	7962      	ldrb	r2, [r4, #5]
   18be4:	3201      	adds	r2, #1
   18be6:	b2d2      	uxtb	r2, r2
   18be8:	7162      	strb	r2, [r4, #5]
   18bea:	b9b2      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bec:	7922      	ldrb	r2, [r4, #4]
   18bee:	3201      	adds	r2, #1
   18bf0:	b2d2      	uxtb	r2, r2
   18bf2:	7122      	strb	r2, [r4, #4]
   18bf4:	b98a      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18bf6:	78e2      	ldrb	r2, [r4, #3]
   18bf8:	3201      	adds	r2, #1
   18bfa:	b2d2      	uxtb	r2, r2
   18bfc:	70e2      	strb	r2, [r4, #3]
   18bfe:	b962      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18c00:	78a2      	ldrb	r2, [r4, #2]
   18c02:	3201      	adds	r2, #1
   18c04:	b2d2      	uxtb	r2, r2
   18c06:	70a2      	strb	r2, [r4, #2]
   18c08:	b93a      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18c0a:	7862      	ldrb	r2, [r4, #1]
   18c0c:	3201      	adds	r2, #1
   18c0e:	b2d2      	uxtb	r2, r2
   18c10:	7062      	strb	r2, [r4, #1]
   18c12:	b912      	cbnz	r2, 18c1a <mbedtls_ctr_drbg_reseed+0x132>
   18c14:	7822      	ldrb	r2, [r4, #0]
   18c16:	3201      	adds	r2, #1
   18c18:	7022      	strb	r2, [r4, #0]
   18c1a:	4622      	mov	r2, r4
   18c1c:	2101      	movs	r1, #1
   18c1e:	4638      	mov	r0, r7
   18c20:	f7fc fe28 	bl	15874 <mbedtls_aes_crypt_ecb>
   18c24:	4605      	mov	r5, r0
   18c26:	2800      	cmp	r0, #0
   18c28:	d187      	bne.n	18b3a <mbedtls_ctr_drbg_reseed+0x52>
   18c2a:	3610      	adds	r6, #16
   18c2c:	2e30      	cmp	r6, #48	; 0x30
   18c2e:	d19e      	bne.n	18b6e <mbedtls_ctr_drbg_reseed+0x86>
   18c30:	9901      	ldr	r1, [sp, #4]
   18c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18c34:	9800      	ldr	r0, [sp, #0]
   18c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18c38:	4058      	eors	r0, r3
   18c3a:	404a      	eors	r2, r1
   18c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c3e:	9902      	ldr	r1, [sp, #8]
   18c40:	9000      	str	r0, [sp, #0]
   18c42:	4059      	eors	r1, r3
   18c44:	9803      	ldr	r0, [sp, #12]
   18c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c48:	9201      	str	r2, [sp, #4]
   18c4a:	4043      	eors	r3, r0
   18c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   18c4e:	9804      	ldr	r0, [sp, #16]
   18c50:	9102      	str	r1, [sp, #8]
   18c52:	4050      	eors	r0, r2
   18c54:	9905      	ldr	r1, [sp, #20]
   18c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18c58:	9303      	str	r3, [sp, #12]
   18c5a:	4051      	eors	r1, r2
   18c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18c5e:	9a06      	ldr	r2, [sp, #24]
   18c60:	9004      	str	r0, [sp, #16]
   18c62:	405a      	eors	r2, r3
   18c64:	9807      	ldr	r0, [sp, #28]
   18c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18c68:	9105      	str	r1, [sp, #20]
   18c6a:	4058      	eors	r0, r3
   18c6c:	9908      	ldr	r1, [sp, #32]
   18c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18c70:	9206      	str	r2, [sp, #24]
   18c72:	4059      	eors	r1, r3
   18c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18c78:	9007      	str	r0, [sp, #28]
   18c7a:	405a      	eors	r2, r3
   18c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   18c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18c80:	9108      	str	r1, [sp, #32]
   18c82:	4043      	eors	r3, r0
   18c84:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   18c88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18c8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18c8c:	4638      	mov	r0, r7
   18c8e:	4053      	eors	r3, r2
   18c90:	4669      	mov	r1, sp
   18c92:	f44f 7280 	mov.w	r2, #256	; 0x100
   18c96:	930b      	str	r3, [sp, #44]	; 0x2c
   18c98:	f7fb fe36 	bl	14908 <mbedtls_aes_setkey_enc>
   18c9c:	4605      	mov	r5, r0
   18c9e:	2800      	cmp	r0, #0
   18ca0:	f47f af4b 	bne.w	18b3a <mbedtls_ctr_drbg_reseed+0x52>
   18ca4:	2210      	movs	r2, #16
   18ca6:	a908      	add	r1, sp, #32
   18ca8:	4620      	mov	r0, r4
   18caa:	f00d f8dc 	bl	25e66 <memcpy>
   18cae:	2301      	movs	r3, #1
   18cb0:	4628      	mov	r0, r5
   18cb2:	6123      	str	r3, [r4, #16]
   18cb4:	b06d      	add	sp, #436	; 0x1b4
   18cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cb8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   18cbc:	e73d      	b.n	18b3a <mbedtls_ctr_drbg_reseed+0x52>
   18cbe:	f06f 0533 	mvn.w	r5, #51	; 0x33
   18cc2:	e73a      	b.n	18b3a <mbedtls_ctr_drbg_reseed+0x52>

00018cc4 <mbedtls_ctr_drbg_seed>:
   18cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cc8:	4604      	mov	r4, r0
   18cca:	4616      	mov	r6, r2
   18ccc:	2220      	movs	r2, #32
   18cce:	b088      	sub	sp, #32
   18cd0:	18a5      	adds	r5, r4, r2
   18cd2:	460f      	mov	r7, r1
   18cd4:	4668      	mov	r0, sp
   18cd6:	2100      	movs	r1, #0
   18cd8:	4698      	mov	r8, r3
   18cda:	f00d f8f1 	bl	25ec0 <memset>
   18cde:	4628      	mov	r0, r5
   18ce0:	f7fb fe06 	bl	148f0 <mbedtls_aes_init>
   18ce4:	2220      	movs	r2, #32
   18ce6:	f242 7310 	movw	r3, #10000	; 0x2710
   18cea:	f8c4 7138 	str.w	r7, [r4, #312]	; 0x138
   18cee:	e9c4 2306 	strd	r2, r3, [r4, #24]
   18cf2:	4628      	mov	r0, r5
   18cf4:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
   18cf8:	4669      	mov	r1, sp
   18cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
   18cfe:	f7fb fe03 	bl	14908 <mbedtls_aes_setkey_enc>
   18d02:	b920      	cbnz	r0, 18d0e <mbedtls_ctr_drbg_seed+0x4a>
   18d04:	4641      	mov	r1, r8
   18d06:	4620      	mov	r0, r4
   18d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d0a:	f7ff feed 	bl	18ae8 <mbedtls_ctr_drbg_reseed>
   18d0e:	b008      	add	sp, #32
   18d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018d14 <mbedtls_ctr_drbg_random>:
   18d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   18d1c:	b0f9      	sub	sp, #484	; 0x1e4
   18d1e:	f200 8226 	bhi.w	1916e <mbedtls_ctr_drbg_random+0x45a>
   18d22:	4604      	mov	r4, r0
   18d24:	4615      	mov	r5, r2
   18d26:	460f      	mov	r7, r1
   18d28:	2230      	movs	r2, #48	; 0x30
   18d2a:	4668      	mov	r0, sp
   18d2c:	2100      	movs	r1, #0
   18d2e:	f00d f8c7 	bl	25ec0 <memset>
   18d32:	6922      	ldr	r2, [r4, #16]
   18d34:	69e3      	ldr	r3, [r4, #28]
   18d36:	429a      	cmp	r2, r3
   18d38:	dc01      	bgt.n	18d3e <mbedtls_ctr_drbg_random+0x2a>
   18d3a:	6963      	ldr	r3, [r4, #20]
   18d3c:	b313      	cbz	r3, 18d84 <mbedtls_ctr_drbg_random+0x70>
   18d3e:	69a3      	ldr	r3, [r4, #24]
   18d40:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   18d44:	f200 8216 	bhi.w	19174 <mbedtls_ctr_drbg_random+0x460>
   18d48:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   18d4c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   18d50:	2100      	movs	r1, #0
   18d52:	4650      	mov	r0, sl
   18d54:	f00d f8b4 	bl	25ec0 <memset>
   18d58:	4651      	mov	r1, sl
   18d5a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   18d5e:	69a2      	ldr	r2, [r4, #24]
   18d60:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   18d64:	4798      	blx	r3
   18d66:	f06f 0933 	mvn.w	r9, #51	; 0x33
   18d6a:	b938      	cbnz	r0, 18d7c <mbedtls_ctr_drbg_random+0x68>
   18d6c:	69a2      	ldr	r2, [r4, #24]
   18d6e:	4651      	mov	r1, sl
   18d70:	4650      	mov	r0, sl
   18d72:	f7ff fd81 	bl	18878 <block_cipher_df>
   18d76:	4681      	mov	r9, r0
   18d78:	2800      	cmp	r0, #0
   18d7a:	d077      	beq.n	18e6c <mbedtls_ctr_drbg_random+0x158>
   18d7c:	4648      	mov	r0, r9
   18d7e:	b079      	add	sp, #484	; 0x1e4
   18d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d84:	f104 0820 	add.w	r8, r4, #32
   18d88:	2d00      	cmp	r5, #0
   18d8a:	f000 812b 	beq.w	18fe4 <mbedtls_ctr_drbg_random+0x2d0>
   18d8e:	ae0c      	add	r6, sp, #48	; 0x30
   18d90:	e00e      	b.n	18db0 <mbedtls_ctr_drbg_random+0x9c>
   18d92:	2d10      	cmp	r5, #16
   18d94:	46a9      	mov	r9, r5
   18d96:	bf28      	it	cs
   18d98:	f04f 0910 	movcs.w	r9, #16
   18d9c:	4638      	mov	r0, r7
   18d9e:	4631      	mov	r1, r6
   18da0:	464a      	mov	r2, r9
   18da2:	f00d f860 	bl	25e66 <memcpy>
   18da6:	ebb5 0509 	subs.w	r5, r5, r9
   18daa:	444f      	add	r7, r9
   18dac:	f000 811a 	beq.w	18fe4 <mbedtls_ctr_drbg_random+0x2d0>
   18db0:	7be3      	ldrb	r3, [r4, #15]
   18db2:	3301      	adds	r3, #1
   18db4:	b2db      	uxtb	r3, r3
   18db6:	73e3      	strb	r3, [r4, #15]
   18db8:	2b00      	cmp	r3, #0
   18dba:	d14d      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18dbc:	7ba3      	ldrb	r3, [r4, #14]
   18dbe:	3301      	adds	r3, #1
   18dc0:	b2db      	uxtb	r3, r3
   18dc2:	73a3      	strb	r3, [r4, #14]
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	d147      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18dc8:	7b63      	ldrb	r3, [r4, #13]
   18dca:	3301      	adds	r3, #1
   18dcc:	b2db      	uxtb	r3, r3
   18dce:	7363      	strb	r3, [r4, #13]
   18dd0:	2b00      	cmp	r3, #0
   18dd2:	d141      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18dd4:	7b23      	ldrb	r3, [r4, #12]
   18dd6:	3301      	adds	r3, #1
   18dd8:	b2db      	uxtb	r3, r3
   18dda:	7323      	strb	r3, [r4, #12]
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d13b      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18de0:	7ae3      	ldrb	r3, [r4, #11]
   18de2:	3301      	adds	r3, #1
   18de4:	b2db      	uxtb	r3, r3
   18de6:	72e3      	strb	r3, [r4, #11]
   18de8:	2b00      	cmp	r3, #0
   18dea:	d135      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18dec:	7aa3      	ldrb	r3, [r4, #10]
   18dee:	3301      	adds	r3, #1
   18df0:	b2db      	uxtb	r3, r3
   18df2:	72a3      	strb	r3, [r4, #10]
   18df4:	2b00      	cmp	r3, #0
   18df6:	d12f      	bne.n	18e58 <mbedtls_ctr_drbg_random+0x144>
   18df8:	7a63      	ldrb	r3, [r4, #9]
   18dfa:	3301      	adds	r3, #1
   18dfc:	b2db      	uxtb	r3, r3
   18dfe:	7263      	strb	r3, [r4, #9]
   18e00:	bb53      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e02:	7a23      	ldrb	r3, [r4, #8]
   18e04:	3301      	adds	r3, #1
   18e06:	b2db      	uxtb	r3, r3
   18e08:	7223      	strb	r3, [r4, #8]
   18e0a:	bb2b      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e0c:	79e3      	ldrb	r3, [r4, #7]
   18e0e:	3301      	adds	r3, #1
   18e10:	b2db      	uxtb	r3, r3
   18e12:	71e3      	strb	r3, [r4, #7]
   18e14:	bb03      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e16:	79a3      	ldrb	r3, [r4, #6]
   18e18:	3301      	adds	r3, #1
   18e1a:	b2db      	uxtb	r3, r3
   18e1c:	71a3      	strb	r3, [r4, #6]
   18e1e:	b9db      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e20:	7963      	ldrb	r3, [r4, #5]
   18e22:	3301      	adds	r3, #1
   18e24:	b2db      	uxtb	r3, r3
   18e26:	7163      	strb	r3, [r4, #5]
   18e28:	b9b3      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e2a:	7923      	ldrb	r3, [r4, #4]
   18e2c:	3301      	adds	r3, #1
   18e2e:	b2db      	uxtb	r3, r3
   18e30:	7123      	strb	r3, [r4, #4]
   18e32:	b98b      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e34:	78e3      	ldrb	r3, [r4, #3]
   18e36:	3301      	adds	r3, #1
   18e38:	b2db      	uxtb	r3, r3
   18e3a:	70e3      	strb	r3, [r4, #3]
   18e3c:	b963      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e3e:	78a3      	ldrb	r3, [r4, #2]
   18e40:	3301      	adds	r3, #1
   18e42:	b2db      	uxtb	r3, r3
   18e44:	70a3      	strb	r3, [r4, #2]
   18e46:	b93b      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e48:	7863      	ldrb	r3, [r4, #1]
   18e4a:	3301      	adds	r3, #1
   18e4c:	b2db      	uxtb	r3, r3
   18e4e:	7063      	strb	r3, [r4, #1]
   18e50:	b913      	cbnz	r3, 18e58 <mbedtls_ctr_drbg_random+0x144>
   18e52:	7823      	ldrb	r3, [r4, #0]
   18e54:	3301      	adds	r3, #1
   18e56:	7023      	strb	r3, [r4, #0]
   18e58:	4633      	mov	r3, r6
   18e5a:	4622      	mov	r2, r4
   18e5c:	2101      	movs	r1, #1
   18e5e:	4640      	mov	r0, r8
   18e60:	f7fc fd08 	bl	15874 <mbedtls_aes_crypt_ecb>
   18e64:	4681      	mov	r9, r0
   18e66:	2800      	cmp	r0, #0
   18e68:	d093      	beq.n	18d92 <mbedtls_ctr_drbg_random+0x7e>
   18e6a:	e787      	b.n	18d7c <mbedtls_ctr_drbg_random+0x68>
   18e6c:	ae0c      	add	r6, sp, #48	; 0x30
   18e6e:	4630      	mov	r0, r6
   18e70:	2230      	movs	r2, #48	; 0x30
   18e72:	4649      	mov	r1, r9
   18e74:	f00d f824 	bl	25ec0 <memset>
   18e78:	46cb      	mov	fp, r9
   18e7a:	f104 0820 	add.w	r8, r4, #32
   18e7e:	7be2      	ldrb	r2, [r4, #15]
   18e80:	eb06 030b 	add.w	r3, r6, fp
   18e84:	3201      	adds	r2, #1
   18e86:	b2d2      	uxtb	r2, r2
   18e88:	73e2      	strb	r2, [r4, #15]
   18e8a:	2a00      	cmp	r2, #0
   18e8c:	d14d      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18e8e:	7ba2      	ldrb	r2, [r4, #14]
   18e90:	3201      	adds	r2, #1
   18e92:	b2d2      	uxtb	r2, r2
   18e94:	73a2      	strb	r2, [r4, #14]
   18e96:	2a00      	cmp	r2, #0
   18e98:	d147      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18e9a:	7b62      	ldrb	r2, [r4, #13]
   18e9c:	3201      	adds	r2, #1
   18e9e:	b2d2      	uxtb	r2, r2
   18ea0:	7362      	strb	r2, [r4, #13]
   18ea2:	2a00      	cmp	r2, #0
   18ea4:	d141      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18ea6:	7b22      	ldrb	r2, [r4, #12]
   18ea8:	3201      	adds	r2, #1
   18eaa:	b2d2      	uxtb	r2, r2
   18eac:	7322      	strb	r2, [r4, #12]
   18eae:	2a00      	cmp	r2, #0
   18eb0:	d13b      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18eb2:	7ae2      	ldrb	r2, [r4, #11]
   18eb4:	3201      	adds	r2, #1
   18eb6:	b2d2      	uxtb	r2, r2
   18eb8:	72e2      	strb	r2, [r4, #11]
   18eba:	2a00      	cmp	r2, #0
   18ebc:	d135      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18ebe:	7aa2      	ldrb	r2, [r4, #10]
   18ec0:	3201      	adds	r2, #1
   18ec2:	b2d2      	uxtb	r2, r2
   18ec4:	72a2      	strb	r2, [r4, #10]
   18ec6:	2a00      	cmp	r2, #0
   18ec8:	d12f      	bne.n	18f2a <mbedtls_ctr_drbg_random+0x216>
   18eca:	7a62      	ldrb	r2, [r4, #9]
   18ecc:	3201      	adds	r2, #1
   18ece:	b2d2      	uxtb	r2, r2
   18ed0:	7262      	strb	r2, [r4, #9]
   18ed2:	bb52      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18ed4:	7a22      	ldrb	r2, [r4, #8]
   18ed6:	3201      	adds	r2, #1
   18ed8:	b2d2      	uxtb	r2, r2
   18eda:	7222      	strb	r2, [r4, #8]
   18edc:	bb2a      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18ede:	79e2      	ldrb	r2, [r4, #7]
   18ee0:	3201      	adds	r2, #1
   18ee2:	b2d2      	uxtb	r2, r2
   18ee4:	71e2      	strb	r2, [r4, #7]
   18ee6:	bb02      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18ee8:	79a2      	ldrb	r2, [r4, #6]
   18eea:	3201      	adds	r2, #1
   18eec:	b2d2      	uxtb	r2, r2
   18eee:	71a2      	strb	r2, [r4, #6]
   18ef0:	b9da      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18ef2:	7962      	ldrb	r2, [r4, #5]
   18ef4:	3201      	adds	r2, #1
   18ef6:	b2d2      	uxtb	r2, r2
   18ef8:	7162      	strb	r2, [r4, #5]
   18efa:	b9b2      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18efc:	7922      	ldrb	r2, [r4, #4]
   18efe:	3201      	adds	r2, #1
   18f00:	b2d2      	uxtb	r2, r2
   18f02:	7122      	strb	r2, [r4, #4]
   18f04:	b98a      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18f06:	78e2      	ldrb	r2, [r4, #3]
   18f08:	3201      	adds	r2, #1
   18f0a:	b2d2      	uxtb	r2, r2
   18f0c:	70e2      	strb	r2, [r4, #3]
   18f0e:	b962      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18f10:	78a2      	ldrb	r2, [r4, #2]
   18f12:	3201      	adds	r2, #1
   18f14:	b2d2      	uxtb	r2, r2
   18f16:	70a2      	strb	r2, [r4, #2]
   18f18:	b93a      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18f1a:	7862      	ldrb	r2, [r4, #1]
   18f1c:	3201      	adds	r2, #1
   18f1e:	b2d2      	uxtb	r2, r2
   18f20:	7062      	strb	r2, [r4, #1]
   18f22:	b912      	cbnz	r2, 18f2a <mbedtls_ctr_drbg_random+0x216>
   18f24:	7822      	ldrb	r2, [r4, #0]
   18f26:	3201      	adds	r2, #1
   18f28:	7022      	strb	r2, [r4, #0]
   18f2a:	4622      	mov	r2, r4
   18f2c:	2101      	movs	r1, #1
   18f2e:	4640      	mov	r0, r8
   18f30:	f7fc fca0 	bl	15874 <mbedtls_aes_crypt_ecb>
   18f34:	4681      	mov	r9, r0
   18f36:	2800      	cmp	r0, #0
   18f38:	f47f af20 	bne.w	18d7c <mbedtls_ctr_drbg_random+0x68>
   18f3c:	f10b 0b10 	add.w	fp, fp, #16
   18f40:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   18f44:	d19b      	bne.n	18e7e <mbedtls_ctr_drbg_random+0x16a>
   18f46:	6870      	ldr	r0, [r6, #4]
   18f48:	f8da 3000 	ldr.w	r3, [sl]
   18f4c:	6831      	ldr	r1, [r6, #0]
   18f4e:	f8da 2004 	ldr.w	r2, [sl, #4]
   18f52:	4059      	eors	r1, r3
   18f54:	4042      	eors	r2, r0
   18f56:	f8da 3008 	ldr.w	r3, [sl, #8]
   18f5a:	68b0      	ldr	r0, [r6, #8]
   18f5c:	6031      	str	r1, [r6, #0]
   18f5e:	ea83 0100 	eor.w	r1, r3, r0
   18f62:	f8da 300c 	ldr.w	r3, [sl, #12]
   18f66:	68f0      	ldr	r0, [r6, #12]
   18f68:	6072      	str	r2, [r6, #4]
   18f6a:	4058      	eors	r0, r3
   18f6c:	6932      	ldr	r2, [r6, #16]
   18f6e:	f8da 3010 	ldr.w	r3, [sl, #16]
   18f72:	60b1      	str	r1, [r6, #8]
   18f74:	4053      	eors	r3, r2
   18f76:	f8da 1014 	ldr.w	r1, [sl, #20]
   18f7a:	6972      	ldr	r2, [r6, #20]
   18f7c:	60f0      	str	r0, [r6, #12]
   18f7e:	404a      	eors	r2, r1
   18f80:	69b0      	ldr	r0, [r6, #24]
   18f82:	f8da 1018 	ldr.w	r1, [sl, #24]
   18f86:	6133      	str	r3, [r6, #16]
   18f88:	4048      	eors	r0, r1
   18f8a:	f8da 301c 	ldr.w	r3, [sl, #28]
   18f8e:	69f1      	ldr	r1, [r6, #28]
   18f90:	6172      	str	r2, [r6, #20]
   18f92:	404b      	eors	r3, r1
   18f94:	6a32      	ldr	r2, [r6, #32]
   18f96:	f8da 1020 	ldr.w	r1, [sl, #32]
   18f9a:	61b0      	str	r0, [r6, #24]
   18f9c:	4051      	eors	r1, r2
   18f9e:	6a70      	ldr	r0, [r6, #36]	; 0x24
   18fa0:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
   18fa4:	61f3      	str	r3, [r6, #28]
   18fa6:	4050      	eors	r0, r2
   18fa8:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   18fac:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   18fae:	6231      	str	r1, [r6, #32]
   18fb0:	4053      	eors	r3, r2
   18fb2:	e9c6 0309 	strd	r0, r3, [r6, #36]	; 0x24
   18fb6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   18fb8:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   18fbc:	4631      	mov	r1, r6
   18fbe:	4053      	eors	r3, r2
   18fc0:	4640      	mov	r0, r8
   18fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
   18fc6:	62f3      	str	r3, [r6, #44]	; 0x2c
   18fc8:	f7fb fc9e 	bl	14908 <mbedtls_aes_setkey_enc>
   18fcc:	4681      	mov	r9, r0
   18fce:	2800      	cmp	r0, #0
   18fd0:	f47f aed4 	bne.w	18d7c <mbedtls_ctr_drbg_random+0x68>
   18fd4:	2210      	movs	r2, #16
   18fd6:	a914      	add	r1, sp, #80	; 0x50
   18fd8:	4620      	mov	r0, r4
   18fda:	f00c ff44 	bl	25e66 <memcpy>
   18fde:	2301      	movs	r3, #1
   18fe0:	6123      	str	r3, [r4, #16]
   18fe2:	e6d1      	b.n	18d88 <mbedtls_ctr_drbg_random+0x74>
   18fe4:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   18fe8:	4650      	mov	r0, sl
   18fea:	2230      	movs	r2, #48	; 0x30
   18fec:	2100      	movs	r1, #0
   18fee:	f00c ff67 	bl	25ec0 <memset>
   18ff2:	2500      	movs	r5, #0
   18ff4:	7be2      	ldrb	r2, [r4, #15]
   18ff6:	eb0a 0305 	add.w	r3, sl, r5
   18ffa:	3201      	adds	r2, #1
   18ffc:	b2d2      	uxtb	r2, r2
   18ffe:	73e2      	strb	r2, [r4, #15]
   19000:	2a00      	cmp	r2, #0
   19002:	d14d      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   19004:	7ba2      	ldrb	r2, [r4, #14]
   19006:	3201      	adds	r2, #1
   19008:	b2d2      	uxtb	r2, r2
   1900a:	73a2      	strb	r2, [r4, #14]
   1900c:	2a00      	cmp	r2, #0
   1900e:	d147      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   19010:	7b62      	ldrb	r2, [r4, #13]
   19012:	3201      	adds	r2, #1
   19014:	b2d2      	uxtb	r2, r2
   19016:	7362      	strb	r2, [r4, #13]
   19018:	2a00      	cmp	r2, #0
   1901a:	d141      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   1901c:	7b22      	ldrb	r2, [r4, #12]
   1901e:	3201      	adds	r2, #1
   19020:	b2d2      	uxtb	r2, r2
   19022:	7322      	strb	r2, [r4, #12]
   19024:	2a00      	cmp	r2, #0
   19026:	d13b      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   19028:	7ae2      	ldrb	r2, [r4, #11]
   1902a:	3201      	adds	r2, #1
   1902c:	b2d2      	uxtb	r2, r2
   1902e:	72e2      	strb	r2, [r4, #11]
   19030:	2a00      	cmp	r2, #0
   19032:	d135      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   19034:	7aa2      	ldrb	r2, [r4, #10]
   19036:	3201      	adds	r2, #1
   19038:	b2d2      	uxtb	r2, r2
   1903a:	72a2      	strb	r2, [r4, #10]
   1903c:	2a00      	cmp	r2, #0
   1903e:	d12f      	bne.n	190a0 <mbedtls_ctr_drbg_random+0x38c>
   19040:	7a62      	ldrb	r2, [r4, #9]
   19042:	3201      	adds	r2, #1
   19044:	b2d2      	uxtb	r2, r2
   19046:	7262      	strb	r2, [r4, #9]
   19048:	bb52      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   1904a:	7a22      	ldrb	r2, [r4, #8]
   1904c:	3201      	adds	r2, #1
   1904e:	b2d2      	uxtb	r2, r2
   19050:	7222      	strb	r2, [r4, #8]
   19052:	bb2a      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   19054:	79e2      	ldrb	r2, [r4, #7]
   19056:	3201      	adds	r2, #1
   19058:	b2d2      	uxtb	r2, r2
   1905a:	71e2      	strb	r2, [r4, #7]
   1905c:	bb02      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   1905e:	79a2      	ldrb	r2, [r4, #6]
   19060:	3201      	adds	r2, #1
   19062:	b2d2      	uxtb	r2, r2
   19064:	71a2      	strb	r2, [r4, #6]
   19066:	b9da      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   19068:	7962      	ldrb	r2, [r4, #5]
   1906a:	3201      	adds	r2, #1
   1906c:	b2d2      	uxtb	r2, r2
   1906e:	7162      	strb	r2, [r4, #5]
   19070:	b9b2      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   19072:	7922      	ldrb	r2, [r4, #4]
   19074:	3201      	adds	r2, #1
   19076:	b2d2      	uxtb	r2, r2
   19078:	7122      	strb	r2, [r4, #4]
   1907a:	b98a      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   1907c:	78e2      	ldrb	r2, [r4, #3]
   1907e:	3201      	adds	r2, #1
   19080:	b2d2      	uxtb	r2, r2
   19082:	70e2      	strb	r2, [r4, #3]
   19084:	b962      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   19086:	78a2      	ldrb	r2, [r4, #2]
   19088:	3201      	adds	r2, #1
   1908a:	b2d2      	uxtb	r2, r2
   1908c:	70a2      	strb	r2, [r4, #2]
   1908e:	b93a      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   19090:	7862      	ldrb	r2, [r4, #1]
   19092:	3201      	adds	r2, #1
   19094:	b2d2      	uxtb	r2, r2
   19096:	7062      	strb	r2, [r4, #1]
   19098:	b912      	cbnz	r2, 190a0 <mbedtls_ctr_drbg_random+0x38c>
   1909a:	7822      	ldrb	r2, [r4, #0]
   1909c:	3201      	adds	r2, #1
   1909e:	7022      	strb	r2, [r4, #0]
   190a0:	4622      	mov	r2, r4
   190a2:	2101      	movs	r1, #1
   190a4:	4640      	mov	r0, r8
   190a6:	f7fc fbe5 	bl	15874 <mbedtls_aes_crypt_ecb>
   190aa:	4681      	mov	r9, r0
   190ac:	2800      	cmp	r0, #0
   190ae:	f47f ae65 	bne.w	18d7c <mbedtls_ctr_drbg_random+0x68>
   190b2:	3510      	adds	r5, #16
   190b4:	2d30      	cmp	r5, #48	; 0x30
   190b6:	d19d      	bne.n	18ff4 <mbedtls_ctr_drbg_random+0x2e0>
   190b8:	e9da 1200 	ldrd	r1, r2, [sl]
   190bc:	9b00      	ldr	r3, [sp, #0]
   190be:	9801      	ldr	r0, [sp, #4]
   190c0:	4059      	eors	r1, r3
   190c2:	4042      	eors	r2, r0
   190c4:	f8da 3008 	ldr.w	r3, [sl, #8]
   190c8:	9802      	ldr	r0, [sp, #8]
   190ca:	f8ca 1000 	str.w	r1, [sl]
   190ce:	ea83 0100 	eor.w	r1, r3, r0
   190d2:	f8da 300c 	ldr.w	r3, [sl, #12]
   190d6:	9803      	ldr	r0, [sp, #12]
   190d8:	f8ca 2004 	str.w	r2, [sl, #4]
   190dc:	4058      	eors	r0, r3
   190de:	9a04      	ldr	r2, [sp, #16]
   190e0:	f8da 3010 	ldr.w	r3, [sl, #16]
   190e4:	f8ca 1008 	str.w	r1, [sl, #8]
   190e8:	4053      	eors	r3, r2
   190ea:	9905      	ldr	r1, [sp, #20]
   190ec:	f8da 2014 	ldr.w	r2, [sl, #20]
   190f0:	f8ca 000c 	str.w	r0, [sl, #12]
   190f4:	404a      	eors	r2, r1
   190f6:	9806      	ldr	r0, [sp, #24]
   190f8:	f8da 1018 	ldr.w	r1, [sl, #24]
   190fc:	f8ca 3010 	str.w	r3, [sl, #16]
   19100:	4048      	eors	r0, r1
   19102:	9b07      	ldr	r3, [sp, #28]
   19104:	f8da 101c 	ldr.w	r1, [sl, #28]
   19108:	f8ca 2014 	str.w	r2, [sl, #20]
   1910c:	404b      	eors	r3, r1
   1910e:	f8da 2020 	ldr.w	r2, [sl, #32]
   19112:	9908      	ldr	r1, [sp, #32]
   19114:	f8ca 0018 	str.w	r0, [sl, #24]
   19118:	4051      	eors	r1, r2
   1911a:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   1911e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19120:	f8ca 301c 	str.w	r3, [sl, #28]
   19124:	4050      	eors	r0, r2
   19126:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1912a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1912c:	f8ca 1020 	str.w	r1, [sl, #32]
   19130:	4053      	eors	r3, r2
   19132:	e9ca 0309 	strd	r0, r3, [sl, #36]	; 0x24
   19136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19138:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   1913c:	4640      	mov	r0, r8
   1913e:	4053      	eors	r3, r2
   19140:	4651      	mov	r1, sl
   19142:	f44f 7280 	mov.w	r2, #256	; 0x100
   19146:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
   1914a:	f7fb fbdd 	bl	14908 <mbedtls_aes_setkey_enc>
   1914e:	4681      	mov	r9, r0
   19150:	2800      	cmp	r0, #0
   19152:	f47f ae13 	bne.w	18d7c <mbedtls_ctr_drbg_random+0x68>
   19156:	2210      	movs	r2, #16
   19158:	a920      	add	r1, sp, #128	; 0x80
   1915a:	4620      	mov	r0, r4
   1915c:	f00c fe83 	bl	25e66 <memcpy>
   19160:	4648      	mov	r0, r9
   19162:	6923      	ldr	r3, [r4, #16]
   19164:	3301      	adds	r3, #1
   19166:	6123      	str	r3, [r4, #16]
   19168:	b079      	add	sp, #484	; 0x1e4
   1916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1916e:	f06f 0935 	mvn.w	r9, #53	; 0x35
   19172:	e603      	b.n	18d7c <mbedtls_ctr_drbg_random+0x68>
   19174:	f06f 0937 	mvn.w	r9, #55	; 0x37
   19178:	e600      	b.n	18d7c <mbedtls_ctr_drbg_random+0x68>
   1917a:	bf00      	nop

0001917c <ecp_modp>:
   1917c:	b570      	push	{r4, r5, r6, lr}
   1917e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   19180:	4604      	mov	r4, r0
   19182:	2b00      	cmp	r3, #0
   19184:	d03d      	beq.n	19202 <ecp_modp+0x86>
   19186:	6803      	ldr	r3, [r0, #0]
   19188:	460d      	mov	r5, r1
   1918a:	2b00      	cmp	r3, #0
   1918c:	db2f      	blt.n	191ee <ecp_modp+0x72>
   1918e:	4620      	mov	r0, r4
   19190:	f7fd fb5a 	bl	16848 <mbedtls_mpi_bitlen>
   19194:	6dab      	ldr	r3, [r5, #88]	; 0x58
   19196:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1919a:	d82d      	bhi.n	191f8 <ecp_modp+0x7c>
   1919c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1919e:	4620      	mov	r0, r4
   191a0:	4798      	blx	r3
   191a2:	4606      	mov	r6, r0
   191a4:	bb08      	cbnz	r0, 191ea <ecp_modp+0x6e>
   191a6:	3504      	adds	r5, #4
   191a8:	e00a      	b.n	191c0 <ecp_modp+0x44>
   191aa:	2100      	movs	r1, #0
   191ac:	4620      	mov	r0, r4
   191ae:	f7fd fe1b 	bl	16de8 <mbedtls_mpi_cmp_int>
   191b2:	b1a0      	cbz	r0, 191de <ecp_modp+0x62>
   191b4:	462a      	mov	r2, r5
   191b6:	4621      	mov	r1, r4
   191b8:	4620      	mov	r0, r4
   191ba:	f7fd ffcd 	bl	17158 <mbedtls_mpi_add_mpi>
   191be:	b9e8      	cbnz	r0, 191fc <ecp_modp+0x80>
   191c0:	6823      	ldr	r3, [r4, #0]
   191c2:	2b00      	cmp	r3, #0
   191c4:	dbf1      	blt.n	191aa <ecp_modp+0x2e>
   191c6:	4629      	mov	r1, r5
   191c8:	4620      	mov	r0, r4
   191ca:	f7fd fda5 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   191ce:	2800      	cmp	r0, #0
   191d0:	db0b      	blt.n	191ea <ecp_modp+0x6e>
   191d2:	462a      	mov	r2, r5
   191d4:	4621      	mov	r1, r4
   191d6:	4620      	mov	r0, r4
   191d8:	f7fd fefe 	bl	16fd8 <mbedtls_mpi_sub_abs>
   191dc:	b970      	cbnz	r0, 191fc <ecp_modp+0x80>
   191de:	4629      	mov	r1, r5
   191e0:	4620      	mov	r0, r4
   191e2:	f7fd fd99 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   191e6:	2800      	cmp	r0, #0
   191e8:	daf3      	bge.n	191d2 <ecp_modp+0x56>
   191ea:	4630      	mov	r0, r6
   191ec:	bd70      	pop	{r4, r5, r6, pc}
   191ee:	2100      	movs	r1, #0
   191f0:	f7fd fdfa 	bl	16de8 <mbedtls_mpi_cmp_int>
   191f4:	2800      	cmp	r0, #0
   191f6:	d0ca      	beq.n	1918e <ecp_modp+0x12>
   191f8:	4e05      	ldr	r6, [pc, #20]	; (19210 <ecp_modp+0x94>)
   191fa:	e7f6      	b.n	191ea <ecp_modp+0x6e>
   191fc:	4606      	mov	r6, r0
   191fe:	4630      	mov	r0, r6
   19200:	bd70      	pop	{r4, r5, r6, pc}
   19202:	1d0a      	adds	r2, r1, #4
   19204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19208:	4601      	mov	r1, r0
   1920a:	f7fe bda1 	b.w	17d50 <mbedtls_mpi_mod_mpi>
   1920e:	bf00      	nop
   19210:	ffffb080 	.word	0xffffb080

00019214 <ecp_double_jac>:
   19214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19218:	4606      	mov	r6, r0
   1921a:	b08d      	sub	sp, #52	; 0x34
   1921c:	4668      	mov	r0, sp
   1921e:	4688      	mov	r8, r1
   19220:	4615      	mov	r5, r2
   19222:	f7fd f8b7 	bl	16394 <mbedtls_mpi_init>
   19226:	a803      	add	r0, sp, #12
   19228:	f7fd f8b4 	bl	16394 <mbedtls_mpi_init>
   1922c:	a806      	add	r0, sp, #24
   1922e:	f7fd f8b1 	bl	16394 <mbedtls_mpi_init>
   19232:	a809      	add	r0, sp, #36	; 0x24
   19234:	f7fd f8ae 	bl	16394 <mbedtls_mpi_init>
   19238:	69b3      	ldr	r3, [r6, #24]
   1923a:	2b00      	cmp	r3, #0
   1923c:	f000 80b2 	beq.w	193a4 <ecp_double_jac+0x190>
   19240:	462a      	mov	r2, r5
   19242:	4629      	mov	r1, r5
   19244:	a803      	add	r0, sp, #12
   19246:	f7fe f8bb 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1924a:	4604      	mov	r4, r0
   1924c:	b178      	cbz	r0, 1926e <ecp_double_jac+0x5a>
   1924e:	4668      	mov	r0, sp
   19250:	f7fd f8a8 	bl	163a4 <mbedtls_mpi_free>
   19254:	a803      	add	r0, sp, #12
   19256:	f7fd f8a5 	bl	163a4 <mbedtls_mpi_free>
   1925a:	a806      	add	r0, sp, #24
   1925c:	f7fd f8a2 	bl	163a4 <mbedtls_mpi_free>
   19260:	a809      	add	r0, sp, #36	; 0x24
   19262:	f7fd f89f 	bl	163a4 <mbedtls_mpi_free>
   19266:	4620      	mov	r0, r4
   19268:	b00d      	add	sp, #52	; 0x34
   1926a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1926e:	4631      	mov	r1, r6
   19270:	a803      	add	r0, sp, #12
   19272:	f7ff ff83 	bl	1917c <ecp_modp>
   19276:	4604      	mov	r4, r0
   19278:	2800      	cmp	r0, #0
   1927a:	d1e8      	bne.n	1924e <ecp_double_jac+0x3a>
   1927c:	2203      	movs	r2, #3
   1927e:	a903      	add	r1, sp, #12
   19280:	4668      	mov	r0, sp
   19282:	f7fe f995 	bl	175b0 <mbedtls_mpi_mul_int>
   19286:	4604      	mov	r4, r0
   19288:	2800      	cmp	r0, #0
   1928a:	d1e0      	bne.n	1924e <ecp_double_jac+0x3a>
   1928c:	1d37      	adds	r7, r6, #4
   1928e:	e007      	b.n	192a0 <ecp_double_jac+0x8c>
   19290:	463a      	mov	r2, r7
   19292:	4669      	mov	r1, sp
   19294:	4668      	mov	r0, sp
   19296:	f7fd fe9f 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1929a:	4604      	mov	r4, r0
   1929c:	2800      	cmp	r0, #0
   1929e:	d1d6      	bne.n	1924e <ecp_double_jac+0x3a>
   192a0:	4639      	mov	r1, r7
   192a2:	4668      	mov	r0, sp
   192a4:	f7fd fd38 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   192a8:	2800      	cmp	r0, #0
   192aa:	daf1      	bge.n	19290 <ecp_double_jac+0x7c>
   192ac:	f106 0910 	add.w	r9, r6, #16
   192b0:	4648      	mov	r0, r9
   192b2:	2100      	movs	r1, #0
   192b4:	f7fd fd98 	bl	16de8 <mbedtls_mpi_cmp_int>
   192b8:	2800      	cmp	r0, #0
   192ba:	f040 80e2 	bne.w	19482 <ecp_double_jac+0x26e>
   192be:	f105 090c 	add.w	r9, r5, #12
   192c2:	464a      	mov	r2, r9
   192c4:	4649      	mov	r1, r9
   192c6:	a806      	add	r0, sp, #24
   192c8:	f7fe f87a 	bl	173c0 <mbedtls_mpi_mul_mpi>
   192cc:	4604      	mov	r4, r0
   192ce:	2800      	cmp	r0, #0
   192d0:	d1bd      	bne.n	1924e <ecp_double_jac+0x3a>
   192d2:	4631      	mov	r1, r6
   192d4:	a806      	add	r0, sp, #24
   192d6:	f7ff ff51 	bl	1917c <ecp_modp>
   192da:	4604      	mov	r4, r0
   192dc:	2800      	cmp	r0, #0
   192de:	d1b6      	bne.n	1924e <ecp_double_jac+0x3a>
   192e0:	2101      	movs	r1, #1
   192e2:	a806      	add	r0, sp, #24
   192e4:	f7fd fbf2 	bl	16acc <mbedtls_mpi_shift_l>
   192e8:	4604      	mov	r4, r0
   192ea:	b140      	cbz	r0, 192fe <ecp_double_jac+0xea>
   192ec:	e7af      	b.n	1924e <ecp_double_jac+0x3a>
   192ee:	a906      	add	r1, sp, #24
   192f0:	463a      	mov	r2, r7
   192f2:	4608      	mov	r0, r1
   192f4:	f7fd fe70 	bl	16fd8 <mbedtls_mpi_sub_abs>
   192f8:	4604      	mov	r4, r0
   192fa:	2800      	cmp	r0, #0
   192fc:	d1a7      	bne.n	1924e <ecp_double_jac+0x3a>
   192fe:	4639      	mov	r1, r7
   19300:	a806      	add	r0, sp, #24
   19302:	f7fd fd09 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   19306:	2800      	cmp	r0, #0
   19308:	daf1      	bge.n	192ee <ecp_double_jac+0xda>
   1930a:	aa06      	add	r2, sp, #24
   1930c:	4629      	mov	r1, r5
   1930e:	a803      	add	r0, sp, #12
   19310:	f7fe f856 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19314:	4604      	mov	r4, r0
   19316:	2800      	cmp	r0, #0
   19318:	d199      	bne.n	1924e <ecp_double_jac+0x3a>
   1931a:	4631      	mov	r1, r6
   1931c:	a803      	add	r0, sp, #12
   1931e:	f7ff ff2d 	bl	1917c <ecp_modp>
   19322:	4604      	mov	r4, r0
   19324:	2800      	cmp	r0, #0
   19326:	d192      	bne.n	1924e <ecp_double_jac+0x3a>
   19328:	2101      	movs	r1, #1
   1932a:	a803      	add	r0, sp, #12
   1932c:	f7fd fbce 	bl	16acc <mbedtls_mpi_shift_l>
   19330:	4604      	mov	r4, r0
   19332:	b140      	cbz	r0, 19346 <ecp_double_jac+0x132>
   19334:	e78b      	b.n	1924e <ecp_double_jac+0x3a>
   19336:	a903      	add	r1, sp, #12
   19338:	463a      	mov	r2, r7
   1933a:	4608      	mov	r0, r1
   1933c:	f7fd fe4c 	bl	16fd8 <mbedtls_mpi_sub_abs>
   19340:	4604      	mov	r4, r0
   19342:	2800      	cmp	r0, #0
   19344:	d183      	bne.n	1924e <ecp_double_jac+0x3a>
   19346:	4639      	mov	r1, r7
   19348:	a803      	add	r0, sp, #12
   1934a:	f7fd fce5 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1934e:	2800      	cmp	r0, #0
   19350:	daf1      	bge.n	19336 <ecp_double_jac+0x122>
   19352:	aa06      	add	r2, sp, #24
   19354:	4611      	mov	r1, r2
   19356:	a809      	add	r0, sp, #36	; 0x24
   19358:	f7fe f832 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1935c:	4604      	mov	r4, r0
   1935e:	2800      	cmp	r0, #0
   19360:	f47f af75 	bne.w	1924e <ecp_double_jac+0x3a>
   19364:	4631      	mov	r1, r6
   19366:	a809      	add	r0, sp, #36	; 0x24
   19368:	f7ff ff08 	bl	1917c <ecp_modp>
   1936c:	4604      	mov	r4, r0
   1936e:	2800      	cmp	r0, #0
   19370:	f47f af6d 	bne.w	1924e <ecp_double_jac+0x3a>
   19374:	2101      	movs	r1, #1
   19376:	a809      	add	r0, sp, #36	; 0x24
   19378:	f7fd fba8 	bl	16acc <mbedtls_mpi_shift_l>
   1937c:	4604      	mov	r4, r0
   1937e:	2800      	cmp	r0, #0
   19380:	f47f af65 	bne.w	1924e <ecp_double_jac+0x3a>
   19384:	4639      	mov	r1, r7
   19386:	a809      	add	r0, sp, #36	; 0x24
   19388:	f7fd fcc6 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1938c:	2800      	cmp	r0, #0
   1938e:	f2c0 80c5 	blt.w	1951c <ecp_double_jac+0x308>
   19392:	a909      	add	r1, sp, #36	; 0x24
   19394:	463a      	mov	r2, r7
   19396:	4608      	mov	r0, r1
   19398:	f7fd fe1e 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1939c:	4604      	mov	r4, r0
   1939e:	2800      	cmp	r0, #0
   193a0:	d0f0      	beq.n	19384 <ecp_double_jac+0x170>
   193a2:	e754      	b.n	1924e <ecp_double_jac+0x3a>
   193a4:	f105 0218 	add.w	r2, r5, #24
   193a8:	4611      	mov	r1, r2
   193aa:	a803      	add	r0, sp, #12
   193ac:	f7fe f808 	bl	173c0 <mbedtls_mpi_mul_mpi>
   193b0:	4604      	mov	r4, r0
   193b2:	2800      	cmp	r0, #0
   193b4:	f47f af4b 	bne.w	1924e <ecp_double_jac+0x3a>
   193b8:	4631      	mov	r1, r6
   193ba:	a803      	add	r0, sp, #12
   193bc:	f7ff fede 	bl	1917c <ecp_modp>
   193c0:	4604      	mov	r4, r0
   193c2:	2800      	cmp	r0, #0
   193c4:	f47f af43 	bne.w	1924e <ecp_double_jac+0x3a>
   193c8:	aa03      	add	r2, sp, #12
   193ca:	4629      	mov	r1, r5
   193cc:	a806      	add	r0, sp, #24
   193ce:	f7fd fec3 	bl	17158 <mbedtls_mpi_add_mpi>
   193d2:	4604      	mov	r4, r0
   193d4:	2800      	cmp	r0, #0
   193d6:	f47f af3a 	bne.w	1924e <ecp_double_jac+0x3a>
   193da:	1d37      	adds	r7, r6, #4
   193dc:	e008      	b.n	193f0 <ecp_double_jac+0x1dc>
   193de:	a906      	add	r1, sp, #24
   193e0:	463a      	mov	r2, r7
   193e2:	4608      	mov	r0, r1
   193e4:	f7fd fdf8 	bl	16fd8 <mbedtls_mpi_sub_abs>
   193e8:	4604      	mov	r4, r0
   193ea:	2800      	cmp	r0, #0
   193ec:	f47f af2f 	bne.w	1924e <ecp_double_jac+0x3a>
   193f0:	4639      	mov	r1, r7
   193f2:	a806      	add	r0, sp, #24
   193f4:	f7fd fc90 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   193f8:	2800      	cmp	r0, #0
   193fa:	daf0      	bge.n	193de <ecp_double_jac+0x1ca>
   193fc:	aa03      	add	r2, sp, #12
   193fe:	4629      	mov	r1, r5
   19400:	a809      	add	r0, sp, #36	; 0x24
   19402:	f7fd ff1d 	bl	17240 <mbedtls_mpi_sub_mpi>
   19406:	4604      	mov	r4, r0
   19408:	b170      	cbz	r0, 19428 <ecp_double_jac+0x214>
   1940a:	e720      	b.n	1924e <ecp_double_jac+0x3a>
   1940c:	2100      	movs	r1, #0
   1940e:	a809      	add	r0, sp, #36	; 0x24
   19410:	f7fd fcea 	bl	16de8 <mbedtls_mpi_cmp_int>
   19414:	b158      	cbz	r0, 1942e <ecp_double_jac+0x21a>
   19416:	a909      	add	r1, sp, #36	; 0x24
   19418:	463a      	mov	r2, r7
   1941a:	4608      	mov	r0, r1
   1941c:	f7fd fe9c 	bl	17158 <mbedtls_mpi_add_mpi>
   19420:	4604      	mov	r4, r0
   19422:	2800      	cmp	r0, #0
   19424:	f47f af13 	bne.w	1924e <ecp_double_jac+0x3a>
   19428:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1942a:	2b00      	cmp	r3, #0
   1942c:	dbee      	blt.n	1940c <ecp_double_jac+0x1f8>
   1942e:	aa09      	add	r2, sp, #36	; 0x24
   19430:	a906      	add	r1, sp, #24
   19432:	a803      	add	r0, sp, #12
   19434:	f7fd ffc4 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19438:	4604      	mov	r4, r0
   1943a:	2800      	cmp	r0, #0
   1943c:	f47f af07 	bne.w	1924e <ecp_double_jac+0x3a>
   19440:	4631      	mov	r1, r6
   19442:	a803      	add	r0, sp, #12
   19444:	f7ff fe9a 	bl	1917c <ecp_modp>
   19448:	4604      	mov	r4, r0
   1944a:	2800      	cmp	r0, #0
   1944c:	f47f aeff 	bne.w	1924e <ecp_double_jac+0x3a>
   19450:	2203      	movs	r2, #3
   19452:	a903      	add	r1, sp, #12
   19454:	4668      	mov	r0, sp
   19456:	f7fe f8ab 	bl	175b0 <mbedtls_mpi_mul_int>
   1945a:	4604      	mov	r4, r0
   1945c:	2800      	cmp	r0, #0
   1945e:	f47f aef6 	bne.w	1924e <ecp_double_jac+0x3a>
   19462:	4639      	mov	r1, r7
   19464:	4668      	mov	r0, sp
   19466:	f7fd fc57 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1946a:	2800      	cmp	r0, #0
   1946c:	f6ff af27 	blt.w	192be <ecp_double_jac+0xaa>
   19470:	463a      	mov	r2, r7
   19472:	4669      	mov	r1, sp
   19474:	4668      	mov	r0, sp
   19476:	f7fd fdaf 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1947a:	4604      	mov	r4, r0
   1947c:	2800      	cmp	r0, #0
   1947e:	d0f0      	beq.n	19462 <ecp_double_jac+0x24e>
   19480:	e6e5      	b.n	1924e <ecp_double_jac+0x3a>
   19482:	f105 0218 	add.w	r2, r5, #24
   19486:	4611      	mov	r1, r2
   19488:	a803      	add	r0, sp, #12
   1948a:	f7fd ff99 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1948e:	4604      	mov	r4, r0
   19490:	2800      	cmp	r0, #0
   19492:	f47f aedc 	bne.w	1924e <ecp_double_jac+0x3a>
   19496:	4631      	mov	r1, r6
   19498:	a803      	add	r0, sp, #12
   1949a:	f7ff fe6f 	bl	1917c <ecp_modp>
   1949e:	4604      	mov	r4, r0
   194a0:	2800      	cmp	r0, #0
   194a2:	f47f aed4 	bne.w	1924e <ecp_double_jac+0x3a>
   194a6:	aa03      	add	r2, sp, #12
   194a8:	4611      	mov	r1, r2
   194aa:	a806      	add	r0, sp, #24
   194ac:	f7fd ff88 	bl	173c0 <mbedtls_mpi_mul_mpi>
   194b0:	4604      	mov	r4, r0
   194b2:	2800      	cmp	r0, #0
   194b4:	f47f aecb 	bne.w	1924e <ecp_double_jac+0x3a>
   194b8:	4631      	mov	r1, r6
   194ba:	a806      	add	r0, sp, #24
   194bc:	f7ff fe5e 	bl	1917c <ecp_modp>
   194c0:	4604      	mov	r4, r0
   194c2:	2800      	cmp	r0, #0
   194c4:	f47f aec3 	bne.w	1924e <ecp_double_jac+0x3a>
   194c8:	464a      	mov	r2, r9
   194ca:	a906      	add	r1, sp, #24
   194cc:	a803      	add	r0, sp, #12
   194ce:	f7fd ff77 	bl	173c0 <mbedtls_mpi_mul_mpi>
   194d2:	4604      	mov	r4, r0
   194d4:	2800      	cmp	r0, #0
   194d6:	f47f aeba 	bne.w	1924e <ecp_double_jac+0x3a>
   194da:	4631      	mov	r1, r6
   194dc:	a803      	add	r0, sp, #12
   194de:	f7ff fe4d 	bl	1917c <ecp_modp>
   194e2:	4604      	mov	r4, r0
   194e4:	2800      	cmp	r0, #0
   194e6:	f47f aeb2 	bne.w	1924e <ecp_double_jac+0x3a>
   194ea:	aa03      	add	r2, sp, #12
   194ec:	4669      	mov	r1, sp
   194ee:	4668      	mov	r0, sp
   194f0:	f7fd fe32 	bl	17158 <mbedtls_mpi_add_mpi>
   194f4:	4604      	mov	r4, r0
   194f6:	2800      	cmp	r0, #0
   194f8:	f47f aea9 	bne.w	1924e <ecp_double_jac+0x3a>
   194fc:	4639      	mov	r1, r7
   194fe:	4668      	mov	r0, sp
   19500:	f7fd fc0a 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   19504:	2800      	cmp	r0, #0
   19506:	f6ff aeda 	blt.w	192be <ecp_double_jac+0xaa>
   1950a:	463a      	mov	r2, r7
   1950c:	4669      	mov	r1, sp
   1950e:	4668      	mov	r0, sp
   19510:	f7fd fd62 	bl	16fd8 <mbedtls_mpi_sub_abs>
   19514:	4604      	mov	r4, r0
   19516:	2800      	cmp	r0, #0
   19518:	d0f0      	beq.n	194fc <ecp_double_jac+0x2e8>
   1951a:	e698      	b.n	1924e <ecp_double_jac+0x3a>
   1951c:	466a      	mov	r2, sp
   1951e:	4669      	mov	r1, sp
   19520:	a806      	add	r0, sp, #24
   19522:	f7fd ff4d 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19526:	4604      	mov	r4, r0
   19528:	2800      	cmp	r0, #0
   1952a:	f47f ae90 	bne.w	1924e <ecp_double_jac+0x3a>
   1952e:	4631      	mov	r1, r6
   19530:	a806      	add	r0, sp, #24
   19532:	f7ff fe23 	bl	1917c <ecp_modp>
   19536:	4604      	mov	r4, r0
   19538:	2800      	cmp	r0, #0
   1953a:	f47f ae88 	bne.w	1924e <ecp_double_jac+0x3a>
   1953e:	a906      	add	r1, sp, #24
   19540:	aa03      	add	r2, sp, #12
   19542:	4608      	mov	r0, r1
   19544:	f7fd fe7c 	bl	17240 <mbedtls_mpi_sub_mpi>
   19548:	4604      	mov	r4, r0
   1954a:	2800      	cmp	r0, #0
   1954c:	f47f ae7f 	bne.w	1924e <ecp_double_jac+0x3a>
   19550:	9b06      	ldr	r3, [sp, #24]
   19552:	2b00      	cmp	r3, #0
   19554:	da0d      	bge.n	19572 <ecp_double_jac+0x35e>
   19556:	2100      	movs	r1, #0
   19558:	a806      	add	r0, sp, #24
   1955a:	f7fd fc45 	bl	16de8 <mbedtls_mpi_cmp_int>
   1955e:	b140      	cbz	r0, 19572 <ecp_double_jac+0x35e>
   19560:	a906      	add	r1, sp, #24
   19562:	463a      	mov	r2, r7
   19564:	4608      	mov	r0, r1
   19566:	f7fd fdf7 	bl	17158 <mbedtls_mpi_add_mpi>
   1956a:	4604      	mov	r4, r0
   1956c:	2800      	cmp	r0, #0
   1956e:	d0ef      	beq.n	19550 <ecp_double_jac+0x33c>
   19570:	e66d      	b.n	1924e <ecp_double_jac+0x3a>
   19572:	a906      	add	r1, sp, #24
   19574:	aa03      	add	r2, sp, #12
   19576:	4608      	mov	r0, r1
   19578:	f7fd fe62 	bl	17240 <mbedtls_mpi_sub_mpi>
   1957c:	4604      	mov	r4, r0
   1957e:	2800      	cmp	r0, #0
   19580:	f47f ae65 	bne.w	1924e <ecp_double_jac+0x3a>
   19584:	9b06      	ldr	r3, [sp, #24]
   19586:	2b00      	cmp	r3, #0
   19588:	da0d      	bge.n	195a6 <ecp_double_jac+0x392>
   1958a:	2100      	movs	r1, #0
   1958c:	a806      	add	r0, sp, #24
   1958e:	f7fd fc2b 	bl	16de8 <mbedtls_mpi_cmp_int>
   19592:	b140      	cbz	r0, 195a6 <ecp_double_jac+0x392>
   19594:	a906      	add	r1, sp, #24
   19596:	463a      	mov	r2, r7
   19598:	4608      	mov	r0, r1
   1959a:	f7fd fddd 	bl	17158 <mbedtls_mpi_add_mpi>
   1959e:	4604      	mov	r4, r0
   195a0:	2800      	cmp	r0, #0
   195a2:	d0ef      	beq.n	19584 <ecp_double_jac+0x370>
   195a4:	e653      	b.n	1924e <ecp_double_jac+0x3a>
   195a6:	a903      	add	r1, sp, #12
   195a8:	aa06      	add	r2, sp, #24
   195aa:	4608      	mov	r0, r1
   195ac:	f7fd fe48 	bl	17240 <mbedtls_mpi_sub_mpi>
   195b0:	4604      	mov	r4, r0
   195b2:	2800      	cmp	r0, #0
   195b4:	f47f ae4b 	bne.w	1924e <ecp_double_jac+0x3a>
   195b8:	9b03      	ldr	r3, [sp, #12]
   195ba:	2b00      	cmp	r3, #0
   195bc:	da0d      	bge.n	195da <ecp_double_jac+0x3c6>
   195be:	2100      	movs	r1, #0
   195c0:	a803      	add	r0, sp, #12
   195c2:	f7fd fc11 	bl	16de8 <mbedtls_mpi_cmp_int>
   195c6:	b140      	cbz	r0, 195da <ecp_double_jac+0x3c6>
   195c8:	a903      	add	r1, sp, #12
   195ca:	463a      	mov	r2, r7
   195cc:	4608      	mov	r0, r1
   195ce:	f7fd fdc3 	bl	17158 <mbedtls_mpi_add_mpi>
   195d2:	4604      	mov	r4, r0
   195d4:	2800      	cmp	r0, #0
   195d6:	d0ef      	beq.n	195b8 <ecp_double_jac+0x3a4>
   195d8:	e639      	b.n	1924e <ecp_double_jac+0x3a>
   195da:	a903      	add	r1, sp, #12
   195dc:	466a      	mov	r2, sp
   195de:	4608      	mov	r0, r1
   195e0:	f7fd feee 	bl	173c0 <mbedtls_mpi_mul_mpi>
   195e4:	4604      	mov	r4, r0
   195e6:	2800      	cmp	r0, #0
   195e8:	f47f ae31 	bne.w	1924e <ecp_double_jac+0x3a>
   195ec:	4631      	mov	r1, r6
   195ee:	a803      	add	r0, sp, #12
   195f0:	f7ff fdc4 	bl	1917c <ecp_modp>
   195f4:	4604      	mov	r4, r0
   195f6:	2800      	cmp	r0, #0
   195f8:	f47f ae29 	bne.w	1924e <ecp_double_jac+0x3a>
   195fc:	a903      	add	r1, sp, #12
   195fe:	aa09      	add	r2, sp, #36	; 0x24
   19600:	4608      	mov	r0, r1
   19602:	f7fd fe1d 	bl	17240 <mbedtls_mpi_sub_mpi>
   19606:	4604      	mov	r4, r0
   19608:	2800      	cmp	r0, #0
   1960a:	f47f ae20 	bne.w	1924e <ecp_double_jac+0x3a>
   1960e:	9b03      	ldr	r3, [sp, #12]
   19610:	2b00      	cmp	r3, #0
   19612:	da0d      	bge.n	19630 <ecp_double_jac+0x41c>
   19614:	2100      	movs	r1, #0
   19616:	a803      	add	r0, sp, #12
   19618:	f7fd fbe6 	bl	16de8 <mbedtls_mpi_cmp_int>
   1961c:	b140      	cbz	r0, 19630 <ecp_double_jac+0x41c>
   1961e:	a903      	add	r1, sp, #12
   19620:	463a      	mov	r2, r7
   19622:	4608      	mov	r0, r1
   19624:	f7fd fd98 	bl	17158 <mbedtls_mpi_add_mpi>
   19628:	4604      	mov	r4, r0
   1962a:	2800      	cmp	r0, #0
   1962c:	d0ef      	beq.n	1960e <ecp_double_jac+0x3fa>
   1962e:	e60e      	b.n	1924e <ecp_double_jac+0x3a>
   19630:	f105 0218 	add.w	r2, r5, #24
   19634:	4649      	mov	r1, r9
   19636:	a809      	add	r0, sp, #36	; 0x24
   19638:	f7fd fec2 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1963c:	4604      	mov	r4, r0
   1963e:	2800      	cmp	r0, #0
   19640:	f47f ae05 	bne.w	1924e <ecp_double_jac+0x3a>
   19644:	4631      	mov	r1, r6
   19646:	a809      	add	r0, sp, #36	; 0x24
   19648:	f7ff fd98 	bl	1917c <ecp_modp>
   1964c:	4604      	mov	r4, r0
   1964e:	2800      	cmp	r0, #0
   19650:	f47f adfd 	bne.w	1924e <ecp_double_jac+0x3a>
   19654:	2101      	movs	r1, #1
   19656:	a809      	add	r0, sp, #36	; 0x24
   19658:	f7fd fa38 	bl	16acc <mbedtls_mpi_shift_l>
   1965c:	4604      	mov	r4, r0
   1965e:	2800      	cmp	r0, #0
   19660:	f47f adf5 	bne.w	1924e <ecp_double_jac+0x3a>
   19664:	4639      	mov	r1, r7
   19666:	a809      	add	r0, sp, #36	; 0x24
   19668:	f7fd fb56 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1966c:	2800      	cmp	r0, #0
   1966e:	db08      	blt.n	19682 <ecp_double_jac+0x46e>
   19670:	a909      	add	r1, sp, #36	; 0x24
   19672:	463a      	mov	r2, r7
   19674:	4608      	mov	r0, r1
   19676:	f7fd fcaf 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1967a:	4604      	mov	r4, r0
   1967c:	2800      	cmp	r0, #0
   1967e:	d0f1      	beq.n	19664 <ecp_double_jac+0x450>
   19680:	e5e5      	b.n	1924e <ecp_double_jac+0x3a>
   19682:	a906      	add	r1, sp, #24
   19684:	4640      	mov	r0, r8
   19686:	f7fc ff09 	bl	1649c <mbedtls_mpi_copy>
   1968a:	4604      	mov	r4, r0
   1968c:	2800      	cmp	r0, #0
   1968e:	f47f adde 	bne.w	1924e <ecp_double_jac+0x3a>
   19692:	a903      	add	r1, sp, #12
   19694:	f108 000c 	add.w	r0, r8, #12
   19698:	f7fc ff00 	bl	1649c <mbedtls_mpi_copy>
   1969c:	4604      	mov	r4, r0
   1969e:	2800      	cmp	r0, #0
   196a0:	f47f add5 	bne.w	1924e <ecp_double_jac+0x3a>
   196a4:	f108 0018 	add.w	r0, r8, #24
   196a8:	a909      	add	r1, sp, #36	; 0x24
   196aa:	f7fc fef7 	bl	1649c <mbedtls_mpi_copy>
   196ae:	4604      	mov	r4, r0
   196b0:	e5cd      	b.n	1924e <ecp_double_jac+0x3a>
   196b2:	bf00      	nop

000196b4 <ecp_normalize_jac>:
   196b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   196b6:	f101 0518 	add.w	r5, r1, #24
   196ba:	b087      	sub	sp, #28
   196bc:	460e      	mov	r6, r1
   196be:	4607      	mov	r7, r0
   196c0:	2100      	movs	r1, #0
   196c2:	4628      	mov	r0, r5
   196c4:	f7fd fb90 	bl	16de8 <mbedtls_mpi_cmp_int>
   196c8:	b918      	cbnz	r0, 196d2 <ecp_normalize_jac+0x1e>
   196ca:	4604      	mov	r4, r0
   196cc:	4620      	mov	r0, r4
   196ce:	b007      	add	sp, #28
   196d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196d2:	4668      	mov	r0, sp
   196d4:	f7fc fe5e 	bl	16394 <mbedtls_mpi_init>
   196d8:	a803      	add	r0, sp, #12
   196da:	f7fc fe5b 	bl	16394 <mbedtls_mpi_init>
   196de:	4668      	mov	r0, sp
   196e0:	1d3a      	adds	r2, r7, #4
   196e2:	4629      	mov	r1, r5
   196e4:	f7fe fe8a 	bl	183fc <mbedtls_mpi_inv_mod>
   196e8:	4604      	mov	r4, r0
   196ea:	b140      	cbz	r0, 196fe <ecp_normalize_jac+0x4a>
   196ec:	4668      	mov	r0, sp
   196ee:	f7fc fe59 	bl	163a4 <mbedtls_mpi_free>
   196f2:	a803      	add	r0, sp, #12
   196f4:	f7fc fe56 	bl	163a4 <mbedtls_mpi_free>
   196f8:	4620      	mov	r0, r4
   196fa:	b007      	add	sp, #28
   196fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196fe:	466a      	mov	r2, sp
   19700:	4669      	mov	r1, sp
   19702:	a803      	add	r0, sp, #12
   19704:	f7fd fe5c 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19708:	4604      	mov	r4, r0
   1970a:	2800      	cmp	r0, #0
   1970c:	d1ee      	bne.n	196ec <ecp_normalize_jac+0x38>
   1970e:	4639      	mov	r1, r7
   19710:	a803      	add	r0, sp, #12
   19712:	f7ff fd33 	bl	1917c <ecp_modp>
   19716:	4604      	mov	r4, r0
   19718:	2800      	cmp	r0, #0
   1971a:	d1e7      	bne.n	196ec <ecp_normalize_jac+0x38>
   1971c:	aa03      	add	r2, sp, #12
   1971e:	4631      	mov	r1, r6
   19720:	4630      	mov	r0, r6
   19722:	f7fd fe4d 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19726:	4604      	mov	r4, r0
   19728:	2800      	cmp	r0, #0
   1972a:	d1df      	bne.n	196ec <ecp_normalize_jac+0x38>
   1972c:	4639      	mov	r1, r7
   1972e:	4630      	mov	r0, r6
   19730:	f7ff fd24 	bl	1917c <ecp_modp>
   19734:	4604      	mov	r4, r0
   19736:	2800      	cmp	r0, #0
   19738:	d1d8      	bne.n	196ec <ecp_normalize_jac+0x38>
   1973a:	360c      	adds	r6, #12
   1973c:	4631      	mov	r1, r6
   1973e:	4630      	mov	r0, r6
   19740:	aa03      	add	r2, sp, #12
   19742:	f7fd fe3d 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19746:	4604      	mov	r4, r0
   19748:	2800      	cmp	r0, #0
   1974a:	d1cf      	bne.n	196ec <ecp_normalize_jac+0x38>
   1974c:	4639      	mov	r1, r7
   1974e:	4630      	mov	r0, r6
   19750:	f7ff fd14 	bl	1917c <ecp_modp>
   19754:	4604      	mov	r4, r0
   19756:	2800      	cmp	r0, #0
   19758:	d1c8      	bne.n	196ec <ecp_normalize_jac+0x38>
   1975a:	466a      	mov	r2, sp
   1975c:	4631      	mov	r1, r6
   1975e:	4630      	mov	r0, r6
   19760:	f7fd fe2e 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19764:	4604      	mov	r4, r0
   19766:	2800      	cmp	r0, #0
   19768:	d1c0      	bne.n	196ec <ecp_normalize_jac+0x38>
   1976a:	4639      	mov	r1, r7
   1976c:	4630      	mov	r0, r6
   1976e:	f7ff fd05 	bl	1917c <ecp_modp>
   19772:	4604      	mov	r4, r0
   19774:	2800      	cmp	r0, #0
   19776:	d1b9      	bne.n	196ec <ecp_normalize_jac+0x38>
   19778:	4628      	mov	r0, r5
   1977a:	2101      	movs	r1, #1
   1977c:	f7fd f81a 	bl	167b4 <mbedtls_mpi_lset>
   19780:	4604      	mov	r4, r0
   19782:	e7b3      	b.n	196ec <ecp_normalize_jac+0x38>

00019784 <ecp_normalize_jac_many.part.3>:
   19784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19788:	4682      	mov	sl, r0
   1978a:	b08b      	sub	sp, #44	; 0x2c
   1978c:	468b      	mov	fp, r1
   1978e:	4610      	mov	r0, r2
   19790:	210c      	movs	r1, #12
   19792:	4616      	mov	r6, r2
   19794:	f7fb f876 	bl	14884 <nrf_calloc>
   19798:	2800      	cmp	r0, #0
   1979a:	f000 80fe 	beq.w	1999a <ecp_normalize_jac_many.part.3+0x216>
   1979e:	4680      	mov	r8, r0
   197a0:	a801      	add	r0, sp, #4
   197a2:	f7fc fdf7 	bl	16394 <mbedtls_mpi_init>
   197a6:	a804      	add	r0, sp, #16
   197a8:	f7fc fdf4 	bl	16394 <mbedtls_mpi_init>
   197ac:	a807      	add	r0, sp, #28
   197ae:	f7fc fdf1 	bl	16394 <mbedtls_mpi_init>
   197b2:	f8db 1000 	ldr.w	r1, [fp]
   197b6:	4640      	mov	r0, r8
   197b8:	3118      	adds	r1, #24
   197ba:	f7fc fe6f 	bl	1649c <mbedtls_mpi_copy>
   197be:	4604      	mov	r4, r0
   197c0:	bb60      	cbnz	r0, 1981c <ecp_normalize_jac_many.part.3+0x98>
   197c2:	2e01      	cmp	r6, #1
   197c4:	d946      	bls.n	19854 <ecp_normalize_jac_many.part.3+0xd0>
   197c6:	46d9      	mov	r9, fp
   197c8:	2701      	movs	r7, #1
   197ca:	f108 050c 	add.w	r5, r8, #12
   197ce:	e008      	b.n	197e2 <ecp_normalize_jac_many.part.3+0x5e>
   197d0:	4628      	mov	r0, r5
   197d2:	4651      	mov	r1, sl
   197d4:	f7ff fcd2 	bl	1917c <ecp_modp>
   197d8:	350c      	adds	r5, #12
   197da:	4604      	mov	r4, r0
   197dc:	b968      	cbnz	r0, 197fa <ecp_normalize_jac_many.part.3+0x76>
   197de:	42be      	cmp	r6, r7
   197e0:	d038      	beq.n	19854 <ecp_normalize_jac_many.part.3+0xd0>
   197e2:	f859 2f04 	ldr.w	r2, [r9, #4]!
   197e6:	f1a5 010c 	sub.w	r1, r5, #12
   197ea:	3218      	adds	r2, #24
   197ec:	4628      	mov	r0, r5
   197ee:	f7fd fde7 	bl	173c0 <mbedtls_mpi_mul_mpi>
   197f2:	3701      	adds	r7, #1
   197f4:	4604      	mov	r4, r0
   197f6:	2800      	cmp	r0, #0
   197f8:	d0ea      	beq.n	197d0 <ecp_normalize_jac_many.part.3+0x4c>
   197fa:	a801      	add	r0, sp, #4
   197fc:	f7fc fdd2 	bl	163a4 <mbedtls_mpi_free>
   19800:	a804      	add	r0, sp, #16
   19802:	f7fc fdcf 	bl	163a4 <mbedtls_mpi_free>
   19806:	a807      	add	r0, sp, #28
   19808:	f7fc fdcc 	bl	163a4 <mbedtls_mpi_free>
   1980c:	e010      	b.n	19830 <ecp_normalize_jac_many.part.3+0xac>
   1980e:	a901      	add	r1, sp, #4
   19810:	a804      	add	r0, sp, #16
   19812:	f7fc fe43 	bl	1649c <mbedtls_mpi_copy>
   19816:	4604      	mov	r4, r0
   19818:	2800      	cmp	r0, #0
   1981a:	d053      	beq.n	198c4 <ecp_normalize_jac_many.part.3+0x140>
   1981c:	a801      	add	r0, sp, #4
   1981e:	f7fc fdc1 	bl	163a4 <mbedtls_mpi_free>
   19822:	a804      	add	r0, sp, #16
   19824:	f7fc fdbe 	bl	163a4 <mbedtls_mpi_free>
   19828:	a807      	add	r0, sp, #28
   1982a:	f7fc fdbb 	bl	163a4 <mbedtls_mpi_free>
   1982e:	b156      	cbz	r6, 19846 <ecp_normalize_jac_many.part.3+0xc2>
   19830:	4645      	mov	r5, r8
   19832:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   19836:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   1983a:	4628      	mov	r0, r5
   1983c:	350c      	adds	r5, #12
   1983e:	f7fc fdb1 	bl	163a4 <mbedtls_mpi_free>
   19842:	42b5      	cmp	r5, r6
   19844:	d1f9      	bne.n	1983a <ecp_normalize_jac_many.part.3+0xb6>
   19846:	4640      	mov	r0, r8
   19848:	f7fb f830 	bl	148ac <nrf_free>
   1984c:	4620      	mov	r0, r4
   1984e:	b00b      	add	sp, #44	; 0x2c
   19850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19854:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   19858:	00ad      	lsls	r5, r5, #2
   1985a:	f1a5 010c 	sub.w	r1, r5, #12
   1985e:	4441      	add	r1, r8
   19860:	f10a 0204 	add.w	r2, sl, #4
   19864:	a801      	add	r0, sp, #4
   19866:	f7fe fdc9 	bl	183fc <mbedtls_mpi_inv_mod>
   1986a:	4604      	mov	r4, r0
   1986c:	2800      	cmp	r0, #0
   1986e:	d1d5      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   19870:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   19874:	3d18      	subs	r5, #24
   19876:	3b01      	subs	r3, #1
   19878:	4445      	add	r5, r8
   1987a:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
   1987e:	1e77      	subs	r7, r6, #1
   19880:	2f00      	cmp	r7, #0
   19882:	d0c4      	beq.n	1980e <ecp_normalize_jac_many.part.3+0x8a>
   19884:	462a      	mov	r2, r5
   19886:	a901      	add	r1, sp, #4
   19888:	a804      	add	r0, sp, #16
   1988a:	f7fd fd99 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1988e:	4604      	mov	r4, r0
   19890:	2800      	cmp	r0, #0
   19892:	d1c3      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   19894:	4651      	mov	r1, sl
   19896:	a804      	add	r0, sp, #16
   19898:	f7ff fc70 	bl	1917c <ecp_modp>
   1989c:	4604      	mov	r4, r0
   1989e:	2800      	cmp	r0, #0
   198a0:	d1bc      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198a2:	f8db 2000 	ldr.w	r2, [fp]
   198a6:	a901      	add	r1, sp, #4
   198a8:	3218      	adds	r2, #24
   198aa:	4608      	mov	r0, r1
   198ac:	f7fd fd88 	bl	173c0 <mbedtls_mpi_mul_mpi>
   198b0:	4604      	mov	r4, r0
   198b2:	2800      	cmp	r0, #0
   198b4:	d1b2      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198b6:	4651      	mov	r1, sl
   198b8:	a801      	add	r0, sp, #4
   198ba:	f7ff fc5f 	bl	1917c <ecp_modp>
   198be:	4604      	mov	r4, r0
   198c0:	2800      	cmp	r0, #0
   198c2:	d1ab      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198c4:	aa04      	add	r2, sp, #16
   198c6:	4611      	mov	r1, r2
   198c8:	a807      	add	r0, sp, #28
   198ca:	f7fd fd79 	bl	173c0 <mbedtls_mpi_mul_mpi>
   198ce:	4604      	mov	r4, r0
   198d0:	2800      	cmp	r0, #0
   198d2:	d1a3      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198d4:	4651      	mov	r1, sl
   198d6:	a807      	add	r0, sp, #28
   198d8:	f7ff fc50 	bl	1917c <ecp_modp>
   198dc:	4604      	mov	r4, r0
   198de:	2800      	cmp	r0, #0
   198e0:	d19c      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198e2:	f8db 1000 	ldr.w	r1, [fp]
   198e6:	aa07      	add	r2, sp, #28
   198e8:	4608      	mov	r0, r1
   198ea:	f7fd fd69 	bl	173c0 <mbedtls_mpi_mul_mpi>
   198ee:	4604      	mov	r4, r0
   198f0:	2800      	cmp	r0, #0
   198f2:	d193      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   198f4:	4651      	mov	r1, sl
   198f6:	f8db 0000 	ldr.w	r0, [fp]
   198fa:	f7ff fc3f 	bl	1917c <ecp_modp>
   198fe:	4604      	mov	r4, r0
   19900:	2800      	cmp	r0, #0
   19902:	d18b      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   19904:	f8db 1000 	ldr.w	r1, [fp]
   19908:	aa07      	add	r2, sp, #28
   1990a:	310c      	adds	r1, #12
   1990c:	4608      	mov	r0, r1
   1990e:	f7fd fd57 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19912:	4604      	mov	r4, r0
   19914:	2800      	cmp	r0, #0
   19916:	d181      	bne.n	1981c <ecp_normalize_jac_many.part.3+0x98>
   19918:	f8db 0000 	ldr.w	r0, [fp]
   1991c:	4651      	mov	r1, sl
   1991e:	300c      	adds	r0, #12
   19920:	f7ff fc2c 	bl	1917c <ecp_modp>
   19924:	4604      	mov	r4, r0
   19926:	2800      	cmp	r0, #0
   19928:	f47f af78 	bne.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   1992c:	f8db 1000 	ldr.w	r1, [fp]
   19930:	aa04      	add	r2, sp, #16
   19932:	310c      	adds	r1, #12
   19934:	4608      	mov	r0, r1
   19936:	f7fd fd43 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1993a:	4604      	mov	r4, r0
   1993c:	2800      	cmp	r0, #0
   1993e:	f47f af6d 	bne.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   19942:	f8db 0000 	ldr.w	r0, [fp]
   19946:	4651      	mov	r1, sl
   19948:	300c      	adds	r0, #12
   1994a:	f7ff fc17 	bl	1917c <ecp_modp>
   1994e:	4604      	mov	r4, r0
   19950:	2800      	cmp	r0, #0
   19952:	f47f af63 	bne.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   19956:	f8da 1008 	ldr.w	r1, [sl, #8]
   1995a:	f8db 0000 	ldr.w	r0, [fp]
   1995e:	f7fc fd3b 	bl	163d8 <mbedtls_mpi_shrink>
   19962:	4604      	mov	r4, r0
   19964:	2800      	cmp	r0, #0
   19966:	f47f af59 	bne.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   1996a:	f8db 0000 	ldr.w	r0, [fp]
   1996e:	f8da 1008 	ldr.w	r1, [sl, #8]
   19972:	300c      	adds	r0, #12
   19974:	f7fc fd30 	bl	163d8 <mbedtls_mpi_shrink>
   19978:	4604      	mov	r4, r0
   1997a:	2800      	cmp	r0, #0
   1997c:	f47f af4e 	bne.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   19980:	f8db 0000 	ldr.w	r0, [fp]
   19984:	3d0c      	subs	r5, #12
   19986:	3018      	adds	r0, #24
   19988:	f1ab 0b04 	sub.w	fp, fp, #4
   1998c:	f7fc fd0a 	bl	163a4 <mbedtls_mpi_free>
   19990:	2f00      	cmp	r7, #0
   19992:	f43f af43 	beq.w	1981c <ecp_normalize_jac_many.part.3+0x98>
   19996:	3f01      	subs	r7, #1
   19998:	e772      	b.n	19880 <ecp_normalize_jac_many.part.3+0xfc>
   1999a:	4c01      	ldr	r4, [pc, #4]	; (199a0 <ecp_normalize_jac_many.part.3+0x21c>)
   1999c:	e756      	b.n	1984c <ecp_normalize_jac_many.part.3+0xc8>
   1999e:	bf00      	nop
   199a0:	ffffb280 	.word	0xffffb280

000199a4 <mbedtls_ecp_keypair_init>:
   199a4:	b1b8      	cbz	r0, 199d6 <mbedtls_ecp_keypair_init+0x32>
   199a6:	b510      	push	{r4, lr}
   199a8:	4604      	mov	r4, r0
   199aa:	227c      	movs	r2, #124	; 0x7c
   199ac:	2100      	movs	r1, #0
   199ae:	f00c fa87 	bl	25ec0 <memset>
   199b2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   199b6:	f7fc fced 	bl	16394 <mbedtls_mpi_init>
   199ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
   199be:	f7fc fce9 	bl	16394 <mbedtls_mpi_init>
   199c2:	f104 0094 	add.w	r0, r4, #148	; 0x94
   199c6:	f7fc fce5 	bl	16394 <mbedtls_mpi_init>
   199ca:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   199ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   199d2:	f7fc bcdf 	b.w	16394 <mbedtls_mpi_init>
   199d6:	4770      	bx	lr

000199d8 <mbedtls_ecp_group_free>:
   199d8:	2800      	cmp	r0, #0
   199da:	d048      	beq.n	19a6e <mbedtls_ecp_group_free+0x96>
   199dc:	b570      	push	{r4, r5, r6, lr}
   199de:	6e03      	ldr	r3, [r0, #96]	; 0x60
   199e0:	4604      	mov	r4, r0
   199e2:	2b01      	cmp	r3, #1
   199e4:	d123      	bne.n	19a2e <mbedtls_ecp_group_free+0x56>
   199e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
   199e8:	b1c8      	cbz	r0, 19a1e <mbedtls_ecp_group_free+0x46>
   199ea:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   199ec:	b1aa      	cbz	r2, 19a1a <mbedtls_ecp_group_free+0x42>
   199ee:	2600      	movs	r6, #0
   199f0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   199f4:	eb10 0583 	adds.w	r5, r0, r3, lsl #2
   199f8:	d035      	beq.n	19a66 <mbedtls_ecp_group_free+0x8e>
   199fa:	4628      	mov	r0, r5
   199fc:	f7fc fcd2 	bl	163a4 <mbedtls_mpi_free>
   19a00:	f105 000c 	add.w	r0, r5, #12
   19a04:	f7fc fcce 	bl	163a4 <mbedtls_mpi_free>
   19a08:	f105 0018 	add.w	r0, r5, #24
   19a0c:	f7fc fcca 	bl	163a4 <mbedtls_mpi_free>
   19a10:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   19a12:	3601      	adds	r6, #1
   19a14:	4296      	cmp	r6, r2
   19a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
   19a18:	d3ea      	bcc.n	199f0 <mbedtls_ecp_group_free+0x18>
   19a1a:	f7fa ff47 	bl	148ac <nrf_free>
   19a1e:	2200      	movs	r2, #0
   19a20:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   19a24:	7022      	strb	r2, [r4, #0]
   19a26:	3401      	adds	r4, #1
   19a28:	429c      	cmp	r4, r3
   19a2a:	d1fb      	bne.n	19a24 <mbedtls_ecp_group_free+0x4c>
   19a2c:	bd70      	pop	{r4, r5, r6, pc}
   19a2e:	3004      	adds	r0, #4
   19a30:	f7fc fcb8 	bl	163a4 <mbedtls_mpi_free>
   19a34:	f104 0010 	add.w	r0, r4, #16
   19a38:	f7fc fcb4 	bl	163a4 <mbedtls_mpi_free>
   19a3c:	f104 001c 	add.w	r0, r4, #28
   19a40:	f7fc fcb0 	bl	163a4 <mbedtls_mpi_free>
   19a44:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19a48:	f7fc fcac 	bl	163a4 <mbedtls_mpi_free>
   19a4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19a50:	f7fc fca8 	bl	163a4 <mbedtls_mpi_free>
   19a54:	f104 0040 	add.w	r0, r4, #64	; 0x40
   19a58:	f7fc fca4 	bl	163a4 <mbedtls_mpi_free>
   19a5c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   19a60:	f7fc fca0 	bl	163a4 <mbedtls_mpi_free>
   19a64:	e7bf      	b.n	199e6 <mbedtls_ecp_group_free+0xe>
   19a66:	3601      	adds	r6, #1
   19a68:	4296      	cmp	r6, r2
   19a6a:	d3c1      	bcc.n	199f0 <mbedtls_ecp_group_free+0x18>
   19a6c:	e7d5      	b.n	19a1a <mbedtls_ecp_group_free+0x42>
   19a6e:	4770      	bx	lr

00019a70 <mbedtls_ecp_keypair_free>:
   19a70:	b1a8      	cbz	r0, 19a9e <mbedtls_ecp_keypair_free+0x2e>
   19a72:	b510      	push	{r4, lr}
   19a74:	4604      	mov	r4, r0
   19a76:	f7ff ffaf 	bl	199d8 <mbedtls_ecp_group_free>
   19a7a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   19a7e:	f7fc fc91 	bl	163a4 <mbedtls_mpi_free>
   19a82:	f104 0088 	add.w	r0, r4, #136	; 0x88
   19a86:	f7fc fc8d 	bl	163a4 <mbedtls_mpi_free>
   19a8a:	f104 0094 	add.w	r0, r4, #148	; 0x94
   19a8e:	f7fc fc89 	bl	163a4 <mbedtls_mpi_free>
   19a92:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   19a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a9a:	f7fc bc83 	b.w	163a4 <mbedtls_mpi_free>
   19a9e:	4770      	bx	lr

00019aa0 <mbedtls_ecp_set_zero>:
   19aa0:	b510      	push	{r4, lr}
   19aa2:	2101      	movs	r1, #1
   19aa4:	4604      	mov	r4, r0
   19aa6:	f7fc fe85 	bl	167b4 <mbedtls_mpi_lset>
   19aaa:	b100      	cbz	r0, 19aae <mbedtls_ecp_set_zero+0xe>
   19aac:	bd10      	pop	{r4, pc}
   19aae:	2101      	movs	r1, #1
   19ab0:	f104 000c 	add.w	r0, r4, #12
   19ab4:	f7fc fe7e 	bl	167b4 <mbedtls_mpi_lset>
   19ab8:	2800      	cmp	r0, #0
   19aba:	d1f7      	bne.n	19aac <mbedtls_ecp_set_zero+0xc>
   19abc:	4601      	mov	r1, r0
   19abe:	f104 0018 	add.w	r0, r4, #24
   19ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ac6:	f7fc be75 	b.w	167b4 <mbedtls_mpi_lset>
   19aca:	bf00      	nop

00019acc <ecp_add_mixed>:
   19acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ad0:	f102 0518 	add.w	r5, r2, #24
   19ad4:	b096      	sub	sp, #88	; 0x58
   19ad6:	4681      	mov	r9, r0
   19ad8:	4688      	mov	r8, r1
   19ada:	4628      	mov	r0, r5
   19adc:	2100      	movs	r1, #0
   19ade:	4617      	mov	r7, r2
   19ae0:	461e      	mov	r6, r3
   19ae2:	f7fd f981 	bl	16de8 <mbedtls_mpi_cmp_int>
   19ae6:	2800      	cmp	r0, #0
   19ae8:	d048      	beq.n	19b7c <ecp_add_mixed+0xb0>
   19aea:	6a33      	ldr	r3, [r6, #32]
   19aec:	b18b      	cbz	r3, 19b12 <ecp_add_mixed+0x46>
   19aee:	f106 0418 	add.w	r4, r6, #24
   19af2:	4620      	mov	r0, r4
   19af4:	2100      	movs	r1, #0
   19af6:	f7fd f977 	bl	16de8 <mbedtls_mpi_cmp_int>
   19afa:	2800      	cmp	r0, #0
   19afc:	f000 80d7 	beq.w	19cae <ecp_add_mixed+0x1e2>
   19b00:	6a33      	ldr	r3, [r6, #32]
   19b02:	b133      	cbz	r3, 19b12 <ecp_add_mixed+0x46>
   19b04:	4620      	mov	r0, r4
   19b06:	2101      	movs	r1, #1
   19b08:	f7fd f96e 	bl	16de8 <mbedtls_mpi_cmp_int>
   19b0c:	2800      	cmp	r0, #0
   19b0e:	f040 80e7 	bne.w	19ce0 <ecp_add_mixed+0x214>
   19b12:	a801      	add	r0, sp, #4
   19b14:	f7fc fc3e 	bl	16394 <mbedtls_mpi_init>
   19b18:	a804      	add	r0, sp, #16
   19b1a:	f7fc fc3b 	bl	16394 <mbedtls_mpi_init>
   19b1e:	a807      	add	r0, sp, #28
   19b20:	f7fc fc38 	bl	16394 <mbedtls_mpi_init>
   19b24:	a80a      	add	r0, sp, #40	; 0x28
   19b26:	f7fc fc35 	bl	16394 <mbedtls_mpi_init>
   19b2a:	a80d      	add	r0, sp, #52	; 0x34
   19b2c:	f7fc fc32 	bl	16394 <mbedtls_mpi_init>
   19b30:	a810      	add	r0, sp, #64	; 0x40
   19b32:	f7fc fc2f 	bl	16394 <mbedtls_mpi_init>
   19b36:	a813      	add	r0, sp, #76	; 0x4c
   19b38:	f7fc fc2c 	bl	16394 <mbedtls_mpi_init>
   19b3c:	462a      	mov	r2, r5
   19b3e:	4629      	mov	r1, r5
   19b40:	a801      	add	r0, sp, #4
   19b42:	f7fd fc3d 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19b46:	4604      	mov	r4, r0
   19b48:	b380      	cbz	r0, 19bac <ecp_add_mixed+0xe0>
   19b4a:	a801      	add	r0, sp, #4
   19b4c:	f7fc fc2a 	bl	163a4 <mbedtls_mpi_free>
   19b50:	a804      	add	r0, sp, #16
   19b52:	f7fc fc27 	bl	163a4 <mbedtls_mpi_free>
   19b56:	a807      	add	r0, sp, #28
   19b58:	f7fc fc24 	bl	163a4 <mbedtls_mpi_free>
   19b5c:	a80a      	add	r0, sp, #40	; 0x28
   19b5e:	f7fc fc21 	bl	163a4 <mbedtls_mpi_free>
   19b62:	a80d      	add	r0, sp, #52	; 0x34
   19b64:	f7fc fc1e 	bl	163a4 <mbedtls_mpi_free>
   19b68:	a810      	add	r0, sp, #64	; 0x40
   19b6a:	f7fc fc1b 	bl	163a4 <mbedtls_mpi_free>
   19b6e:	a813      	add	r0, sp, #76	; 0x4c
   19b70:	f7fc fc18 	bl	163a4 <mbedtls_mpi_free>
   19b74:	4620      	mov	r0, r4
   19b76:	b016      	add	sp, #88	; 0x58
   19b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b7c:	4631      	mov	r1, r6
   19b7e:	4640      	mov	r0, r8
   19b80:	f7fc fc8c 	bl	1649c <mbedtls_mpi_copy>
   19b84:	4604      	mov	r4, r0
   19b86:	2800      	cmp	r0, #0
   19b88:	d1f4      	bne.n	19b74 <ecp_add_mixed+0xa8>
   19b8a:	f106 010c 	add.w	r1, r6, #12
   19b8e:	f108 000c 	add.w	r0, r8, #12
   19b92:	f7fc fc83 	bl	1649c <mbedtls_mpi_copy>
   19b96:	4604      	mov	r4, r0
   19b98:	2800      	cmp	r0, #0
   19b9a:	d1eb      	bne.n	19b74 <ecp_add_mixed+0xa8>
   19b9c:	f106 0118 	add.w	r1, r6, #24
   19ba0:	f108 0018 	add.w	r0, r8, #24
   19ba4:	f7fc fc7a 	bl	1649c <mbedtls_mpi_copy>
   19ba8:	4604      	mov	r4, r0
   19baa:	e7e3      	b.n	19b74 <ecp_add_mixed+0xa8>
   19bac:	4649      	mov	r1, r9
   19bae:	a801      	add	r0, sp, #4
   19bb0:	f7ff fae4 	bl	1917c <ecp_modp>
   19bb4:	4604      	mov	r4, r0
   19bb6:	2800      	cmp	r0, #0
   19bb8:	d1c7      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19bba:	462a      	mov	r2, r5
   19bbc:	a901      	add	r1, sp, #4
   19bbe:	a804      	add	r0, sp, #16
   19bc0:	f7fd fbfe 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19bc4:	4604      	mov	r4, r0
   19bc6:	2800      	cmp	r0, #0
   19bc8:	d1bf      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19bca:	4649      	mov	r1, r9
   19bcc:	a804      	add	r0, sp, #16
   19bce:	f7ff fad5 	bl	1917c <ecp_modp>
   19bd2:	4604      	mov	r4, r0
   19bd4:	2800      	cmp	r0, #0
   19bd6:	d1b8      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19bd8:	a901      	add	r1, sp, #4
   19bda:	4632      	mov	r2, r6
   19bdc:	4608      	mov	r0, r1
   19bde:	f7fd fbef 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19be2:	4604      	mov	r4, r0
   19be4:	2800      	cmp	r0, #0
   19be6:	d1b0      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19be8:	4649      	mov	r1, r9
   19bea:	a801      	add	r0, sp, #4
   19bec:	f7ff fac6 	bl	1917c <ecp_modp>
   19bf0:	4604      	mov	r4, r0
   19bf2:	2800      	cmp	r0, #0
   19bf4:	d1a9      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19bf6:	a904      	add	r1, sp, #16
   19bf8:	f106 020c 	add.w	r2, r6, #12
   19bfc:	4608      	mov	r0, r1
   19bfe:	f7fd fbdf 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19c02:	4604      	mov	r4, r0
   19c04:	2800      	cmp	r0, #0
   19c06:	d1a0      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19c08:	4649      	mov	r1, r9
   19c0a:	a804      	add	r0, sp, #16
   19c0c:	f7ff fab6 	bl	1917c <ecp_modp>
   19c10:	4604      	mov	r4, r0
   19c12:	2800      	cmp	r0, #0
   19c14:	d199      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19c16:	a901      	add	r1, sp, #4
   19c18:	463a      	mov	r2, r7
   19c1a:	4608      	mov	r0, r1
   19c1c:	f7fd fb10 	bl	17240 <mbedtls_mpi_sub_mpi>
   19c20:	4604      	mov	r4, r0
   19c22:	2800      	cmp	r0, #0
   19c24:	d191      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19c26:	f109 0604 	add.w	r6, r9, #4
   19c2a:	e00c      	b.n	19c46 <ecp_add_mixed+0x17a>
   19c2c:	2100      	movs	r1, #0
   19c2e:	a801      	add	r0, sp, #4
   19c30:	f7fd f8da 	bl	16de8 <mbedtls_mpi_cmp_int>
   19c34:	b150      	cbz	r0, 19c4c <ecp_add_mixed+0x180>
   19c36:	a901      	add	r1, sp, #4
   19c38:	4632      	mov	r2, r6
   19c3a:	4608      	mov	r0, r1
   19c3c:	f7fd fa8c 	bl	17158 <mbedtls_mpi_add_mpi>
   19c40:	4604      	mov	r4, r0
   19c42:	2800      	cmp	r0, #0
   19c44:	d181      	bne.n	19b4a <ecp_add_mixed+0x7e>
   19c46:	9b01      	ldr	r3, [sp, #4]
   19c48:	2b00      	cmp	r3, #0
   19c4a:	dbef      	blt.n	19c2c <ecp_add_mixed+0x160>
   19c4c:	a904      	add	r1, sp, #16
   19c4e:	f107 060c 	add.w	r6, r7, #12
   19c52:	4632      	mov	r2, r6
   19c54:	4608      	mov	r0, r1
   19c56:	f7fd faf3 	bl	17240 <mbedtls_mpi_sub_mpi>
   19c5a:	4604      	mov	r4, r0
   19c5c:	2800      	cmp	r0, #0
   19c5e:	f47f af74 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19c62:	f109 0a04 	add.w	sl, r9, #4
   19c66:	e00d      	b.n	19c84 <ecp_add_mixed+0x1b8>
   19c68:	2100      	movs	r1, #0
   19c6a:	a804      	add	r0, sp, #16
   19c6c:	f7fd f8bc 	bl	16de8 <mbedtls_mpi_cmp_int>
   19c70:	b158      	cbz	r0, 19c8a <ecp_add_mixed+0x1be>
   19c72:	a904      	add	r1, sp, #16
   19c74:	4652      	mov	r2, sl
   19c76:	4608      	mov	r0, r1
   19c78:	f7fd fa6e 	bl	17158 <mbedtls_mpi_add_mpi>
   19c7c:	4604      	mov	r4, r0
   19c7e:	2800      	cmp	r0, #0
   19c80:	f47f af63 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19c84:	9b04      	ldr	r3, [sp, #16]
   19c86:	2b00      	cmp	r3, #0
   19c88:	dbee      	blt.n	19c68 <ecp_add_mixed+0x19c>
   19c8a:	2100      	movs	r1, #0
   19c8c:	a801      	add	r0, sp, #4
   19c8e:	f7fd f8ab 	bl	16de8 <mbedtls_mpi_cmp_int>
   19c92:	4601      	mov	r1, r0
   19c94:	bb30      	cbnz	r0, 19ce4 <ecp_add_mixed+0x218>
   19c96:	a804      	add	r0, sp, #16
   19c98:	f7fd f8a6 	bl	16de8 <mbedtls_mpi_cmp_int>
   19c9c:	2800      	cmp	r0, #0
   19c9e:	d17f      	bne.n	19da0 <ecp_add_mixed+0x2d4>
   19ca0:	463a      	mov	r2, r7
   19ca2:	4641      	mov	r1, r8
   19ca4:	4648      	mov	r0, r9
   19ca6:	f7ff fab5 	bl	19214 <ecp_double_jac>
   19caa:	4604      	mov	r4, r0
   19cac:	e74d      	b.n	19b4a <ecp_add_mixed+0x7e>
   19cae:	4639      	mov	r1, r7
   19cb0:	4640      	mov	r0, r8
   19cb2:	f7fc fbf3 	bl	1649c <mbedtls_mpi_copy>
   19cb6:	4604      	mov	r4, r0
   19cb8:	2800      	cmp	r0, #0
   19cba:	f47f af5b 	bne.w	19b74 <ecp_add_mixed+0xa8>
   19cbe:	f107 010c 	add.w	r1, r7, #12
   19cc2:	f108 000c 	add.w	r0, r8, #12
   19cc6:	f7fc fbe9 	bl	1649c <mbedtls_mpi_copy>
   19cca:	4604      	mov	r4, r0
   19ccc:	2800      	cmp	r0, #0
   19cce:	f47f af51 	bne.w	19b74 <ecp_add_mixed+0xa8>
   19cd2:	4629      	mov	r1, r5
   19cd4:	f108 0018 	add.w	r0, r8, #24
   19cd8:	f7fc fbe0 	bl	1649c <mbedtls_mpi_copy>
   19cdc:	4604      	mov	r4, r0
   19cde:	e749      	b.n	19b74 <ecp_add_mixed+0xa8>
   19ce0:	4c8b      	ldr	r4, [pc, #556]	; (19f10 <ecp_add_mixed+0x444>)
   19ce2:	e747      	b.n	19b74 <ecp_add_mixed+0xa8>
   19ce4:	4629      	mov	r1, r5
   19ce6:	aa01      	add	r2, sp, #4
   19ce8:	a813      	add	r0, sp, #76	; 0x4c
   19cea:	f7fd fb69 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19cee:	4604      	mov	r4, r0
   19cf0:	2800      	cmp	r0, #0
   19cf2:	f47f af2a 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19cf6:	4649      	mov	r1, r9
   19cf8:	a813      	add	r0, sp, #76	; 0x4c
   19cfa:	f7ff fa3f 	bl	1917c <ecp_modp>
   19cfe:	4604      	mov	r4, r0
   19d00:	2800      	cmp	r0, #0
   19d02:	f47f af22 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d06:	aa01      	add	r2, sp, #4
   19d08:	4611      	mov	r1, r2
   19d0a:	a807      	add	r0, sp, #28
   19d0c:	f7fd fb58 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19d10:	4604      	mov	r4, r0
   19d12:	2800      	cmp	r0, #0
   19d14:	f47f af19 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d18:	4649      	mov	r1, r9
   19d1a:	a807      	add	r0, sp, #28
   19d1c:	f7ff fa2e 	bl	1917c <ecp_modp>
   19d20:	4604      	mov	r4, r0
   19d22:	2800      	cmp	r0, #0
   19d24:	f47f af11 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d28:	aa01      	add	r2, sp, #4
   19d2a:	a907      	add	r1, sp, #28
   19d2c:	a80a      	add	r0, sp, #40	; 0x28
   19d2e:	f7fd fb47 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19d32:	4604      	mov	r4, r0
   19d34:	2800      	cmp	r0, #0
   19d36:	f47f af08 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d3a:	4649      	mov	r1, r9
   19d3c:	a80a      	add	r0, sp, #40	; 0x28
   19d3e:	f7ff fa1d 	bl	1917c <ecp_modp>
   19d42:	4604      	mov	r4, r0
   19d44:	2800      	cmp	r0, #0
   19d46:	f47f af00 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d4a:	a907      	add	r1, sp, #28
   19d4c:	463a      	mov	r2, r7
   19d4e:	4608      	mov	r0, r1
   19d50:	f7fd fb36 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19d54:	4604      	mov	r4, r0
   19d56:	2800      	cmp	r0, #0
   19d58:	f47f aef7 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d5c:	4649      	mov	r1, r9
   19d5e:	a807      	add	r0, sp, #28
   19d60:	f7ff fa0c 	bl	1917c <ecp_modp>
   19d64:	4604      	mov	r4, r0
   19d66:	2800      	cmp	r0, #0
   19d68:	f47f aeef 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d6c:	2202      	movs	r2, #2
   19d6e:	a907      	add	r1, sp, #28
   19d70:	a801      	add	r0, sp, #4
   19d72:	f7fd fc1d 	bl	175b0 <mbedtls_mpi_mul_int>
   19d76:	4604      	mov	r4, r0
   19d78:	2800      	cmp	r0, #0
   19d7a:	f47f aee6 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19d7e:	f109 0504 	add.w	r5, r9, #4
   19d82:	4629      	mov	r1, r5
   19d84:	a801      	add	r0, sp, #4
   19d86:	f7fc ffc7 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   19d8a:	2800      	cmp	r0, #0
   19d8c:	db0d      	blt.n	19daa <ecp_add_mixed+0x2de>
   19d8e:	a901      	add	r1, sp, #4
   19d90:	462a      	mov	r2, r5
   19d92:	4608      	mov	r0, r1
   19d94:	f7fd f920 	bl	16fd8 <mbedtls_mpi_sub_abs>
   19d98:	4604      	mov	r4, r0
   19d9a:	2800      	cmp	r0, #0
   19d9c:	d0f1      	beq.n	19d82 <ecp_add_mixed+0x2b6>
   19d9e:	e6d4      	b.n	19b4a <ecp_add_mixed+0x7e>
   19da0:	4640      	mov	r0, r8
   19da2:	f7ff fe7d 	bl	19aa0 <mbedtls_ecp_set_zero>
   19da6:	4604      	mov	r4, r0
   19da8:	e6cf      	b.n	19b4a <ecp_add_mixed+0x7e>
   19daa:	aa04      	add	r2, sp, #16
   19dac:	4611      	mov	r1, r2
   19dae:	a80d      	add	r0, sp, #52	; 0x34
   19db0:	f7fd fb06 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19db4:	4604      	mov	r4, r0
   19db6:	2800      	cmp	r0, #0
   19db8:	f47f aec7 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19dbc:	4649      	mov	r1, r9
   19dbe:	a80d      	add	r0, sp, #52	; 0x34
   19dc0:	f7ff f9dc 	bl	1917c <ecp_modp>
   19dc4:	4604      	mov	r4, r0
   19dc6:	2800      	cmp	r0, #0
   19dc8:	f47f aebf 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19dcc:	a90d      	add	r1, sp, #52	; 0x34
   19dce:	aa01      	add	r2, sp, #4
   19dd0:	4608      	mov	r0, r1
   19dd2:	f7fd fa35 	bl	17240 <mbedtls_mpi_sub_mpi>
   19dd6:	4604      	mov	r4, r0
   19dd8:	2800      	cmp	r0, #0
   19dda:	f47f aeb6 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19de0:	2b00      	cmp	r3, #0
   19de2:	da0d      	bge.n	19e00 <ecp_add_mixed+0x334>
   19de4:	2100      	movs	r1, #0
   19de6:	a80d      	add	r0, sp, #52	; 0x34
   19de8:	f7fc fffe 	bl	16de8 <mbedtls_mpi_cmp_int>
   19dec:	b140      	cbz	r0, 19e00 <ecp_add_mixed+0x334>
   19dee:	a90d      	add	r1, sp, #52	; 0x34
   19df0:	462a      	mov	r2, r5
   19df2:	4608      	mov	r0, r1
   19df4:	f7fd f9b0 	bl	17158 <mbedtls_mpi_add_mpi>
   19df8:	4604      	mov	r4, r0
   19dfa:	2800      	cmp	r0, #0
   19dfc:	d0ef      	beq.n	19dde <ecp_add_mixed+0x312>
   19dfe:	e6a4      	b.n	19b4a <ecp_add_mixed+0x7e>
   19e00:	a90d      	add	r1, sp, #52	; 0x34
   19e02:	aa0a      	add	r2, sp, #40	; 0x28
   19e04:	4608      	mov	r0, r1
   19e06:	f7fd fa1b 	bl	17240 <mbedtls_mpi_sub_mpi>
   19e0a:	4604      	mov	r4, r0
   19e0c:	2800      	cmp	r0, #0
   19e0e:	f47f ae9c 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19e14:	2b00      	cmp	r3, #0
   19e16:	da0d      	bge.n	19e34 <ecp_add_mixed+0x368>
   19e18:	2100      	movs	r1, #0
   19e1a:	a80d      	add	r0, sp, #52	; 0x34
   19e1c:	f7fc ffe4 	bl	16de8 <mbedtls_mpi_cmp_int>
   19e20:	b140      	cbz	r0, 19e34 <ecp_add_mixed+0x368>
   19e22:	a90d      	add	r1, sp, #52	; 0x34
   19e24:	462a      	mov	r2, r5
   19e26:	4608      	mov	r0, r1
   19e28:	f7fd f996 	bl	17158 <mbedtls_mpi_add_mpi>
   19e2c:	4604      	mov	r4, r0
   19e2e:	2800      	cmp	r0, #0
   19e30:	d0ef      	beq.n	19e12 <ecp_add_mixed+0x346>
   19e32:	e68a      	b.n	19b4a <ecp_add_mixed+0x7e>
   19e34:	a907      	add	r1, sp, #28
   19e36:	aa0d      	add	r2, sp, #52	; 0x34
   19e38:	4608      	mov	r0, r1
   19e3a:	f7fd fa01 	bl	17240 <mbedtls_mpi_sub_mpi>
   19e3e:	4604      	mov	r4, r0
   19e40:	2800      	cmp	r0, #0
   19e42:	f47f ae82 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19e46:	9b07      	ldr	r3, [sp, #28]
   19e48:	2b00      	cmp	r3, #0
   19e4a:	da0d      	bge.n	19e68 <ecp_add_mixed+0x39c>
   19e4c:	2100      	movs	r1, #0
   19e4e:	a807      	add	r0, sp, #28
   19e50:	f7fc ffca 	bl	16de8 <mbedtls_mpi_cmp_int>
   19e54:	b140      	cbz	r0, 19e68 <ecp_add_mixed+0x39c>
   19e56:	a907      	add	r1, sp, #28
   19e58:	462a      	mov	r2, r5
   19e5a:	4608      	mov	r0, r1
   19e5c:	f7fd f97c 	bl	17158 <mbedtls_mpi_add_mpi>
   19e60:	4604      	mov	r4, r0
   19e62:	2800      	cmp	r0, #0
   19e64:	d0ef      	beq.n	19e46 <ecp_add_mixed+0x37a>
   19e66:	e670      	b.n	19b4a <ecp_add_mixed+0x7e>
   19e68:	a907      	add	r1, sp, #28
   19e6a:	aa04      	add	r2, sp, #16
   19e6c:	4608      	mov	r0, r1
   19e6e:	f7fd faa7 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19e72:	4604      	mov	r4, r0
   19e74:	2800      	cmp	r0, #0
   19e76:	f47f ae68 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19e7a:	4649      	mov	r1, r9
   19e7c:	a807      	add	r0, sp, #28
   19e7e:	f7ff f97d 	bl	1917c <ecp_modp>
   19e82:	4604      	mov	r4, r0
   19e84:	2800      	cmp	r0, #0
   19e86:	f47f ae60 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19e8a:	a90a      	add	r1, sp, #40	; 0x28
   19e8c:	4632      	mov	r2, r6
   19e8e:	4608      	mov	r0, r1
   19e90:	f7fd fa96 	bl	173c0 <mbedtls_mpi_mul_mpi>
   19e94:	4604      	mov	r4, r0
   19e96:	2800      	cmp	r0, #0
   19e98:	f47f ae57 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19e9c:	4649      	mov	r1, r9
   19e9e:	a80a      	add	r0, sp, #40	; 0x28
   19ea0:	f7ff f96c 	bl	1917c <ecp_modp>
   19ea4:	4604      	mov	r4, r0
   19ea6:	2800      	cmp	r0, #0
   19ea8:	f47f ae4f 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19eac:	aa0a      	add	r2, sp, #40	; 0x28
   19eae:	a907      	add	r1, sp, #28
   19eb0:	a810      	add	r0, sp, #64	; 0x40
   19eb2:	f7fd f9c5 	bl	17240 <mbedtls_mpi_sub_mpi>
   19eb6:	4604      	mov	r4, r0
   19eb8:	2800      	cmp	r0, #0
   19eba:	f47f ae46 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19ec0:	2b00      	cmp	r3, #0
   19ec2:	da0d      	bge.n	19ee0 <ecp_add_mixed+0x414>
   19ec4:	2100      	movs	r1, #0
   19ec6:	a810      	add	r0, sp, #64	; 0x40
   19ec8:	f7fc ff8e 	bl	16de8 <mbedtls_mpi_cmp_int>
   19ecc:	b140      	cbz	r0, 19ee0 <ecp_add_mixed+0x414>
   19ece:	a910      	add	r1, sp, #64	; 0x40
   19ed0:	462a      	mov	r2, r5
   19ed2:	4608      	mov	r0, r1
   19ed4:	f7fd f940 	bl	17158 <mbedtls_mpi_add_mpi>
   19ed8:	4604      	mov	r4, r0
   19eda:	2800      	cmp	r0, #0
   19edc:	d0ef      	beq.n	19ebe <ecp_add_mixed+0x3f2>
   19ede:	e634      	b.n	19b4a <ecp_add_mixed+0x7e>
   19ee0:	a90d      	add	r1, sp, #52	; 0x34
   19ee2:	4640      	mov	r0, r8
   19ee4:	f7fc fada 	bl	1649c <mbedtls_mpi_copy>
   19ee8:	4604      	mov	r4, r0
   19eea:	2800      	cmp	r0, #0
   19eec:	f47f ae2d 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19ef0:	a910      	add	r1, sp, #64	; 0x40
   19ef2:	f108 000c 	add.w	r0, r8, #12
   19ef6:	f7fc fad1 	bl	1649c <mbedtls_mpi_copy>
   19efa:	4604      	mov	r4, r0
   19efc:	2800      	cmp	r0, #0
   19efe:	f47f ae24 	bne.w	19b4a <ecp_add_mixed+0x7e>
   19f02:	f108 0018 	add.w	r0, r8, #24
   19f06:	a913      	add	r1, sp, #76	; 0x4c
   19f08:	f7fc fac8 	bl	1649c <mbedtls_mpi_copy>
   19f0c:	4604      	mov	r4, r0
   19f0e:	e61c      	b.n	19b4a <ecp_add_mixed+0x7e>
   19f10:	ffffb080 	.word	0xffffb080

00019f14 <ecp_mul_comb>:
   19f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f18:	4605      	mov	r5, r0
   19f1a:	4698      	mov	r8, r3
   19f1c:	f105 034c 	add.w	r3, r5, #76	; 0x4c
   19f20:	461c      	mov	r4, r3
   19f22:	b0e5      	sub	sp, #404	; 0x194
   19f24:	a80d      	add	r0, sp, #52	; 0x34
   19f26:	9104      	str	r1, [sp, #16]
   19f28:	4617      	mov	r7, r2
   19f2a:	9308      	str	r3, [sp, #32]
   19f2c:	f7fc fa32 	bl	16394 <mbedtls_mpi_init>
   19f30:	a810      	add	r0, sp, #64	; 0x40
   19f32:	f7fc fa2f 	bl	16394 <mbedtls_mpi_init>
   19f36:	4620      	mov	r0, r4
   19f38:	2100      	movs	r1, #0
   19f3a:	f7fc fc75 	bl	16828 <mbedtls_mpi_get_bit>
   19f3e:	2801      	cmp	r0, #1
   19f40:	9007      	str	r0, [sp, #28]
   19f42:	f040 81c9 	bne.w	1a2d8 <ecp_mul_comb+0x3c4>
   19f46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   19f48:	f108 090c 	add.w	r9, r8, #12
   19f4c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   19f50:	bf2c      	ite	cs
   19f52:	2605      	movcs	r6, #5
   19f54:	2604      	movcc	r6, #4
   19f56:	4648      	mov	r0, r9
   19f58:	f105 0134 	add.w	r1, r5, #52	; 0x34
   19f5c:	bf2c      	ite	cs
   19f5e:	f04f 0a06 	movcs.w	sl, #6
   19f62:	f04f 0a05 	movcc.w	sl, #5
   19f66:	46b3      	mov	fp, r6
   19f68:	f7fc fed6 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   19f6c:	2800      	cmp	r0, #0
   19f6e:	d072      	beq.n	1a056 <ecp_mul_comb+0x142>
   19f70:	6dec      	ldr	r4, [r5, #92]	; 0x5c
   19f72:	42a6      	cmp	r6, r4
   19f74:	d245      	bcs.n	1a002 <ecp_mul_comb+0xee>
   19f76:	2301      	movs	r3, #1
   19f78:	f10b 32ff 	add.w	r2, fp, #4294967295
   19f7c:	4093      	lsls	r3, r2
   19f7e:	9302      	str	r3, [sp, #8]
   19f80:	4434      	add	r4, r6
   19f82:	b2db      	uxtb	r3, r3
   19f84:	3c01      	subs	r4, #1
   19f86:	9303      	str	r3, [sp, #12]
   19f88:	2300      	movs	r3, #0
   19f8a:	fbb4 f4f6 	udiv	r4, r4, r6
   19f8e:	9802      	ldr	r0, [sp, #8]
   19f90:	9206      	str	r2, [sp, #24]
   19f92:	9305      	str	r3, [sp, #20]
   19f94:	2124      	movs	r1, #36	; 0x24
   19f96:	f7fa fc75 	bl	14884 <nrf_calloc>
   19f9a:	9001      	str	r0, [sp, #4]
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d040      	beq.n	1a022 <ecp_mul_comb+0x10e>
   19fa0:	4641      	mov	r1, r8
   19fa2:	f7fc fa7b 	bl	1649c <mbedtls_mpi_copy>
   19fa6:	f8dd a004 	ldr.w	sl, [sp, #4]
   19faa:	4683      	mov	fp, r0
   19fac:	2800      	cmp	r0, #0
   19fae:	f000 8086 	beq.w	1a0be <ecp_mul_comb+0x1aa>
   19fb2:	9b05      	ldr	r3, [sp, #20]
   19fb4:	2b00      	cmp	r3, #0
   19fb6:	d17b      	bne.n	1a0b0 <ecp_mul_comb+0x19c>
   19fb8:	2500      	movs	r5, #0
   19fba:	9c01      	ldr	r4, [sp, #4]
   19fbc:	9e03      	ldr	r6, [sp, #12]
   19fbe:	3501      	adds	r5, #1
   19fc0:	b154      	cbz	r4, 19fd8 <ecp_mul_comb+0xc4>
   19fc2:	4620      	mov	r0, r4
   19fc4:	f7fc f9ee 	bl	163a4 <mbedtls_mpi_free>
   19fc8:	f104 000c 	add.w	r0, r4, #12
   19fcc:	f7fc f9ea 	bl	163a4 <mbedtls_mpi_free>
   19fd0:	f104 0018 	add.w	r0, r4, #24
   19fd4:	f7fc f9e6 	bl	163a4 <mbedtls_mpi_free>
   19fd8:	b2eb      	uxtb	r3, r5
   19fda:	429e      	cmp	r6, r3
   19fdc:	f104 0424 	add.w	r4, r4, #36	; 0x24
   19fe0:	d8ed      	bhi.n	19fbe <ecp_mul_comb+0xaa>
   19fe2:	9801      	ldr	r0, [sp, #4]
   19fe4:	f7fa fc62 	bl	148ac <nrf_free>
   19fe8:	a80d      	add	r0, sp, #52	; 0x34
   19fea:	f7fc f9db 	bl	163a4 <mbedtls_mpi_free>
   19fee:	a810      	add	r0, sp, #64	; 0x40
   19ff0:	f7fc f9d8 	bl	163a4 <mbedtls_mpi_free>
   19ff4:	f1bb 0f00 	cmp.w	fp, #0
   19ff8:	d11b      	bne.n	1a032 <ecp_mul_comb+0x11e>
   19ffa:	4658      	mov	r0, fp
   19ffc:	b065      	add	sp, #404	; 0x194
   19ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a002:	2602      	movs	r6, #2
   1a004:	2300      	movs	r3, #0
   1a006:	2201      	movs	r2, #1
   1a008:	4630      	mov	r0, r6
   1a00a:	2124      	movs	r1, #36	; 0x24
   1a00c:	e9cd 6602 	strd	r6, r6, [sp, #8]
   1a010:	e9cd 3205 	strd	r3, r2, [sp, #20]
   1a014:	f7fa fc36 	bl	14884 <nrf_calloc>
   1a018:	3401      	adds	r4, #1
   1a01a:	0864      	lsrs	r4, r4, #1
   1a01c:	9001      	str	r0, [sp, #4]
   1a01e:	2800      	cmp	r0, #0
   1a020:	d1be      	bne.n	19fa0 <ecp_mul_comb+0x8c>
   1a022:	a80d      	add	r0, sp, #52	; 0x34
   1a024:	f7fc f9be 	bl	163a4 <mbedtls_mpi_free>
   1a028:	a810      	add	r0, sp, #64	; 0x40
   1a02a:	f7fc f9bb 	bl	163a4 <mbedtls_mpi_free>
   1a02e:	f8df b644 	ldr.w	fp, [pc, #1604]	; 1a674 <ecp_mul_comb+0x760>
   1a032:	9c04      	ldr	r4, [sp, #16]
   1a034:	2c00      	cmp	r4, #0
   1a036:	d0e0      	beq.n	19ffa <ecp_mul_comb+0xe6>
   1a038:	4620      	mov	r0, r4
   1a03a:	f7fc f9b3 	bl	163a4 <mbedtls_mpi_free>
   1a03e:	f104 000c 	add.w	r0, r4, #12
   1a042:	f7fc f9af 	bl	163a4 <mbedtls_mpi_free>
   1a046:	f104 0018 	add.w	r0, r4, #24
   1a04a:	f7fc f9ab 	bl	163a4 <mbedtls_mpi_free>
   1a04e:	4658      	mov	r0, fp
   1a050:	b065      	add	sp, #404	; 0x194
   1a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a056:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a05a:	4640      	mov	r0, r8
   1a05c:	f7fc fe5c 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a060:	2800      	cmp	r0, #0
   1a062:	d185      	bne.n	19f70 <ecp_mul_comb+0x5c>
   1a064:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1a066:	459a      	cmp	sl, r3
   1a068:	f0c0 82f4 	bcc.w	1a654 <ecp_mul_comb+0x740>
   1a06c:	2602      	movs	r6, #2
   1a06e:	1c5c      	adds	r4, r3, #1
   1a070:	2301      	movs	r3, #1
   1a072:	e9cd 6602 	strd	r6, r6, [sp, #8]
   1a076:	0864      	lsrs	r4, r4, #1
   1a078:	9306      	str	r3, [sp, #24]
   1a07a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   1a07c:	9301      	str	r3, [sp, #4]
   1a07e:	2b00      	cmp	r3, #0
   1a080:	f000 80ea 	beq.w	1a258 <ecp_mul_comb+0x344>
   1a084:	2100      	movs	r1, #0
   1a086:	4638      	mov	r0, r7
   1a088:	f7fc fbce 	bl	16828 <mbedtls_mpi_get_bit>
   1a08c:	4639      	mov	r1, r7
   1a08e:	4680      	mov	r8, r0
   1a090:	a80d      	add	r0, sp, #52	; 0x34
   1a092:	f7fc fa03 	bl	1649c <mbedtls_mpi_copy>
   1a096:	4683      	mov	fp, r0
   1a098:	b950      	cbnz	r0, 1a0b0 <ecp_mul_comb+0x19c>
   1a09a:	463a      	mov	r2, r7
   1a09c:	9908      	ldr	r1, [sp, #32]
   1a09e:	a810      	add	r0, sp, #64	; 0x40
   1a0a0:	f7fd f8ce 	bl	17240 <mbedtls_mpi_sub_mpi>
   1a0a4:	4683      	mov	fp, r0
   1a0a6:	2800      	cmp	r0, #0
   1a0a8:	d036      	beq.n	1a118 <ecp_mul_comb+0x204>
   1a0aa:	9b07      	ldr	r3, [sp, #28]
   1a0ac:	2b00      	cmp	r3, #0
   1a0ae:	d083      	beq.n	19fb8 <ecp_mul_comb+0xa4>
   1a0b0:	a80d      	add	r0, sp, #52	; 0x34
   1a0b2:	f7fc f977 	bl	163a4 <mbedtls_mpi_free>
   1a0b6:	a810      	add	r0, sp, #64	; 0x40
   1a0b8:	f7fc f974 	bl	163a4 <mbedtls_mpi_free>
   1a0bc:	e7b9      	b.n	1a032 <ecp_mul_comb+0x11e>
   1a0be:	4649      	mov	r1, r9
   1a0c0:	f10a 000c 	add.w	r0, sl, #12
   1a0c4:	f7fc f9ea 	bl	1649c <mbedtls_mpi_copy>
   1a0c8:	4683      	mov	fp, r0
   1a0ca:	2800      	cmp	r0, #0
   1a0cc:	f47f af71 	bne.w	19fb2 <ecp_mul_comb+0x9e>
   1a0d0:	9b01      	ldr	r3, [sp, #4]
   1a0d2:	f108 0118 	add.w	r1, r8, #24
   1a0d6:	f103 0018 	add.w	r0, r3, #24
   1a0da:	f7fc f9df 	bl	1649c <mbedtls_mpi_copy>
   1a0de:	4683      	mov	fp, r0
   1a0e0:	2800      	cmp	r0, #0
   1a0e2:	f47f af66 	bne.w	19fb2 <ecp_mul_comb+0x9e>
   1a0e6:	462a      	mov	r2, r5
   1a0e8:	f04f 0901 	mov.w	r9, #1
   1a0ec:	4651      	mov	r1, sl
   1a0ee:	4625      	mov	r5, r4
   1a0f0:	4682      	mov	sl, r0
   1a0f2:	464c      	mov	r4, r9
   1a0f4:	4690      	mov	r8, r2
   1a0f6:	9609      	str	r6, [sp, #36]	; 0x24
   1a0f8:	970a      	str	r7, [sp, #40]	; 0x28
   1a0fa:	9e06      	ldr	r6, [sp, #24]
   1a0fc:	9f01      	ldr	r7, [sp, #4]
   1a0fe:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1a102:	eb07 0484 	add.w	r4, r7, r4, lsl #2
   1a106:	4620      	mov	r0, r4
   1a108:	f7fc f9c8 	bl	1649c <mbedtls_mpi_copy>
   1a10c:	2800      	cmp	r0, #0
   1a10e:	f000 80a7 	beq.w	1a260 <ecp_mul_comb+0x34c>
   1a112:	4683      	mov	fp, r0
   1a114:	9b05      	ldr	r3, [sp, #20]
   1a116:	e74d      	b.n	19fb4 <ecp_mul_comb+0xa0>
   1a118:	f118 33ff 	adds.w	r3, r8, #4294967295
   1a11c:	bf18      	it	ne
   1a11e:	2301      	movne	r3, #1
   1a120:	a910      	add	r1, sp, #64	; 0x40
   1a122:	461a      	mov	r2, r3
   1a124:	a80d      	add	r0, sp, #52	; 0x34
   1a126:	9302      	str	r3, [sp, #8]
   1a128:	f7fc fae6 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a12c:	4683      	mov	fp, r0
   1a12e:	2800      	cmp	r0, #0
   1a130:	d1bb      	bne.n	1a0aa <ecp_mul_comb+0x196>
   1a132:	a822      	add	r0, sp, #136	; 0x88
   1a134:	1c62      	adds	r2, r4, #1
   1a136:	4659      	mov	r1, fp
   1a138:	f00b fec2 	bl	25ec0 <memset>
   1a13c:	b3d4      	cbz	r4, 1a1b4 <ecp_mul_comb+0x2a0>
   1a13e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   1a142:	46d8      	mov	r8, fp
   1a144:	46cb      	mov	fp, r9
   1a146:	46c2      	mov	sl, r8
   1a148:	2700      	movs	r7, #0
   1a14a:	4651      	mov	r1, sl
   1a14c:	a80d      	add	r0, sp, #52	; 0x34
   1a14e:	f7fc fb6b 	bl	16828 <mbedtls_mpi_get_bit>
   1a152:	f89b 3000 	ldrb.w	r3, [fp]
   1a156:	40b8      	lsls	r0, r7
   1a158:	3701      	adds	r7, #1
   1a15a:	4303      	orrs	r3, r0
   1a15c:	42b7      	cmp	r7, r6
   1a15e:	44a2      	add	sl, r4
   1a160:	f88b 3000 	strb.w	r3, [fp]
   1a164:	d1f1      	bne.n	1a14a <ecp_mul_comb+0x236>
   1a166:	f108 0801 	add.w	r8, r8, #1
   1a16a:	45a0      	cmp	r8, r4
   1a16c:	f10b 0b01 	add.w	fp, fp, #1
   1a170:	d1e9      	bne.n	1a146 <ecp_mul_comb+0x232>
   1a172:	2300      	movs	r3, #0
   1a174:	f04f 0c01 	mov.w	ip, #1
   1a178:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
   1a17c:	f819 6f01 	ldrb.w	r6, [r9, #1]!
   1a180:	f10c 0c01 	add.w	ip, ip, #1
   1a184:	ea86 0203 	eor.w	r2, r6, r3
   1a188:	43d0      	mvns	r0, r2
   1a18a:	f000 0001 	and.w	r0, r0, #1
   1a18e:	fb00 f701 	mul.w	r7, r0, r1
   1a192:	b252      	sxtb	r2, r2
   1a194:	b27f      	sxtb	r7, r7
   1a196:	4033      	ands	r3, r6
   1a198:	ea02 0607 	and.w	r6, r2, r7
   1a19c:	407a      	eors	r2, r7
   1a19e:	ea41 10c0 	orr.w	r0, r1, r0, lsl #7
   1a1a2:	4333      	orrs	r3, r6
   1a1a4:	b2d1      	uxtb	r1, r2
   1a1a6:	45e0      	cmp	r8, ip
   1a1a8:	f809 0c01 	strb.w	r0, [r9, #-1]
   1a1ac:	b2db      	uxtb	r3, r3
   1a1ae:	f889 1000 	strb.w	r1, [r9]
   1a1b2:	d2e3      	bcs.n	1a17c <ecp_mul_comb+0x268>
   1a1b4:	2600      	movs	r6, #0
   1a1b6:	a819      	add	r0, sp, #100	; 0x64
   1a1b8:	f7fc f8ec 	bl	16394 <mbedtls_mpi_init>
   1a1bc:	a81c      	add	r0, sp, #112	; 0x70
   1a1be:	f7fc f8e9 	bl	16394 <mbedtls_mpi_init>
   1a1c2:	a81f      	add	r0, sp, #124	; 0x7c
   1a1c4:	f7fc f8e6 	bl	16394 <mbedtls_mpi_init>
   1a1c8:	ab22      	add	r3, sp, #136	; 0x88
   1a1ca:	f813 9004 	ldrb.w	r9, [r3, r4]
   1a1ce:	4423      	add	r3, r4
   1a1d0:	9306      	str	r3, [sp, #24]
   1a1d2:	9b04      	ldr	r3, [sp, #16]
   1a1d4:	4632      	mov	r2, r6
   1a1d6:	469b      	mov	fp, r3
   1a1d8:	9f01      	ldr	r7, [sp, #4]
   1a1da:	9505      	str	r5, [sp, #20]
   1a1dc:	463d      	mov	r5, r7
   1a1de:	9f03      	ldr	r7, [sp, #12]
   1a1e0:	f3c9 0845 	ubfx	r8, r9, #1, #6
   1a1e4:	f103 0a0c 	add.w	sl, r3, #12
   1a1e8:	eba2 0408 	sub.w	r4, r2, r8
   1a1ec:	fab4 f484 	clz	r4, r4
   1a1f0:	0964      	lsrs	r4, r4, #5
   1a1f2:	4629      	mov	r1, r5
   1a1f4:	4622      	mov	r2, r4
   1a1f6:	4658      	mov	r0, fp
   1a1f8:	f7fc fa7e 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a1fc:	3601      	adds	r6, #1
   1a1fe:	f105 010c 	add.w	r1, r5, #12
   1a202:	3524      	adds	r5, #36	; 0x24
   1a204:	2800      	cmp	r0, #0
   1a206:	d16a      	bne.n	1a2de <ecp_mul_comb+0x3ca>
   1a208:	4622      	mov	r2, r4
   1a20a:	4650      	mov	r0, sl
   1a20c:	f7fc fa74 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a210:	b2f2      	uxtb	r2, r6
   1a212:	2800      	cmp	r0, #0
   1a214:	d163      	bne.n	1a2de <ecp_mul_comb+0x3ca>
   1a216:	42ba      	cmp	r2, r7
   1a218:	d3e6      	bcc.n	1a1e8 <ecp_mul_comb+0x2d4>
   1a21a:	9d05      	ldr	r5, [sp, #20]
   1a21c:	a816      	add	r0, sp, #88	; 0x58
   1a21e:	1d2b      	adds	r3, r5, #4
   1a220:	461c      	mov	r4, r3
   1a222:	9308      	str	r3, [sp, #32]
   1a224:	f7fc f8b6 	bl	16394 <mbedtls_mpi_init>
   1a228:	a816      	add	r0, sp, #88	; 0x58
   1a22a:	4621      	mov	r1, r4
   1a22c:	4652      	mov	r2, sl
   1a22e:	f7fd f807 	bl	17240 <mbedtls_mpi_sub_mpi>
   1a232:	4683      	mov	fp, r0
   1a234:	2800      	cmp	r0, #0
   1a236:	f000 80c3 	beq.w	1a3c0 <ecp_mul_comb+0x4ac>
   1a23a:	a816      	add	r0, sp, #88	; 0x58
   1a23c:	f7fc f8b2 	bl	163a4 <mbedtls_mpi_free>
   1a240:	a819      	add	r0, sp, #100	; 0x64
   1a242:	f7fc f8af 	bl	163a4 <mbedtls_mpi_free>
   1a246:	a81c      	add	r0, sp, #112	; 0x70
   1a248:	f7fc f8ac 	bl	163a4 <mbedtls_mpi_free>
   1a24c:	a81f      	add	r0, sp, #124	; 0x7c
   1a24e:	f7fc f8a9 	bl	163a4 <mbedtls_mpi_free>
   1a252:	9b07      	ldr	r3, [sp, #28]
   1a254:	9305      	str	r3, [sp, #20]
   1a256:	e6ac      	b.n	19fb2 <ecp_mul_comb+0x9e>
   1a258:	2301      	movs	r3, #1
   1a25a:	9802      	ldr	r0, [sp, #8]
   1a25c:	9305      	str	r3, [sp, #20]
   1a25e:	e699      	b.n	19f94 <ecp_mul_comb+0x80>
   1a260:	ea4f 0b59 	mov.w	fp, r9, lsr #1
   1a264:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
   1a268:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
   1a26c:	f10b 010c 	add.w	r1, fp, #12
   1a270:	f104 000c 	add.w	r0, r4, #12
   1a274:	f7fc f912 	bl	1649c <mbedtls_mpi_copy>
   1a278:	2800      	cmp	r0, #0
   1a27a:	f47f af4a 	bne.w	1a112 <ecp_mul_comb+0x1fe>
   1a27e:	f10b 0118 	add.w	r1, fp, #24
   1a282:	f104 0018 	add.w	r0, r4, #24
   1a286:	f7fc f909 	bl	1649c <mbedtls_mpi_copy>
   1a28a:	2800      	cmp	r0, #0
   1a28c:	f47f af41 	bne.w	1a112 <ecp_mul_comb+0x1fe>
   1a290:	b165      	cbz	r5, 1a2ac <ecp_mul_comb+0x398>
   1a292:	4683      	mov	fp, r0
   1a294:	4622      	mov	r2, r4
   1a296:	4621      	mov	r1, r4
   1a298:	4640      	mov	r0, r8
   1a29a:	f7fe ffbb 	bl	19214 <ecp_double_jac>
   1a29e:	f10b 0b01 	add.w	fp, fp, #1
   1a2a2:	2800      	cmp	r0, #0
   1a2a4:	f47f af35 	bne.w	1a112 <ecp_mul_comb+0x1fe>
   1a2a8:	45ab      	cmp	fp, r5
   1a2aa:	d1f3      	bne.n	1a294 <ecp_mul_comb+0x380>
   1a2ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
   1a2b0:	fa5f f989 	uxtb.w	r9, r9
   1a2b4:	f10a 0301 	add.w	r3, sl, #1
   1a2b8:	aa22      	add	r2, sp, #136	; 0x88
   1a2ba:	f842 402a 	str.w	r4, [r2, sl, lsl #2]
   1a2be:	fa5f fa83 	uxtb.w	sl, r3
   1a2c2:	fa39 f306 	lsrs.w	r3, r9, r6
   1a2c6:	464c      	mov	r4, r9
   1a2c8:	d10b      	bne.n	1a2e2 <ecp_mul_comb+0x3ce>
   1a2ca:	ea4f 0159 	mov.w	r1, r9, lsr #1
   1a2ce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   1a2d2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   1a2d6:	e712      	b.n	1a0fe <ecp_mul_comb+0x1ea>
   1a2d8:	f8df b39c 	ldr.w	fp, [pc, #924]	; 1a678 <ecp_mul_comb+0x764>
   1a2dc:	e68d      	b.n	19ffa <ecp_mul_comb+0xe6>
   1a2de:	4683      	mov	fp, r0
   1a2e0:	e7ae      	b.n	1a240 <ecp_mul_comb+0x32c>
   1a2e2:	4652      	mov	r2, sl
   1a2e4:	2a01      	cmp	r2, #1
   1a2e6:	462c      	mov	r4, r5
   1a2e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1a2ea:	4645      	mov	r5, r8
   1a2ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1a2ee:	d961      	bls.n	1a3b4 <ecp_mul_comb+0x4a0>
   1a2f0:	a922      	add	r1, sp, #136	; 0x88
   1a2f2:	4640      	mov	r0, r8
   1a2f4:	f7ff fa46 	bl	19784 <ecp_normalize_jac_many.part.3>
   1a2f8:	4683      	mov	fp, r0
   1a2fa:	f1bb 0f00 	cmp.w	fp, #0
   1a2fe:	f47f ae58 	bne.w	19fb2 <ecp_mul_comb+0x9e>
   1a302:	2301      	movs	r3, #1
   1a304:	9a01      	ldr	r2, [sp, #4]
   1a306:	46da      	mov	sl, fp
   1a308:	3a24      	subs	r2, #36	; 0x24
   1a30a:	970b      	str	r7, [sp, #44]	; 0x2c
   1a30c:	4693      	mov	fp, r2
   1a30e:	461f      	mov	r7, r3
   1a310:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
   1a314:	b303      	cbz	r3, 1a358 <ecp_mul_comb+0x444>
   1a316:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a31a:	ea4f 0883 	mov.w	r8, r3, lsl #2
   1a31e:	9b01      	ldr	r3, [sp, #4]
   1a320:	f1a8 0424 	sub.w	r4, r8, #36	; 0x24
   1a324:	441c      	add	r4, r3
   1a326:	eb03 0908 	add.w	r9, r3, r8
   1a32a:	e005      	b.n	1a338 <ecp_mul_comb+0x424>
   1a32c:	aa22      	add	r2, sp, #136	; 0x88
   1a32e:	45a3      	cmp	fp, r4
   1a330:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
   1a334:	469a      	mov	sl, r3
   1a336:	d00f      	beq.n	1a358 <ecp_mul_comb+0x444>
   1a338:	eb08 0604 	add.w	r6, r8, r4
   1a33c:	464b      	mov	r3, r9
   1a33e:	4622      	mov	r2, r4
   1a340:	4631      	mov	r1, r6
   1a342:	4628      	mov	r0, r5
   1a344:	f7ff fbc2 	bl	19acc <ecp_add_mixed>
   1a348:	f10a 0301 	add.w	r3, sl, #1
   1a34c:	3c24      	subs	r4, #36	; 0x24
   1a34e:	b2db      	uxtb	r3, r3
   1a350:	2800      	cmp	r0, #0
   1a352:	d0eb      	beq.n	1a32c <ecp_mul_comb+0x418>
   1a354:	4683      	mov	fp, r0
   1a356:	e6dd      	b.n	1a114 <ecp_mul_comb+0x200>
   1a358:	007b      	lsls	r3, r7, #1
   1a35a:	9a06      	ldr	r2, [sp, #24]
   1a35c:	b2df      	uxtb	r7, r3
   1a35e:	fa37 f202 	lsrs.w	r2, r7, r2
   1a362:	463b      	mov	r3, r7
   1a364:	d0d6      	beq.n	1a314 <ecp_mul_comb+0x400>
   1a366:	f1ba 0f01 	cmp.w	sl, #1
   1a36a:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
   1a36e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1a370:	f240 8167 	bls.w	1a642 <ecp_mul_comb+0x72e>
   1a374:	4652      	mov	r2, sl
   1a376:	a922      	add	r1, sp, #136	; 0x88
   1a378:	4628      	mov	r0, r5
   1a37a:	f7ff fa03 	bl	19784 <ecp_normalize_jac_many.part.3>
   1a37e:	4683      	mov	fp, r0
   1a380:	9b05      	ldr	r3, [sp, #20]
   1a382:	f1bb 0f00 	cmp.w	fp, #0
   1a386:	f47f ae15 	bne.w	19fb4 <ecp_mul_comb+0xa0>
   1a38a:	b123      	cbz	r3, 1a396 <ecp_mul_comb+0x482>
   1a38c:	9b01      	ldr	r3, [sp, #4]
   1a38e:	676b      	str	r3, [r5, #116]	; 0x74
   1a390:	9b02      	ldr	r3, [sp, #8]
   1a392:	67ab      	str	r3, [r5, #120]	; 0x78
   1a394:	e676      	b.n	1a084 <ecp_mul_comb+0x170>
   1a396:	4619      	mov	r1, r3
   1a398:	4638      	mov	r0, r7
   1a39a:	f7fc fa45 	bl	16828 <mbedtls_mpi_get_bit>
   1a39e:	4639      	mov	r1, r7
   1a3a0:	4680      	mov	r8, r0
   1a3a2:	a80d      	add	r0, sp, #52	; 0x34
   1a3a4:	f7fc f87a 	bl	1649c <mbedtls_mpi_copy>
   1a3a8:	4683      	mov	fp, r0
   1a3aa:	2800      	cmp	r0, #0
   1a3ac:	f47f ae04 	bne.w	19fb8 <ecp_mul_comb+0xa4>
   1a3b0:	9007      	str	r0, [sp, #28]
   1a3b2:	e672      	b.n	1a09a <ecp_mul_comb+0x186>
   1a3b4:	9922      	ldr	r1, [sp, #136]	; 0x88
   1a3b6:	4628      	mov	r0, r5
   1a3b8:	f7ff f97c 	bl	196b4 <ecp_normalize_jac>
   1a3bc:	4683      	mov	fp, r0
   1a3be:	e79c      	b.n	1a2fa <ecp_mul_comb+0x3e6>
   1a3c0:	4601      	mov	r1, r0
   1a3c2:	4650      	mov	r0, sl
   1a3c4:	f7fc fd10 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a3c8:	1c02      	adds	r2, r0, #0
   1a3ca:	bf18      	it	ne
   1a3cc:	2201      	movne	r2, #1
   1a3ce:	a916      	add	r1, sp, #88	; 0x58
   1a3d0:	ea02 12d9 	and.w	r2, r2, r9, lsr #7
   1a3d4:	4650      	mov	r0, sl
   1a3d6:	f7fc f98f 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a3da:	4683      	mov	fp, r0
   1a3dc:	a816      	add	r0, sp, #88	; 0x58
   1a3de:	f7fb ffe1 	bl	163a4 <mbedtls_mpi_free>
   1a3e2:	f1bb 0f00 	cmp.w	fp, #0
   1a3e6:	f47f af2b 	bne.w	1a240 <ecp_mul_comb+0x32c>
   1a3ea:	9b04      	ldr	r3, [sp, #16]
   1a3ec:	2101      	movs	r1, #1
   1a3ee:	f103 0418 	add.w	r4, r3, #24
   1a3f2:	4620      	mov	r0, r4
   1a3f4:	f7fc f9de 	bl	167b4 <mbedtls_mpi_lset>
   1a3f8:	4683      	mov	fp, r0
   1a3fa:	2800      	cmp	r0, #0
   1a3fc:	f47f af20 	bne.w	1a240 <ecp_mul_comb+0x32c>
   1a400:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
   1a402:	2b00      	cmp	r3, #0
   1a404:	f000 8082 	beq.w	1a50c <ecp_mul_comb+0x5f8>
   1a408:	260c      	movs	r6, #12
   1a40a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1a40c:	a813      	add	r0, sp, #76	; 0x4c
   1a40e:	3307      	adds	r3, #7
   1a410:	08df      	lsrs	r7, r3, #3
   1a412:	f7fb ffbf 	bl	16394 <mbedtls_mpi_init>
   1a416:	a816      	add	r0, sp, #88	; 0x58
   1a418:	f7fb ffbc 	bl	16394 <mbedtls_mpi_init>
   1a41c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1a420:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
   1a422:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   1a424:	4639      	mov	r1, r7
   1a426:	a813      	add	r0, sp, #76	; 0x4c
   1a428:	f7fd ff36 	bl	18298 <mbedtls_mpi_fill_random>
   1a42c:	e006      	b.n	1a43c <ecp_mul_comb+0x528>
   1a42e:	2101      	movs	r1, #1
   1a430:	a813      	add	r0, sp, #76	; 0x4c
   1a432:	f7fc fc01 	bl	16c38 <mbedtls_mpi_shift_r>
   1a436:	2800      	cmp	r0, #0
   1a438:	f040 80c8 	bne.w	1a5cc <ecp_mul_comb+0x6b8>
   1a43c:	4641      	mov	r1, r8
   1a43e:	a813      	add	r0, sp, #76	; 0x4c
   1a440:	f7fc fc6a 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a444:	2800      	cmp	r0, #0
   1a446:	daf2      	bge.n	1a42e <ecp_mul_comb+0x51a>
   1a448:	3e01      	subs	r6, #1
   1a44a:	f000 8100 	beq.w	1a64e <ecp_mul_comb+0x73a>
   1a44e:	2101      	movs	r1, #1
   1a450:	a813      	add	r0, sp, #76	; 0x4c
   1a452:	f7fc fcc9 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a456:	2800      	cmp	r0, #0
   1a458:	dde2      	ble.n	1a420 <ecp_mul_comb+0x50c>
   1a45a:	aa13      	add	r2, sp, #76	; 0x4c
   1a45c:	4621      	mov	r1, r4
   1a45e:	4620      	mov	r0, r4
   1a460:	f7fc ffae 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a464:	4683      	mov	fp, r0
   1a466:	b130      	cbz	r0, 1a476 <ecp_mul_comb+0x562>
   1a468:	a813      	add	r0, sp, #76	; 0x4c
   1a46a:	f7fb ff9b 	bl	163a4 <mbedtls_mpi_free>
   1a46e:	a816      	add	r0, sp, #88	; 0x58
   1a470:	f7fb ff98 	bl	163a4 <mbedtls_mpi_free>
   1a474:	e6e4      	b.n	1a240 <ecp_mul_comb+0x32c>
   1a476:	4620      	mov	r0, r4
   1a478:	4629      	mov	r1, r5
   1a47a:	f7fe fe7f 	bl	1917c <ecp_modp>
   1a47e:	4683      	mov	fp, r0
   1a480:	2800      	cmp	r0, #0
   1a482:	d1f1      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a484:	aa13      	add	r2, sp, #76	; 0x4c
   1a486:	4611      	mov	r1, r2
   1a488:	a816      	add	r0, sp, #88	; 0x58
   1a48a:	f7fc ff99 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a48e:	4683      	mov	fp, r0
   1a490:	2800      	cmp	r0, #0
   1a492:	d1e9      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a494:	4629      	mov	r1, r5
   1a496:	a816      	add	r0, sp, #88	; 0x58
   1a498:	f7fe fe70 	bl	1917c <ecp_modp>
   1a49c:	4683      	mov	fp, r0
   1a49e:	2800      	cmp	r0, #0
   1a4a0:	d1e2      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4a2:	9804      	ldr	r0, [sp, #16]
   1a4a4:	aa16      	add	r2, sp, #88	; 0x58
   1a4a6:	4601      	mov	r1, r0
   1a4a8:	f7fc ff8a 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a4ac:	4683      	mov	fp, r0
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d1da      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4b2:	4629      	mov	r1, r5
   1a4b4:	9804      	ldr	r0, [sp, #16]
   1a4b6:	f7fe fe61 	bl	1917c <ecp_modp>
   1a4ba:	4683      	mov	fp, r0
   1a4bc:	2800      	cmp	r0, #0
   1a4be:	d1d3      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4c0:	a916      	add	r1, sp, #88	; 0x58
   1a4c2:	aa13      	add	r2, sp, #76	; 0x4c
   1a4c4:	4608      	mov	r0, r1
   1a4c6:	f7fc ff7b 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a4ca:	4683      	mov	fp, r0
   1a4cc:	2800      	cmp	r0, #0
   1a4ce:	d1cb      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4d0:	4629      	mov	r1, r5
   1a4d2:	a816      	add	r0, sp, #88	; 0x58
   1a4d4:	f7fe fe52 	bl	1917c <ecp_modp>
   1a4d8:	4683      	mov	fp, r0
   1a4da:	2800      	cmp	r0, #0
   1a4dc:	d1c4      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4de:	aa16      	add	r2, sp, #88	; 0x58
   1a4e0:	4651      	mov	r1, sl
   1a4e2:	4650      	mov	r0, sl
   1a4e4:	f7fc ff6c 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a4e8:	4683      	mov	fp, r0
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	d1bc      	bne.n	1a468 <ecp_mul_comb+0x554>
   1a4ee:	4629      	mov	r1, r5
   1a4f0:	4650      	mov	r0, sl
   1a4f2:	f7fe fe43 	bl	1917c <ecp_modp>
   1a4f6:	4683      	mov	fp, r0
   1a4f8:	a813      	add	r0, sp, #76	; 0x4c
   1a4fa:	f7fb ff53 	bl	163a4 <mbedtls_mpi_free>
   1a4fe:	a816      	add	r0, sp, #88	; 0x58
   1a500:	f7fb ff50 	bl	163a4 <mbedtls_mpi_free>
   1a504:	f1bb 0f00 	cmp.w	fp, #0
   1a508:	f47f ae9a 	bne.w	1a240 <ecp_mul_comb+0x32c>
   1a50c:	46ab      	mov	fp, r5
   1a50e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a512:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1a516:	f8cd a018 	str.w	sl, [sp, #24]
   1a51a:	f8dd a010 	ldr.w	sl, [sp, #16]
   1a51e:	ab22      	add	r3, sp, #136	; 0x88
   1a520:	4543      	cmp	r3, r8
   1a522:	d055      	beq.n	1a5d0 <ecp_mul_comb+0x6bc>
   1a524:	4652      	mov	r2, sl
   1a526:	4651      	mov	r1, sl
   1a528:	4658      	mov	r0, fp
   1a52a:	f7fe fe73 	bl	19214 <ecp_double_jac>
   1a52e:	4602      	mov	r2, r0
   1a530:	2800      	cmp	r0, #0
   1a532:	d149      	bne.n	1a5c8 <ecp_mul_comb+0x6b4>
   1a534:	4606      	mov	r6, r0
   1a536:	4604      	mov	r4, r0
   1a538:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
   1a53c:	9d01      	ldr	r5, [sp, #4]
   1a53e:	9305      	str	r3, [sp, #20]
   1a540:	f3c3 0745 	ubfx	r7, r3, #1, #6
   1a544:	1be4      	subs	r4, r4, r7
   1a546:	fab4 f484 	clz	r4, r4
   1a54a:	0964      	lsrs	r4, r4, #5
   1a54c:	4629      	mov	r1, r5
   1a54e:	4622      	mov	r2, r4
   1a550:	a819      	add	r0, sp, #100	; 0x64
   1a552:	f7fc f8d1 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a556:	3601      	adds	r6, #1
   1a558:	f105 010c 	add.w	r1, r5, #12
   1a55c:	3524      	adds	r5, #36	; 0x24
   1a55e:	2800      	cmp	r0, #0
   1a560:	f47f aebd 	bne.w	1a2de <ecp_mul_comb+0x3ca>
   1a564:	4622      	mov	r2, r4
   1a566:	a81c      	add	r0, sp, #112	; 0x70
   1a568:	f7fc f8c6 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a56c:	b2f4      	uxtb	r4, r6
   1a56e:	2800      	cmp	r0, #0
   1a570:	f47f aeb5 	bne.w	1a2de <ecp_mul_comb+0x3ca>
   1a574:	45a1      	cmp	r9, r4
   1a576:	d8e5      	bhi.n	1a544 <ecp_mul_comb+0x630>
   1a578:	a816      	add	r0, sp, #88	; 0x58
   1a57a:	f7fb ff0b 	bl	16394 <mbedtls_mpi_init>
   1a57e:	aa1c      	add	r2, sp, #112	; 0x70
   1a580:	9908      	ldr	r1, [sp, #32]
   1a582:	a816      	add	r0, sp, #88	; 0x58
   1a584:	f7fc fe5c 	bl	17240 <mbedtls_mpi_sub_mpi>
   1a588:	b108      	cbz	r0, 1a58e <ecp_mul_comb+0x67a>
   1a58a:	4683      	mov	fp, r0
   1a58c:	e655      	b.n	1a23a <ecp_mul_comb+0x326>
   1a58e:	4601      	mov	r1, r0
   1a590:	a81c      	add	r0, sp, #112	; 0x70
   1a592:	f7fc fc29 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a596:	1c02      	adds	r2, r0, #0
   1a598:	bf18      	it	ne
   1a59a:	2201      	movne	r2, #1
   1a59c:	9b05      	ldr	r3, [sp, #20]
   1a59e:	a916      	add	r1, sp, #88	; 0x58
   1a5a0:	ea02 12d3 	and.w	r2, r2, r3, lsr #7
   1a5a4:	a81c      	add	r0, sp, #112	; 0x70
   1a5a6:	f7fc f8a7 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a5aa:	9005      	str	r0, [sp, #20]
   1a5ac:	a816      	add	r0, sp, #88	; 0x58
   1a5ae:	f7fb fef9 	bl	163a4 <mbedtls_mpi_free>
   1a5b2:	9a05      	ldr	r2, [sp, #20]
   1a5b4:	b942      	cbnz	r2, 1a5c8 <ecp_mul_comb+0x6b4>
   1a5b6:	4652      	mov	r2, sl
   1a5b8:	ab19      	add	r3, sp, #100	; 0x64
   1a5ba:	4651      	mov	r1, sl
   1a5bc:	4658      	mov	r0, fp
   1a5be:	f7ff fa85 	bl	19acc <ecp_add_mixed>
   1a5c2:	4602      	mov	r2, r0
   1a5c4:	2800      	cmp	r0, #0
   1a5c6:	d0aa      	beq.n	1a51e <ecp_mul_comb+0x60a>
   1a5c8:	4693      	mov	fp, r2
   1a5ca:	e639      	b.n	1a240 <ecp_mul_comb+0x32c>
   1a5cc:	4683      	mov	fp, r0
   1a5ce:	e74b      	b.n	1a468 <ecp_mul_comb+0x554>
   1a5d0:	a819      	add	r0, sp, #100	; 0x64
   1a5d2:	f8dd a018 	ldr.w	sl, [sp, #24]
   1a5d6:	f7fb fee5 	bl	163a4 <mbedtls_mpi_free>
   1a5da:	a81c      	add	r0, sp, #112	; 0x70
   1a5dc:	f7fb fee2 	bl	163a4 <mbedtls_mpi_free>
   1a5e0:	a81f      	add	r0, sp, #124	; 0x7c
   1a5e2:	f7fb fedf 	bl	163a4 <mbedtls_mpi_free>
   1a5e6:	a819      	add	r0, sp, #100	; 0x64
   1a5e8:	f7fb fed4 	bl	16394 <mbedtls_mpi_init>
   1a5ec:	4652      	mov	r2, sl
   1a5ee:	9908      	ldr	r1, [sp, #32]
   1a5f0:	a819      	add	r0, sp, #100	; 0x64
   1a5f2:	f7fc fe25 	bl	17240 <mbedtls_mpi_sub_mpi>
   1a5f6:	465d      	mov	r5, fp
   1a5f8:	4683      	mov	fp, r0
   1a5fa:	b118      	cbz	r0, 1a604 <ecp_mul_comb+0x6f0>
   1a5fc:	a819      	add	r0, sp, #100	; 0x64
   1a5fe:	f7fb fed1 	bl	163a4 <mbedtls_mpi_free>
   1a602:	e552      	b.n	1a0aa <ecp_mul_comb+0x196>
   1a604:	4659      	mov	r1, fp
   1a606:	4650      	mov	r0, sl
   1a608:	f7fc fbee 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a60c:	9b02      	ldr	r3, [sp, #8]
   1a60e:	a919      	add	r1, sp, #100	; 0x64
   1a610:	2800      	cmp	r0, #0
   1a612:	bf08      	it	eq
   1a614:	2300      	moveq	r3, #0
   1a616:	4650      	mov	r0, sl
   1a618:	461a      	mov	r2, r3
   1a61a:	f7fc f86d 	bl	166f8 <mbedtls_mpi_safe_cond_assign>
   1a61e:	4683      	mov	fp, r0
   1a620:	a819      	add	r0, sp, #100	; 0x64
   1a622:	f7fb febf 	bl	163a4 <mbedtls_mpi_free>
   1a626:	f1bb 0f00 	cmp.w	fp, #0
   1a62a:	f47f ad3e 	bne.w	1a0aa <ecp_mul_comb+0x196>
   1a62e:	4628      	mov	r0, r5
   1a630:	9904      	ldr	r1, [sp, #16]
   1a632:	f7ff f83f 	bl	196b4 <ecp_normalize_jac>
   1a636:	9b07      	ldr	r3, [sp, #28]
   1a638:	4683      	mov	fp, r0
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	f47f acd4 	bne.w	19fe8 <ecp_mul_comb+0xd4>
   1a640:	e4ba      	b.n	19fb8 <ecp_mul_comb+0xa4>
   1a642:	9922      	ldr	r1, [sp, #136]	; 0x88
   1a644:	4628      	mov	r0, r5
   1a646:	f7ff f835 	bl	196b4 <ecp_normalize_jac>
   1a64a:	4683      	mov	fp, r0
   1a64c:	e698      	b.n	1a380 <ecp_mul_comb+0x46c>
   1a64e:	f8df b02c 	ldr.w	fp, [pc, #44]	; 1a67c <ecp_mul_comb+0x768>
   1a652:	e5f5      	b.n	1a240 <ecp_mul_comb+0x32c>
   1a654:	2201      	movs	r2, #1
   1a656:	f10a 31ff 	add.w	r1, sl, #4294967295
   1a65a:	eb0a 0403 	add.w	r4, sl, r3
   1a65e:	fa02 f301 	lsl.w	r3, r2, r1
   1a662:	3c01      	subs	r4, #1
   1a664:	9302      	str	r3, [sp, #8]
   1a666:	b2db      	uxtb	r3, r3
   1a668:	9106      	str	r1, [sp, #24]
   1a66a:	fbb4 f4fa 	udiv	r4, r4, sl
   1a66e:	4656      	mov	r6, sl
   1a670:	9303      	str	r3, [sp, #12]
   1a672:	e502      	b.n	1a07a <ecp_mul_comb+0x166>
   1a674:	ffffb280 	.word	0xffffb280
   1a678:	ffffb080 	.word	0xffffb080
   1a67c:	ffffb300 	.word	0xffffb300

0001a680 <mbedtls_ecp_point_write_binary>:
   1a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a684:	2a01      	cmp	r2, #1
   1a686:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
   1a68a:	d843      	bhi.n	1a714 <mbedtls_ecp_point_write_binary+0x94>
   1a68c:	460d      	mov	r5, r1
   1a68e:	4681      	mov	r9, r0
   1a690:	2100      	movs	r1, #0
   1a692:	f105 0018 	add.w	r0, r5, #24
   1a696:	461e      	mov	r6, r3
   1a698:	4614      	mov	r4, r2
   1a69a:	f7fc fba5 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a69e:	b938      	cbnz	r0, 1a6b0 <mbedtls_ecp_point_write_binary+0x30>
   1a6a0:	f1b8 0f00 	cmp.w	r8, #0
   1a6a4:	d038      	beq.n	1a718 <mbedtls_ecp_point_write_binary+0x98>
   1a6a6:	2301      	movs	r3, #1
   1a6a8:	7038      	strb	r0, [r7, #0]
   1a6aa:	6033      	str	r3, [r6, #0]
   1a6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a6b0:	f109 0004 	add.w	r0, r9, #4
   1a6b4:	f7fc f8f6 	bl	168a4 <mbedtls_mpi_size>
   1a6b8:	4681      	mov	r9, r0
   1a6ba:	b9c4      	cbnz	r4, 1a6ee <mbedtls_ecp_point_write_binary+0x6e>
   1a6bc:	0043      	lsls	r3, r0, #1
   1a6be:	3301      	adds	r3, #1
   1a6c0:	4598      	cmp	r8, r3
   1a6c2:	6033      	str	r3, [r6, #0]
   1a6c4:	d328      	bcc.n	1a718 <mbedtls_ecp_point_write_binary+0x98>
   1a6c6:	2304      	movs	r3, #4
   1a6c8:	4639      	mov	r1, r7
   1a6ca:	4602      	mov	r2, r0
   1a6cc:	f801 3b01 	strb.w	r3, [r1], #1
   1a6d0:	4628      	mov	r0, r5
   1a6d2:	f7fc f9a9 	bl	16a28 <mbedtls_mpi_write_binary>
   1a6d6:	2800      	cmp	r0, #0
   1a6d8:	d1e8      	bne.n	1a6ac <mbedtls_ecp_point_write_binary+0x2c>
   1a6da:	f109 0101 	add.w	r1, r9, #1
   1a6de:	f105 000c 	add.w	r0, r5, #12
   1a6e2:	4439      	add	r1, r7
   1a6e4:	464a      	mov	r2, r9
   1a6e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6ea:	f7fc b99d 	b.w	16a28 <mbedtls_mpi_write_binary>
   1a6ee:	1c43      	adds	r3, r0, #1
   1a6f0:	4598      	cmp	r8, r3
   1a6f2:	6033      	str	r3, [r6, #0]
   1a6f4:	d310      	bcc.n	1a718 <mbedtls_ecp_point_write_binary+0x98>
   1a6f6:	2100      	movs	r1, #0
   1a6f8:	f105 000c 	add.w	r0, r5, #12
   1a6fc:	f7fc f894 	bl	16828 <mbedtls_mpi_get_bit>
   1a700:	4639      	mov	r1, r7
   1a702:	3002      	adds	r0, #2
   1a704:	f801 0b01 	strb.w	r0, [r1], #1
   1a708:	464a      	mov	r2, r9
   1a70a:	4628      	mov	r0, r5
   1a70c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a710:	f7fc b98a 	b.w	16a28 <mbedtls_mpi_write_binary>
   1a714:	4801      	ldr	r0, [pc, #4]	; (1a71c <mbedtls_ecp_point_write_binary+0x9c>)
   1a716:	e7c9      	b.n	1a6ac <mbedtls_ecp_point_write_binary+0x2c>
   1a718:	4801      	ldr	r0, [pc, #4]	; (1a720 <mbedtls_ecp_point_write_binary+0xa0>)
   1a71a:	e7c7      	b.n	1a6ac <mbedtls_ecp_point_write_binary+0x2c>
   1a71c:	ffffb080 	.word	0xffffb080
   1a720:	ffffb100 	.word	0xffffb100

0001a724 <mbedtls_ecp_point_read_binary>:
   1a724:	2b00      	cmp	r3, #0
   1a726:	d041      	beq.n	1a7ac <mbedtls_ecp_point_read_binary+0x88>
   1a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a72a:	461e      	mov	r6, r3
   1a72c:	7813      	ldrb	r3, [r2, #0]
   1a72e:	4614      	mov	r4, r2
   1a730:	460d      	mov	r5, r1
   1a732:	b9ab      	cbnz	r3, 1a760 <mbedtls_ecp_point_read_binary+0x3c>
   1a734:	2e01      	cmp	r6, #1
   1a736:	d135      	bne.n	1a7a4 <mbedtls_ecp_point_read_binary+0x80>
   1a738:	4631      	mov	r1, r6
   1a73a:	4628      	mov	r0, r5
   1a73c:	f7fc f83a 	bl	167b4 <mbedtls_mpi_lset>
   1a740:	b100      	cbz	r0, 1a744 <mbedtls_ecp_point_read_binary+0x20>
   1a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a744:	4631      	mov	r1, r6
   1a746:	f105 000c 	add.w	r0, r5, #12
   1a74a:	f7fc f833 	bl	167b4 <mbedtls_mpi_lset>
   1a74e:	2800      	cmp	r0, #0
   1a750:	d1f7      	bne.n	1a742 <mbedtls_ecp_point_read_binary+0x1e>
   1a752:	4601      	mov	r1, r0
   1a754:	f105 0018 	add.w	r0, r5, #24
   1a758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a75c:	f7fc b82a 	b.w	167b4 <mbedtls_mpi_lset>
   1a760:	3004      	adds	r0, #4
   1a762:	f7fc f89f 	bl	168a4 <mbedtls_mpi_size>
   1a766:	7823      	ldrb	r3, [r4, #0]
   1a768:	4607      	mov	r7, r0
   1a76a:	2b04      	cmp	r3, #4
   1a76c:	d11c      	bne.n	1a7a8 <mbedtls_ecp_point_read_binary+0x84>
   1a76e:	0043      	lsls	r3, r0, #1
   1a770:	3301      	adds	r3, #1
   1a772:	429e      	cmp	r6, r3
   1a774:	d116      	bne.n	1a7a4 <mbedtls_ecp_point_read_binary+0x80>
   1a776:	4602      	mov	r2, r0
   1a778:	1c61      	adds	r1, r4, #1
   1a77a:	4628      	mov	r0, r5
   1a77c:	f7fc f8c2 	bl	16904 <mbedtls_mpi_read_binary>
   1a780:	2800      	cmp	r0, #0
   1a782:	d1de      	bne.n	1a742 <mbedtls_ecp_point_read_binary+0x1e>
   1a784:	1c79      	adds	r1, r7, #1
   1a786:	4421      	add	r1, r4
   1a788:	463a      	mov	r2, r7
   1a78a:	f105 000c 	add.w	r0, r5, #12
   1a78e:	f7fc f8b9 	bl	16904 <mbedtls_mpi_read_binary>
   1a792:	2800      	cmp	r0, #0
   1a794:	d1d5      	bne.n	1a742 <mbedtls_ecp_point_read_binary+0x1e>
   1a796:	f105 0018 	add.w	r0, r5, #24
   1a79a:	2101      	movs	r1, #1
   1a79c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a7a0:	f7fc b808 	b.w	167b4 <mbedtls_mpi_lset>
   1a7a4:	4802      	ldr	r0, [pc, #8]	; (1a7b0 <mbedtls_ecp_point_read_binary+0x8c>)
   1a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7a8:	4802      	ldr	r0, [pc, #8]	; (1a7b4 <mbedtls_ecp_point_read_binary+0x90>)
   1a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7ac:	4800      	ldr	r0, [pc, #0]	; (1a7b0 <mbedtls_ecp_point_read_binary+0x8c>)
   1a7ae:	4770      	bx	lr
   1a7b0:	ffffb080 	.word	0xffffb080
   1a7b4:	ffffb180 	.word	0xffffb180

0001a7b8 <mbedtls_ecp_check_pubkey>:
   1a7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7bc:	460c      	mov	r4, r1
   1a7be:	b086      	sub	sp, #24
   1a7c0:	4605      	mov	r5, r0
   1a7c2:	2101      	movs	r1, #1
   1a7c4:	f104 0018 	add.w	r0, r4, #24
   1a7c8:	f7fc fb0e 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a7cc:	2800      	cmp	r0, #0
   1a7ce:	f040 809f 	bne.w	1a910 <mbedtls_ecp_check_pubkey+0x158>
   1a7d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1a7d4:	2b00      	cmp	r3, #0
   1a7d6:	f000 80a0 	beq.w	1a91a <mbedtls_ecp_check_pubkey+0x162>
   1a7da:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a7dc:	2b00      	cmp	r3, #0
   1a7de:	f000 809c 	beq.w	1a91a <mbedtls_ecp_check_pubkey+0x162>
   1a7e2:	4601      	mov	r1, r0
   1a7e4:	4606      	mov	r6, r0
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	f7fc fafe 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a7ec:	2800      	cmp	r0, #0
   1a7ee:	f2c0 808f 	blt.w	1a910 <mbedtls_ecp_check_pubkey+0x158>
   1a7f2:	f104 070c 	add.w	r7, r4, #12
   1a7f6:	4631      	mov	r1, r6
   1a7f8:	4638      	mov	r0, r7
   1a7fa:	f7fc faf5 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a7fe:	2800      	cmp	r0, #0
   1a800:	f2c0 8086 	blt.w	1a910 <mbedtls_ecp_check_pubkey+0x158>
   1a804:	f105 0804 	add.w	r8, r5, #4
   1a808:	4641      	mov	r1, r8
   1a80a:	4620      	mov	r0, r4
   1a80c:	f7fc fa84 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a810:	2800      	cmp	r0, #0
   1a812:	da7d      	bge.n	1a910 <mbedtls_ecp_check_pubkey+0x158>
   1a814:	4641      	mov	r1, r8
   1a816:	4638      	mov	r0, r7
   1a818:	f7fc fa7e 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a81c:	2800      	cmp	r0, #0
   1a81e:	da77      	bge.n	1a910 <mbedtls_ecp_check_pubkey+0x158>
   1a820:	4668      	mov	r0, sp
   1a822:	f7fb fdb7 	bl	16394 <mbedtls_mpi_init>
   1a826:	a803      	add	r0, sp, #12
   1a828:	f7fb fdb4 	bl	16394 <mbedtls_mpi_init>
   1a82c:	463a      	mov	r2, r7
   1a82e:	4639      	mov	r1, r7
   1a830:	4668      	mov	r0, sp
   1a832:	f7fc fdc5 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a836:	4606      	mov	r6, r0
   1a838:	b148      	cbz	r0, 1a84e <mbedtls_ecp_check_pubkey+0x96>
   1a83a:	4668      	mov	r0, sp
   1a83c:	f7fb fdb2 	bl	163a4 <mbedtls_mpi_free>
   1a840:	a803      	add	r0, sp, #12
   1a842:	f7fb fdaf 	bl	163a4 <mbedtls_mpi_free>
   1a846:	4630      	mov	r0, r6
   1a848:	b006      	add	sp, #24
   1a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a84e:	4629      	mov	r1, r5
   1a850:	4668      	mov	r0, sp
   1a852:	f7fe fc93 	bl	1917c <ecp_modp>
   1a856:	4606      	mov	r6, r0
   1a858:	2800      	cmp	r0, #0
   1a85a:	d1ee      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a85c:	4622      	mov	r2, r4
   1a85e:	4621      	mov	r1, r4
   1a860:	a803      	add	r0, sp, #12
   1a862:	f7fc fdad 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a866:	4606      	mov	r6, r0
   1a868:	2800      	cmp	r0, #0
   1a86a:	d1e6      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a86c:	4629      	mov	r1, r5
   1a86e:	a803      	add	r0, sp, #12
   1a870:	f7fe fc84 	bl	1917c <ecp_modp>
   1a874:	4606      	mov	r6, r0
   1a876:	2800      	cmp	r0, #0
   1a878:	d1df      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a87a:	69ab      	ldr	r3, [r5, #24]
   1a87c:	2b00      	cmp	r3, #0
   1a87e:	d04e      	beq.n	1a91e <mbedtls_ecp_check_pubkey+0x166>
   1a880:	a903      	add	r1, sp, #12
   1a882:	f105 0210 	add.w	r2, r5, #16
   1a886:	4608      	mov	r0, r1
   1a888:	f7fc fc66 	bl	17158 <mbedtls_mpi_add_mpi>
   1a88c:	4606      	mov	r6, r0
   1a88e:	2800      	cmp	r0, #0
   1a890:	d1d3      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a892:	e007      	b.n	1a8a4 <mbedtls_ecp_check_pubkey+0xec>
   1a894:	a903      	add	r1, sp, #12
   1a896:	4642      	mov	r2, r8
   1a898:	4608      	mov	r0, r1
   1a89a:	f7fc fb9d 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1a89e:	4606      	mov	r6, r0
   1a8a0:	2800      	cmp	r0, #0
   1a8a2:	d1ca      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a8a4:	4641      	mov	r1, r8
   1a8a6:	a803      	add	r0, sp, #12
   1a8a8:	f7fc fa36 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a8ac:	2800      	cmp	r0, #0
   1a8ae:	daf1      	bge.n	1a894 <mbedtls_ecp_check_pubkey+0xdc>
   1a8b0:	a903      	add	r1, sp, #12
   1a8b2:	4622      	mov	r2, r4
   1a8b4:	4608      	mov	r0, r1
   1a8b6:	f7fc fd83 	bl	173c0 <mbedtls_mpi_mul_mpi>
   1a8ba:	4606      	mov	r6, r0
   1a8bc:	2800      	cmp	r0, #0
   1a8be:	d1bc      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a8c0:	4629      	mov	r1, r5
   1a8c2:	a803      	add	r0, sp, #12
   1a8c4:	f7fe fc5a 	bl	1917c <ecp_modp>
   1a8c8:	4606      	mov	r6, r0
   1a8ca:	2800      	cmp	r0, #0
   1a8cc:	d1b5      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a8ce:	a903      	add	r1, sp, #12
   1a8d0:	f105 021c 	add.w	r2, r5, #28
   1a8d4:	4608      	mov	r0, r1
   1a8d6:	f7fc fc3f 	bl	17158 <mbedtls_mpi_add_mpi>
   1a8da:	4606      	mov	r6, r0
   1a8dc:	2800      	cmp	r0, #0
   1a8de:	d1ac      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a8e0:	e007      	b.n	1a8f2 <mbedtls_ecp_check_pubkey+0x13a>
   1a8e2:	a903      	add	r1, sp, #12
   1a8e4:	4642      	mov	r2, r8
   1a8e6:	4608      	mov	r0, r1
   1a8e8:	f7fc fb76 	bl	16fd8 <mbedtls_mpi_sub_abs>
   1a8ec:	4606      	mov	r6, r0
   1a8ee:	2800      	cmp	r0, #0
   1a8f0:	d1a3      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a8f2:	4641      	mov	r1, r8
   1a8f4:	a803      	add	r0, sp, #12
   1a8f6:	f7fc fa0f 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a8fa:	2800      	cmp	r0, #0
   1a8fc:	daf1      	bge.n	1a8e2 <mbedtls_ecp_check_pubkey+0x12a>
   1a8fe:	a903      	add	r1, sp, #12
   1a900:	4668      	mov	r0, sp
   1a902:	f7fc fa09 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a906:	4e14      	ldr	r6, [pc, #80]	; (1a958 <mbedtls_ecp_check_pubkey+0x1a0>)
   1a908:	2800      	cmp	r0, #0
   1a90a:	bf08      	it	eq
   1a90c:	2600      	moveq	r6, #0
   1a90e:	e794      	b.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a910:	4e11      	ldr	r6, [pc, #68]	; (1a958 <mbedtls_ecp_check_pubkey+0x1a0>)
   1a912:	4630      	mov	r0, r6
   1a914:	b006      	add	sp, #24
   1a916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a91a:	4e10      	ldr	r6, [pc, #64]	; (1a95c <mbedtls_ecp_check_pubkey+0x1a4>)
   1a91c:	e793      	b.n	1a846 <mbedtls_ecp_check_pubkey+0x8e>
   1a91e:	a903      	add	r1, sp, #12
   1a920:	2203      	movs	r2, #3
   1a922:	4608      	mov	r0, r1
   1a924:	f7fc fd00 	bl	17328 <mbedtls_mpi_sub_int>
   1a928:	4606      	mov	r6, r0
   1a92a:	2800      	cmp	r0, #0
   1a92c:	d185      	bne.n	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a92e:	e00e      	b.n	1a94e <mbedtls_ecp_check_pubkey+0x196>
   1a930:	2100      	movs	r1, #0
   1a932:	a803      	add	r0, sp, #12
   1a934:	f7fc fa58 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a938:	2800      	cmp	r0, #0
   1a93a:	d0b9      	beq.n	1a8b0 <mbedtls_ecp_check_pubkey+0xf8>
   1a93c:	a903      	add	r1, sp, #12
   1a93e:	4642      	mov	r2, r8
   1a940:	4608      	mov	r0, r1
   1a942:	f7fc fc09 	bl	17158 <mbedtls_mpi_add_mpi>
   1a946:	4606      	mov	r6, r0
   1a948:	2800      	cmp	r0, #0
   1a94a:	f47f af76 	bne.w	1a83a <mbedtls_ecp_check_pubkey+0x82>
   1a94e:	9b03      	ldr	r3, [sp, #12]
   1a950:	2b00      	cmp	r3, #0
   1a952:	dbed      	blt.n	1a930 <mbedtls_ecp_check_pubkey+0x178>
   1a954:	e7ac      	b.n	1a8b0 <mbedtls_ecp_check_pubkey+0xf8>
   1a956:	bf00      	nop
   1a958:	ffffb380 	.word	0xffffb380
   1a95c:	ffffb080 	.word	0xffffb080

0001a960 <mbedtls_ecp_check_pub_priv>:
   1a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a964:	7803      	ldrb	r3, [r0, #0]
   1a966:	b0ab      	sub	sp, #172	; 0xac
   1a968:	2b00      	cmp	r3, #0
   1a96a:	f000 80c4 	beq.w	1aaf6 <mbedtls_ecp_check_pub_priv+0x196>
   1a96e:	780a      	ldrb	r2, [r1, #0]
   1a970:	429a      	cmp	r2, r3
   1a972:	f040 80c0 	bne.w	1aaf6 <mbedtls_ecp_check_pub_priv+0x196>
   1a976:	f101 0788 	add.w	r7, r1, #136	; 0x88
   1a97a:	460c      	mov	r4, r1
   1a97c:	4605      	mov	r5, r0
   1a97e:	4639      	mov	r1, r7
   1a980:	3088      	adds	r0, #136	; 0x88
   1a982:	f7fc f9c9 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a986:	2800      	cmp	r0, #0
   1a988:	f040 80b5 	bne.w	1aaf6 <mbedtls_ecp_check_pub_priv+0x196>
   1a98c:	f104 0994 	add.w	r9, r4, #148	; 0x94
   1a990:	4649      	mov	r1, r9
   1a992:	f105 0094 	add.w	r0, r5, #148	; 0x94
   1a996:	f7fc f9bf 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a99a:	2800      	cmp	r0, #0
   1a99c:	f040 80ab 	bne.w	1aaf6 <mbedtls_ecp_check_pub_priv+0x196>
   1a9a0:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   1a9a4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   1a9a8:	4641      	mov	r1, r8
   1a9aa:	f7fc f9b5 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1a9ae:	4606      	mov	r6, r0
   1a9b0:	2800      	cmp	r0, #0
   1a9b2:	f040 80a0 	bne.w	1aaf6 <mbedtls_ecp_check_pub_priv+0x196>
   1a9b6:	4625      	mov	r5, r4
   1a9b8:	a802      	add	r0, sp, #8
   1a9ba:	f7fb fceb 	bl	16394 <mbedtls_mpi_init>
   1a9be:	a805      	add	r0, sp, #20
   1a9c0:	f7fb fce8 	bl	16394 <mbedtls_mpi_init>
   1a9c4:	a808      	add	r0, sp, #32
   1a9c6:	f7fb fce5 	bl	16394 <mbedtls_mpi_init>
   1a9ca:	4631      	mov	r1, r6
   1a9cc:	227c      	movs	r2, #124	; 0x7c
   1a9ce:	a80b      	add	r0, sp, #44	; 0x2c
   1a9d0:	f00b fa76 	bl	25ec0 <memset>
   1a9d4:	f815 1b7c 	ldrb.w	r1, [r5], #124
   1a9d8:	a80b      	add	r0, sp, #44	; 0x2c
   1a9da:	f000 f89f 	bl	1ab1c <mbedtls_ecp_group_load>
   1a9de:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1a9e2:	2101      	movs	r1, #1
   1a9e4:	3428      	adds	r4, #40	; 0x28
   1a9e6:	f7fc f9ff 	bl	16de8 <mbedtls_mpi_cmp_int>
   1a9ea:	2800      	cmp	r0, #0
   1a9ec:	f040 8081 	bne.w	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1a9f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a9f2:	2b00      	cmp	r3, #0
   1a9f4:	d07d      	beq.n	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1a9f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d07a      	beq.n	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1a9fc:	2101      	movs	r1, #1
   1a9fe:	4628      	mov	r0, r5
   1aa00:	f7fc f9f2 	bl	16de8 <mbedtls_mpi_cmp_int>
   1aa04:	2800      	cmp	r0, #0
   1aa06:	f2c0 8083 	blt.w	1ab10 <mbedtls_ecp_check_pub_priv+0x1b0>
   1aa0a:	a91e      	add	r1, sp, #120	; 0x78
   1aa0c:	4628      	mov	r0, r5
   1aa0e:	f7fc f983 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1aa12:	2800      	cmp	r0, #0
   1aa14:	da7c      	bge.n	1ab10 <mbedtls_ecp_check_pub_priv+0x1b0>
   1aa16:	4621      	mov	r1, r4
   1aa18:	a80b      	add	r0, sp, #44	; 0x2c
   1aa1a:	f7ff fecd 	bl	1a7b8 <mbedtls_ecp_check_pubkey>
   1aa1e:	4606      	mov	r6, r0
   1aa20:	b980      	cbnz	r0, 1aa44 <mbedtls_ecp_check_pub_priv+0xe4>
   1aa22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1aa24:	2b00      	cmp	r3, #0
   1aa26:	d064      	beq.n	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1aa28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1aa2a:	2b00      	cmp	r3, #0
   1aa2c:	d061      	beq.n	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1aa2e:	e9cd 0000 	strd	r0, r0, [sp]
   1aa32:	4623      	mov	r3, r4
   1aa34:	462a      	mov	r2, r5
   1aa36:	a902      	add	r1, sp, #8
   1aa38:	a80b      	add	r0, sp, #44	; 0x2c
   1aa3a:	f7ff fa6b 	bl	19f14 <ecp_mul_comb>
   1aa3e:	4606      	mov	r6, r0
   1aa40:	2800      	cmp	r0, #0
   1aa42:	d04c      	beq.n	1aade <mbedtls_ecp_check_pub_priv+0x17e>
   1aa44:	a802      	add	r0, sp, #8
   1aa46:	f7fb fcad 	bl	163a4 <mbedtls_mpi_free>
   1aa4a:	a805      	add	r0, sp, #20
   1aa4c:	f7fb fcaa 	bl	163a4 <mbedtls_mpi_free>
   1aa50:	a808      	add	r0, sp, #32
   1aa52:	f7fb fca7 	bl	163a4 <mbedtls_mpi_free>
   1aa56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1aa58:	2b01      	cmp	r3, #1
   1aa5a:	d126      	bne.n	1aaaa <mbedtls_ecp_check_pub_priv+0x14a>
   1aa5c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1aa5e:	b1c8      	cbz	r0, 1aa94 <mbedtls_ecp_check_pub_priv+0x134>
   1aa60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1aa62:	b1aa      	cbz	r2, 1aa90 <mbedtls_ecp_check_pub_priv+0x130>
   1aa64:	2500      	movs	r5, #0
   1aa66:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1aa6a:	eb10 0483 	adds.w	r4, r0, r3, lsl #2
   1aa6e:	d032      	beq.n	1aad6 <mbedtls_ecp_check_pub_priv+0x176>
   1aa70:	4620      	mov	r0, r4
   1aa72:	f7fb fc97 	bl	163a4 <mbedtls_mpi_free>
   1aa76:	f104 000c 	add.w	r0, r4, #12
   1aa7a:	f7fb fc93 	bl	163a4 <mbedtls_mpi_free>
   1aa7e:	f104 0018 	add.w	r0, r4, #24
   1aa82:	f7fb fc8f 	bl	163a4 <mbedtls_mpi_free>
   1aa86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1aa88:	3501      	adds	r5, #1
   1aa8a:	4295      	cmp	r5, r2
   1aa8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1aa8e:	d3ea      	bcc.n	1aa66 <mbedtls_ecp_check_pub_priv+0x106>
   1aa90:	f7f9 ff0c 	bl	148ac <nrf_free>
   1aa94:	2200      	movs	r2, #0
   1aa96:	ab0b      	add	r3, sp, #44	; 0x2c
   1aa98:	701a      	strb	r2, [r3, #0]
   1aa9a:	a92a      	add	r1, sp, #168	; 0xa8
   1aa9c:	3301      	adds	r3, #1
   1aa9e:	428b      	cmp	r3, r1
   1aaa0:	d1fa      	bne.n	1aa98 <mbedtls_ecp_check_pub_priv+0x138>
   1aaa2:	4630      	mov	r0, r6
   1aaa4:	b02b      	add	sp, #172	; 0xac
   1aaa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aaaa:	a80c      	add	r0, sp, #48	; 0x30
   1aaac:	f7fb fc7a 	bl	163a4 <mbedtls_mpi_free>
   1aab0:	a80f      	add	r0, sp, #60	; 0x3c
   1aab2:	f7fb fc77 	bl	163a4 <mbedtls_mpi_free>
   1aab6:	a812      	add	r0, sp, #72	; 0x48
   1aab8:	f7fb fc74 	bl	163a4 <mbedtls_mpi_free>
   1aabc:	a815      	add	r0, sp, #84	; 0x54
   1aabe:	f7fb fc71 	bl	163a4 <mbedtls_mpi_free>
   1aac2:	a818      	add	r0, sp, #96	; 0x60
   1aac4:	f7fb fc6e 	bl	163a4 <mbedtls_mpi_free>
   1aac8:	a81b      	add	r0, sp, #108	; 0x6c
   1aaca:	f7fb fc6b 	bl	163a4 <mbedtls_mpi_free>
   1aace:	a81e      	add	r0, sp, #120	; 0x78
   1aad0:	f7fb fc68 	bl	163a4 <mbedtls_mpi_free>
   1aad4:	e7c2      	b.n	1aa5c <mbedtls_ecp_check_pub_priv+0xfc>
   1aad6:	3501      	adds	r5, #1
   1aad8:	4295      	cmp	r5, r2
   1aada:	d3c4      	bcc.n	1aa66 <mbedtls_ecp_check_pub_priv+0x106>
   1aadc:	e7d8      	b.n	1aa90 <mbedtls_ecp_check_pub_priv+0x130>
   1aade:	4639      	mov	r1, r7
   1aae0:	a802      	add	r0, sp, #8
   1aae2:	f7fc f919 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1aae6:	b920      	cbnz	r0, 1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1aae8:	4649      	mov	r1, r9
   1aaea:	a805      	add	r0, sp, #20
   1aaec:	f7fc f914 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1aaf0:	b130      	cbz	r0, 1ab00 <mbedtls_ecp_check_pub_priv+0x1a0>
   1aaf2:	4e08      	ldr	r6, [pc, #32]	; (1ab14 <mbedtls_ecp_check_pub_priv+0x1b4>)
   1aaf4:	e7a6      	b.n	1aa44 <mbedtls_ecp_check_pub_priv+0xe4>
   1aaf6:	4e07      	ldr	r6, [pc, #28]	; (1ab14 <mbedtls_ecp_check_pub_priv+0x1b4>)
   1aaf8:	4630      	mov	r0, r6
   1aafa:	b02b      	add	sp, #172	; 0xac
   1aafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ab00:	4641      	mov	r1, r8
   1ab02:	a808      	add	r0, sp, #32
   1ab04:	f7fc f908 	bl	16d18 <mbedtls_mpi_cmp_mpi>
   1ab08:	4606      	mov	r6, r0
   1ab0a:	2800      	cmp	r0, #0
   1ab0c:	d09a      	beq.n	1aa44 <mbedtls_ecp_check_pub_priv+0xe4>
   1ab0e:	e7f0      	b.n	1aaf2 <mbedtls_ecp_check_pub_priv+0x192>
   1ab10:	4e01      	ldr	r6, [pc, #4]	; (1ab18 <mbedtls_ecp_check_pub_priv+0x1b8>)
   1ab12:	e797      	b.n	1aa44 <mbedtls_ecp_check_pub_priv+0xe4>
   1ab14:	ffffb080 	.word	0xffffb080
   1ab18:	ffffb380 	.word	0xffffb380

0001ab1c <mbedtls_ecp_group_load>:
   1ab1c:	b570      	push	{r4, r5, r6, lr}
   1ab1e:	460d      	mov	r5, r1
   1ab20:	4604      	mov	r4, r0
   1ab22:	f7fe ff59 	bl	199d8 <mbedtls_ecp_group_free>
   1ab26:	2d03      	cmp	r5, #3
   1ab28:	7025      	strb	r5, [r4, #0]
   1ab2a:	d125      	bne.n	1ab78 <mbedtls_ecp_group_load+0x5c>
   1ab2c:	2308      	movs	r3, #8
   1ab2e:	2501      	movs	r5, #1
   1ab30:	4a14      	ldr	r2, [pc, #80]	; (1ab84 <mbedtls_ecp_group_load+0x68>)
   1ab32:	4915      	ldr	r1, [pc, #84]	; (1ab88 <mbedtls_ecp_group_load+0x6c>)
   1ab34:	60a3      	str	r3, [r4, #8]
   1ab36:	6223      	str	r3, [r4, #32]
   1ab38:	6523      	str	r3, [r4, #80]	; 0x50
   1ab3a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ab3c:	63a3      	str	r3, [r4, #56]	; 0x38
   1ab3e:	60e2      	str	r2, [r4, #12]
   1ab40:	4b12      	ldr	r3, [pc, #72]	; (1ab8c <mbedtls_ecp_group_load+0x70>)
   1ab42:	4a13      	ldr	r2, [pc, #76]	; (1ab90 <mbedtls_ecp_group_load+0x74>)
   1ab44:	4e13      	ldr	r6, [pc, #76]	; (1ab94 <mbedtls_ecp_group_load+0x78>)
   1ab46:	4814      	ldr	r0, [pc, #80]	; (1ab98 <mbedtls_ecp_group_load+0x7c>)
   1ab48:	6321      	str	r1, [r4, #48]	; 0x30
   1ab4a:	6560      	str	r0, [r4, #84]	; 0x54
   1ab4c:	63e2      	str	r2, [r4, #60]	; 0x3c
   1ab4e:	64a3      	str	r3, [r4, #72]	; 0x48
   1ab50:	6065      	str	r5, [r4, #4]
   1ab52:	61e5      	str	r5, [r4, #28]
   1ab54:	64e5      	str	r5, [r4, #76]	; 0x4c
   1ab56:	62a5      	str	r5, [r4, #40]	; 0x28
   1ab58:	6365      	str	r5, [r4, #52]	; 0x34
   1ab5a:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
   1ab5e:	6266      	str	r6, [r4, #36]	; 0x24
   1ab60:	1d20      	adds	r0, r4, #4
   1ab62:	f7fb fe71 	bl	16848 <mbedtls_mpi_bitlen>
   1ab66:	65a0      	str	r0, [r4, #88]	; 0x58
   1ab68:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1ab6c:	f7fb fe6c 	bl	16848 <mbedtls_mpi_bitlen>
   1ab70:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
   1ab74:	2000      	movs	r0, #0
   1ab76:	bd70      	pop	{r4, r5, r6, pc}
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f7fe ff2d 	bl	199d8 <mbedtls_ecp_group_free>
   1ab7e:	4807      	ldr	r0, [pc, #28]	; (1ab9c <mbedtls_ecp_group_load+0x80>)
   1ab80:	bd70      	pop	{r4, r5, r6, pc}
   1ab82:	bf00      	nop
   1ab84:	00029fe4 	.word	0x00029fe4
   1ab88:	00029f84 	.word	0x00029f84
   1ab8c:	20028324 	.word	0x20028324
   1ab90:	00029fa4 	.word	0x00029fa4
   1ab94:	00029f64 	.word	0x00029f64
   1ab98:	00029fc4 	.word	0x00029fc4
   1ab9c:	ffffb180 	.word	0xffffb180

0001aba0 <entropy_callback>:
   1aba0:	b538      	push	{r3, r4, r5, lr}
   1aba2:	4c0a      	ldr	r4, [pc, #40]	; (1abcc <entropy_callback+0x2c>)
   1aba4:	4b0a      	ldr	r3, [pc, #40]	; (1abd0 <entropy_callback+0x30>)
   1aba6:	7825      	ldrb	r5, [r4, #0]
   1aba8:	2a07      	cmp	r2, #7
   1abaa:	bf28      	it	cs
   1abac:	2207      	movcs	r2, #7
   1abae:	4608      	mov	r0, r1
   1abb0:	eb03 1145 	add.w	r1, r3, r5, lsl #5
   1abb4:	f00b f957 	bl	25e66 <memcpy>
   1abb8:	7823      	ldrb	r3, [r4, #0]
   1abba:	2000      	movs	r0, #0
   1abbc:	3301      	adds	r3, #1
   1abbe:	b2db      	uxtb	r3, r3
   1abc0:	2b07      	cmp	r3, #7
   1abc2:	bf08      	it	eq
   1abc4:	2300      	moveq	r3, #0
   1abc6:	7023      	strb	r3, [r4, #0]
   1abc8:	bd38      	pop	{r3, r4, r5, pc}
   1abca:	bf00      	nop
   1abcc:	20024042 	.word	0x20024042
   1abd0:	0002a004 	.word	0x0002a004

0001abd4 <es256_key_generate>:
   1abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abd6:	b0e5      	sub	sp, #404	; 0x194
   1abd8:	f89d 71a8 	ldrb.w	r7, [sp, #424]	; 0x1a8
   1abdc:	b158      	cbz	r0, 1abf6 <es256_key_generate+0x22>
   1abde:	b152      	cbz	r2, 1abf6 <es256_key_generate+0x22>
   1abe0:	b14b      	cbz	r3, 1abf6 <es256_key_generate+0x22>
   1abe2:	291f      	cmp	r1, #31
   1abe4:	d907      	bls.n	1abf6 <es256_key_generate+0x22>
   1abe6:	6819      	ldr	r1, [r3, #0]
   1abe8:	293f      	cmp	r1, #63	; 0x3f
   1abea:	d904      	bls.n	1abf6 <es256_key_generate+0x22>
   1abec:	b13f      	cbz	r7, 1abfe <es256_key_generate+0x2a>
   1abee:	2955      	cmp	r1, #85	; 0x55
   1abf0:	d805      	bhi.n	1abfe <es256_key_generate+0x2a>
   1abf2:	240c      	movs	r4, #12
   1abf4:	e000      	b.n	1abf8 <es256_key_generate+0x24>
   1abf6:	2416      	movs	r4, #22
   1abf8:	4620      	mov	r0, r4
   1abfa:	b065      	add	sp, #404	; 0x194
   1abfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abfe:	461d      	mov	r5, r3
   1ac00:	2304      	movs	r3, #4
   1ac02:	2100      	movs	r1, #0
   1ac04:	4604      	mov	r4, r0
   1ac06:	4616      	mov	r6, r2
   1ac08:	a814      	add	r0, sp, #80	; 0x50
   1ac0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ac0e:	f88d 300c 	strb.w	r3, [sp, #12]
   1ac12:	f00b f955 	bl	25ec0 <memset>
   1ac16:	a814      	add	r0, sp, #80	; 0x50
   1ac18:	f7fd ff52 	bl	18ac0 <mbedtls_ctr_drbg_init>
   1ac1c:	2300      	movs	r3, #0
   1ac1e:	4929      	ldr	r1, [pc, #164]	; (1acc4 <es256_key_generate+0xf0>)
   1ac20:	461a      	mov	r2, r3
   1ac22:	a814      	add	r0, sp, #80	; 0x50
   1ac24:	9300      	str	r3, [sp, #0]
   1ac26:	f7fe f84d 	bl	18cc4 <mbedtls_ctr_drbg_seed>
   1ac2a:	a814      	add	r0, sp, #80	; 0x50
   1ac2c:	2220      	movs	r2, #32
   1ac2e:	4621      	mov	r1, r4
   1ac30:	f7fe f870 	bl	18d14 <mbedtls_ctr_drbg_random>
   1ac34:	b9b8      	cbnz	r0, 1ac66 <es256_key_generate+0x92>
   1ac36:	a814      	add	r0, sp, #80	; 0x50
   1ac38:	f7fd ff48 	bl	18acc <mbedtls_ctr_drbg_free>
   1ac3c:	4621      	mov	r1, r4
   1ac3e:	f10d 000d 	add.w	r0, sp, #13
   1ac42:	f00a f825 	bl	24c90 <ocrypto_ecdsa_p256_public_key>
   1ac46:	4604      	mov	r4, r0
   1ac48:	b9b8      	cbnz	r0, 1ac7a <es256_key_generate+0xa6>
   1ac4a:	b1c7      	cbz	r7, 1ac7e <es256_key_generate+0xaa>
   1ac4c:	a814      	add	r0, sp, #80	; 0x50
   1ac4e:	f000 f8f5 	bl	1ae3c <mbedtls_pk_init>
   1ac52:	2002      	movs	r0, #2
   1ac54:	f000 f8f8 	bl	1ae48 <mbedtls_pk_info_from_type>
   1ac58:	4601      	mov	r1, r0
   1ac5a:	a814      	add	r0, sp, #80	; 0x50
   1ac5c:	f000 f902 	bl	1ae64 <mbedtls_pk_setup>
   1ac60:	b1a8      	cbz	r0, 1ac8e <es256_key_generate+0xba>
   1ac62:	240e      	movs	r4, #14
   1ac64:	e7c8      	b.n	1abf8 <es256_key_generate+0x24>
   1ac66:	4a18      	ldr	r2, [pc, #96]	; (1acc8 <es256_key_generate+0xf4>)
   1ac68:	4b18      	ldr	r3, [pc, #96]	; (1accc <es256_key_generate+0xf8>)
   1ac6a:	7811      	ldrb	r1, [r2, #0]
   1ac6c:	4620      	mov	r0, r4
   1ac6e:	2207      	movs	r2, #7
   1ac70:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   1ac74:	f00b f8f7 	bl	25e66 <memcpy>
   1ac78:	e7dd      	b.n	1ac36 <es256_key_generate+0x62>
   1ac7a:	2423      	movs	r4, #35	; 0x23
   1ac7c:	e7bc      	b.n	1abf8 <es256_key_generate+0x24>
   1ac7e:	a903      	add	r1, sp, #12
   1ac80:	1c70      	adds	r0, r6, #1
   1ac82:	2240      	movs	r2, #64	; 0x40
   1ac84:	f00b f8ef 	bl	25e66 <memcpy>
   1ac88:	2341      	movs	r3, #65	; 0x41
   1ac8a:	602b      	str	r3, [r5, #0]
   1ac8c:	e7b4      	b.n	1abf8 <es256_key_generate+0x24>
   1ac8e:	2103      	movs	r1, #3
   1ac90:	9815      	ldr	r0, [sp, #84]	; 0x54
   1ac92:	f7ff ff43 	bl	1ab1c <mbedtls_ecp_group_load>
   1ac96:	2800      	cmp	r0, #0
   1ac98:	d1e3      	bne.n	1ac62 <es256_key_generate+0x8e>
   1ac9a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1ac9c:	aa03      	add	r2, sp, #12
   1ac9e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1aca2:	2341      	movs	r3, #65	; 0x41
   1aca4:	f7ff fd3e 	bl	1a724 <mbedtls_ecp_point_read_binary>
   1aca8:	2800      	cmp	r0, #0
   1acaa:	d1da      	bne.n	1ac62 <es256_key_generate+0x8e>
   1acac:	4631      	mov	r1, r6
   1acae:	a814      	add	r0, sp, #80	; 0x50
   1acb0:	682a      	ldr	r2, [r5, #0]
   1acb2:	f000 f925 	bl	1af00 <mbedtls_pk_write_pubkey_pem>
   1acb6:	23b2      	movs	r3, #178	; 0xb2
   1acb8:	4604      	mov	r4, r0
   1acba:	602b      	str	r3, [r5, #0]
   1acbc:	2800      	cmp	r0, #0
   1acbe:	d09b      	beq.n	1abf8 <es256_key_generate+0x24>
   1acc0:	e7cf      	b.n	1ac62 <es256_key_generate+0x8e>
   1acc2:	bf00      	nop
   1acc4:	0001aba1 	.word	0x0001aba1
   1acc8:	20024042 	.word	0x20024042
   1accc:	0002a004 	.word	0x0002a004

0001acd0 <mbedtls_oid_get_oid_by_pk_alg>:
   1acd0:	2801      	cmp	r0, #1
   1acd2:	b430      	push	{r4, r5}
   1acd4:	4b0a      	ldr	r3, [pc, #40]	; (1ad00 <mbedtls_oid_get_oid_by_pk_alg+0x30>)
   1acd6:	d103      	bne.n	1ace0 <mbedtls_oid_get_oid_by_pk_alg+0x10>
   1acd8:	e00a      	b.n	1acf0 <mbedtls_oid_get_oid_by_pk_alg+0x20>
   1acda:	7c1d      	ldrb	r5, [r3, #16]
   1acdc:	4285      	cmp	r5, r0
   1acde:	d008      	beq.n	1acf2 <mbedtls_oid_get_oid_by_pk_alg+0x22>
   1ace0:	f853 4f14 	ldr.w	r4, [r3, #20]!
   1ace4:	2c00      	cmp	r4, #0
   1ace6:	d1f8      	bne.n	1acda <mbedtls_oid_get_oid_by_pk_alg+0xa>
   1ace8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1acec:	bc30      	pop	{r4, r5}
   1acee:	4770      	bx	lr
   1acf0:	4c04      	ldr	r4, [pc, #16]	; (1ad04 <mbedtls_oid_get_oid_by_pk_alg+0x34>)
   1acf2:	600c      	str	r4, [r1, #0]
   1acf4:	685b      	ldr	r3, [r3, #4]
   1acf6:	2000      	movs	r0, #0
   1acf8:	bc30      	pop	{r4, r5}
   1acfa:	6013      	str	r3, [r2, #0]
   1acfc:	4770      	bx	lr
   1acfe:	bf00      	nop
   1ad00:	0002a124 	.word	0x0002a124
   1ad04:	0002a0f0 	.word	0x0002a0f0

0001ad08 <mbedtls_oid_get_oid_by_ec_grp>:
   1ad08:	2803      	cmp	r0, #3
   1ad0a:	b430      	push	{r4, r5}
   1ad0c:	4b0a      	ldr	r3, [pc, #40]	; (1ad38 <mbedtls_oid_get_oid_by_ec_grp+0x30>)
   1ad0e:	d103      	bne.n	1ad18 <mbedtls_oid_get_oid_by_ec_grp+0x10>
   1ad10:	e00a      	b.n	1ad28 <mbedtls_oid_get_oid_by_ec_grp+0x20>
   1ad12:	7c1d      	ldrb	r5, [r3, #16]
   1ad14:	4285      	cmp	r5, r0
   1ad16:	d008      	beq.n	1ad2a <mbedtls_oid_get_oid_by_ec_grp+0x22>
   1ad18:	f853 4f14 	ldr.w	r4, [r3, #20]!
   1ad1c:	2c00      	cmp	r4, #0
   1ad1e:	d1f8      	bne.n	1ad12 <mbedtls_oid_get_oid_by_ec_grp+0xa>
   1ad20:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   1ad24:	bc30      	pop	{r4, r5}
   1ad26:	4770      	bx	lr
   1ad28:	4c04      	ldr	r4, [pc, #16]	; (1ad3c <mbedtls_oid_get_oid_by_ec_grp+0x34>)
   1ad2a:	600c      	str	r4, [r1, #0]
   1ad2c:	685b      	ldr	r3, [r3, #4]
   1ad2e:	2000      	movs	r0, #0
   1ad30:	bc30      	pop	{r4, r5}
   1ad32:	6013      	str	r3, [r2, #0]
   1ad34:	4770      	bx	lr
   1ad36:	bf00      	nop
   1ad38:	0002a0fc 	.word	0x0002a0fc
   1ad3c:	0002a0e4 	.word	0x0002a0e4

0001ad40 <mbedtls_pem_write_buffer>:
   1ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad44:	460e      	mov	r6, r1
   1ad46:	2100      	movs	r1, #0
   1ad48:	4605      	mov	r5, r0
   1ad4a:	b085      	sub	sp, #20
   1ad4c:	4608      	mov	r0, r1
   1ad4e:	9300      	str	r3, [sp, #0]
   1ad50:	4617      	mov	r7, r2
   1ad52:	461c      	mov	r4, r3
   1ad54:	4613      	mov	r3, r2
   1ad56:	aa03      	add	r2, sp, #12
   1ad58:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   1ad5c:	f7fa ff5e 	bl	15c1c <mbedtls_base64_encode>
   1ad60:	4628      	mov	r0, r5
   1ad62:	f00b f815 	bl	25d90 <strlen>
   1ad66:	4682      	mov	sl, r0
   1ad68:	4630      	mov	r0, r6
   1ad6a:	f00b f811 	bl	25d90 <strlen>
   1ad6e:	9903      	ldr	r1, [sp, #12]
   1ad70:	1c4b      	adds	r3, r1, #1
   1ad72:	eb03 1391 	add.w	r3, r3, r1, lsr #6
   1ad76:	4453      	add	r3, sl
   1ad78:	4418      	add	r0, r3
   1ad7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad7c:	4298      	cmp	r0, r3
   1ad7e:	d853      	bhi.n	1ae28 <mbedtls_pem_write_buffer+0xe8>
   1ad80:	2001      	movs	r0, #1
   1ad82:	f7f9 fd7f 	bl	14884 <nrf_calloc>
   1ad86:	4682      	mov	sl, r0
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	d052      	beq.n	1ae32 <mbedtls_pem_write_buffer+0xf2>
   1ad8c:	9903      	ldr	r1, [sp, #12]
   1ad8e:	9400      	str	r4, [sp, #0]
   1ad90:	463b      	mov	r3, r7
   1ad92:	aa03      	add	r2, sp, #12
   1ad94:	f7fa ff42 	bl	15c1c <mbedtls_base64_encode>
   1ad98:	4680      	mov	r8, r0
   1ad9a:	2800      	cmp	r0, #0
   1ad9c:	d13d      	bne.n	1ae1a <mbedtls_pem_write_buffer+0xda>
   1ad9e:	4628      	mov	r0, r5
   1ada0:	f00a fff6 	bl	25d90 <strlen>
   1ada4:	4629      	mov	r1, r5
   1ada6:	4602      	mov	r2, r0
   1ada8:	4648      	mov	r0, r9
   1adaa:	f00b f85c 	bl	25e66 <memcpy>
   1adae:	4628      	mov	r0, r5
   1adb0:	f00a ffee 	bl	25d90 <strlen>
   1adb4:	9b03      	ldr	r3, [sp, #12]
   1adb6:	eb09 0400 	add.w	r4, r9, r0
   1adba:	b19b      	cbz	r3, 1ade4 <mbedtls_pem_write_buffer+0xa4>
   1adbc:	46d3      	mov	fp, sl
   1adbe:	270a      	movs	r7, #10
   1adc0:	2b40      	cmp	r3, #64	; 0x40
   1adc2:	bf28      	it	cs
   1adc4:	2340      	movcs	r3, #64	; 0x40
   1adc6:	461d      	mov	r5, r3
   1adc8:	4659      	mov	r1, fp
   1adca:	461a      	mov	r2, r3
   1adcc:	4620      	mov	r0, r4
   1adce:	f00b f84a 	bl	25e66 <memcpy>
   1add2:	9b03      	ldr	r3, [sp, #12]
   1add4:	442c      	add	r4, r5
   1add6:	1b5b      	subs	r3, r3, r5
   1add8:	7027      	strb	r7, [r4, #0]
   1adda:	44ab      	add	fp, r5
   1addc:	3401      	adds	r4, #1
   1adde:	9303      	str	r3, [sp, #12]
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d1ed      	bne.n	1adc0 <mbedtls_pem_write_buffer+0x80>
   1ade4:	4630      	mov	r0, r6
   1ade6:	f00a ffd3 	bl	25d90 <strlen>
   1adea:	4631      	mov	r1, r6
   1adec:	4602      	mov	r2, r0
   1adee:	4620      	mov	r0, r4
   1adf0:	f00b f839 	bl	25e66 <memcpy>
   1adf4:	4630      	mov	r0, r6
   1adf6:	f00a ffcb 	bl	25d90 <strlen>
   1adfa:	2100      	movs	r1, #0
   1adfc:	4602      	mov	r2, r0
   1adfe:	1823      	adds	r3, r4, r0
   1ae00:	54a1      	strb	r1, [r4, r2]
   1ae02:	3301      	adds	r3, #1
   1ae04:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ae06:	eba3 0309 	sub.w	r3, r3, r9
   1ae0a:	4650      	mov	r0, sl
   1ae0c:	6013      	str	r3, [r2, #0]
   1ae0e:	f7f9 fd4d 	bl	148ac <nrf_free>
   1ae12:	4640      	mov	r0, r8
   1ae14:	b005      	add	sp, #20
   1ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae1a:	4650      	mov	r0, sl
   1ae1c:	f7f9 fd46 	bl	148ac <nrf_free>
   1ae20:	4640      	mov	r0, r8
   1ae22:	b005      	add	sp, #20
   1ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ae2a:	f06f 0829 	mvn.w	r8, #41	; 0x29
   1ae2e:	6018      	str	r0, [r3, #0]
   1ae30:	e7ef      	b.n	1ae12 <mbedtls_pem_write_buffer+0xd2>
   1ae32:	f8df 8004 	ldr.w	r8, [pc, #4]	; 1ae38 <mbedtls_pem_write_buffer+0xf8>
   1ae36:	e7ec      	b.n	1ae12 <mbedtls_pem_write_buffer+0xd2>
   1ae38:	ffffee80 	.word	0xffffee80

0001ae3c <mbedtls_pk_init>:
   1ae3c:	b110      	cbz	r0, 1ae44 <mbedtls_pk_init+0x8>
   1ae3e:	2300      	movs	r3, #0
   1ae40:	e9c0 3300 	strd	r3, r3, [r0]
   1ae44:	4770      	bx	lr
   1ae46:	bf00      	nop

0001ae48 <mbedtls_pk_info_from_type>:
   1ae48:	2802      	cmp	r0, #2
   1ae4a:	d005      	beq.n	1ae58 <mbedtls_pk_info_from_type+0x10>
   1ae4c:	4b03      	ldr	r3, [pc, #12]	; (1ae5c <mbedtls_pk_info_from_type+0x14>)
   1ae4e:	2803      	cmp	r0, #3
   1ae50:	bf0c      	ite	eq
   1ae52:	4618      	moveq	r0, r3
   1ae54:	2000      	movne	r0, #0
   1ae56:	4770      	bx	lr
   1ae58:	4801      	ldr	r0, [pc, #4]	; (1ae60 <mbedtls_pk_info_from_type+0x18>)
   1ae5a:	4770      	bx	lr
   1ae5c:	0002a214 	.word	0x0002a214
   1ae60:	0002a1e4 	.word	0x0002a1e4

0001ae64 <mbedtls_pk_setup>:
   1ae64:	b160      	cbz	r0, 1ae80 <mbedtls_pk_setup+0x1c>
   1ae66:	b159      	cbz	r1, 1ae80 <mbedtls_pk_setup+0x1c>
   1ae68:	b570      	push	{r4, r5, r6, lr}
   1ae6a:	6806      	ldr	r6, [r0, #0]
   1ae6c:	b966      	cbnz	r6, 1ae88 <mbedtls_pk_setup+0x24>
   1ae6e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1ae70:	4604      	mov	r4, r0
   1ae72:	460d      	mov	r5, r1
   1ae74:	4798      	blx	r3
   1ae76:	6060      	str	r0, [r4, #4]
   1ae78:	b120      	cbz	r0, 1ae84 <mbedtls_pk_setup+0x20>
   1ae7a:	6025      	str	r5, [r4, #0]
   1ae7c:	4630      	mov	r0, r6
   1ae7e:	bd70      	pop	{r4, r5, r6, pc}
   1ae80:	4802      	ldr	r0, [pc, #8]	; (1ae8c <mbedtls_pk_setup+0x28>)
   1ae82:	4770      	bx	lr
   1ae84:	4802      	ldr	r0, [pc, #8]	; (1ae90 <mbedtls_pk_setup+0x2c>)
   1ae86:	bd70      	pop	{r4, r5, r6, pc}
   1ae88:	4800      	ldr	r0, [pc, #0]	; (1ae8c <mbedtls_pk_setup+0x28>)
   1ae8a:	bd70      	pop	{r4, r5, r6, pc}
   1ae8c:	ffffc180 	.word	0xffffc180
   1ae90:	ffffc080 	.word	0xffffc080

0001ae94 <mbedtls_pk_get_type>:
   1ae94:	b110      	cbz	r0, 1ae9c <mbedtls_pk_get_type+0x8>
   1ae96:	6800      	ldr	r0, [r0, #0]
   1ae98:	b100      	cbz	r0, 1ae9c <mbedtls_pk_get_type+0x8>
   1ae9a:	7800      	ldrb	r0, [r0, #0]
   1ae9c:	4770      	bx	lr
   1ae9e:	bf00      	nop

0001aea0 <eckey_can_do>:
   1aea0:	3802      	subs	r0, #2
   1aea2:	2802      	cmp	r0, #2
   1aea4:	bf8c      	ite	hi
   1aea6:	2000      	movhi	r0, #0
   1aea8:	2001      	movls	r0, #1
   1aeaa:	4770      	bx	lr

0001aeac <eckey_get_bitlen>:
   1aeac:	6d80      	ldr	r0, [r0, #88]	; 0x58
   1aeae:	4770      	bx	lr

0001aeb0 <eckey_debug>:
   1aeb0:	2202      	movs	r2, #2
   1aeb2:	4b03      	ldr	r3, [pc, #12]	; (1aec0 <eckey_debug+0x10>)
   1aeb4:	3088      	adds	r0, #136	; 0x88
   1aeb6:	6088      	str	r0, [r1, #8]
   1aeb8:	700a      	strb	r2, [r1, #0]
   1aeba:	604b      	str	r3, [r1, #4]
   1aebc:	4770      	bx	lr
   1aebe:	bf00      	nop
   1aec0:	0002a1dc 	.word	0x0002a1dc

0001aec4 <eckeydh_can_do>:
   1aec4:	3802      	subs	r0, #2
   1aec6:	2801      	cmp	r0, #1
   1aec8:	bf8c      	ite	hi
   1aeca:	2000      	movhi	r0, #0
   1aecc:	2001      	movls	r0, #1
   1aece:	4770      	bx	lr

0001aed0 <eckey_free_wrap>:
   1aed0:	b510      	push	{r4, lr}
   1aed2:	4604      	mov	r4, r0
   1aed4:	f7fe fdcc 	bl	19a70 <mbedtls_ecp_keypair_free>
   1aed8:	4620      	mov	r0, r4
   1aeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aede:	f7f9 bce5 	b.w	148ac <nrf_free>
   1aee2:	bf00      	nop

0001aee4 <eckey_alloc_wrap>:
   1aee4:	b510      	push	{r4, lr}
   1aee6:	21ac      	movs	r1, #172	; 0xac
   1aee8:	2001      	movs	r0, #1
   1aeea:	f7f9 fccb 	bl	14884 <nrf_calloc>
   1aeee:	4604      	mov	r4, r0
   1aef0:	b108      	cbz	r0, 1aef6 <eckey_alloc_wrap+0x12>
   1aef2:	f7fe fd57 	bl	199a4 <mbedtls_ecp_keypair_init>
   1aef6:	4620      	mov	r0, r4
   1aef8:	bd10      	pop	{r4, pc}
   1aefa:	bf00      	nop

0001aefc <eckey_check_pair>:
   1aefc:	f7ff bd30 	b.w	1a960 <mbedtls_ecp_check_pub_priv>

0001af00 <mbedtls_pk_write_pubkey_pem>:
   1af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af04:	2400      	movs	r4, #0
   1af06:	b0d7      	sub	sp, #348	; 0x15c
   1af08:	f50d 73ab 	add.w	r3, sp, #342	; 0x156
   1af0c:	4688      	mov	r8, r1
   1af0e:	4691      	mov	r9, r2
   1af10:	e9cd 4306 	strd	r4, r3, [sp, #24]
   1af14:	4607      	mov	r7, r0
   1af16:	f7ff ffbd 	bl	1ae94 <mbedtls_pk_get_type>
   1af1a:	2802      	cmp	r0, #2
   1af1c:	d159      	bne.n	1afd2 <mbedtls_pk_write_pubkey_pem+0xd2>
   1af1e:	2385      	movs	r3, #133	; 0x85
   1af20:	6878      	ldr	r0, [r7, #4]
   1af22:	ae0b      	add	r6, sp, #44	; 0x2c
   1af24:	9301      	str	r3, [sp, #4]
   1af26:	4622      	mov	r2, r4
   1af28:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1af2c:	9600      	str	r6, [sp, #0]
   1af2e:	ab0a      	add	r3, sp, #40	; 0x28
   1af30:	940a      	str	r4, [sp, #40]	; 0x28
   1af32:	f7ff fba5 	bl	1a680 <mbedtls_ecp_point_write_binary>
   1af36:	ad2d      	add	r5, sp, #180	; 0xb4
   1af38:	4604      	mov	r4, r0
   1af3a:	b968      	cbnz	r0, 1af58 <mbedtls_pk_write_pubkey_pem+0x58>
   1af3c:	9807      	ldr	r0, [sp, #28]
   1af3e:	42a8      	cmp	r0, r5
   1af40:	d37f      	bcc.n	1b042 <mbedtls_pk_write_pubkey_pem+0x142>
   1af42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af44:	1b43      	subs	r3, r0, r5
   1af46:	4293      	cmp	r3, r2
   1af48:	d37b      	bcc.n	1b042 <mbedtls_pk_write_pubkey_pem+0x142>
   1af4a:	1a83      	subs	r3, r0, r2
   1af4c:	4618      	mov	r0, r3
   1af4e:	4631      	mov	r1, r6
   1af50:	9307      	str	r3, [sp, #28]
   1af52:	f00a ff88 	bl	25e66 <memcpy>
   1af56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1af58:	2c00      	cmp	r4, #0
   1af5a:	db31      	blt.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1af5c:	9b07      	ldr	r3, [sp, #28]
   1af5e:	1b5a      	subs	r2, r3, r5
   1af60:	2a00      	cmp	r2, #0
   1af62:	dd6e      	ble.n	1b042 <mbedtls_pk_write_pubkey_pem+0x142>
   1af64:	2100      	movs	r1, #0
   1af66:	1e5a      	subs	r2, r3, #1
   1af68:	f104 0a01 	add.w	sl, r4, #1
   1af6c:	9207      	str	r2, [sp, #28]
   1af6e:	a807      	add	r0, sp, #28
   1af70:	f803 1c01 	strb.w	r1, [r3, #-1]
   1af74:	4652      	mov	r2, sl
   1af76:	4629      	mov	r1, r5
   1af78:	f7fa fcea 	bl	15950 <mbedtls_asn1_write_len>
   1af7c:	1e04      	subs	r4, r0, #0
   1af7e:	db1f      	blt.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1af80:	2203      	movs	r2, #3
   1af82:	4629      	mov	r1, r5
   1af84:	a807      	add	r0, sp, #28
   1af86:	f7fa fd5d 	bl	15a44 <mbedtls_asn1_write_tag>
   1af8a:	f1b0 0b00 	subs.w	fp, r0, #0
   1af8e:	db1b      	blt.n	1afc8 <mbedtls_pk_write_pubkey_pem+0xc8>
   1af90:	4638      	mov	r0, r7
   1af92:	f7ff ff7f 	bl	1ae94 <mbedtls_pk_get_type>
   1af96:	aa08      	add	r2, sp, #32
   1af98:	a909      	add	r1, sp, #36	; 0x24
   1af9a:	f7ff fe99 	bl	1acd0 <mbedtls_oid_get_oid_by_pk_alg>
   1af9e:	4603      	mov	r3, r0
   1afa0:	b1c8      	cbz	r0, 1afd6 <mbedtls_pk_write_pubkey_pem+0xd6>
   1afa2:	2b00      	cmp	r3, #0
   1afa4:	db50      	blt.n	1b048 <mbedtls_pk_write_pubkey_pem+0x148>
   1afa6:	f1c3 02a2 	rsb	r2, r3, #162	; 0xa2
   1afaa:	a906      	add	r1, sp, #24
   1afac:	e9cd 9101 	strd	r9, r1, [sp, #4]
   1afb0:	f8cd 8000 	str.w	r8, [sp]
   1afb4:	442a      	add	r2, r5
   1afb6:	4925      	ldr	r1, [pc, #148]	; (1b04c <mbedtls_pk_write_pubkey_pem+0x14c>)
   1afb8:	4825      	ldr	r0, [pc, #148]	; (1b050 <mbedtls_pk_write_pubkey_pem+0x150>)
   1afba:	f7ff fec1 	bl	1ad40 <mbedtls_pem_write_buffer>
   1afbe:	4604      	mov	r4, r0
   1afc0:	4620      	mov	r0, r4
   1afc2:	b057      	add	sp, #348	; 0x15c
   1afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc8:	465c      	mov	r4, fp
   1afca:	4620      	mov	r0, r4
   1afcc:	b057      	add	sp, #348	; 0x15c
   1afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd2:	4c20      	ldr	r4, [pc, #128]	; (1b054 <mbedtls_pk_write_pubkey_pem+0x154>)
   1afd4:	e7f4      	b.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1afd6:	9005      	str	r0, [sp, #20]
   1afd8:	4638      	mov	r0, r7
   1afda:	f7ff ff5b 	bl	1ae94 <mbedtls_pk_get_type>
   1afde:	2802      	cmp	r0, #2
   1afe0:	9b05      	ldr	r3, [sp, #20]
   1afe2:	d01d      	beq.n	1b020 <mbedtls_pk_write_pubkey_pem+0x120>
   1afe4:	4618      	mov	r0, r3
   1afe6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   1afea:	9000      	str	r0, [sp, #0]
   1afec:	4629      	mov	r1, r5
   1afee:	a807      	add	r0, sp, #28
   1aff0:	f7fa fd7e 	bl	15af0 <mbedtls_asn1_write_algorithm_identifier>
   1aff4:	2800      	cmp	r0, #0
   1aff6:	db22      	blt.n	1b03e <mbedtls_pk_write_pubkey_pem+0x13e>
   1aff8:	4454      	add	r4, sl
   1affa:	44a3      	add	fp, r4
   1affc:	4483      	add	fp, r0
   1affe:	465a      	mov	r2, fp
   1b000:	4629      	mov	r1, r5
   1b002:	a807      	add	r0, sp, #28
   1b004:	f7fa fca4 	bl	15950 <mbedtls_asn1_write_len>
   1b008:	1e04      	subs	r4, r0, #0
   1b00a:	dbd9      	blt.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1b00c:	a807      	add	r0, sp, #28
   1b00e:	2230      	movs	r2, #48	; 0x30
   1b010:	4629      	mov	r1, r5
   1b012:	f7fa fd17 	bl	15a44 <mbedtls_asn1_write_tag>
   1b016:	1e03      	subs	r3, r0, #0
   1b018:	db16      	blt.n	1b048 <mbedtls_pk_write_pubkey_pem+0x148>
   1b01a:	44a3      	add	fp, r4
   1b01c:	445b      	add	r3, fp
   1b01e:	e7c0      	b.n	1afa2 <mbedtls_pk_write_pubkey_pem+0xa2>
   1b020:	687b      	ldr	r3, [r7, #4]
   1b022:	4632      	mov	r2, r6
   1b024:	7818      	ldrb	r0, [r3, #0]
   1b026:	a90a      	add	r1, sp, #40	; 0x28
   1b028:	f7ff fe6e 	bl	1ad08 <mbedtls_oid_get_oid_by_ec_grp>
   1b02c:	b928      	cbnz	r0, 1b03a <mbedtls_pk_write_pubkey_pem+0x13a>
   1b02e:	6833      	ldr	r3, [r6, #0]
   1b030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b032:	4629      	mov	r1, r5
   1b034:	a807      	add	r0, sp, #28
   1b036:	f7fa fd13 	bl	15a60 <mbedtls_asn1_write_oid>
   1b03a:	2800      	cmp	r0, #0
   1b03c:	dad3      	bge.n	1afe6 <mbedtls_pk_write_pubkey_pem+0xe6>
   1b03e:	4604      	mov	r4, r0
   1b040:	e7be      	b.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1b042:	f06f 046b 	mvn.w	r4, #107	; 0x6b
   1b046:	e7bb      	b.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1b048:	461c      	mov	r4, r3
   1b04a:	e7b9      	b.n	1afc0 <mbedtls_pk_write_pubkey_pem+0xc0>
   1b04c:	0002a250 	.word	0x0002a250
   1b050:	0002a26c 	.word	0x0002a26c
   1b054:	ffffc680 	.word	0xffffc680

0001b058 <mbedtls_platform_zeroize>:
   1b058:	4b02      	ldr	r3, [pc, #8]	; (1b064 <mbedtls_platform_zeroize+0xc>)
   1b05a:	460a      	mov	r2, r1
   1b05c:	681b      	ldr	r3, [r3, #0]
   1b05e:	2100      	movs	r1, #0
   1b060:	4718      	bx	r3
   1b062:	bf00      	nop
   1b064:	20028328 	.word	0x20028328

0001b068 <datagram_handler_init>:
   1b068:	b510      	push	{r4, lr}
   1b06a:	4604      	mov	r4, r0
   1b06c:	200c      	movs	r0, #12
   1b06e:	f7f9 fbff 	bl	14870 <nrf_malloc>
   1b072:	60e0      	str	r0, [r4, #12]
   1b074:	b118      	cbz	r0, 1b07e <datagram_handler_init+0x16>
   1b076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b07a:	f006 bc53 	b.w	21924 <linked_list_init>
   1b07e:	2004      	movs	r0, #4
   1b080:	bd10      	pop	{r4, pc}
   1b082:	bf00      	nop

0001b084 <datagram_handler_put>:
   1b084:	b570      	push	{r4, r5, r6, lr}
   1b086:	4606      	mov	r6, r0
   1b088:	2014      	movs	r0, #20
   1b08a:	460d      	mov	r5, r1
   1b08c:	f7f9 fbf0 	bl	14870 <nrf_malloc>
   1b090:	b178      	cbz	r0, 1b0b2 <datagram_handler_put+0x2e>
   1b092:	682b      	ldr	r3, [r5, #0]
   1b094:	4604      	mov	r4, r0
   1b096:	6043      	str	r3, [r0, #4]
   1b098:	686b      	ldr	r3, [r5, #4]
   1b09a:	4601      	mov	r1, r0
   1b09c:	6083      	str	r3, [r0, #8]
   1b09e:	68eb      	ldr	r3, [r5, #12]
   1b0a0:	60c3      	str	r3, [r0, #12]
   1b0a2:	68ab      	ldr	r3, [r5, #8]
   1b0a4:	6103      	str	r3, [r0, #16]
   1b0a6:	68f0      	ldr	r0, [r6, #12]
   1b0a8:	f006 fc46 	bl	21938 <linked_list_push>
   1b0ac:	b920      	cbnz	r0, 1b0b8 <datagram_handler_put+0x34>
   1b0ae:	6868      	ldr	r0, [r5, #4]
   1b0b0:	bd70      	pop	{r4, r5, r6, pc}
   1b0b2:	f04f 30ff 	mov.w	r0, #4294967295
   1b0b6:	bd70      	pop	{r4, r5, r6, pc}
   1b0b8:	4620      	mov	r0, r4
   1b0ba:	f7f9 fbf7 	bl	148ac <nrf_free>
   1b0be:	f04f 30ff 	mov.w	r0, #4294967295
   1b0c2:	bd70      	pop	{r4, r5, r6, pc}

0001b0c4 <datagram_handler_get>:
   1b0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0c6:	4606      	mov	r6, r0
   1b0c8:	b085      	sub	sp, #20
   1b0ca:	68c0      	ldr	r0, [r0, #12]
   1b0cc:	460c      	mov	r4, r1
   1b0ce:	4617      	mov	r7, r2
   1b0d0:	f006 fc52 	bl	21978 <linked_list_peek>
   1b0d4:	2800      	cmp	r0, #0
   1b0d6:	d037      	beq.n	1b148 <datagram_handler_get+0x84>
   1b0d8:	6882      	ldr	r2, [r0, #8]
   1b0da:	4605      	mov	r5, r0
   1b0dc:	e9d4 0300 	ldrd	r0, r3, [r4]
   1b0e0:	429a      	cmp	r2, r3
   1b0e2:	bf28      	it	cs
   1b0e4:	461a      	movcs	r2, r3
   1b0e6:	6062      	str	r2, [r4, #4]
   1b0e8:	b110      	cbz	r0, 1b0f0 <datagram_handler_get+0x2c>
   1b0ea:	6869      	ldr	r1, [r5, #4]
   1b0ec:	f00a febb 	bl	25e66 <memcpy>
   1b0f0:	68a0      	ldr	r0, [r4, #8]
   1b0f2:	b118      	cbz	r0, 1b0fc <datagram_handler_get+0x38>
   1b0f4:	692b      	ldr	r3, [r5, #16]
   1b0f6:	b10b      	cbz	r3, 1b0fc <datagram_handler_get+0x38>
   1b0f8:	68ea      	ldr	r2, [r5, #12]
   1b0fa:	b9e2      	cbnz	r2, 1b136 <datagram_handler_get+0x72>
   1b0fc:	2300      	movs	r3, #0
   1b0fe:	60e3      	str	r3, [r4, #12]
   1b100:	073b      	lsls	r3, r7, #28
   1b102:	d502      	bpl.n	1b10a <datagram_handler_get+0x46>
   1b104:	6860      	ldr	r0, [r4, #4]
   1b106:	b005      	add	sp, #20
   1b108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b10a:	68f0      	ldr	r0, [r6, #12]
   1b10c:	f006 fc2a 	bl	21964 <linked_list_pop>
   1b110:	4605      	mov	r5, r0
   1b112:	2800      	cmp	r0, #0
   1b114:	d0f6      	beq.n	1b104 <datagram_handler_get+0x40>
   1b116:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1b11a:	6902      	ldr	r2, [r0, #16]
   1b11c:	9300      	str	r3, [sp, #0]
   1b11e:	68c3      	ldr	r3, [r0, #12]
   1b120:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1b124:	9303      	str	r3, [sp, #12]
   1b126:	4668      	mov	r0, sp
   1b128:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   1b12c:	4798      	blx	r3
   1b12e:	4628      	mov	r0, r5
   1b130:	f7f9 fbbc 	bl	148ac <nrf_free>
   1b134:	e7e6      	b.n	1b104 <datagram_handler_get+0x40>
   1b136:	68e3      	ldr	r3, [r4, #12]
   1b138:	429a      	cmp	r2, r3
   1b13a:	bf28      	it	cs
   1b13c:	461a      	movcs	r2, r3
   1b13e:	60e2      	str	r2, [r4, #12]
   1b140:	6929      	ldr	r1, [r5, #16]
   1b142:	f00a fe90 	bl	25e66 <memcpy>
   1b146:	e7db      	b.n	1b100 <datagram_handler_get+0x3c>
   1b148:	f04f 30ff 	mov.w	r0, #4294967295
   1b14c:	e7db      	b.n	1b106 <datagram_handler_get+0x42>
   1b14e:	bf00      	nop

0001b150 <datagram_handler_available>:
   1b150:	b508      	push	{r3, lr}
   1b152:	68c0      	ldr	r0, [r0, #12]
   1b154:	f006 fc10 	bl	21978 <linked_list_peek>
   1b158:	b108      	cbz	r0, 1b15e <datagram_handler_available+0xe>
   1b15a:	6880      	ldr	r0, [r0, #8]
   1b15c:	bd08      	pop	{r3, pc}
   1b15e:	f04f 30ff 	mov.w	r0, #4294967295
   1b162:	bd08      	pop	{r3, pc}

0001b164 <datagram_handler_flush>:
   1b164:	b530      	push	{r4, r5, lr}
   1b166:	4605      	mov	r5, r0
   1b168:	68c0      	ldr	r0, [r0, #12]
   1b16a:	b085      	sub	sp, #20
   1b16c:	b9a8      	cbnz	r0, 1b19a <datagram_handler_flush+0x36>
   1b16e:	e01a      	b.n	1b1a6 <datagram_handler_flush+0x42>
   1b170:	68e8      	ldr	r0, [r5, #12]
   1b172:	f006 fbf7 	bl	21964 <linked_list_pop>
   1b176:	4604      	mov	r4, r0
   1b178:	b170      	cbz	r0, 1b198 <datagram_handler_flush+0x34>
   1b17a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1b17e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1b182:	e9cd 0100 	strd	r0, r1, [sp]
   1b186:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b18a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1b18e:	4668      	mov	r0, sp
   1b190:	4798      	blx	r3
   1b192:	4620      	mov	r0, r4
   1b194:	f7f9 fb8a 	bl	148ac <nrf_free>
   1b198:	68e8      	ldr	r0, [r5, #12]
   1b19a:	f006 fbf3 	bl	21984 <linked_list_size_get>
   1b19e:	2800      	cmp	r0, #0
   1b1a0:	d1e6      	bne.n	1b170 <datagram_handler_flush+0xc>
   1b1a2:	b005      	add	sp, #20
   1b1a4:	bd30      	pop	{r4, r5, pc}
   1b1a6:	2008      	movs	r0, #8
   1b1a8:	b005      	add	sp, #20
   1b1aa:	bd30      	pop	{r4, r5, pc}

0001b1ac <datagram_handler_free>:
   1b1ac:	b530      	push	{r4, r5, lr}
   1b1ae:	4605      	mov	r5, r0
   1b1b0:	68c0      	ldr	r0, [r0, #12]
   1b1b2:	b085      	sub	sp, #20
   1b1b4:	b9a0      	cbnz	r0, 1b1e0 <datagram_handler_free+0x34>
   1b1b6:	e01c      	b.n	1b1f2 <datagram_handler_free+0x46>
   1b1b8:	f006 fbd4 	bl	21964 <linked_list_pop>
   1b1bc:	4604      	mov	r4, r0
   1b1be:	b170      	cbz	r0, 1b1de <datagram_handler_free+0x32>
   1b1c0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1b1c4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1b1c8:	e9cd 0100 	strd	r0, r1, [sp]
   1b1cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b1d0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1b1d4:	4668      	mov	r0, sp
   1b1d6:	4798      	blx	r3
   1b1d8:	4620      	mov	r0, r4
   1b1da:	f7f9 fb67 	bl	148ac <nrf_free>
   1b1de:	68e8      	ldr	r0, [r5, #12]
   1b1e0:	f006 fbd0 	bl	21984 <linked_list_size_get>
   1b1e4:	4604      	mov	r4, r0
   1b1e6:	68e8      	ldr	r0, [r5, #12]
   1b1e8:	2c00      	cmp	r4, #0
   1b1ea:	d1e5      	bne.n	1b1b8 <datagram_handler_free+0xc>
   1b1ec:	f7f9 fb5e 	bl	148ac <nrf_free>
   1b1f0:	60ec      	str	r4, [r5, #12]
   1b1f2:	b005      	add	sp, #20
   1b1f4:	bd30      	pop	{r4, r5, pc}
   1b1f6:	bf00      	nop

0001b1f8 <null_handler_init>:
   1b1f8:	2000      	movs	r0, #0
   1b1fa:	4770      	bx	lr

0001b1fc <null_handler_put>:
   1b1fc:	b510      	push	{r4, lr}
   1b1fe:	460c      	mov	r4, r1
   1b200:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1b204:	4620      	mov	r0, r4
   1b206:	4798      	blx	r3
   1b208:	6860      	ldr	r0, [r4, #4]
   1b20a:	bd10      	pop	{r4, pc}

0001b20c <null_handler_get>:
   1b20c:	f04f 30ff 	mov.w	r0, #4294967295
   1b210:	4770      	bx	lr
   1b212:	bf00      	nop

0001b214 <null_handler_available>:
   1b214:	f04f 30ff 	mov.w	r0, #4294967295
   1b218:	4770      	bx	lr
   1b21a:	bf00      	nop

0001b21c <null_handler_flush>:
   1b21c:	2000      	movs	r0, #0
   1b21e:	4770      	bx	lr

0001b220 <null_handler_free>:
   1b220:	4770      	bx	lr
   1b222:	bf00      	nop

0001b224 <packet_handler_create>:
   1b224:	2801      	cmp	r0, #1
   1b226:	b538      	push	{r3, r4, r5, lr}
   1b228:	460d      	mov	r5, r1
   1b22a:	4614      	mov	r4, r2
   1b22c:	d011      	beq.n	1b252 <packet_handler_create+0x2e>
   1b22e:	2802      	cmp	r0, #2
   1b230:	d10a      	bne.n	1b248 <packet_handler_create+0x24>
   1b232:	2010      	movs	r0, #16
   1b234:	f7f9 fb1c 	bl	14870 <nrf_malloc>
   1b238:	2218      	movs	r2, #24
   1b23a:	b120      	cbz	r0, 1b246 <packet_handler_create+0x22>
   1b23c:	4b07      	ldr	r3, [pc, #28]	; (1b25c <packet_handler_create+0x38>)
   1b23e:	6045      	str	r5, [r0, #4]
   1b240:	4413      	add	r3, r2
   1b242:	6084      	str	r4, [r0, #8]
   1b244:	6003      	str	r3, [r0, #0]
   1b246:	bd38      	pop	{r3, r4, r5, pc}
   1b248:	200c      	movs	r0, #12
   1b24a:	f7f9 fb11 	bl	14870 <nrf_malloc>
   1b24e:	2200      	movs	r2, #0
   1b250:	e7f3      	b.n	1b23a <packet_handler_create+0x16>
   1b252:	2014      	movs	r0, #20
   1b254:	f7f9 fb0c 	bl	14870 <nrf_malloc>
   1b258:	2230      	movs	r2, #48	; 0x30
   1b25a:	e7ee      	b.n	1b23a <packet_handler_create+0x16>
   1b25c:	0002a288 	.word	0x0002a288

0001b260 <packet_handler_delete>:
   1b260:	b510      	push	{r4, lr}
   1b262:	4604      	mov	r4, r0
   1b264:	6803      	ldr	r3, [r0, #0]
   1b266:	691b      	ldr	r3, [r3, #16]
   1b268:	4798      	blx	r3
   1b26a:	6823      	ldr	r3, [r4, #0]
   1b26c:	4620      	mov	r0, r4
   1b26e:	695b      	ldr	r3, [r3, #20]
   1b270:	4798      	blx	r3
   1b272:	4620      	mov	r0, r4
   1b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b278:	f7f9 bb18 	b.w	148ac <nrf_free>

0001b27c <stream_handler_init>:
   1b27c:	b510      	push	{r4, lr}
   1b27e:	4604      	mov	r4, r0
   1b280:	200c      	movs	r0, #12
   1b282:	f7f9 faf5 	bl	14870 <nrf_malloc>
   1b286:	60e0      	str	r0, [r4, #12]
   1b288:	b128      	cbz	r0, 1b296 <stream_handler_init+0x1a>
   1b28a:	2300      	movs	r3, #0
   1b28c:	6123      	str	r3, [r4, #16]
   1b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b292:	f006 bb47 	b.w	21924 <linked_list_init>
   1b296:	2004      	movs	r0, #4
   1b298:	bd10      	pop	{r4, pc}
   1b29a:	bf00      	nop

0001b29c <stream_handler_put>:
   1b29c:	b570      	push	{r4, r5, r6, lr}
   1b29e:	4606      	mov	r6, r0
   1b2a0:	2014      	movs	r0, #20
   1b2a2:	460d      	mov	r5, r1
   1b2a4:	f7f9 fae4 	bl	14870 <nrf_malloc>
   1b2a8:	b178      	cbz	r0, 1b2ca <stream_handler_put+0x2e>
   1b2aa:	682b      	ldr	r3, [r5, #0]
   1b2ac:	4604      	mov	r4, r0
   1b2ae:	6043      	str	r3, [r0, #4]
   1b2b0:	686b      	ldr	r3, [r5, #4]
   1b2b2:	4601      	mov	r1, r0
   1b2b4:	6083      	str	r3, [r0, #8]
   1b2b6:	68eb      	ldr	r3, [r5, #12]
   1b2b8:	60c3      	str	r3, [r0, #12]
   1b2ba:	68ab      	ldr	r3, [r5, #8]
   1b2bc:	6103      	str	r3, [r0, #16]
   1b2be:	68f0      	ldr	r0, [r6, #12]
   1b2c0:	f006 fb3a 	bl	21938 <linked_list_push>
   1b2c4:	b920      	cbnz	r0, 1b2d0 <stream_handler_put+0x34>
   1b2c6:	6868      	ldr	r0, [r5, #4]
   1b2c8:	bd70      	pop	{r4, r5, r6, pc}
   1b2ca:	f04f 30ff 	mov.w	r0, #4294967295
   1b2ce:	bd70      	pop	{r4, r5, r6, pc}
   1b2d0:	4620      	mov	r0, r4
   1b2d2:	f7f9 faeb 	bl	148ac <nrf_free>
   1b2d6:	f04f 30ff 	mov.w	r0, #4294967295
   1b2da:	bd70      	pop	{r4, r5, r6, pc}

0001b2dc <stream_handler_get>:
   1b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e0:	4682      	mov	sl, r0
   1b2e2:	b087      	sub	sp, #28
   1b2e4:	68c0      	ldr	r0, [r0, #12]
   1b2e6:	4689      	mov	r9, r1
   1b2e8:	4693      	mov	fp, r2
   1b2ea:	f006 fb45 	bl	21978 <linked_list_peek>
   1b2ee:	2800      	cmp	r0, #0
   1b2f0:	d072      	beq.n	1b3d8 <stream_handler_get+0xfc>
   1b2f2:	4605      	mov	r5, r0
   1b2f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1b2f8:	b120      	cbz	r0, 1b304 <stream_handler_get+0x28>
   1b2fa:	692b      	ldr	r3, [r5, #16]
   1b2fc:	b113      	cbz	r3, 1b304 <stream_handler_get+0x28>
   1b2fe:	68ea      	ldr	r2, [r5, #12]
   1b300:	2a00      	cmp	r2, #0
   1b302:	d15c      	bne.n	1b3be <stream_handler_get+0xe2>
   1b304:	2300      	movs	r3, #0
   1b306:	f8c9 300c 	str.w	r3, [r9, #12]
   1b30a:	f8d9 2000 	ldr.w	r2, [r9]
   1b30e:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1b312:	f8da 1010 	ldr.w	r1, [sl, #16]
   1b316:	9201      	str	r2, [sp, #4]
   1b318:	f1b8 0f00 	cmp.w	r8, #0
   1b31c:	d05a      	beq.n	1b3d4 <stream_handler_get+0xf8>
   1b31e:	f00b 0308 	and.w	r3, fp, #8
   1b322:	2400      	movs	r4, #0
   1b324:	9300      	str	r3, [sp, #0]
   1b326:	e010      	b.n	1b34a <stream_handler_get+0x6e>
   1b328:	f8da 3010 	ldr.w	r3, [sl, #16]
   1b32c:	443b      	add	r3, r7
   1b32e:	f8ca 3010 	str.w	r3, [sl, #16]
   1b332:	4628      	mov	r0, r5
   1b334:	f006 fb28 	bl	21988 <linked_list_get_next>
   1b338:	443c      	add	r4, r7
   1b33a:	4605      	mov	r5, r0
   1b33c:	2800      	cmp	r0, #0
   1b33e:	d038      	beq.n	1b3b2 <stream_handler_get+0xd6>
   1b340:	45a0      	cmp	r8, r4
   1b342:	d936      	bls.n	1b3b2 <stream_handler_get+0xd6>
   1b344:	2100      	movs	r1, #0
   1b346:	f8d9 2000 	ldr.w	r2, [r9]
   1b34a:	68ae      	ldr	r6, [r5, #8]
   1b34c:	eba8 0b04 	sub.w	fp, r8, r4
   1b350:	1a76      	subs	r6, r6, r1
   1b352:	455e      	cmp	r6, fp
   1b354:	4637      	mov	r7, r6
   1b356:	bf28      	it	cs
   1b358:	465f      	movcs	r7, fp
   1b35a:	b132      	cbz	r2, 1b36a <stream_handler_get+0x8e>
   1b35c:	6868      	ldr	r0, [r5, #4]
   1b35e:	9b01      	ldr	r3, [sp, #4]
   1b360:	4401      	add	r1, r0
   1b362:	463a      	mov	r2, r7
   1b364:	1918      	adds	r0, r3, r4
   1b366:	f00a fd7e 	bl	25e66 <memcpy>
   1b36a:	9b00      	ldr	r3, [sp, #0]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d1e0      	bne.n	1b332 <stream_handler_get+0x56>
   1b370:	455e      	cmp	r6, fp
   1b372:	d8d9      	bhi.n	1b328 <stream_handler_get+0x4c>
   1b374:	f8da 000c 	ldr.w	r0, [sl, #12]
   1b378:	f006 faf4 	bl	21964 <linked_list_pop>
   1b37c:	4606      	mov	r6, r0
   1b37e:	b170      	cbz	r0, 1b39e <stream_handler_get+0xc2>
   1b380:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1b384:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1b388:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b38c:	e9cd 1004 	strd	r1, r0, [sp, #16]
   1b390:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1b394:	a802      	add	r0, sp, #8
   1b396:	4798      	blx	r3
   1b398:	4630      	mov	r0, r6
   1b39a:	f7f9 fa87 	bl	148ac <nrf_free>
   1b39e:	2300      	movs	r3, #0
   1b3a0:	4628      	mov	r0, r5
   1b3a2:	f8ca 3010 	str.w	r3, [sl, #16]
   1b3a6:	f006 faef 	bl	21988 <linked_list_get_next>
   1b3aa:	443c      	add	r4, r7
   1b3ac:	4605      	mov	r5, r0
   1b3ae:	2800      	cmp	r0, #0
   1b3b0:	d1c6      	bne.n	1b340 <stream_handler_get+0x64>
   1b3b2:	4620      	mov	r0, r4
   1b3b4:	f8c9 4004 	str.w	r4, [r9, #4]
   1b3b8:	b007      	add	sp, #28
   1b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3be:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1b3c2:	429a      	cmp	r2, r3
   1b3c4:	bf28      	it	cs
   1b3c6:	461a      	movcs	r2, r3
   1b3c8:	f8c9 200c 	str.w	r2, [r9, #12]
   1b3cc:	6929      	ldr	r1, [r5, #16]
   1b3ce:	f00a fd4a 	bl	25e66 <memcpy>
   1b3d2:	e79a      	b.n	1b30a <stream_handler_get+0x2e>
   1b3d4:	4644      	mov	r4, r8
   1b3d6:	e7ec      	b.n	1b3b2 <stream_handler_get+0xd6>
   1b3d8:	f04f 30ff 	mov.w	r0, #4294967295
   1b3dc:	e7ec      	b.n	1b3b8 <stream_handler_get+0xdc>
   1b3de:	bf00      	nop

0001b3e0 <stream_handler_available>:
   1b3e0:	b510      	push	{r4, lr}
   1b3e2:	4604      	mov	r4, r0
   1b3e4:	68c0      	ldr	r0, [r0, #12]
   1b3e6:	f006 fac7 	bl	21978 <linked_list_peek>
   1b3ea:	b150      	cbz	r0, 1b402 <stream_handler_available+0x22>
   1b3ec:	6924      	ldr	r4, [r4, #16]
   1b3ee:	4264      	negs	r4, r4
   1b3f0:	6883      	ldr	r3, [r0, #8]
   1b3f2:	441c      	add	r4, r3
   1b3f4:	f006 fac8 	bl	21988 <linked_list_get_next>
   1b3f8:	2800      	cmp	r0, #0
   1b3fa:	d1f9      	bne.n	1b3f0 <stream_handler_available+0x10>
   1b3fc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1b400:	bd10      	pop	{r4, pc}
   1b402:	f04f 30ff 	mov.w	r0, #4294967295
   1b406:	bd10      	pop	{r4, pc}

0001b408 <stream_handler_flush>:
   1b408:	b530      	push	{r4, r5, lr}
   1b40a:	4605      	mov	r5, r0
   1b40c:	68c0      	ldr	r0, [r0, #12]
   1b40e:	b085      	sub	sp, #20
   1b410:	b9a8      	cbnz	r0, 1b43e <stream_handler_flush+0x36>
   1b412:	e01a      	b.n	1b44a <stream_handler_flush+0x42>
   1b414:	68e8      	ldr	r0, [r5, #12]
   1b416:	f006 faa5 	bl	21964 <linked_list_pop>
   1b41a:	4604      	mov	r4, r0
   1b41c:	b170      	cbz	r0, 1b43c <stream_handler_flush+0x34>
   1b41e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1b422:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1b426:	e9cd 0100 	strd	r0, r1, [sp]
   1b42a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b42e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1b432:	4668      	mov	r0, sp
   1b434:	4798      	blx	r3
   1b436:	4620      	mov	r0, r4
   1b438:	f7f9 fa38 	bl	148ac <nrf_free>
   1b43c:	68e8      	ldr	r0, [r5, #12]
   1b43e:	f006 faa1 	bl	21984 <linked_list_size_get>
   1b442:	2800      	cmp	r0, #0
   1b444:	d1e6      	bne.n	1b414 <stream_handler_flush+0xc>
   1b446:	b005      	add	sp, #20
   1b448:	bd30      	pop	{r4, r5, pc}
   1b44a:	2008      	movs	r0, #8
   1b44c:	b005      	add	sp, #20
   1b44e:	bd30      	pop	{r4, r5, pc}

0001b450 <stream_handler_free>:
   1b450:	b530      	push	{r4, r5, lr}
   1b452:	4605      	mov	r5, r0
   1b454:	68c0      	ldr	r0, [r0, #12]
   1b456:	b085      	sub	sp, #20
   1b458:	b9a0      	cbnz	r0, 1b484 <stream_handler_free+0x34>
   1b45a:	e01c      	b.n	1b496 <stream_handler_free+0x46>
   1b45c:	f006 fa82 	bl	21964 <linked_list_pop>
   1b460:	4604      	mov	r4, r0
   1b462:	b170      	cbz	r0, 1b482 <stream_handler_free+0x32>
   1b464:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1b468:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1b46c:	e9cd 0100 	strd	r0, r1, [sp]
   1b470:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b474:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1b478:	4668      	mov	r0, sp
   1b47a:	4798      	blx	r3
   1b47c:	4620      	mov	r0, r4
   1b47e:	f7f9 fa15 	bl	148ac <nrf_free>
   1b482:	68e8      	ldr	r0, [r5, #12]
   1b484:	f006 fa7e 	bl	21984 <linked_list_size_get>
   1b488:	4604      	mov	r4, r0
   1b48a:	68e8      	ldr	r0, [r5, #12]
   1b48c:	2c00      	cmp	r4, #0
   1b48e:	d1e5      	bne.n	1b45c <stream_handler_free+0xc>
   1b490:	f7f9 fa0c 	bl	148ac <nrf_free>
   1b494:	60ec      	str	r4, [r5, #12]
   1b496:	b005      	add	sp, #20
   1b498:	bd30      	pop	{r4, r5, pc}
   1b49a:	bf00      	nop

0001b49c <packet_free_cb>:
   1b49c:	6800      	ldr	r0, [r0, #0]
   1b49e:	f006 ba39 	b.w	21914 <rpc_at_client_data_free>
   1b4a2:	bf00      	nop

0001b4a4 <at_interface_write>:
   1b4a4:	b570      	push	{r4, r5, r6, lr}
   1b4a6:	b082      	sub	sp, #8
   1b4a8:	460e      	mov	r6, r1
   1b4aa:	4614      	mov	r4, r2
   1b4ac:	4605      	mov	r5, r0
   1b4ae:	f004 fef5 	bl	2029c <interface_socket_from_handle_get>
   1b4b2:	2800      	cmp	r0, #0
   1b4b4:	d042      	beq.n	1b53c <at_interface_write+0x98>
   1b4b6:	6803      	ldr	r3, [r0, #0]
   1b4b8:	039b      	lsls	r3, r3, #14
   1b4ba:	d53f      	bpl.n	1b53c <at_interface_write+0x98>
   1b4bc:	6803      	ldr	r3, [r0, #0]
   1b4be:	4621      	mov	r1, r4
   1b4c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b4c4:	6003      	str	r3, [r0, #0]
   1b4c6:	6803      	ldr	r3, [r0, #0]
   1b4c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1b4cc:	6003      	str	r3, [r0, #0]
   1b4ce:	a801      	add	r0, sp, #4
   1b4d0:	f006 f9f6 	bl	218c0 <rpc_at_client_request_alloc>
   1b4d4:	bb80      	cbnz	r0, 1b538 <at_interface_write+0x94>
   1b4d6:	2204      	movs	r2, #4
   1b4d8:	9b01      	ldr	r3, [sp, #4]
   1b4da:	721a      	strb	r2, [r3, #8]
   1b4dc:	7258      	strb	r0, [r3, #9]
   1b4de:	7298      	strb	r0, [r3, #10]
   1b4e0:	72d8      	strb	r0, [r3, #11]
   1b4e2:	60dd      	str	r5, [r3, #12]
   1b4e4:	b984      	cbnz	r4, 1b508 <at_interface_write+0x64>
   1b4e6:	4618      	mov	r0, r3
   1b4e8:	2101      	movs	r1, #1
   1b4ea:	f006 f9fd 	bl	218e8 <rpc_at_client_request_send>
   1b4ee:	b9d0      	cbnz	r0, 1b526 <at_interface_write+0x82>
   1b4f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1b4f4:	4628      	mov	r0, r5
   1b4f6:	4611      	mov	r1, r2
   1b4f8:	f04f 33ff 	mov.w	r3, #4294967295
   1b4fc:	f004 fe5e 	bl	201bc <interface_socket_wait>
   1b500:	b9a8      	cbnz	r0, 1b52e <at_interface_write+0x8a>
   1b502:	4620      	mov	r0, r4
   1b504:	b002      	add	sp, #8
   1b506:	bd70      	pop	{r4, r5, r6, pc}
   1b508:	4631      	mov	r1, r6
   1b50a:	6818      	ldr	r0, [r3, #0]
   1b50c:	4622      	mov	r2, r4
   1b50e:	f00a fcaa 	bl	25e66 <memcpy>
   1b512:	2101      	movs	r1, #1
   1b514:	9801      	ldr	r0, [sp, #4]
   1b516:	f006 f9e7 	bl	218e8 <rpc_at_client_request_send>
   1b51a:	2800      	cmp	r0, #0
   1b51c:	d0e8      	beq.n	1b4f0 <at_interface_write+0x4c>
   1b51e:	9b01      	ldr	r3, [sp, #4]
   1b520:	6818      	ldr	r0, [r3, #0]
   1b522:	f006 f9f7 	bl	21914 <rpc_at_client_data_free>
   1b526:	9801      	ldr	r0, [sp, #4]
   1b528:	f006 f9ec 	bl	21904 <rpc_at_client_message_free>
   1b52c:	2023      	movs	r0, #35	; 0x23
   1b52e:	f00b fbed 	bl	26d0c <bsd_os_errno_set>
   1b532:	f04f 30ff 	mov.w	r0, #4294967295
   1b536:	e7e5      	b.n	1b504 <at_interface_write+0x60>
   1b538:	200c      	movs	r0, #12
   1b53a:	e7f8      	b.n	1b52e <at_interface_write+0x8a>
   1b53c:	2016      	movs	r0, #22
   1b53e:	e7f6      	b.n	1b52e <at_interface_write+0x8a>

0001b540 <at_interface_init>:
   1b540:	f006 b9b8 	b.w	218b4 <rpc_at_client_init>

0001b544 <at_interface_open>:
   1b544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b548:	2500      	movs	r5, #0
   1b54a:	b082      	sub	sp, #8
   1b54c:	ab02      	add	r3, sp, #8
   1b54e:	f843 5d08 	str.w	r5, [r3, #-8]!
   1b552:	4680      	mov	r8, r0
   1b554:	460f      	mov	r7, r1
   1b556:	4618      	mov	r0, r3
   1b558:	4616      	mov	r6, r2
   1b55a:	2102      	movs	r1, #2
   1b55c:	4a1d      	ldr	r2, [pc, #116]	; (1b5d4 <at_interface_open+0x90>)
   1b55e:	f004 fd97 	bl	20090 <interface_socket_allocate>
   1b562:	9b00      	ldr	r3, [sp, #0]
   1b564:	4604      	mov	r4, r0
   1b566:	b30b      	cbz	r3, 1b5ac <at_interface_open+0x68>
   1b568:	e9c3 8702 	strd	r8, r7, [r3, #8]
   1b56c:	611e      	str	r6, [r3, #16]
   1b56e:	4629      	mov	r1, r5
   1b570:	a801      	add	r0, sp, #4
   1b572:	f006 f9a5 	bl	218c0 <rpc_at_client_request_alloc>
   1b576:	b9e8      	cbnz	r0, 1b5b4 <at_interface_open+0x70>
   1b578:	2204      	movs	r2, #4
   1b57a:	9b01      	ldr	r3, [sp, #4]
   1b57c:	2105      	movs	r1, #5
   1b57e:	7258      	strb	r0, [r3, #9]
   1b580:	7298      	strb	r0, [r3, #10]
   1b582:	72d8      	strb	r0, [r3, #11]
   1b584:	721a      	strb	r2, [r3, #8]
   1b586:	60dc      	str	r4, [r3, #12]
   1b588:	4618      	mov	r0, r3
   1b58a:	f006 f9ad 	bl	218e8 <rpc_at_client_request_send>
   1b58e:	b9d8      	cbnz	r0, 1b5c8 <at_interface_open+0x84>
   1b590:	2202      	movs	r2, #2
   1b592:	f04f 33ff 	mov.w	r3, #4294967295
   1b596:	4611      	mov	r1, r2
   1b598:	4620      	mov	r0, r4
   1b59a:	f004 fe0f 	bl	201bc <interface_socket_wait>
   1b59e:	4605      	mov	r5, r0
   1b5a0:	b948      	cbnz	r0, 1b5b6 <at_interface_open+0x72>
   1b5a2:	9a00      	ldr	r2, [sp, #0]
   1b5a4:	6813      	ldr	r3, [r2, #0]
   1b5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b5aa:	6013      	str	r3, [r2, #0]
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	b002      	add	sp, #8
   1b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5b4:	250c      	movs	r5, #12
   1b5b6:	4620      	mov	r0, r4
   1b5b8:	f004 fdbe 	bl	20138 <interface_socket_free>
   1b5bc:	4628      	mov	r0, r5
   1b5be:	f00b fba5 	bl	26d0c <bsd_os_errno_set>
   1b5c2:	f04f 34ff 	mov.w	r4, #4294967295
   1b5c6:	e7f1      	b.n	1b5ac <at_interface_open+0x68>
   1b5c8:	9801      	ldr	r0, [sp, #4]
   1b5ca:	f006 f99b 	bl	21904 <rpc_at_client_message_free>
   1b5ce:	2523      	movs	r5, #35	; 0x23
   1b5d0:	e7f1      	b.n	1b5b6 <at_interface_open+0x72>
   1b5d2:	bf00      	nop
   1b5d4:	0001b49d 	.word	0x0001b49d

0001b5d8 <at_interface_close>:
   1b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5da:	b083      	sub	sp, #12
   1b5dc:	4606      	mov	r6, r0
   1b5de:	f004 fe5d 	bl	2029c <interface_socket_from_handle_get>
   1b5e2:	2800      	cmp	r0, #0
   1b5e4:	d03d      	beq.n	1b662 <at_interface_close+0x8a>
   1b5e6:	230d      	movs	r3, #13
   1b5e8:	6807      	ldr	r7, [r0, #0]
   1b5ea:	6003      	str	r3, [r0, #0]
   1b5ec:	6803      	ldr	r3, [r0, #0]
   1b5ee:	4604      	mov	r4, r0
   1b5f0:	039b      	lsls	r3, r3, #14
   1b5f2:	d41f      	bmi.n	1b634 <at_interface_close+0x5c>
   1b5f4:	2100      	movs	r1, #0
   1b5f6:	a801      	add	r0, sp, #4
   1b5f8:	f006 f962 	bl	218c0 <rpc_at_client_request_alloc>
   1b5fc:	bb20      	cbnz	r0, 1b648 <at_interface_close+0x70>
   1b5fe:	2204      	movs	r2, #4
   1b600:	9b01      	ldr	r3, [sp, #4]
   1b602:	2106      	movs	r1, #6
   1b604:	7258      	strb	r0, [r3, #9]
   1b606:	7298      	strb	r0, [r3, #10]
   1b608:	72d8      	strb	r0, [r3, #11]
   1b60a:	721a      	strb	r2, [r3, #8]
   1b60c:	60de      	str	r6, [r3, #12]
   1b60e:	4618      	mov	r0, r3
   1b610:	f006 f96a 	bl	218e8 <rpc_at_client_request_send>
   1b614:	b9d0      	cbnz	r0, 1b64c <at_interface_close+0x74>
   1b616:	220e      	movs	r2, #14
   1b618:	f04f 33ff 	mov.w	r3, #4294967295
   1b61c:	4611      	mov	r1, r2
   1b61e:	4630      	mov	r0, r6
   1b620:	f004 fdcc 	bl	201bc <interface_socket_wait>
   1b624:	4605      	mov	r5, r0
   1b626:	b9a8      	cbnz	r0, 1b654 <at_interface_close+0x7c>
   1b628:	4630      	mov	r0, r6
   1b62a:	f004 fd85 	bl	20138 <interface_socket_free>
   1b62e:	4628      	mov	r0, r5
   1b630:	b003      	add	sp, #12
   1b632:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b634:	6803      	ldr	r3, [r0, #0]
   1b636:	2100      	movs	r1, #0
   1b638:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b63c:	6003      	str	r3, [r0, #0]
   1b63e:	a801      	add	r0, sp, #4
   1b640:	f006 f93e 	bl	218c0 <rpc_at_client_request_alloc>
   1b644:	2800      	cmp	r0, #0
   1b646:	d0da      	beq.n	1b5fe <at_interface_close+0x26>
   1b648:	250c      	movs	r5, #12
   1b64a:	e003      	b.n	1b654 <at_interface_close+0x7c>
   1b64c:	9801      	ldr	r0, [sp, #4]
   1b64e:	f006 f959 	bl	21904 <rpc_at_client_message_free>
   1b652:	2523      	movs	r5, #35	; 0x23
   1b654:	6027      	str	r7, [r4, #0]
   1b656:	4628      	mov	r0, r5
   1b658:	f00b fb58 	bl	26d0c <bsd_os_errno_set>
   1b65c:	f04f 35ff 	mov.w	r5, #4294967295
   1b660:	e7e5      	b.n	1b62e <at_interface_close+0x56>
   1b662:	2516      	movs	r5, #22
   1b664:	e7f7      	b.n	1b656 <at_interface_close+0x7e>
   1b666:	bf00      	nop

0001b668 <at_interface_read>:
   1b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b66c:	b084      	sub	sp, #16
   1b66e:	4688      	mov	r8, r1
   1b670:	4615      	mov	r5, r2
   1b672:	461e      	mov	r6, r3
   1b674:	4607      	mov	r7, r0
   1b676:	f004 fe11 	bl	2029c <interface_socket_from_handle_get>
   1b67a:	2800      	cmp	r0, #0
   1b67c:	d049      	beq.n	1b712 <at_interface_read+0xaa>
   1b67e:	2300      	movs	r3, #0
   1b680:	e9cd 8500 	strd	r8, r5, [sp]
   1b684:	f016 0502 	ands.w	r5, r6, #2
   1b688:	4604      	mov	r4, r0
   1b68a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1b68e:	d00e      	beq.n	1b6ae <at_interface_read+0x46>
   1b690:	e01e      	b.n	1b6d0 <at_interface_read+0x68>
   1b692:	2d00      	cmp	r5, #0
   1b694:	d133      	bne.n	1b6fe <at_interface_read+0x96>
   1b696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b69a:	69e3      	ldr	r3, [r4, #28]
   1b69c:	4611      	mov	r1, r2
   1b69e:	2b00      	cmp	r3, #0
   1b6a0:	bf08      	it	eq
   1b6a2:	f04f 33ff 	moveq.w	r3, #4294967295
   1b6a6:	4638      	mov	r0, r7
   1b6a8:	f004 fd88 	bl	201bc <interface_socket_wait>
   1b6ac:	4605      	mov	r5, r0
   1b6ae:	6823      	ldr	r3, [r4, #0]
   1b6b0:	69a0      	ldr	r0, [r4, #24]
   1b6b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b6b6:	6023      	str	r3, [r4, #0]
   1b6b8:	6803      	ldr	r3, [r0, #0]
   1b6ba:	4632      	mov	r2, r6
   1b6bc:	689b      	ldr	r3, [r3, #8]
   1b6be:	4669      	mov	r1, sp
   1b6c0:	4798      	blx	r3
   1b6c2:	f1b0 0800 	subs.w	r8, r0, #0
   1b6c6:	dbe4      	blt.n	1b692 <at_interface_read+0x2a>
   1b6c8:	4640      	mov	r0, r8
   1b6ca:	b004      	add	sp, #16
   1b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6d0:	6803      	ldr	r3, [r0, #0]
   1b6d2:	6980      	ldr	r0, [r0, #24]
   1b6d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1b6d8:	6023      	str	r3, [r4, #0]
   1b6da:	6803      	ldr	r3, [r0, #0]
   1b6dc:	4632      	mov	r2, r6
   1b6de:	689b      	ldr	r3, [r3, #8]
   1b6e0:	4669      	mov	r1, sp
   1b6e2:	4798      	blx	r3
   1b6e4:	f1b0 0800 	subs.w	r8, r0, #0
   1b6e8:	daee      	bge.n	1b6c8 <at_interface_read+0x60>
   1b6ea:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b6ee:	d1eb      	bne.n	1b6c8 <at_interface_read+0x60>
   1b6f0:	2023      	movs	r0, #35	; 0x23
   1b6f2:	f00b fb0b 	bl	26d0c <bsd_os_errno_set>
   1b6f6:	4640      	mov	r0, r8
   1b6f8:	b004      	add	sp, #16
   1b6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6fe:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b702:	d1e1      	bne.n	1b6c8 <at_interface_read+0x60>
   1b704:	4628      	mov	r0, r5
   1b706:	f00b fb01 	bl	26d0c <bsd_os_errno_set>
   1b70a:	4640      	mov	r0, r8
   1b70c:	b004      	add	sp, #16
   1b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b712:	2016      	movs	r0, #22
   1b714:	f00b fafa 	bl	26d0c <bsd_os_errno_set>
   1b718:	f04f 38ff 	mov.w	r8, #4294967295
   1b71c:	e7d4      	b.n	1b6c8 <at_interface_read+0x60>
   1b71e:	bf00      	nop

0001b720 <at_interface_getopt>:
   1b720:	f004 bde2 	b.w	202e8 <interface_socket_getopt>

0001b724 <at_interface_setopt>:
   1b724:	2901      	cmp	r1, #1
   1b726:	d001      	beq.n	1b72c <at_interface_setopt+0x8>
   1b728:	202a      	movs	r0, #42	; 0x2a
   1b72a:	4770      	bx	lr
   1b72c:	b538      	push	{r3, r4, r5, lr}
   1b72e:	461c      	mov	r4, r3
   1b730:	4615      	mov	r5, r2
   1b732:	f004 fdb3 	bl	2029c <interface_socket_from_handle_get>
   1b736:	4603      	mov	r3, r0
   1b738:	b1b0      	cbz	r0, 1b768 <at_interface_setopt+0x44>
   1b73a:	2d14      	cmp	r5, #20
   1b73c:	d110      	bne.n	1b760 <at_interface_setopt+0x3c>
   1b73e:	b1ac      	cbz	r4, 1b76c <at_interface_setopt+0x48>
   1b740:	9a04      	ldr	r2, [sp, #16]
   1b742:	2a08      	cmp	r2, #8
   1b744:	d10e      	bne.n	1b764 <at_interface_setopt+0x40>
   1b746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1b74a:	6862      	ldr	r2, [r4, #4]
   1b74c:	4d08      	ldr	r5, [pc, #32]	; (1b770 <at_interface_setopt+0x4c>)
   1b74e:	6821      	ldr	r1, [r4, #0]
   1b750:	fba5 4202 	umull	r4, r2, r5, r2
   1b754:	0992      	lsrs	r2, r2, #6
   1b756:	fb00 2201 	mla	r2, r0, r1, r2
   1b75a:	61da      	str	r2, [r3, #28]
   1b75c:	2000      	movs	r0, #0
   1b75e:	bd38      	pop	{r3, r4, r5, pc}
   1b760:	202a      	movs	r0, #42	; 0x2a
   1b762:	bd38      	pop	{r3, r4, r5, pc}
   1b764:	2016      	movs	r0, #22
   1b766:	bd38      	pop	{r3, r4, r5, pc}
   1b768:	2009      	movs	r0, #9
   1b76a:	bd38      	pop	{r3, r4, r5, pc}
   1b76c:	200e      	movs	r0, #14
   1b76e:	bd38      	pop	{r3, r4, r5, pc}
   1b770:	10624dd3 	.word	0x10624dd3

0001b774 <rpc_at_event_handler>:
   1b774:	b570      	push	{r4, r5, r6, lr}
   1b776:	4605      	mov	r5, r0
   1b778:	b084      	sub	sp, #16
   1b77a:	68c0      	ldr	r0, [r0, #12]
   1b77c:	460e      	mov	r6, r1
   1b77e:	f004 fd8d 	bl	2029c <interface_socket_from_handle_get>
   1b782:	b340      	cbz	r0, 1b7d6 <rpc_at_event_handler+0x62>
   1b784:	6803      	ldr	r3, [r0, #0]
   1b786:	4604      	mov	r4, r0
   1b788:	b29b      	uxth	r3, r3
   1b78a:	2b01      	cmp	r3, #1
   1b78c:	d01f      	beq.n	1b7ce <rpc_at_event_handler+0x5a>
   1b78e:	6803      	ldr	r3, [r0, #0]
   1b790:	b29b      	uxth	r3, r3
   1b792:	2b0d      	cmp	r3, #13
   1b794:	d027      	beq.n	1b7e6 <rpc_at_event_handler+0x72>
   1b796:	6803      	ldr	r3, [r0, #0]
   1b798:	b29b      	uxth	r3, r3
   1b79a:	2b02      	cmp	r3, #2
   1b79c:	d02e      	beq.n	1b7fc <rpc_at_event_handler+0x88>
   1b79e:	3e03      	subs	r6, #3
   1b7a0:	2e01      	cmp	r6, #1
   1b7a2:	d811      	bhi.n	1b7c8 <rpc_at_event_handler+0x54>
   1b7a4:	2300      	movs	r3, #0
   1b7a6:	6829      	ldr	r1, [r5, #0]
   1b7a8:	686a      	ldr	r2, [r5, #4]
   1b7aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1b7ae:	e9cd 1200 	strd	r1, r2, [sp]
   1b7b2:	69a0      	ldr	r0, [r4, #24]
   1b7b4:	4669      	mov	r1, sp
   1b7b6:	6803      	ldr	r3, [r0, #0]
   1b7b8:	685b      	ldr	r3, [r3, #4]
   1b7ba:	4798      	blx	r3
   1b7bc:	3001      	adds	r0, #1
   1b7be:	d017      	beq.n	1b7f0 <rpc_at_event_handler+0x7c>
   1b7c0:	6823      	ldr	r3, [r4, #0]
   1b7c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b7c6:	6023      	str	r3, [r4, #0]
   1b7c8:	2000      	movs	r0, #0
   1b7ca:	b004      	add	sp, #16
   1b7cc:	bd70      	pop	{r4, r5, r6, pc}
   1b7ce:	2e02      	cmp	r6, #2
   1b7d0:	d1e5      	bne.n	1b79e <rpc_at_event_handler+0x2a>
   1b7d2:	6006      	str	r6, [r0, #0]
   1b7d4:	e7f8      	b.n	1b7c8 <rpc_at_event_handler+0x54>
   1b7d6:	6828      	ldr	r0, [r5, #0]
   1b7d8:	2800      	cmp	r0, #0
   1b7da:	d0f5      	beq.n	1b7c8 <rpc_at_event_handler+0x54>
   1b7dc:	f006 f89a 	bl	21914 <rpc_at_client_data_free>
   1b7e0:	2000      	movs	r0, #0
   1b7e2:	b004      	add	sp, #16
   1b7e4:	bd70      	pop	{r4, r5, r6, pc}
   1b7e6:	2e02      	cmp	r6, #2
   1b7e8:	d1d9      	bne.n	1b79e <rpc_at_event_handler+0x2a>
   1b7ea:	230e      	movs	r3, #14
   1b7ec:	6003      	str	r3, [r0, #0]
   1b7ee:	e7eb      	b.n	1b7c8 <rpc_at_event_handler+0x54>
   1b7f0:	6828      	ldr	r0, [r5, #0]
   1b7f2:	f006 f88f 	bl	21914 <rpc_at_client_data_free>
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	b004      	add	sp, #16
   1b7fa:	bd70      	pop	{r4, r5, r6, pc}
   1b7fc:	6803      	ldr	r3, [r0, #0]
   1b7fe:	029b      	lsls	r3, r3, #10
   1b800:	d5cd      	bpl.n	1b79e <rpc_at_event_handler+0x2a>
   1b802:	2e02      	cmp	r6, #2
   1b804:	d1cb      	bne.n	1b79e <rpc_at_event_handler+0x2a>
   1b806:	6803      	ldr	r3, [r0, #0]
   1b808:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1b80c:	6003      	str	r3, [r0, #0]
   1b80e:	6803      	ldr	r3, [r0, #0]
   1b810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b814:	6003      	str	r3, [r0, #0]
   1b816:	e7d7      	b.n	1b7c8 <rpc_at_event_handler+0x54>

0001b818 <ip_client_event_handler>:
   1b818:	f850 1b08 	ldr.w	r1, [r0], #8
   1b81c:	0c09      	lsrs	r1, r1, #16
   1b81e:	f004 b9af 	b.w	1fb80 <rpc_ip_event_handler>
   1b822:	bf00      	nop

0001b824 <rpc_ip_client_init>:
   1b824:	4801      	ldr	r0, [pc, #4]	; (1b82c <rpc_ip_client_init+0x8>)
   1b826:	f004 be23 	b.w	20470 <rpc_client_register>
   1b82a:	bf00      	nop
   1b82c:	0002a2d0 	.word	0x0002a2d0

0001b830 <rpc_ip_client_request_alloc>:
   1b830:	2300      	movs	r3, #0
   1b832:	b510      	push	{r4, lr}
   1b834:	b082      	sub	sp, #8
   1b836:	9301      	str	r3, [sp, #4]
   1b838:	b158      	cbz	r0, 1b852 <rpc_ip_client_request_alloc+0x22>
   1b83a:	4604      	mov	r4, r0
   1b83c:	aa01      	add	r2, sp, #4
   1b83e:	2004      	movs	r0, #4
   1b840:	f005 f856 	bl	208f0 <rpc_message_alloc>
   1b844:	b918      	cbnz	r0, 1b84e <rpc_ip_client_request_alloc+0x1e>
   1b846:	9b01      	ldr	r3, [sp, #4]
   1b848:	b10b      	cbz	r3, 1b84e <rpc_ip_client_request_alloc+0x1e>
   1b84a:	3308      	adds	r3, #8
   1b84c:	6023      	str	r3, [r4, #0]
   1b84e:	b002      	add	sp, #8
   1b850:	bd10      	pop	{r4, pc}
   1b852:	2007      	movs	r0, #7
   1b854:	b002      	add	sp, #8
   1b856:	bd10      	pop	{r4, pc}

0001b858 <rpc_ip_client_request_send>:
   1b858:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1b85c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   1b860:	d10b      	bne.n	1b87a <rpc_ip_client_request_send+0x22>
   1b862:	b160      	cbz	r0, 1b87e <rpc_ip_client_request_send+0x26>
   1b864:	4603      	mov	r3, r0
   1b866:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1b86a:	2004      	movs	r0, #4
   1b86c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1b870:	f843 1d08 	str.w	r1, [r3, #-8]!
   1b874:	4619      	mov	r1, r3
   1b876:	f005 b823 	b.w	208c0 <rpc_message_send>
   1b87a:	200f      	movs	r0, #15
   1b87c:	4770      	bx	lr
   1b87e:	2007      	movs	r0, #7
   1b880:	4770      	bx	lr
   1b882:	bf00      	nop

0001b884 <rpc_ip_client_message_free>:
   1b884:	b120      	cbz	r0, 1b890 <rpc_ip_client_message_free+0xc>
   1b886:	f1a0 0108 	sub.w	r1, r0, #8
   1b88a:	2004      	movs	r0, #4
   1b88c:	f005 b864 	b.w	20958 <rpc_message_free>
   1b890:	2007      	movs	r0, #7
   1b892:	4770      	bx	lr

0001b894 <rpc_ip_client_data_free>:
   1b894:	b118      	cbz	r0, 1b89e <rpc_ip_client_data_free+0xa>
   1b896:	4601      	mov	r1, r0
   1b898:	2004      	movs	r0, #4
   1b89a:	f005 b90d 	b.w	20ab8 <rpc_message_data_free>
   1b89e:	2007      	movs	r0, #7
   1b8a0:	4770      	bx	lr
   1b8a2:	bf00      	nop

0001b8a4 <secure_client_socket>:
   1b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8a8:	460c      	mov	r4, r1
   1b8aa:	680b      	ldr	r3, [r1, #0]
   1b8ac:	6949      	ldr	r1, [r1, #20]
   1b8ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b8b2:	6023      	str	r3, [r4, #0]
   1b8b4:	6822      	ldr	r2, [r4, #0]
   1b8b6:	2300      	movs	r3, #0
   1b8b8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   1b8bc:	6022      	str	r2, [r4, #0]
   1b8be:	f247 0281 	movw	r2, #28801	; 0x7081
   1b8c2:	6827      	ldr	r7, [r4, #0]
   1b8c4:	4606      	mov	r6, r0
   1b8c6:	f003 f96b 	bl	1eba0 <ip_interface_request_create>
   1b8ca:	2800      	cmp	r0, #0
   1b8cc:	d03b      	beq.n	1b946 <secure_client_socket+0xa2>
   1b8ce:	4605      	mov	r5, r0
   1b8d0:	4b28      	ldr	r3, [pc, #160]	; (1b974 <secure_client_socket+0xd0>)
   1b8d2:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
   1b8d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1b8da:	2224      	movs	r2, #36	; 0x24
   1b8dc:	3014      	adds	r0, #20
   1b8de:	f00a fac2 	bl	25e66 <memcpy>
   1b8e2:	68ab      	ldr	r3, [r5, #8]
   1b8e4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b978 <secure_client_socket+0xd4>
   1b8e8:	3324      	adds	r3, #36	; 0x24
   1b8ea:	60ab      	str	r3, [r5, #8]
   1b8ec:	6823      	ldr	r3, [r4, #0]
   1b8ee:	4629      	mov	r1, r5
   1b8f0:	ea03 0308 	and.w	r3, r3, r8
   1b8f4:	f043 030a 	orr.w	r3, r3, #10
   1b8f8:	6023      	str	r3, [r4, #0]
   1b8fa:	f247 0281 	movw	r2, #28801	; 0x7081
   1b8fe:	463b      	mov	r3, r7
   1b900:	4620      	mov	r0, r4
   1b902:	f003 f96d 	bl	1ebe0 <ip_interface_request_send>
   1b906:	b960      	cbnz	r0, 1b922 <secure_client_socket+0x7e>
   1b908:	6823      	ldr	r3, [r4, #0]
   1b90a:	00db      	lsls	r3, r3, #3
   1b90c:	d40b      	bmi.n	1b926 <secure_client_socket+0x82>
   1b90e:	f04f 33ff 	mov.w	r3, #4294967295
   1b912:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b916:	210b      	movs	r1, #11
   1b918:	4630      	mov	r0, r6
   1b91a:	f003 f975 	bl	1ec08 <ip_interface_wait>
   1b91e:	b128      	cbz	r0, 1b92c <secure_client_socket+0x88>
   1b920:	6027      	str	r7, [r4, #0]
   1b922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b926:	2073      	movs	r0, #115	; 0x73
   1b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b92c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b930:	4630      	mov	r0, r6
   1b932:	4611      	mov	r1, r2
   1b934:	f04f 33ff 	mov.w	r3, #4294967295
   1b938:	f003 f966 	bl	1ec08 <ip_interface_wait>
   1b93c:	b130      	cbz	r0, 1b94c <secure_client_socket+0xa8>
   1b93e:	2873      	cmp	r0, #115	; 0x73
   1b940:	d0ef      	beq.n	1b922 <secure_client_socket+0x7e>
   1b942:	6027      	str	r7, [r4, #0]
   1b944:	e7ed      	b.n	1b922 <secure_client_socket+0x7e>
   1b946:	200c      	movs	r0, #12
   1b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b94c:	6823      	ldr	r3, [r4, #0]
   1b94e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b952:	6023      	str	r3, [r4, #0]
   1b954:	6823      	ldr	r3, [r4, #0]
   1b956:	ea03 0808 	and.w	r8, r3, r8
   1b95a:	f048 030c 	orr.w	r3, r8, #12
   1b95e:	6023      	str	r3, [r4, #0]
   1b960:	6823      	ldr	r3, [r4, #0]
   1b962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b966:	6023      	str	r3, [r4, #0]
   1b968:	6823      	ldr	r3, [r4, #0]
   1b96a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b96e:	6023      	str	r3, [r4, #0]
   1b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b974:	200206a8 	.word	0x200206a8
   1b978:	ffff0000 	.word	0xffff0000

0001b97c <tls_interface_init>:
   1b97c:	2000      	movs	r0, #0
   1b97e:	4770      	bx	lr

0001b980 <tls_interface_open>:
   1b980:	b538      	push	{r3, r4, r5, lr}
   1b982:	f020 0308 	bic.w	r3, r0, #8
   1b986:	2b02      	cmp	r3, #2
   1b988:	d006      	beq.n	1b998 <tls_interface_open+0x18>
   1b98a:	202f      	movs	r0, #47	; 0x2f
   1b98c:	f00b f9be 	bl	26d0c <bsd_os_errno_set>
   1b990:	f04f 35ff 	mov.w	r5, #4294967295
   1b994:	4628      	mov	r0, r5
   1b996:	bd38      	pop	{r3, r4, r5, pc}
   1b998:	4614      	mov	r4, r2
   1b99a:	1e4a      	subs	r2, r1, #1
   1b99c:	2a01      	cmp	r2, #1
   1b99e:	d828      	bhi.n	1b9f2 <tls_interface_open+0x72>
   1b9a0:	bb14      	cbnz	r4, 1b9e8 <tls_interface_open+0x68>
   1b9a2:	2901      	cmp	r1, #1
   1b9a4:	bf06      	itte	eq
   1b9a6:	2301      	moveq	r3, #1
   1b9a8:	f44f 7482 	moveq.w	r4, #260	; 0x104
   1b9ac:	f44f 7487 	movne.w	r4, #270	; 0x10e
   1b9b0:	461a      	mov	r2, r3
   1b9b2:	f003 f955 	bl	1ec60 <ip_interface_open>
   1b9b6:	1e05      	subs	r5, r0, #0
   1b9b8:	db26      	blt.n	1ba08 <tls_interface_open+0x88>
   1b9ba:	4b15      	ldr	r3, [pc, #84]	; (1ba10 <tls_interface_open+0x90>)
   1b9bc:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   1b9c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b9c4:	2224      	movs	r2, #36	; 0x24
   1b9c6:	4913      	ldr	r1, [pc, #76]	; (1ba14 <tls_interface_open+0x94>)
   1b9c8:	f00a fa4d 	bl	25e66 <memcpy>
   1b9cc:	4628      	mov	r0, r5
   1b9ce:	f004 fc65 	bl	2029c <interface_socket_from_handle_get>
   1b9d2:	6803      	ldr	r3, [r0, #0]
   1b9d4:	6104      	str	r4, [r0, #16]
   1b9d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1b9da:	6003      	str	r3, [r0, #0]
   1b9dc:	6803      	ldr	r3, [r0, #0]
   1b9de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b9e2:	6003      	str	r3, [r0, #0]
   1b9e4:	4628      	mov	r0, r5
   1b9e6:	bd38      	pop	{r3, r4, r5, pc}
   1b9e8:	2901      	cmp	r1, #1
   1b9ea:	d008      	beq.n	1b9fe <tls_interface_open+0x7e>
   1b9ec:	f5b4 7f87 	cmp.w	r4, #270	; 0x10e
   1b9f0:	d0de      	beq.n	1b9b0 <tls_interface_open+0x30>
   1b9f2:	2016      	movs	r0, #22
   1b9f4:	f00b f98a 	bl	26d0c <bsd_os_errno_set>
   1b9f8:	f04f 35ff 	mov.w	r5, #4294967295
   1b9fc:	e7ca      	b.n	1b994 <tls_interface_open+0x14>
   1b9fe:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   1ba02:	d1f6      	bne.n	1b9f2 <tls_interface_open+0x72>
   1ba04:	460b      	mov	r3, r1
   1ba06:	e7d3      	b.n	1b9b0 <tls_interface_open+0x30>
   1ba08:	f04f 35ff 	mov.w	r5, #4294967295
   1ba0c:	e7c2      	b.n	1b994 <tls_interface_open+0x14>
   1ba0e:	bf00      	nop
   1ba10:	200206a8 	.word	0x200206a8
   1ba14:	0002a2e0 	.word	0x0002a2e0

0001ba18 <tls_interface_close>:
   1ba18:	b510      	push	{r4, lr}
   1ba1a:	4604      	mov	r4, r0
   1ba1c:	f004 fc3e 	bl	2029c <interface_socket_from_handle_get>
   1ba20:	b120      	cbz	r0, 1ba2c <tls_interface_close+0x14>
   1ba22:	4620      	mov	r0, r4
   1ba24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba28:	f003 b9b4 	b.w	1ed94 <ip_interface_close>
   1ba2c:	2009      	movs	r0, #9
   1ba2e:	f00b f96d 	bl	26d0c <bsd_os_errno_set>
   1ba32:	f04f 30ff 	mov.w	r0, #4294967295
   1ba36:	bd10      	pop	{r4, pc}

0001ba38 <tls_interface_sendto>:
   1ba38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba3c:	460d      	mov	r5, r1
   1ba3e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1ba42:	4616      	mov	r6, r2
   1ba44:	461f      	mov	r7, r3
   1ba46:	4604      	mov	r4, r0
   1ba48:	f004 fc28 	bl	2029c <interface_socket_from_handle_get>
   1ba4c:	2800      	cmp	r0, #0
   1ba4e:	d03b      	beq.n	1bac8 <tls_interface_sendto+0x90>
   1ba50:	6803      	ldr	r3, [r0, #0]
   1ba52:	b29b      	uxth	r3, r3
   1ba54:	2b0c      	cmp	r3, #12
   1ba56:	d039      	beq.n	1bacc <tls_interface_sendto+0x94>
   1ba58:	6803      	ldr	r3, [r0, #0]
   1ba5a:	b29b      	uxth	r3, r3
   1ba5c:	2b0b      	cmp	r3, #11
   1ba5e:	d111      	bne.n	1ba84 <tls_interface_sendto+0x4c>
   1ba60:	4b20      	ldr	r3, [pc, #128]	; (1bae4 <tls_interface_sendto+0xac>)
   1ba62:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1ba66:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   1ba6a:	2b02      	cmp	r3, #2
   1ba6c:	d038      	beq.n	1bae0 <tls_interface_sendto+0xa8>
   1ba6e:	68c3      	ldr	r3, [r0, #12]
   1ba70:	2b01      	cmp	r3, #1
   1ba72:	bf14      	ite	ne
   1ba74:	2039      	movne	r0, #57	; 0x39
   1ba76:	202a      	moveq	r0, #42	; 0x2a
   1ba78:	f00b f948 	bl	26d0c <bsd_os_errno_set>
   1ba7c:	f04f 30ff 	mov.w	r0, #4294967295
   1ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ba84:	68c3      	ldr	r3, [r0, #12]
   1ba86:	2b01      	cmp	r3, #1
   1ba88:	d00b      	beq.n	1baa2 <tls_interface_sendto+0x6a>
   1ba8a:	2b02      	cmp	r3, #2
   1ba8c:	d001      	beq.n	1ba92 <tls_interface_sendto+0x5a>
   1ba8e:	2039      	movs	r0, #57	; 0x39
   1ba90:	e7f2      	b.n	1ba78 <tls_interface_sendto+0x40>
   1ba92:	6803      	ldr	r3, [r0, #0]
   1ba94:	b29b      	uxth	r3, r3
   1ba96:	2b02      	cmp	r3, #2
   1ba98:	d007      	beq.n	1baaa <tls_interface_sendto+0x72>
   1ba9a:	6803      	ldr	r3, [r0, #0]
   1ba9c:	b29b      	uxth	r3, r3
   1ba9e:	2b04      	cmp	r3, #4
   1baa0:	d003      	beq.n	1baaa <tls_interface_sendto+0x72>
   1baa2:	6803      	ldr	r3, [r0, #0]
   1baa4:	b29b      	uxth	r3, r3
   1baa6:	2b05      	cmp	r3, #5
   1baa8:	d1f1      	bne.n	1ba8e <tls_interface_sendto+0x56>
   1baaa:	4b0e      	ldr	r3, [pc, #56]	; (1bae4 <tls_interface_sendto+0xac>)
   1baac:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1bab0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1bab4:	2b02      	cmp	r3, #2
   1bab6:	d1ea      	bne.n	1ba8e <tls_interface_sendto+0x56>
   1bab8:	4601      	mov	r1, r0
   1baba:	4620      	mov	r0, r4
   1babc:	f7ff fef2 	bl	1b8a4 <secure_client_socket>
   1bac0:	2800      	cmp	r0, #0
   1bac2:	d003      	beq.n	1bacc <tls_interface_sendto+0x94>
   1bac4:	dcd8      	bgt.n	1ba78 <tls_interface_sendto+0x40>
   1bac6:	e7d9      	b.n	1ba7c <tls_interface_sendto+0x44>
   1bac8:	2009      	movs	r0, #9
   1baca:	e7d5      	b.n	1ba78 <tls_interface_sendto+0x40>
   1bacc:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1bad0:	463b      	mov	r3, r7
   1bad2:	4632      	mov	r2, r6
   1bad4:	4629      	mov	r1, r5
   1bad6:	4620      	mov	r0, r4
   1bad8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1badc:	f003 b9ca 	b.w	1ee74 <ip_interface_sendto>
   1bae0:	2023      	movs	r0, #35	; 0x23
   1bae2:	e7c9      	b.n	1ba78 <tls_interface_sendto+0x40>
   1bae4:	200206a8 	.word	0x200206a8

0001bae8 <tls_interface_recvfrom>:
   1bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1baec:	460d      	mov	r5, r1
   1baee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1baf2:	4616      	mov	r6, r2
   1baf4:	461f      	mov	r7, r3
   1baf6:	4604      	mov	r4, r0
   1baf8:	f004 fbd0 	bl	2029c <interface_socket_from_handle_get>
   1bafc:	b3a0      	cbz	r0, 1bb68 <tls_interface_recvfrom+0x80>
   1bafe:	6803      	ldr	r3, [r0, #0]
   1bb00:	b29b      	uxth	r3, r3
   1bb02:	2b0c      	cmp	r3, #12
   1bb04:	d026      	beq.n	1bb54 <tls_interface_recvfrom+0x6c>
   1bb06:	68c3      	ldr	r3, [r0, #12]
   1bb08:	2b01      	cmp	r3, #1
   1bb0a:	d010      	beq.n	1bb2e <tls_interface_recvfrom+0x46>
   1bb0c:	2b02      	cmp	r3, #2
   1bb0e:	d006      	beq.n	1bb1e <tls_interface_recvfrom+0x36>
   1bb10:	2023      	movs	r0, #35	; 0x23
   1bb12:	f00b f8fb 	bl	26d0c <bsd_os_errno_set>
   1bb16:	f04f 30ff 	mov.w	r0, #4294967295
   1bb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb1e:	6803      	ldr	r3, [r0, #0]
   1bb20:	b29b      	uxth	r3, r3
   1bb22:	2b02      	cmp	r3, #2
   1bb24:	d007      	beq.n	1bb36 <tls_interface_recvfrom+0x4e>
   1bb26:	6803      	ldr	r3, [r0, #0]
   1bb28:	b29b      	uxth	r3, r3
   1bb2a:	2b04      	cmp	r3, #4
   1bb2c:	d003      	beq.n	1bb36 <tls_interface_recvfrom+0x4e>
   1bb2e:	6803      	ldr	r3, [r0, #0]
   1bb30:	b29b      	uxth	r3, r3
   1bb32:	2b05      	cmp	r3, #5
   1bb34:	d1ec      	bne.n	1bb10 <tls_interface_recvfrom+0x28>
   1bb36:	4b0d      	ldr	r3, [pc, #52]	; (1bb6c <tls_interface_recvfrom+0x84>)
   1bb38:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1bb3c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1bb40:	2b02      	cmp	r3, #2
   1bb42:	d1e5      	bne.n	1bb10 <tls_interface_recvfrom+0x28>
   1bb44:	4601      	mov	r1, r0
   1bb46:	4620      	mov	r0, r4
   1bb48:	f7ff feac 	bl	1b8a4 <secure_client_socket>
   1bb4c:	2800      	cmp	r0, #0
   1bb4e:	d001      	beq.n	1bb54 <tls_interface_recvfrom+0x6c>
   1bb50:	dcdf      	bgt.n	1bb12 <tls_interface_recvfrom+0x2a>
   1bb52:	e7e0      	b.n	1bb16 <tls_interface_recvfrom+0x2e>
   1bb54:	e9cd 8908 	strd	r8, r9, [sp, #32]
   1bb58:	463b      	mov	r3, r7
   1bb5a:	4632      	mov	r2, r6
   1bb5c:	4629      	mov	r1, r5
   1bb5e:	4620      	mov	r0, r4
   1bb60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb64:	f003 ba5c 	b.w	1f020 <ip_interface_recvfrom>
   1bb68:	2009      	movs	r0, #9
   1bb6a:	e7d2      	b.n	1bb12 <tls_interface_recvfrom+0x2a>
   1bb6c:	200206a8 	.word	0x200206a8

0001bb70 <tls_interface_bind>:
   1bb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb74:	460c      	mov	r4, r1
   1bb76:	4617      	mov	r7, r2
   1bb78:	4606      	mov	r6, r0
   1bb7a:	f004 fb8f 	bl	2029c <interface_socket_from_handle_get>
   1bb7e:	2800      	cmp	r0, #0
   1bb80:	d04c      	beq.n	1bc1c <tls_interface_bind+0xac>
   1bb82:	6803      	ldr	r3, [r0, #0]
   1bb84:	4605      	mov	r5, r0
   1bb86:	b29b      	uxth	r3, r3
   1bb88:	2b02      	cmp	r3, #2
   1bb8a:	d150      	bne.n	1bc2e <tls_interface_bind+0xbe>
   1bb8c:	4621      	mov	r1, r4
   1bb8e:	463a      	mov	r2, r7
   1bb90:	4630      	mov	r0, r6
   1bb92:	f003 fbe5 	bl	1f360 <ip_interface_bind>
   1bb96:	4604      	mov	r4, r0
   1bb98:	b120      	cbz	r0, 1bba4 <tls_interface_bind+0x34>
   1bb9a:	2c00      	cmp	r4, #0
   1bb9c:	dc3f      	bgt.n	1bc1e <tls_interface_bind+0xae>
   1bb9e:	4620      	mov	r0, r4
   1bba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bba4:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
   1bba8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1bc40 <tls_interface_bind+0xd0>
   1bbac:	00bf      	lsls	r7, r7, #2
   1bbae:	f818 3007 	ldrb.w	r3, [r8, r7]
   1bbb2:	2b01      	cmp	r3, #1
   1bbb4:	d1f3      	bne.n	1bb9e <tls_interface_bind+0x2e>
   1bbb6:	4603      	mov	r3, r0
   1bbb8:	f247 0281 	movw	r2, #28801	; 0x7081
   1bbbc:	6969      	ldr	r1, [r5, #20]
   1bbbe:	4630      	mov	r0, r6
   1bbc0:	f002 ffee 	bl	1eba0 <ip_interface_request_create>
   1bbc4:	4681      	mov	r9, r0
   1bbc6:	b3b0      	cbz	r0, 1bc36 <tls_interface_bind+0xc6>
   1bbc8:	eb08 0107 	add.w	r1, r8, r7
   1bbcc:	2224      	movs	r2, #36	; 0x24
   1bbce:	3014      	adds	r0, #20
   1bbd0:	f00a f949 	bl	25e66 <memcpy>
   1bbd4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1bbd8:	4649      	mov	r1, r9
   1bbda:	3324      	adds	r3, #36	; 0x24
   1bbdc:	f8c9 3008 	str.w	r3, [r9, #8]
   1bbe0:	682a      	ldr	r2, [r5, #0]
   1bbe2:	2304      	movs	r3, #4
   1bbe4:	0c12      	lsrs	r2, r2, #16
   1bbe6:	0412      	lsls	r2, r2, #16
   1bbe8:	f042 020a 	orr.w	r2, r2, #10
   1bbec:	602a      	str	r2, [r5, #0]
   1bbee:	4628      	mov	r0, r5
   1bbf0:	f247 0281 	movw	r2, #28801	; 0x7081
   1bbf4:	f002 fff4 	bl	1ebe0 <ip_interface_request_send>
   1bbf8:	b9f8      	cbnz	r0, 1bc3a <tls_interface_bind+0xca>
   1bbfa:	682b      	ldr	r3, [r5, #0]
   1bbfc:	00db      	lsls	r3, r3, #3
   1bbfe:	d418      	bmi.n	1bc32 <tls_interface_bind+0xc2>
   1bc00:	4630      	mov	r0, r6
   1bc02:	f04f 33ff 	mov.w	r3, #4294967295
   1bc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bc0a:	210b      	movs	r1, #11
   1bc0c:	f002 fffc 	bl	1ec08 <ip_interface_wait>
   1bc10:	2800      	cmp	r0, #0
   1bc12:	d0c4      	beq.n	1bb9e <tls_interface_bind+0x2e>
   1bc14:	2304      	movs	r3, #4
   1bc16:	4604      	mov	r4, r0
   1bc18:	602b      	str	r3, [r5, #0]
   1bc1a:	e7be      	b.n	1bb9a <tls_interface_bind+0x2a>
   1bc1c:	2409      	movs	r4, #9
   1bc1e:	4620      	mov	r0, r4
   1bc20:	f04f 34ff 	mov.w	r4, #4294967295
   1bc24:	f00b f872 	bl	26d0c <bsd_os_errno_set>
   1bc28:	4620      	mov	r0, r4
   1bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bc2e:	242d      	movs	r4, #45	; 0x2d
   1bc30:	e7f5      	b.n	1bc1e <tls_interface_bind+0xae>
   1bc32:	2473      	movs	r4, #115	; 0x73
   1bc34:	e7f3      	b.n	1bc1e <tls_interface_bind+0xae>
   1bc36:	240c      	movs	r4, #12
   1bc38:	e7f1      	b.n	1bc1e <tls_interface_bind+0xae>
   1bc3a:	4604      	mov	r4, r0
   1bc3c:	e7ad      	b.n	1bb9a <tls_interface_bind+0x2a>
   1bc3e:	bf00      	nop
   1bc40:	200206a8 	.word	0x200206a8

0001bc44 <tls_interface_connect>:
   1bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc46:	460e      	mov	r6, r1
   1bc48:	4617      	mov	r7, r2
   1bc4a:	4604      	mov	r4, r0
   1bc4c:	f004 fb26 	bl	2029c <interface_socket_from_handle_get>
   1bc50:	b1e8      	cbz	r0, 1bc8e <tls_interface_connect+0x4a>
   1bc52:	4b13      	ldr	r3, [pc, #76]	; (1bca0 <tls_interface_connect+0x5c>)
   1bc54:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1bc58:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1bc5c:	2b02      	cmp	r3, #2
   1bc5e:	d11c      	bne.n	1bc9a <tls_interface_connect+0x56>
   1bc60:	6803      	ldr	r3, [r0, #0]
   1bc62:	4605      	mov	r5, r0
   1bc64:	b29b      	uxth	r3, r3
   1bc66:	2b02      	cmp	r3, #2
   1bc68:	d003      	beq.n	1bc72 <tls_interface_connect+0x2e>
   1bc6a:	6803      	ldr	r3, [r0, #0]
   1bc6c:	b29b      	uxth	r3, r3
   1bc6e:	2b04      	cmp	r3, #4
   1bc70:	d113      	bne.n	1bc9a <tls_interface_connect+0x56>
   1bc72:	463a      	mov	r2, r7
   1bc74:	4631      	mov	r1, r6
   1bc76:	4620      	mov	r0, r4
   1bc78:	f003 facc 	bl	1f214 <ip_interface_connect>
   1bc7c:	b110      	cbz	r0, 1bc84 <tls_interface_connect+0x40>
   1bc7e:	2800      	cmp	r0, #0
   1bc80:	dc06      	bgt.n	1bc90 <tls_interface_connect+0x4c>
   1bc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc84:	4629      	mov	r1, r5
   1bc86:	4620      	mov	r0, r4
   1bc88:	f7ff fe0c 	bl	1b8a4 <secure_client_socket>
   1bc8c:	e7f7      	b.n	1bc7e <tls_interface_connect+0x3a>
   1bc8e:	2009      	movs	r0, #9
   1bc90:	f00b f83c 	bl	26d0c <bsd_os_errno_set>
   1bc94:	f04f 30ff 	mov.w	r0, #4294967295
   1bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc9a:	202d      	movs	r0, #45	; 0x2d
   1bc9c:	e7f8      	b.n	1bc90 <tls_interface_connect+0x4c>
   1bc9e:	bf00      	nop
   1bca0:	200206a8 	.word	0x200206a8

0001bca4 <tls_interface_listen>:
   1bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bca8:	460f      	mov	r7, r1
   1bcaa:	4606      	mov	r6, r0
   1bcac:	f004 faf6 	bl	2029c <interface_socket_from_handle_get>
   1bcb0:	2800      	cmp	r0, #0
   1bcb2:	d06b      	beq.n	1bd8c <tls_interface_listen+0xe8>
   1bcb4:	68c3      	ldr	r3, [r0, #12]
   1bcb6:	4604      	mov	r4, r0
   1bcb8:	2b01      	cmp	r3, #1
   1bcba:	d165      	bne.n	1bd88 <tls_interface_listen+0xe4>
   1bcbc:	6803      	ldr	r3, [r0, #0]
   1bcbe:	b29b      	uxth	r3, r3
   1bcc0:	2b04      	cmp	r3, #4
   1bcc2:	d056      	beq.n	1bd72 <tls_interface_listen+0xce>
   1bcc4:	6823      	ldr	r3, [r4, #0]
   1bcc6:	b29b      	uxth	r3, r3
   1bcc8:	2b0b      	cmp	r3, #11
   1bcca:	d15d      	bne.n	1bd88 <tls_interface_listen+0xe4>
   1bccc:	00f3      	lsls	r3, r6, #3
   1bcce:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1bd90 <tls_interface_listen+0xec>
   1bcd2:	199a      	adds	r2, r3, r6
   1bcd4:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   1bcd8:	2a01      	cmp	r2, #1
   1bcda:	d155      	bne.n	1bd88 <tls_interface_listen+0xe4>
   1bcdc:	2201      	movs	r2, #1
   1bcde:	4433      	add	r3, r6
   1bce0:	009d      	lsls	r5, r3, #2
   1bce2:	f809 2005 	strb.w	r2, [r9, r5]
   1bce6:	6961      	ldr	r1, [r4, #20]
   1bce8:	2300      	movs	r3, #0
   1bcea:	f247 0281 	movw	r2, #28801	; 0x7081
   1bcee:	4630      	mov	r0, r6
   1bcf0:	f8d4 8000 	ldr.w	r8, [r4]
   1bcf4:	f002 ff54 	bl	1eba0 <ip_interface_request_create>
   1bcf8:	4682      	mov	sl, r0
   1bcfa:	2800      	cmp	r0, #0
   1bcfc:	d042      	beq.n	1bd84 <tls_interface_listen+0xe0>
   1bcfe:	eb09 0105 	add.w	r1, r9, r5
   1bd02:	2224      	movs	r2, #36	; 0x24
   1bd04:	3014      	adds	r0, #20
   1bd06:	f00a f8ae 	bl	25e66 <memcpy>
   1bd0a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1bd0e:	4651      	mov	r1, sl
   1bd10:	3324      	adds	r3, #36	; 0x24
   1bd12:	f8ca 3008 	str.w	r3, [sl, #8]
   1bd16:	6822      	ldr	r2, [r4, #0]
   1bd18:	4643      	mov	r3, r8
   1bd1a:	0c12      	lsrs	r2, r2, #16
   1bd1c:	0412      	lsls	r2, r2, #16
   1bd1e:	f042 020a 	orr.w	r2, r2, #10
   1bd22:	6022      	str	r2, [r4, #0]
   1bd24:	4620      	mov	r0, r4
   1bd26:	f247 0281 	movw	r2, #28801	; 0x7081
   1bd2a:	f002 ff59 	bl	1ebe0 <ip_interface_request_send>
   1bd2e:	b9e0      	cbnz	r0, 1bd6a <tls_interface_listen+0xc6>
   1bd30:	6823      	ldr	r3, [r4, #0]
   1bd32:	00db      	lsls	r3, r3, #3
   1bd34:	d40e      	bmi.n	1bd54 <tls_interface_listen+0xb0>
   1bd36:	f04f 33ff 	mov.w	r3, #4294967295
   1bd3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bd3e:	210b      	movs	r1, #11
   1bd40:	4630      	mov	r0, r6
   1bd42:	f002 ff61 	bl	1ec08 <ip_interface_wait>
   1bd46:	b160      	cbz	r0, 1bd62 <tls_interface_listen+0xbe>
   1bd48:	2800      	cmp	r0, #0
   1bd4a:	f8c4 8000 	str.w	r8, [r4]
   1bd4e:	dc02      	bgt.n	1bd56 <tls_interface_listen+0xb2>
   1bd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd54:	2073      	movs	r0, #115	; 0x73
   1bd56:	f00a ffd9 	bl	26d0c <bsd_os_errno_set>
   1bd5a:	f04f 30ff 	mov.w	r0, #4294967295
   1bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd62:	4639      	mov	r1, r7
   1bd64:	4630      	mov	r0, r6
   1bd66:	f003 fb91 	bl	1f48c <ip_interface_listen>
   1bd6a:	2800      	cmp	r0, #0
   1bd6c:	dcf3      	bgt.n	1bd56 <tls_interface_listen+0xb2>
   1bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd72:	00f3      	lsls	r3, r6, #3
   1bd74:	f8df 9018 	ldr.w	r9, [pc, #24]	; 1bd90 <tls_interface_listen+0xec>
   1bd78:	199a      	adds	r2, r3, r6
   1bd7a:	f819 2022 	ldrb.w	r2, [r9, r2, lsl #2]
   1bd7e:	2a02      	cmp	r2, #2
   1bd80:	d1a0      	bne.n	1bcc4 <tls_interface_listen+0x20>
   1bd82:	e7ab      	b.n	1bcdc <tls_interface_listen+0x38>
   1bd84:	200c      	movs	r0, #12
   1bd86:	e7e6      	b.n	1bd56 <tls_interface_listen+0xb2>
   1bd88:	202d      	movs	r0, #45	; 0x2d
   1bd8a:	e7e4      	b.n	1bd56 <tls_interface_listen+0xb2>
   1bd8c:	2009      	movs	r0, #9
   1bd8e:	e7e2      	b.n	1bd56 <tls_interface_listen+0xb2>
   1bd90:	200206a8 	.word	0x200206a8

0001bd94 <tls_interface_accept>:
   1bd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd96:	460c      	mov	r4, r1
   1bd98:	4616      	mov	r6, r2
   1bd9a:	461f      	mov	r7, r3
   1bd9c:	4605      	mov	r5, r0
   1bd9e:	f004 fa7d 	bl	2029c <interface_socket_from_handle_get>
   1bda2:	2800      	cmp	r0, #0
   1bda4:	d03b      	beq.n	1be1e <tls_interface_accept+0x8a>
   1bda6:	6800      	ldr	r0, [r0, #0]
   1bda8:	b280      	uxth	r0, r0
   1bdaa:	2806      	cmp	r0, #6
   1bdac:	d137      	bne.n	1be1e <tls_interface_accept+0x8a>
   1bdae:	4621      	mov	r1, r4
   1bdb0:	463b      	mov	r3, r7
   1bdb2:	4632      	mov	r2, r6
   1bdb4:	4628      	mov	r0, r5
   1bdb6:	f003 fbdf 	bl	1f578 <ip_interface_accept>
   1bdba:	4604      	mov	r4, r0
   1bdbc:	b118      	cbz	r0, 1bdc6 <tls_interface_accept+0x32>
   1bdbe:	2c00      	cmp	r4, #0
   1bdc0:	dc2e      	bgt.n	1be20 <tls_interface_accept+0x8c>
   1bdc2:	4620      	mov	r0, r4
   1bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdc6:	4628      	mov	r0, r5
   1bdc8:	f004 fa68 	bl	2029c <interface_socket_from_handle_get>
   1bdcc:	6803      	ldr	r3, [r0, #0]
   1bdce:	4f18      	ldr	r7, [pc, #96]	; (1be30 <tls_interface_accept+0x9c>)
   1bdd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1bdd4:	6003      	str	r3, [r0, #0]
   1bdd6:	6803      	ldr	r3, [r0, #0]
   1bdd8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1bddc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1bde0:	4606      	mov	r6, r0
   1bde2:	6003      	str	r3, [r0, #0]
   1bde4:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   1bde8:	2224      	movs	r2, #36	; 0x24
   1bdea:	4638      	mov	r0, r7
   1bdec:	f00a f83b 	bl	25e66 <memcpy>
   1bdf0:	2302      	movs	r3, #2
   1bdf2:	703b      	strb	r3, [r7, #0]
   1bdf4:	6833      	ldr	r3, [r6, #0]
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	0c1b      	lsrs	r3, r3, #16
   1bdfa:	041b      	lsls	r3, r3, #16
   1bdfc:	f043 030b 	orr.w	r3, r3, #11
   1be00:	6033      	str	r3, [r6, #0]
   1be02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1be06:	f04f 33ff 	mov.w	r3, #4294967295
   1be0a:	210c      	movs	r1, #12
   1be0c:	f002 fefc 	bl	1ec08 <ip_interface_wait>
   1be10:	4604      	mov	r4, r0
   1be12:	2800      	cmp	r0, #0
   1be14:	d0d5      	beq.n	1bdc2 <tls_interface_accept+0x2e>
   1be16:	2000      	movs	r0, #0
   1be18:	f002 ffbc 	bl	1ed94 <ip_interface_close>
   1be1c:	e7cf      	b.n	1bdbe <tls_interface_accept+0x2a>
   1be1e:	2409      	movs	r4, #9
   1be20:	4620      	mov	r0, r4
   1be22:	f04f 34ff 	mov.w	r4, #4294967295
   1be26:	f00a ff71 	bl	26d0c <bsd_os_errno_set>
   1be2a:	4620      	mov	r0, r4
   1be2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be2e:	bf00      	nop
   1be30:	200206a8 	.word	0x200206a8

0001be34 <tls_interface_setopt>:
   1be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be38:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1be3c:	9f06      	ldr	r7, [sp, #24]
   1be3e:	d11d      	bne.n	1be7c <tls_interface_setopt+0x48>
   1be40:	461c      	mov	r4, r3
   1be42:	b1c3      	cbz	r3, 1be76 <tls_interface_setopt+0x42>
   1be44:	b1bf      	cbz	r7, 1be76 <tls_interface_setopt+0x42>
   1be46:	4605      	mov	r5, r0
   1be48:	4616      	mov	r6, r2
   1be4a:	f004 fa27 	bl	2029c <interface_socket_from_handle_get>
   1be4e:	b1c8      	cbz	r0, 1be84 <tls_interface_setopt+0x50>
   1be50:	6803      	ldr	r3, [r0, #0]
   1be52:	b29b      	uxth	r3, r3
   1be54:	2b02      	cmp	r3, #2
   1be56:	d007      	beq.n	1be68 <tls_interface_setopt+0x34>
   1be58:	6803      	ldr	r3, [r0, #0]
   1be5a:	b29b      	uxth	r3, r3
   1be5c:	2b04      	cmp	r3, #4
   1be5e:	d003      	beq.n	1be68 <tls_interface_setopt+0x34>
   1be60:	6803      	ldr	r3, [r0, #0]
   1be62:	b29b      	uxth	r3, r3
   1be64:	2b05      	cmp	r3, #5
   1be66:	d10d      	bne.n	1be84 <tls_interface_setopt+0x50>
   1be68:	3e01      	subs	r6, #1
   1be6a:	2e03      	cmp	r6, #3
   1be6c:	d851      	bhi.n	1bf12 <tls_interface_setopt+0xde>
   1be6e:	e8df f006 	tbb	[pc, r6]
   1be72:	3225      	.short	0x3225
   1be74:	0b18      	.short	0x0b18
   1be76:	200e      	movs	r0, #14
   1be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1be80:	f003 bcb2 	b.w	1f7e8 <ip_interface_setopt>
   1be84:	2009      	movs	r0, #9
   1be86:	e7f7      	b.n	1be78 <tls_interface_setopt+0x44>
   1be88:	2f04      	cmp	r7, #4
   1be8a:	d139      	bne.n	1bf00 <tls_interface_setopt+0xcc>
   1be8c:	6823      	ldr	r3, [r4, #0]
   1be8e:	2b02      	cmp	r3, #2
   1be90:	d836      	bhi.n	1bf00 <tls_interface_setopt+0xcc>
   1be92:	4a21      	ldr	r2, [pc, #132]	; (1bf18 <tls_interface_setopt+0xe4>)
   1be94:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1be98:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1be9c:	70ab      	strb	r3, [r5, #2]
   1be9e:	2000      	movs	r0, #0
   1bea0:	e7ea      	b.n	1be78 <tls_interface_setopt+0x44>
   1bea2:	2f01      	cmp	r7, #1
   1bea4:	d12c      	bne.n	1bf00 <tls_interface_setopt+0xcc>
   1bea6:	7823      	ldrb	r3, [r4, #0]
   1bea8:	2b01      	cmp	r3, #1
   1beaa:	d829      	bhi.n	1bf00 <tls_interface_setopt+0xcc>
   1beac:	4a1a      	ldr	r2, [pc, #104]	; (1bf18 <tls_interface_setopt+0xe4>)
   1beae:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1beb2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   1beb6:	7053      	strb	r3, [r2, #1]
   1beb8:	2000      	movs	r0, #0
   1beba:	e7dd      	b.n	1be78 <tls_interface_setopt+0x44>
   1bebc:	2f04      	cmp	r7, #4
   1bebe:	d11f      	bne.n	1bf00 <tls_interface_setopt+0xcc>
   1bec0:	6820      	ldr	r0, [r4, #0]
   1bec2:	b1f8      	cbz	r0, 1bf04 <tls_interface_setopt+0xd0>
   1bec4:	2801      	cmp	r0, #1
   1bec6:	d11b      	bne.n	1bf00 <tls_interface_setopt+0xcc>
   1bec8:	4b13      	ldr	r3, [pc, #76]	; (1bf18 <tls_interface_setopt+0xe4>)
   1beca:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1bece:	f803 0025 	strb.w	r0, [r3, r5, lsl #2]
   1bed2:	2000      	movs	r0, #0
   1bed4:	e7d0      	b.n	1be78 <tls_interface_setopt+0x44>
   1bed6:	ea5f 0c97 	movs.w	ip, r7, lsr #2
   1beda:	d011      	beq.n	1bf00 <tls_interface_setopt+0xcc>
   1bedc:	f017 0603 	ands.w	r6, r7, #3
   1bee0:	d10e      	bne.n	1bf00 <tls_interface_setopt+0xcc>
   1bee2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1bee6:	00ad      	lsls	r5, r5, #2
   1bee8:	4b0b      	ldr	r3, [pc, #44]	; (1bf18 <tls_interface_setopt+0xe4>)
   1beea:	1d28      	adds	r0, r5, #4
   1beec:	4418      	add	r0, r3
   1beee:	442b      	add	r3, r5
   1bef0:	463a      	mov	r2, r7
   1bef2:	4621      	mov	r1, r4
   1bef4:	f883 c003 	strb.w	ip, [r3, #3]
   1bef8:	f009 ffb5 	bl	25e66 <memcpy>
   1befc:	4630      	mov	r0, r6
   1befe:	e7bb      	b.n	1be78 <tls_interface_setopt+0x44>
   1bf00:	2016      	movs	r0, #22
   1bf02:	e7b9      	b.n	1be78 <tls_interface_setopt+0x44>
   1bf04:	2202      	movs	r2, #2
   1bf06:	4b04      	ldr	r3, [pc, #16]	; (1bf18 <tls_interface_setopt+0xe4>)
   1bf08:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1bf0c:	f803 2025 	strb.w	r2, [r3, r5, lsl #2]
   1bf10:	e7b2      	b.n	1be78 <tls_interface_setopt+0x44>
   1bf12:	202a      	movs	r0, #42	; 0x2a
   1bf14:	e7b0      	b.n	1be78 <tls_interface_setopt+0x44>
   1bf16:	bf00      	nop
   1bf18:	200206a8 	.word	0x200206a8

0001bf1c <tls_interface_getopt>:
   1bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf20:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1bf24:	9f06      	ldr	r7, [sp, #24]
   1bf26:	d112      	bne.n	1bf4e <tls_interface_getopt+0x32>
   1bf28:	461d      	mov	r5, r3
   1bf2a:	b16b      	cbz	r3, 1bf48 <tls_interface_getopt+0x2c>
   1bf2c:	b167      	cbz	r7, 1bf48 <tls_interface_getopt+0x2c>
   1bf2e:	4606      	mov	r6, r0
   1bf30:	4614      	mov	r4, r2
   1bf32:	f004 f9b3 	bl	2029c <interface_socket_from_handle_get>
   1bf36:	2800      	cmp	r0, #0
   1bf38:	d04f      	beq.n	1bfda <tls_interface_getopt+0xbe>
   1bf3a:	3c01      	subs	r4, #1
   1bf3c:	2c03      	cmp	r4, #3
   1bf3e:	d852      	bhi.n	1bfe6 <tls_interface_getopt+0xca>
   1bf40:	e8df f004 	tbb	[pc, r4]
   1bf44:	09152139 	.word	0x09152139
   1bf48:	200e      	movs	r0, #14
   1bf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bf4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bf52:	f003 bd0b 	b.w	1f96c <ip_interface_getopt>
   1bf56:	683b      	ldr	r3, [r7, #0]
   1bf58:	2b04      	cmp	r3, #4
   1bf5a:	d13c      	bne.n	1bfd6 <tls_interface_getopt+0xba>
   1bf5c:	4b23      	ldr	r3, [pc, #140]	; (1bfec <tls_interface_getopt+0xd0>)
   1bf5e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1bf62:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1bf66:	78b3      	ldrb	r3, [r6, #2]
   1bf68:	2000      	movs	r0, #0
   1bf6a:	602b      	str	r3, [r5, #0]
   1bf6c:	e7ed      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bf6e:	683b      	ldr	r3, [r7, #0]
   1bf70:	2b04      	cmp	r3, #4
   1bf72:	d130      	bne.n	1bfd6 <tls_interface_getopt+0xba>
   1bf74:	4b1d      	ldr	r3, [pc, #116]	; (1bfec <tls_interface_getopt+0xd0>)
   1bf76:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1bf7a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1bf7e:	7873      	ldrb	r3, [r6, #1]
   1bf80:	2000      	movs	r0, #0
   1bf82:	602b      	str	r3, [r5, #0]
   1bf84:	e7e1      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bf86:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1bf8a:	4918      	ldr	r1, [pc, #96]	; (1bfec <tls_interface_getopt+0xd0>)
   1bf8c:	683b      	ldr	r3, [r7, #0]
   1bf8e:	00b6      	lsls	r6, r6, #2
   1bf90:	198a      	adds	r2, r1, r6
   1bf92:	f013 0403 	ands.w	r4, r3, #3
   1bf96:	78d0      	ldrb	r0, [r2, #3]
   1bf98:	d121      	bne.n	1bfde <tls_interface_getopt+0xc2>
   1bf9a:	089b      	lsrs	r3, r3, #2
   1bf9c:	4283      	cmp	r3, r0
   1bf9e:	bf28      	it	cs
   1bfa0:	4603      	movcs	r3, r0
   1bfa2:	009a      	lsls	r2, r3, #2
   1bfa4:	b1db      	cbz	r3, 1bfde <tls_interface_getopt+0xc2>
   1bfa6:	3604      	adds	r6, #4
   1bfa8:	4431      	add	r1, r6
   1bfaa:	603a      	str	r2, [r7, #0]
   1bfac:	4628      	mov	r0, r5
   1bfae:	f009 ff5a 	bl	25e66 <memcpy>
   1bfb2:	4620      	mov	r0, r4
   1bfb4:	e7c9      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfb6:	683b      	ldr	r3, [r7, #0]
   1bfb8:	2b04      	cmp	r3, #4
   1bfba:	d10c      	bne.n	1bfd6 <tls_interface_getopt+0xba>
   1bfbc:	4b0b      	ldr	r3, [pc, #44]	; (1bfec <tls_interface_getopt+0xd0>)
   1bfbe:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1bfc2:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   1bfc6:	2000      	movs	r0, #0
   1bfc8:	f1a3 0301 	sub.w	r3, r3, #1
   1bfcc:	fab3 f383 	clz	r3, r3
   1bfd0:	095b      	lsrs	r3, r3, #5
   1bfd2:	602b      	str	r3, [r5, #0]
   1bfd4:	e7b9      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfd6:	2016      	movs	r0, #22
   1bfd8:	e7b7      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfda:	2009      	movs	r0, #9
   1bfdc:	e7b5      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfde:	2800      	cmp	r0, #0
   1bfe0:	d1f9      	bne.n	1bfd6 <tls_interface_getopt+0xba>
   1bfe2:	6038      	str	r0, [r7, #0]
   1bfe4:	e7b1      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfe6:	202a      	movs	r0, #42	; 0x2a
   1bfe8:	e7af      	b.n	1bf4a <tls_interface_getopt+0x2e>
   1bfea:	bf00      	nop
   1bfec:	200206a8 	.word	0x200206a8

0001bff0 <tls_rpc_ip_event_handler>:
   1bff0:	b538      	push	{r3, r4, r5, lr}
   1bff2:	f248 0581 	movw	r5, #32897	; 0x8081
   1bff6:	42ab      	cmp	r3, r5
   1bff8:	460c      	mov	r4, r1
   1bffa:	d053      	beq.n	1c0a4 <tls_rpc_ip_event_handler+0xb4>
   1bffc:	f249 0182 	movw	r1, #36994	; 0x9082
   1c000:	428b      	cmp	r3, r1
   1c002:	d02d      	beq.n	1c060 <tls_rpc_ip_event_handler+0x70>
   1c004:	f248 0102 	movw	r1, #32770	; 0x8002
   1c008:	428b      	cmp	r3, r1
   1c00a:	d001      	beq.n	1c010 <tls_rpc_ip_event_handler+0x20>
   1c00c:	2001      	movs	r0, #1
   1c00e:	bd38      	pop	{r3, r4, r5, pc}
   1c010:	2c00      	cmp	r4, #0
   1c012:	d0fb      	beq.n	1c00c <tls_rpc_ip_event_handler+0x1c>
   1c014:	6923      	ldr	r3, [r4, #16]
   1c016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1c01a:	d002      	beq.n	1c022 <tls_rpc_ip_event_handler+0x32>
   1c01c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1c020:	d1f4      	bne.n	1c00c <tls_rpc_ip_event_handler+0x1c>
   1c022:	6823      	ldr	r3, [r4, #0]
   1c024:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1c028:	6023      	str	r3, [r4, #0]
   1c02a:	6955      	ldr	r5, [r2, #20]
   1c02c:	2d00      	cmp	r5, #0
   1c02e:	d148      	bne.n	1c0c2 <tls_rpc_ip_event_handler+0xd2>
   1c030:	6823      	ldr	r3, [r4, #0]
   1c032:	0c1b      	lsrs	r3, r3, #16
   1c034:	041b      	lsls	r3, r3, #16
   1c036:	f043 0305 	orr.w	r3, r3, #5
   1c03a:	6023      	str	r3, [r4, #0]
   1c03c:	6823      	ldr	r3, [r4, #0]
   1c03e:	00da      	lsls	r2, r3, #3
   1c040:	d50c      	bpl.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c042:	4b25      	ldr	r3, [pc, #148]	; (1c0d8 <tls_rpc_ip_event_handler+0xe8>)
   1c044:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
   1c048:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1c04c:	2b02      	cmp	r3, #2
   1c04e:	d105      	bne.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c050:	4621      	mov	r1, r4
   1c052:	f7ff fc27 	bl	1b8a4 <secure_client_socket>
   1c056:	b108      	cbz	r0, 1c05c <tls_rpc_ip_event_handler+0x6c>
   1c058:	2873      	cmp	r0, #115	; 0x73
   1c05a:	d135      	bne.n	1c0c8 <tls_rpc_ip_event_handler+0xd8>
   1c05c:	2000      	movs	r0, #0
   1c05e:	bd38      	pop	{r3, r4, r5, pc}
   1c060:	2c00      	cmp	r4, #0
   1c062:	d0fb      	beq.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c064:	6823      	ldr	r3, [r4, #0]
   1c066:	b29b      	uxth	r3, r3
   1c068:	2b0b      	cmp	r3, #11
   1c06a:	d1f7      	bne.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c06c:	6910      	ldr	r0, [r2, #16]
   1c06e:	bb48      	cbnz	r0, 1c0c4 <tls_rpc_ip_event_handler+0xd4>
   1c070:	6823      	ldr	r3, [r4, #0]
   1c072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1c076:	6023      	str	r3, [r4, #0]
   1c078:	6823      	ldr	r3, [r4, #0]
   1c07a:	00db      	lsls	r3, r3, #3
   1c07c:	d5ee      	bpl.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c07e:	6823      	ldr	r3, [r4, #0]
   1c080:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1c084:	6023      	str	r3, [r4, #0]
   1c086:	6823      	ldr	r3, [r4, #0]
   1c088:	0c1b      	lsrs	r3, r3, #16
   1c08a:	041b      	lsls	r3, r3, #16
   1c08c:	f043 030c 	orr.w	r3, r3, #12
   1c090:	6023      	str	r3, [r4, #0]
   1c092:	6823      	ldr	r3, [r4, #0]
   1c094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1c098:	6023      	str	r3, [r4, #0]
   1c09a:	6823      	ldr	r3, [r4, #0]
   1c09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c0a0:	6023      	str	r3, [r4, #0]
   1c0a2:	bd38      	pop	{r3, r4, r5, pc}
   1c0a4:	2900      	cmp	r1, #0
   1c0a6:	d0d9      	beq.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c0a8:	680b      	ldr	r3, [r1, #0]
   1c0aa:	b29b      	uxth	r3, r3
   1c0ac:	2b0a      	cmp	r3, #10
   1c0ae:	d1d5      	bne.n	1c05c <tls_rpc_ip_event_handler+0x6c>
   1c0b0:	6950      	ldr	r0, [r2, #20]
   1c0b2:	b938      	cbnz	r0, 1c0c4 <tls_rpc_ip_event_handler+0xd4>
   1c0b4:	680b      	ldr	r3, [r1, #0]
   1c0b6:	0c1b      	lsrs	r3, r3, #16
   1c0b8:	041b      	lsls	r3, r3, #16
   1c0ba:	f043 030b 	orr.w	r3, r3, #11
   1c0be:	600b      	str	r3, [r1, #0]
   1c0c0:	bd38      	pop	{r3, r4, r5, pc}
   1c0c2:	4628      	mov	r0, r5
   1c0c4:	f002 fd62 	bl	1eb8c <rpc_error_to_nrf_bsd_error>
   1c0c8:	6060      	str	r0, [r4, #4]
   1c0ca:	6823      	ldr	r3, [r4, #0]
   1c0cc:	2000      	movs	r0, #0
   1c0ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1c0d2:	6023      	str	r3, [r4, #0]
   1c0d4:	bd38      	pop	{r3, r4, r5, pc}
   1c0d6:	bf00      	nop
   1c0d8:	200206a8 	.word	0x200206a8

0001c0dc <rpc_dfu_event_handler>:
   1c0dc:	b508      	push	{r3, lr}
   1c0de:	4a08      	ldr	r2, [pc, #32]	; (1c100 <rpc_dfu_event_handler+0x24>)
   1c0e0:	68c1      	ldr	r1, [r0, #12]
   1c0e2:	8812      	ldrh	r2, [r2, #0]
   1c0e4:	4603      	mov	r3, r0
   1c0e6:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1c0ea:	d005      	beq.n	1c0f8 <rpc_dfu_event_handler+0x1c>
   1c0ec:	6800      	ldr	r0, [r0, #0]
   1c0ee:	b110      	cbz	r0, 1c0f6 <rpc_dfu_event_handler+0x1a>
   1c0f0:	f7f7 fff8 	bl	140e4 <rpc_dfu_client_data_free>
   1c0f4:	2000      	movs	r0, #0
   1c0f6:	bd08      	pop	{r3, pc}
   1c0f8:	4a02      	ldr	r2, [pc, #8]	; (1c104 <rpc_dfu_event_handler+0x28>)
   1c0fa:	2001      	movs	r0, #1
   1c0fc:	6013      	str	r3, [r2, #0]
   1c0fe:	bd08      	pop	{r3, pc}
   1c100:	20022254 	.word	0x20022254
   1c104:	200207d4 	.word	0x200207d4

0001c108 <mfu_interface_init>:
   1c108:	2300      	movs	r3, #0
   1c10a:	b510      	push	{r4, lr}
   1c10c:	4808      	ldr	r0, [pc, #32]	; (1c130 <mfu_interface_init+0x28>)
   1c10e:	4909      	ldr	r1, [pc, #36]	; (1c134 <mfu_interface_init+0x2c>)
   1c110:	4a09      	ldr	r2, [pc, #36]	; (1c138 <mfu_interface_init+0x30>)
   1c112:	4c0a      	ldr	r4, [pc, #40]	; (1c13c <mfu_interface_init+0x34>)
   1c114:	8003      	strh	r3, [r0, #0]
   1c116:	600b      	str	r3, [r1, #0]
   1c118:	6013      	str	r3, [r2, #0]
   1c11a:	6023      	str	r3, [r4, #0]
   1c11c:	f7f7 ffac 	bl	14078 <rpc_dfu_client_init>
   1c120:	b910      	cbnz	r0, 1c128 <mfu_interface_init+0x20>
   1c122:	2301      	movs	r3, #1
   1c124:	6023      	str	r3, [r4, #0]
   1c126:	bd10      	pop	{r4, pc}
   1c128:	f04f 30ff 	mov.w	r0, #4294967295
   1c12c:	bd10      	pop	{r4, pc}
   1c12e:	bf00      	nop
   1c130:	20022254 	.word	0x20022254
   1c134:	200207d4 	.word	0x200207d4
   1c138:	200207d0 	.word	0x200207d0
   1c13c:	200207c8 	.word	0x200207c8

0001c140 <mfu_interface_open>:
   1c140:	2801      	cmp	r0, #1
   1c142:	b508      	push	{r3, lr}
   1c144:	d10b      	bne.n	1c15e <mfu_interface_open+0x1e>
   1c146:	f240 2303 	movw	r3, #515	; 0x203
   1c14a:	429a      	cmp	r2, r3
   1c14c:	d107      	bne.n	1c15e <mfu_interface_open+0x1e>
   1c14e:	4b09      	ldr	r3, [pc, #36]	; (1c174 <mfu_interface_open+0x34>)
   1c150:	681a      	ldr	r2, [r3, #0]
   1c152:	2a01      	cmp	r2, #1
   1c154:	d109      	bne.n	1c16a <mfu_interface_open+0x2a>
   1c156:	2202      	movs	r2, #2
   1c158:	601a      	str	r2, [r3, #0]
   1c15a:	4807      	ldr	r0, [pc, #28]	; (1c178 <mfu_interface_open+0x38>)
   1c15c:	bd08      	pop	{r3, pc}
   1c15e:	2016      	movs	r0, #22
   1c160:	f00a fdd4 	bl	26d0c <bsd_os_errno_set>
   1c164:	f04f 30ff 	mov.w	r0, #4294967295
   1c168:	bd08      	pop	{r3, pc}
   1c16a:	f00a fdcf 	bl	26d0c <bsd_os_errno_set>
   1c16e:	f04f 30ff 	mov.w	r0, #4294967295
   1c172:	bd08      	pop	{r3, pc}
   1c174:	200207c8 	.word	0x200207c8
   1c178:	49765432 	.word	0x49765432

0001c17c <mfu_interface_close>:
   1c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c180:	4c37      	ldr	r4, [pc, #220]	; (1c260 <mfu_interface_close+0xe4>)
   1c182:	b084      	sub	sp, #16
   1c184:	6823      	ldr	r3, [r4, #0]
   1c186:	1e9a      	subs	r2, r3, #2
   1c188:	2a01      	cmp	r2, #1
   1c18a:	d863      	bhi.n	1c254 <mfu_interface_close+0xd8>
   1c18c:	2b03      	cmp	r3, #3
   1c18e:	d005      	beq.n	1c19c <mfu_interface_close+0x20>
   1c190:	2301      	movs	r3, #1
   1c192:	2000      	movs	r0, #0
   1c194:	6023      	str	r3, [r4, #0]
   1c196:	b004      	add	sp, #16
   1c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c19c:	2100      	movs	r1, #0
   1c19e:	4d31      	ldr	r5, [pc, #196]	; (1c264 <mfu_interface_close+0xe8>)
   1c1a0:	4b31      	ldr	r3, [pc, #196]	; (1c268 <mfu_interface_close+0xec>)
   1c1a2:	f8c5 161c 	str.w	r1, [r5, #1564]	; 0x61c
   1c1a6:	681b      	ldr	r3, [r3, #0]
   1c1a8:	a801      	add	r0, sp, #4
   1c1aa:	9302      	str	r3, [sp, #8]
   1c1ac:	9b02      	ldr	r3, [sp, #8]
   1c1ae:	f7f7 ff69 	bl	14084 <rpc_dfu_client_request_alloc>
   1c1b2:	4603      	mov	r3, r0
   1c1b4:	bb08      	cbnz	r0, 1c1fa <mfu_interface_close+0x7e>
   1c1b6:	2704      	movs	r7, #4
   1c1b8:	482c      	ldr	r0, [pc, #176]	; (1c26c <mfu_interface_close+0xf0>)
   1c1ba:	4e2d      	ldr	r6, [pc, #180]	; (1c270 <mfu_interface_close+0xf4>)
   1c1bc:	8802      	ldrh	r2, [r0, #0]
   1c1be:	6033      	str	r3, [r6, #0]
   1c1c0:	3201      	adds	r2, #1
   1c1c2:	b292      	uxth	r2, r2
   1c1c4:	0411      	lsls	r1, r2, #16
   1c1c6:	8002      	strh	r2, [r0, #0]
   1c1c8:	9801      	ldr	r0, [sp, #4]
   1c1ca:	f041 0106 	orr.w	r1, r1, #6
   1c1ce:	60c1      	str	r1, [r0, #12]
   1c1d0:	7103      	strb	r3, [r0, #4]
   1c1d2:	7143      	strb	r3, [r0, #5]
   1c1d4:	7183      	strb	r3, [r0, #6]
   1c1d6:	71c3      	strb	r3, [r0, #7]
   1c1d8:	7243      	strb	r3, [r0, #9]
   1c1da:	7283      	strb	r3, [r0, #10]
   1c1dc:	72c3      	strb	r3, [r0, #11]
   1c1de:	7207      	strb	r7, [r0, #8]
   1c1e0:	2106      	movs	r1, #6
   1c1e2:	f7f7 ff63 	bl	140ac <rpc_dfu_client_request_send>
   1c1e6:	b180      	cbz	r0, 1c20a <mfu_interface_close+0x8e>
   1c1e8:	9801      	ldr	r0, [sp, #4]
   1c1ea:	6803      	ldr	r3, [r0, #0]
   1c1ec:	b11b      	cbz	r3, 1c1f6 <mfu_interface_close+0x7a>
   1c1ee:	4618      	mov	r0, r3
   1c1f0:	f7f7 ff78 	bl	140e4 <rpc_dfu_client_data_free>
   1c1f4:	9801      	ldr	r0, [sp, #4]
   1c1f6:	f7f7 ff6d 	bl	140d4 <rpc_dfu_client_message_free>
   1c1fa:	200c      	movs	r0, #12
   1c1fc:	f00a fd86 	bl	26d0c <bsd_os_errno_set>
   1c200:	f04f 30ff 	mov.w	r0, #4294967295
   1c204:	b004      	add	sp, #16
   1c206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c20a:	f04f 33ff 	mov.w	r3, #4294967295
   1c20e:	af04      	add	r7, sp, #16
   1c210:	f847 3d04 	str.w	r3, [r7, #-4]!
   1c214:	46a0      	mov	r8, r4
   1c216:	e007      	b.n	1c228 <mfu_interface_close+0xac>
   1c218:	f8d5 361c 	ldr.w	r3, [r5, #1564]	; 0x61c
   1c21c:	b9a3      	cbnz	r3, 1c248 <mfu_interface_close+0xcc>
   1c21e:	4639      	mov	r1, r7
   1c220:	4640      	mov	r0, r8
   1c222:	f7f7 fa6b 	bl	136fc <bsd_os_timedwait>
   1c226:	b978      	cbnz	r0, 1c248 <mfu_interface_close+0xcc>
   1c228:	6830      	ldr	r0, [r6, #0]
   1c22a:	2800      	cmp	r0, #0
   1c22c:	d0f4      	beq.n	1c218 <mfu_interface_close+0x9c>
   1c22e:	6905      	ldr	r5, [r0, #16]
   1c230:	f7f7 ff50 	bl	140d4 <rpc_dfu_client_message_free>
   1c234:	2d00      	cmp	r5, #0
   1c236:	d0ab      	beq.n	1c190 <mfu_interface_close+0x14>
   1c238:	4b0e      	ldr	r3, [pc, #56]	; (1c274 <mfu_interface_close+0xf8>)
   1c23a:	2008      	movs	r0, #8
   1c23c:	601d      	str	r5, [r3, #0]
   1c23e:	f00a fd65 	bl	26d0c <bsd_os_errno_set>
   1c242:	f04f 30ff 	mov.w	r0, #4294967295
   1c246:	e7a6      	b.n	1c196 <mfu_interface_close+0x1a>
   1c248:	203c      	movs	r0, #60	; 0x3c
   1c24a:	f00a fd5f 	bl	26d0c <bsd_os_errno_set>
   1c24e:	f04f 30ff 	mov.w	r0, #4294967295
   1c252:	e7a0      	b.n	1c196 <mfu_interface_close+0x1a>
   1c254:	2001      	movs	r0, #1
   1c256:	f00a fd59 	bl	26d0c <bsd_os_errno_set>
   1c25a:	f04f 30ff 	mov.w	r0, #4294967295
   1c25e:	e79a      	b.n	1c196 <mfu_interface_close+0x1a>
   1c260:	200207c8 	.word	0x200207c8
   1c264:	4002a000 	.word	0x4002a000
   1c268:	4002a61c 	.word	0x4002a61c
   1c26c:	20022254 	.word	0x20022254
   1c270:	200207d4 	.word	0x200207d4
   1c274:	200207cc 	.word	0x200207cc

0001c278 <mfu_interface_sendto>:
   1c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c27c:	4e69      	ldr	r6, [pc, #420]	; (1c424 <mfu_interface_sendto+0x1ac>)
   1c27e:	4614      	mov	r4, r2
   1c280:	6833      	ldr	r3, [r6, #0]
   1c282:	b084      	sub	sp, #16
   1c284:	1e9a      	subs	r2, r3, #2
   1c286:	2a01      	cmp	r2, #1
   1c288:	f200 80c5 	bhi.w	1c416 <mfu_interface_sendto+0x19e>
   1c28c:	4688      	mov	r8, r1
   1c28e:	2900      	cmp	r1, #0
   1c290:	f000 80bb 	beq.w	1c40a <mfu_interface_sendto+0x192>
   1c294:	2c00      	cmp	r4, #0
   1c296:	f000 80b8 	beq.w	1c40a <mfu_interface_sendto+0x192>
   1c29a:	2b02      	cmp	r3, #2
   1c29c:	d063      	beq.n	1c366 <mfu_interface_sendto+0xee>
   1c29e:	2200      	movs	r2, #0
   1c2a0:	4e61      	ldr	r6, [pc, #388]	; (1c428 <mfu_interface_sendto+0x1b0>)
   1c2a2:	4b62      	ldr	r3, [pc, #392]	; (1c42c <mfu_interface_sendto+0x1b4>)
   1c2a4:	f8c6 261c 	str.w	r2, [r6, #1564]	; 0x61c
   1c2a8:	681b      	ldr	r3, [r3, #0]
   1c2aa:	4621      	mov	r1, r4
   1c2ac:	9302      	str	r3, [sp, #8]
   1c2ae:	a801      	add	r0, sp, #4
   1c2b0:	9b02      	ldr	r3, [sp, #8]
   1c2b2:	f7f7 fee7 	bl	14084 <rpc_dfu_client_request_alloc>
   1c2b6:	4607      	mov	r7, r0
   1c2b8:	b140      	cbz	r0, 1c2cc <mfu_interface_sendto+0x54>
   1c2ba:	200c      	movs	r0, #12
   1c2bc:	f00a fd26 	bl	26d0c <bsd_os_errno_set>
   1c2c0:	f04f 34ff 	mov.w	r4, #4294967295
   1c2c4:	4620      	mov	r0, r4
   1c2c6:	b004      	add	sp, #16
   1c2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c2cc:	9b01      	ldr	r3, [sp, #4]
   1c2ce:	4641      	mov	r1, r8
   1c2d0:	6818      	ldr	r0, [r3, #0]
   1c2d2:	4622      	mov	r2, r4
   1c2d4:	f009 fdc7 	bl	25e66 <memcpy>
   1c2d8:	2104      	movs	r1, #4
   1c2da:	4d55      	ldr	r5, [pc, #340]	; (1c430 <mfu_interface_sendto+0x1b8>)
   1c2dc:	9801      	ldr	r0, [sp, #4]
   1c2de:	882b      	ldrh	r3, [r5, #0]
   1c2e0:	6044      	str	r4, [r0, #4]
   1c2e2:	3301      	adds	r3, #1
   1c2e4:	b29b      	uxth	r3, r3
   1c2e6:	041a      	lsls	r2, r3, #16
   1c2e8:	802b      	strh	r3, [r5, #0]
   1c2ea:	430a      	orrs	r2, r1
   1c2ec:	4d51      	ldr	r5, [pc, #324]	; (1c434 <mfu_interface_sendto+0x1bc>)
   1c2ee:	60c2      	str	r2, [r0, #12]
   1c2f0:	7247      	strb	r7, [r0, #9]
   1c2f2:	7287      	strb	r7, [r0, #10]
   1c2f4:	72c7      	strb	r7, [r0, #11]
   1c2f6:	7201      	strb	r1, [r0, #8]
   1c2f8:	602f      	str	r7, [r5, #0]
   1c2fa:	f7f7 fed7 	bl	140ac <rpc_dfu_client_request_send>
   1c2fe:	b9f8      	cbnz	r0, 1c340 <mfu_interface_sendto+0xc8>
   1c300:	f04f 33ff 	mov.w	r3, #4294967295
   1c304:	af04      	add	r7, sp, #16
   1c306:	f847 3d04 	str.w	r3, [r7, #-4]!
   1c30a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1c424 <mfu_interface_sendto+0x1ac>
   1c30e:	e007      	b.n	1c320 <mfu_interface_sendto+0xa8>
   1c310:	f8d6 361c 	ldr.w	r3, [r6, #1564]	; 0x61c
   1c314:	b9f3      	cbnz	r3, 1c354 <mfu_interface_sendto+0xdc>
   1c316:	4639      	mov	r1, r7
   1c318:	4640      	mov	r0, r8
   1c31a:	f7f7 f9ef 	bl	136fc <bsd_os_timedwait>
   1c31e:	b9c8      	cbnz	r0, 1c354 <mfu_interface_sendto+0xdc>
   1c320:	6828      	ldr	r0, [r5, #0]
   1c322:	2800      	cmp	r0, #0
   1c324:	d0f4      	beq.n	1c310 <mfu_interface_sendto+0x98>
   1c326:	6905      	ldr	r5, [r0, #16]
   1c328:	f7f7 fed4 	bl	140d4 <rpc_dfu_client_message_free>
   1c32c:	2d00      	cmp	r5, #0
   1c32e:	d0c9      	beq.n	1c2c4 <mfu_interface_sendto+0x4c>
   1c330:	4b41      	ldr	r3, [pc, #260]	; (1c438 <mfu_interface_sendto+0x1c0>)
   1c332:	2008      	movs	r0, #8
   1c334:	601d      	str	r5, [r3, #0]
   1c336:	f04f 34ff 	mov.w	r4, #4294967295
   1c33a:	f00a fce7 	bl	26d0c <bsd_os_errno_set>
   1c33e:	e7c1      	b.n	1c2c4 <mfu_interface_sendto+0x4c>
   1c340:	9801      	ldr	r0, [sp, #4]
   1c342:	6803      	ldr	r3, [r0, #0]
   1c344:	b11b      	cbz	r3, 1c34e <mfu_interface_sendto+0xd6>
   1c346:	4618      	mov	r0, r3
   1c348:	f7f7 fecc 	bl	140e4 <rpc_dfu_client_data_free>
   1c34c:	9801      	ldr	r0, [sp, #4]
   1c34e:	f7f7 fec1 	bl	140d4 <rpc_dfu_client_message_free>
   1c352:	e7b2      	b.n	1c2ba <mfu_interface_sendto+0x42>
   1c354:	f04f 34ff 	mov.w	r4, #4294967295
   1c358:	203c      	movs	r0, #60	; 0x3c
   1c35a:	f00a fcd7 	bl	26d0c <bsd_os_errno_set>
   1c35e:	4620      	mov	r0, r4
   1c360:	b004      	add	sp, #16
   1c362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c366:	2100      	movs	r1, #0
   1c368:	4f2f      	ldr	r7, [pc, #188]	; (1c428 <mfu_interface_sendto+0x1b0>)
   1c36a:	4b30      	ldr	r3, [pc, #192]	; (1c42c <mfu_interface_sendto+0x1b4>)
   1c36c:	f8c7 161c 	str.w	r1, [r7, #1564]	; 0x61c
   1c370:	681b      	ldr	r3, [r3, #0]
   1c372:	a802      	add	r0, sp, #8
   1c374:	9300      	str	r3, [sp, #0]
   1c376:	9b00      	ldr	r3, [sp, #0]
   1c378:	f7f7 fe84 	bl	14084 <rpc_dfu_client_request_alloc>
   1c37c:	4602      	mov	r2, r0
   1c37e:	2800      	cmp	r0, #0
   1c380:	d19b      	bne.n	1c2ba <mfu_interface_sendto+0x42>
   1c382:	f04f 0c08 	mov.w	ip, #8
   1c386:	492a      	ldr	r1, [pc, #168]	; (1c430 <mfu_interface_sendto+0x1b8>)
   1c388:	482c      	ldr	r0, [pc, #176]	; (1c43c <mfu_interface_sendto+0x1c4>)
   1c38a:	880b      	ldrh	r3, [r1, #0]
   1c38c:	6805      	ldr	r5, [r0, #0]
   1c38e:	3301      	adds	r3, #1
   1c390:	9802      	ldr	r0, [sp, #8]
   1c392:	b29b      	uxth	r3, r3
   1c394:	800b      	strh	r3, [r1, #0]
   1c396:	041b      	lsls	r3, r3, #16
   1c398:	f043 0303 	orr.w	r3, r3, #3
   1c39c:	6105      	str	r5, [r0, #16]
   1c39e:	4d25      	ldr	r5, [pc, #148]	; (1c434 <mfu_interface_sendto+0x1bc>)
   1c3a0:	60c3      	str	r3, [r0, #12]
   1c3a2:	7102      	strb	r2, [r0, #4]
   1c3a4:	7142      	strb	r2, [r0, #5]
   1c3a6:	7182      	strb	r2, [r0, #6]
   1c3a8:	71c2      	strb	r2, [r0, #7]
   1c3aa:	7242      	strb	r2, [r0, #9]
   1c3ac:	7282      	strb	r2, [r0, #10]
   1c3ae:	72c2      	strb	r2, [r0, #11]
   1c3b0:	f880 c008 	strb.w	ip, [r0, #8]
   1c3b4:	2103      	movs	r1, #3
   1c3b6:	602a      	str	r2, [r5, #0]
   1c3b8:	f7f7 fe78 	bl	140ac <rpc_dfu_client_request_send>
   1c3bc:	b9e0      	cbnz	r0, 1c3f8 <mfu_interface_sendto+0x180>
   1c3be:	f04f 33ff 	mov.w	r3, #4294967295
   1c3c2:	f10d 0910 	add.w	r9, sp, #16
   1c3c6:	f849 3d04 	str.w	r3, [r9, #-4]!
   1c3ca:	46b2      	mov	sl, r6
   1c3cc:	e009      	b.n	1c3e2 <mfu_interface_sendto+0x16a>
   1c3ce:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
   1c3d2:	2b00      	cmp	r3, #0
   1c3d4:	d1be      	bne.n	1c354 <mfu_interface_sendto+0xdc>
   1c3d6:	4649      	mov	r1, r9
   1c3d8:	4650      	mov	r0, sl
   1c3da:	f7f7 f98f 	bl	136fc <bsd_os_timedwait>
   1c3de:	2800      	cmp	r0, #0
   1c3e0:	d1b8      	bne.n	1c354 <mfu_interface_sendto+0xdc>
   1c3e2:	6828      	ldr	r0, [r5, #0]
   1c3e4:	2800      	cmp	r0, #0
   1c3e6:	d0f2      	beq.n	1c3ce <mfu_interface_sendto+0x156>
   1c3e8:	6905      	ldr	r5, [r0, #16]
   1c3ea:	f7f7 fe73 	bl	140d4 <rpc_dfu_client_message_free>
   1c3ee:	2d00      	cmp	r5, #0
   1c3f0:	d19e      	bne.n	1c330 <mfu_interface_sendto+0xb8>
   1c3f2:	2303      	movs	r3, #3
   1c3f4:	6033      	str	r3, [r6, #0]
   1c3f6:	e752      	b.n	1c29e <mfu_interface_sendto+0x26>
   1c3f8:	9802      	ldr	r0, [sp, #8]
   1c3fa:	6803      	ldr	r3, [r0, #0]
   1c3fc:	2b00      	cmp	r3, #0
   1c3fe:	d0a6      	beq.n	1c34e <mfu_interface_sendto+0xd6>
   1c400:	4618      	mov	r0, r3
   1c402:	f7f7 fe6f 	bl	140e4 <rpc_dfu_client_data_free>
   1c406:	9802      	ldr	r0, [sp, #8]
   1c408:	e7a1      	b.n	1c34e <mfu_interface_sendto+0xd6>
   1c40a:	2016      	movs	r0, #22
   1c40c:	f00a fc7e 	bl	26d0c <bsd_os_errno_set>
   1c410:	f04f 34ff 	mov.w	r4, #4294967295
   1c414:	e756      	b.n	1c2c4 <mfu_interface_sendto+0x4c>
   1c416:	2001      	movs	r0, #1
   1c418:	f00a fc78 	bl	26d0c <bsd_os_errno_set>
   1c41c:	f04f 34ff 	mov.w	r4, #4294967295
   1c420:	e750      	b.n	1c2c4 <mfu_interface_sendto+0x4c>
   1c422:	bf00      	nop
   1c424:	200207c8 	.word	0x200207c8
   1c428:	4002a000 	.word	0x4002a000
   1c42c:	4002a61c 	.word	0x4002a61c
   1c430:	20022254 	.word	0x20022254
   1c434:	200207d4 	.word	0x200207d4
   1c438:	200207cc 	.word	0x200207cc
   1c43c:	200207d0 	.word	0x200207d0

0001c440 <mfu_interface_setopt>:
   1c440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c442:	484b      	ldr	r0, [pc, #300]	; (1c570 <mfu_interface_setopt+0x130>)
   1c444:	b085      	sub	sp, #20
   1c446:	6800      	ldr	r0, [r0, #0]
   1c448:	3802      	subs	r0, #2
   1c44a:	2801      	cmp	r0, #1
   1c44c:	f200 8081 	bhi.w	1c552 <mfu_interface_setopt+0x112>
   1c450:	f240 2003 	movw	r0, #515	; 0x203
   1c454:	4281      	cmp	r1, r0
   1c456:	d176      	bne.n	1c546 <mfu_interface_setopt+0x106>
   1c458:	3a04      	subs	r2, #4
   1c45a:	2a03      	cmp	r2, #3
   1c45c:	d865      	bhi.n	1c52a <mfu_interface_setopt+0xea>
   1c45e:	e8df f002 	tbb	[pc, r2]
   1c462:	0254      	.short	0x0254
   1c464:	5a57      	.short	0x5a57
   1c466:	2507      	movs	r5, #7
   1c468:	462e      	mov	r6, r5
   1c46a:	2100      	movs	r1, #0
   1c46c:	4c41      	ldr	r4, [pc, #260]	; (1c574 <mfu_interface_setopt+0x134>)
   1c46e:	4b42      	ldr	r3, [pc, #264]	; (1c578 <mfu_interface_setopt+0x138>)
   1c470:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
   1c474:	681b      	ldr	r3, [r3, #0]
   1c476:	a801      	add	r0, sp, #4
   1c478:	9302      	str	r3, [sp, #8]
   1c47a:	9b02      	ldr	r3, [sp, #8]
   1c47c:	f7f7 fe02 	bl	14084 <rpc_dfu_client_request_alloc>
   1c480:	4603      	mov	r3, r0
   1c482:	bb10      	cbnz	r0, 1c4ca <mfu_interface_setopt+0x8a>
   1c484:	f04f 0c04 	mov.w	ip, #4
   1c488:	4f3c      	ldr	r7, [pc, #240]	; (1c57c <mfu_interface_setopt+0x13c>)
   1c48a:	9801      	ldr	r0, [sp, #4]
   1c48c:	883a      	ldrh	r2, [r7, #0]
   1c48e:	4631      	mov	r1, r6
   1c490:	3201      	adds	r2, #1
   1c492:	b292      	uxth	r2, r2
   1c494:	ea45 4602 	orr.w	r6, r5, r2, lsl #16
   1c498:	4d39      	ldr	r5, [pc, #228]	; (1c580 <mfu_interface_setopt+0x140>)
   1c49a:	60c6      	str	r6, [r0, #12]
   1c49c:	7103      	strb	r3, [r0, #4]
   1c49e:	7143      	strb	r3, [r0, #5]
   1c4a0:	7183      	strb	r3, [r0, #6]
   1c4a2:	71c3      	strb	r3, [r0, #7]
   1c4a4:	7243      	strb	r3, [r0, #9]
   1c4a6:	7283      	strb	r3, [r0, #10]
   1c4a8:	72c3      	strb	r3, [r0, #11]
   1c4aa:	f880 c008 	strb.w	ip, [r0, #8]
   1c4ae:	803a      	strh	r2, [r7, #0]
   1c4b0:	602b      	str	r3, [r5, #0]
   1c4b2:	f7f7 fdfb 	bl	140ac <rpc_dfu_client_request_send>
   1c4b6:	b178      	cbz	r0, 1c4d8 <mfu_interface_setopt+0x98>
   1c4b8:	9801      	ldr	r0, [sp, #4]
   1c4ba:	6803      	ldr	r3, [r0, #0]
   1c4bc:	b11b      	cbz	r3, 1c4c6 <mfu_interface_setopt+0x86>
   1c4be:	4618      	mov	r0, r3
   1c4c0:	f7f7 fe10 	bl	140e4 <rpc_dfu_client_data_free>
   1c4c4:	9801      	ldr	r0, [sp, #4]
   1c4c6:	f7f7 fe05 	bl	140d4 <rpc_dfu_client_message_free>
   1c4ca:	200c      	movs	r0, #12
   1c4cc:	f00a fc1e 	bl	26d0c <bsd_os_errno_set>
   1c4d0:	f04f 30ff 	mov.w	r0, #4294967295
   1c4d4:	b005      	add	sp, #20
   1c4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c4d8:	f04f 33ff 	mov.w	r3, #4294967295
   1c4dc:	ae04      	add	r6, sp, #16
   1c4de:	f846 3d04 	str.w	r3, [r6, #-4]!
   1c4e2:	4f23      	ldr	r7, [pc, #140]	; (1c570 <mfu_interface_setopt+0x130>)
   1c4e4:	e007      	b.n	1c4f6 <mfu_interface_setopt+0xb6>
   1c4e6:	f8d4 361c 	ldr.w	r3, [r4, #1564]	; 0x61c
   1c4ea:	bb2b      	cbnz	r3, 1c538 <mfu_interface_setopt+0xf8>
   1c4ec:	4631      	mov	r1, r6
   1c4ee:	4638      	mov	r0, r7
   1c4f0:	f7f7 f904 	bl	136fc <bsd_os_timedwait>
   1c4f4:	bb00      	cbnz	r0, 1c538 <mfu_interface_setopt+0xf8>
   1c4f6:	6828      	ldr	r0, [r5, #0]
   1c4f8:	2800      	cmp	r0, #0
   1c4fa:	d0f4      	beq.n	1c4e6 <mfu_interface_setopt+0xa6>
   1c4fc:	6904      	ldr	r4, [r0, #16]
   1c4fe:	f7f7 fde9 	bl	140d4 <rpc_dfu_client_message_free>
   1c502:	bb64      	cbnz	r4, 1c55e <mfu_interface_setopt+0x11e>
   1c504:	4620      	mov	r0, r4
   1c506:	b005      	add	sp, #20
   1c508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c50a:	2505      	movs	r5, #5
   1c50c:	462e      	mov	r6, r5
   1c50e:	e7ac      	b.n	1c46a <mfu_interface_setopt+0x2a>
   1c510:	2508      	movs	r5, #8
   1c512:	462e      	mov	r6, r5
   1c514:	e7a9      	b.n	1c46a <mfu_interface_setopt+0x2a>
   1c516:	b1b3      	cbz	r3, 1c546 <mfu_interface_setopt+0x106>
   1c518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c51a:	2a04      	cmp	r2, #4
   1c51c:	d113      	bne.n	1c546 <mfu_interface_setopt+0x106>
   1c51e:	2000      	movs	r0, #0
   1c520:	681a      	ldr	r2, [r3, #0]
   1c522:	4b18      	ldr	r3, [pc, #96]	; (1c584 <mfu_interface_setopt+0x144>)
   1c524:	601a      	str	r2, [r3, #0]
   1c526:	b005      	add	sp, #20
   1c528:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c52a:	202a      	movs	r0, #42	; 0x2a
   1c52c:	f00a fbee 	bl	26d0c <bsd_os_errno_set>
   1c530:	f04f 30ff 	mov.w	r0, #4294967295
   1c534:	b005      	add	sp, #20
   1c536:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c538:	203c      	movs	r0, #60	; 0x3c
   1c53a:	f00a fbe7 	bl	26d0c <bsd_os_errno_set>
   1c53e:	f04f 30ff 	mov.w	r0, #4294967295
   1c542:	b005      	add	sp, #20
   1c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c546:	2016      	movs	r0, #22
   1c548:	f00a fbe0 	bl	26d0c <bsd_os_errno_set>
   1c54c:	f04f 30ff 	mov.w	r0, #4294967295
   1c550:	e7c0      	b.n	1c4d4 <mfu_interface_setopt+0x94>
   1c552:	2001      	movs	r0, #1
   1c554:	f00a fbda 	bl	26d0c <bsd_os_errno_set>
   1c558:	f04f 30ff 	mov.w	r0, #4294967295
   1c55c:	e7ba      	b.n	1c4d4 <mfu_interface_setopt+0x94>
   1c55e:	4b0a      	ldr	r3, [pc, #40]	; (1c588 <mfu_interface_setopt+0x148>)
   1c560:	2008      	movs	r0, #8
   1c562:	601c      	str	r4, [r3, #0]
   1c564:	f00a fbd2 	bl	26d0c <bsd_os_errno_set>
   1c568:	f04f 30ff 	mov.w	r0, #4294967295
   1c56c:	e7b2      	b.n	1c4d4 <mfu_interface_setopt+0x94>
   1c56e:	bf00      	nop
   1c570:	200207c8 	.word	0x200207c8
   1c574:	4002a000 	.word	0x4002a000
   1c578:	4002a61c 	.word	0x4002a61c
   1c57c:	20022254 	.word	0x20022254
   1c580:	200207d4 	.word	0x200207d4
   1c584:	200207d0 	.word	0x200207d0
   1c588:	200207cc 	.word	0x200207cc

0001c58c <mfu_interface_getopt>:
   1c58c:	f240 2003 	movw	r0, #515	; 0x203
   1c590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c594:	4281      	cmp	r1, r0
   1c596:	b085      	sub	sp, #20
   1c598:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1c59a:	f040 80a8 	bne.w	1c6ee <mfu_interface_getopt+0x162>
   1c59e:	461d      	mov	r5, r3
   1c5a0:	2b00      	cmp	r3, #0
   1c5a2:	f000 80a4 	beq.w	1c6ee <mfu_interface_getopt+0x162>
   1c5a6:	2e00      	cmp	r6, #0
   1c5a8:	f000 80a1 	beq.w	1c6ee <mfu_interface_getopt+0x162>
   1c5ac:	4b5b      	ldr	r3, [pc, #364]	; (1c71c <mfu_interface_getopt+0x190>)
   1c5ae:	681b      	ldr	r3, [r3, #0]
   1c5b0:	3b02      	subs	r3, #2
   1c5b2:	2b01      	cmp	r3, #1
   1c5b4:	f200 80a1 	bhi.w	1c6fa <mfu_interface_getopt+0x16e>
   1c5b8:	3a01      	subs	r2, #1
   1c5ba:	2a13      	cmp	r2, #19
   1c5bc:	d861      	bhi.n	1c682 <mfu_interface_getopt+0xf6>
   1c5be:	e8df f002 	tbb	[pc, r2]
   1c5c2:	5417      	.short	0x5417
   1c5c4:	60606060 	.word	0x60606060
   1c5c8:	6060605a 	.word	0x6060605a
   1c5cc:	60606060 	.word	0x60606060
   1c5d0:	60606060 	.word	0x60606060
   1c5d4:	0a60      	.short	0x0a60
   1c5d6:	6833      	ldr	r3, [r6, #0]
   1c5d8:	2b04      	cmp	r3, #4
   1c5da:	f040 8088 	bne.w	1c6ee <mfu_interface_getopt+0x162>
   1c5de:	2200      	movs	r2, #0
   1c5e0:	4610      	mov	r0, r2
   1c5e2:	4b4f      	ldr	r3, [pc, #316]	; (1c720 <mfu_interface_getopt+0x194>)
   1c5e4:	6819      	ldr	r1, [r3, #0]
   1c5e6:	601a      	str	r2, [r3, #0]
   1c5e8:	6029      	str	r1, [r5, #0]
   1c5ea:	b005      	add	sp, #20
   1c5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c5f0:	6833      	ldr	r3, [r6, #0]
   1c5f2:	2b24      	cmp	r3, #36	; 0x24
   1c5f4:	d17b      	bne.n	1c6ee <mfu_interface_getopt+0x162>
   1c5f6:	2401      	movs	r4, #1
   1c5f8:	46a0      	mov	r8, r4
   1c5fa:	2100      	movs	r1, #0
   1c5fc:	4a49      	ldr	r2, [pc, #292]	; (1c724 <mfu_interface_getopt+0x198>)
   1c5fe:	4b4a      	ldr	r3, [pc, #296]	; (1c728 <mfu_interface_getopt+0x19c>)
   1c600:	f8c2 161c 	str.w	r1, [r2, #1564]	; 0x61c
   1c604:	681b      	ldr	r3, [r3, #0]
   1c606:	a801      	add	r0, sp, #4
   1c608:	9302      	str	r3, [sp, #8]
   1c60a:	9b02      	ldr	r3, [sp, #8]
   1c60c:	f7f7 fd3a 	bl	14084 <rpc_dfu_client_request_alloc>
   1c610:	bb18      	cbnz	r0, 1c65a <mfu_interface_getopt+0xce>
   1c612:	4946      	ldr	r1, [pc, #280]	; (1c72c <mfu_interface_getopt+0x1a0>)
   1c614:	9b01      	ldr	r3, [sp, #4]
   1c616:	880a      	ldrh	r2, [r1, #0]
   1c618:	f1b8 0f03 	cmp.w	r8, #3
   1c61c:	f102 0201 	add.w	r2, r2, #1
   1c620:	b292      	uxth	r2, r2
   1c622:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1c626:	7118      	strb	r0, [r3, #4]
   1c628:	800a      	strh	r2, [r1, #0]
   1c62a:	60dc      	str	r4, [r3, #12]
   1c62c:	7158      	strb	r0, [r3, #5]
   1c62e:	7198      	strb	r0, [r3, #6]
   1c630:	71d8      	strb	r0, [r3, #7]
   1c632:	d051      	beq.n	1c6d8 <mfu_interface_getopt+0x14c>
   1c634:	2104      	movs	r1, #4
   1c636:	2200      	movs	r2, #0
   1c638:	4f3d      	ldr	r7, [pc, #244]	; (1c730 <mfu_interface_getopt+0x1a4>)
   1c63a:	6099      	str	r1, [r3, #8]
   1c63c:	4618      	mov	r0, r3
   1c63e:	4641      	mov	r1, r8
   1c640:	603a      	str	r2, [r7, #0]
   1c642:	f7f7 fd33 	bl	140ac <rpc_dfu_client_request_send>
   1c646:	b320      	cbz	r0, 1c692 <mfu_interface_getopt+0x106>
   1c648:	9801      	ldr	r0, [sp, #4]
   1c64a:	6803      	ldr	r3, [r0, #0]
   1c64c:	b11b      	cbz	r3, 1c656 <mfu_interface_getopt+0xca>
   1c64e:	4618      	mov	r0, r3
   1c650:	f7f7 fd48 	bl	140e4 <rpc_dfu_client_data_free>
   1c654:	9801      	ldr	r0, [sp, #4]
   1c656:	f7f7 fd3d 	bl	140d4 <rpc_dfu_client_message_free>
   1c65a:	200c      	movs	r0, #12
   1c65c:	f00a fb56 	bl	26d0c <bsd_os_errno_set>
   1c660:	f04f 30ff 	mov.w	r0, #4294967295
   1c664:	b005      	add	sp, #20
   1c666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c66a:	6833      	ldr	r3, [r6, #0]
   1c66c:	2b04      	cmp	r3, #4
   1c66e:	d13e      	bne.n	1c6ee <mfu_interface_getopt+0x162>
   1c670:	2402      	movs	r4, #2
   1c672:	46a0      	mov	r8, r4
   1c674:	e7c1      	b.n	1c5fa <mfu_interface_getopt+0x6e>
   1c676:	6833      	ldr	r3, [r6, #0]
   1c678:	2b04      	cmp	r3, #4
   1c67a:	d138      	bne.n	1c6ee <mfu_interface_getopt+0x162>
   1c67c:	2409      	movs	r4, #9
   1c67e:	46a0      	mov	r8, r4
   1c680:	e7bb      	b.n	1c5fa <mfu_interface_getopt+0x6e>
   1c682:	202a      	movs	r0, #42	; 0x2a
   1c684:	f00a fb42 	bl	26d0c <bsd_os_errno_set>
   1c688:	f04f 30ff 	mov.w	r0, #4294967295
   1c68c:	b005      	add	sp, #20
   1c68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c692:	f04f 33ff 	mov.w	r3, #4294967295
   1c696:	ac04      	add	r4, sp, #16
   1c698:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1c724 <mfu_interface_getopt+0x198>
   1c69c:	f844 3d04 	str.w	r3, [r4, #-4]!
   1c6a0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1c71c <mfu_interface_getopt+0x190>
   1c6a4:	e007      	b.n	1c6b6 <mfu_interface_getopt+0x12a>
   1c6a6:	f8d8 361c 	ldr.w	r3, [r8, #1564]	; 0x61c
   1c6aa:	b9d3      	cbnz	r3, 1c6e2 <mfu_interface_getopt+0x156>
   1c6ac:	4621      	mov	r1, r4
   1c6ae:	4648      	mov	r0, r9
   1c6b0:	f7f7 f824 	bl	136fc <bsd_os_timedwait>
   1c6b4:	b9a8      	cbnz	r0, 1c6e2 <mfu_interface_getopt+0x156>
   1c6b6:	6839      	ldr	r1, [r7, #0]
   1c6b8:	2900      	cmp	r1, #0
   1c6ba:	d0f4      	beq.n	1c6a6 <mfu_interface_getopt+0x11a>
   1c6bc:	690c      	ldr	r4, [r1, #16]
   1c6be:	bb14      	cbnz	r4, 1c706 <mfu_interface_getopt+0x17a>
   1c6c0:	6832      	ldr	r2, [r6, #0]
   1c6c2:	3114      	adds	r1, #20
   1c6c4:	4628      	mov	r0, r5
   1c6c6:	f009 fbce 	bl	25e66 <memcpy>
   1c6ca:	6838      	ldr	r0, [r7, #0]
   1c6cc:	f7f7 fd02 	bl	140d4 <rpc_dfu_client_message_free>
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	b005      	add	sp, #20
   1c6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c6d8:	4a16      	ldr	r2, [pc, #88]	; (1c734 <mfu_interface_getopt+0x1a8>)
   1c6da:	2108      	movs	r1, #8
   1c6dc:	6812      	ldr	r2, [r2, #0]
   1c6de:	611a      	str	r2, [r3, #16]
   1c6e0:	e7a9      	b.n	1c636 <mfu_interface_getopt+0xaa>
   1c6e2:	203c      	movs	r0, #60	; 0x3c
   1c6e4:	f00a fb12 	bl	26d0c <bsd_os_errno_set>
   1c6e8:	f04f 30ff 	mov.w	r0, #4294967295
   1c6ec:	e77d      	b.n	1c5ea <mfu_interface_getopt+0x5e>
   1c6ee:	2016      	movs	r0, #22
   1c6f0:	f00a fb0c 	bl	26d0c <bsd_os_errno_set>
   1c6f4:	f04f 30ff 	mov.w	r0, #4294967295
   1c6f8:	e777      	b.n	1c5ea <mfu_interface_getopt+0x5e>
   1c6fa:	2001      	movs	r0, #1
   1c6fc:	f00a fb06 	bl	26d0c <bsd_os_errno_set>
   1c700:	f04f 30ff 	mov.w	r0, #4294967295
   1c704:	e771      	b.n	1c5ea <mfu_interface_getopt+0x5e>
   1c706:	4b06      	ldr	r3, [pc, #24]	; (1c720 <mfu_interface_getopt+0x194>)
   1c708:	2008      	movs	r0, #8
   1c70a:	601c      	str	r4, [r3, #0]
   1c70c:	f00a fafe 	bl	26d0c <bsd_os_errno_set>
   1c710:	6838      	ldr	r0, [r7, #0]
   1c712:	f7f7 fcdf 	bl	140d4 <rpc_dfu_client_message_free>
   1c716:	f04f 30ff 	mov.w	r0, #4294967295
   1c71a:	e766      	b.n	1c5ea <mfu_interface_getopt+0x5e>
   1c71c:	200207c8 	.word	0x200207c8
   1c720:	200207cc 	.word	0x200207cc
   1c724:	4002a000 	.word	0x4002a000
   1c728:	4002a61c 	.word	0x4002a61c
   1c72c:	20022254 	.word	0x20022254
   1c730:	200207d4 	.word	0x200207d4
   1c734:	200207d0 	.word	0x200207d0

0001c738 <bsd_platform_error_handler>:
   1c738:	b508      	push	{r3, lr}
   1c73a:	4b07      	ldr	r3, [pc, #28]	; (1c758 <bsd_platform_error_handler+0x20>)
   1c73c:	681a      	ldr	r2, [r3, #0]
   1c73e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1c742:	601a      	str	r2, [r3, #0]
   1c744:	681b      	ldr	r3, [r3, #0]
   1c746:	07db      	lsls	r3, r3, #31
   1c748:	d402      	bmi.n	1c750 <bsd_platform_error_handler+0x18>
   1c74a:	f7f0 ffed 	bl	d728 <bsd_recoverable_error_handler>
   1c74e:	bd08      	pop	{r3, pc}
   1c750:	f7f0 fff0 	bl	d734 <bsd_irrecoverable_error_handler>
   1c754:	bd08      	pop	{r3, pc}
   1c756:	bf00      	nop
   1c758:	200207d8 	.word	0x200207d8

0001c75c <bsd_init>:
   1c75c:	b510      	push	{r4, lr}
   1c75e:	4c09      	ldr	r4, [pc, #36]	; (1c784 <bsd_init+0x28>)
   1c760:	6823      	ldr	r3, [r4, #0]
   1c762:	b953      	cbnz	r3, 1c77a <bsd_init+0x1e>
   1c764:	2301      	movs	r3, #1
   1c766:	6023      	str	r3, [r4, #0]
   1c768:	f000 f81c 	bl	1c7a4 <bsd_platform_init>
   1c76c:	b920      	cbnz	r0, 1c778 <bsd_init+0x1c>
   1c76e:	6823      	ldr	r3, [r4, #0]
   1c770:	2b00      	cmp	r3, #0
   1c772:	bfa4      	itt	ge
   1c774:	2302      	movge	r3, #2
   1c776:	6023      	strge	r3, [r4, #0]
   1c778:	bd10      	pop	{r4, pc}
   1c77a:	200f      	movs	r0, #15
   1c77c:	f7f0 ffd4 	bl	d728 <bsd_recoverable_error_handler>
   1c780:	200f      	movs	r0, #15
   1c782:	bd10      	pop	{r4, pc}
   1c784:	200207d8 	.word	0x200207d8

0001c788 <unimplemented_method>:
   1c788:	b40f      	push	{r0, r1, r2, r3}
   1c78a:	b508      	push	{r3, lr}
   1c78c:	202d      	movs	r0, #45	; 0x2d
   1c78e:	f00a fabd 	bl	26d0c <bsd_os_errno_set>
   1c792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c796:	f04f 30ff 	mov.w	r0, #4294967295
   1c79a:	b004      	add	sp, #16
   1c79c:	4770      	bx	lr
   1c79e:	bf00      	nop

0001c7a0 <rpc_transport_ipc_fault_handler>:
   1c7a0:	f7ff bfca 	b.w	1c738 <bsd_platform_error_handler>

0001c7a4 <bsd_platform_init>:
   1c7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7a6:	b093      	sub	sp, #76	; 0x4c
   1c7a8:	f7f7 fed4 	bl	14554 <nrf_mem_init>
   1c7ac:	2800      	cmp	r0, #0
   1c7ae:	d137      	bne.n	1c820 <bsd_platform_init+0x7c>
   1c7b0:	4934      	ldr	r1, [pc, #208]	; (1c884 <bsd_platform_init+0xe0>)
   1c7b2:	a801      	add	r0, sp, #4
   1c7b4:	f7f7 ff42 	bl	1463c <nrf_mem_register>
   1c7b8:	4604      	mov	r4, r0
   1c7ba:	bb60      	cbnz	r0, 1c816 <bsd_platform_init+0x72>
   1c7bc:	f7f7 f850 	bl	13860 <bsd_os_init>
   1c7c0:	f003 fe4c 	bl	2045c <rpc_framework_init>
   1c7c4:	4604      	mov	r4, r0
   1c7c6:	bb30      	cbnz	r0, 1c816 <bsd_platform_init+0x72>
   1c7c8:	2320      	movs	r3, #32
   1c7ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1c7ce:	2208      	movs	r2, #8
   1c7d0:	f44f 5740 	mov.w	r7, #12288	; 0x3000
   1c7d4:	482c      	ldr	r0, [pc, #176]	; (1c888 <bsd_platform_init+0xe4>)
   1c7d6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   1c7da:	4e2c      	ldr	r6, [pc, #176]	; (1c88c <bsd_platform_init+0xe8>)
   1c7dc:	9303      	str	r3, [sp, #12]
   1c7de:	9305      	str	r3, [sp, #20]
   1c7e0:	9307      	str	r3, [sp, #28]
   1c7e2:	4d2b      	ldr	r5, [pc, #172]	; (1c890 <bsd_platform_init+0xec>)
   1c7e4:	9109      	str	r1, [sp, #36]	; 0x24
   1c7e6:	910d      	str	r1, [sp, #52]	; 0x34
   1c7e8:	4c2a      	ldr	r4, [pc, #168]	; (1c894 <bsd_platform_init+0xf0>)
   1c7ea:	492b      	ldr	r1, [pc, #172]	; (1c898 <bsd_platform_init+0xf4>)
   1c7ec:	4b2b      	ldr	r3, [pc, #172]	; (1c89c <bsd_platform_init+0xf8>)
   1c7ee:	9002      	str	r0, [sp, #8]
   1c7f0:	eb0d 0002 	add.w	r0, sp, r2
   1c7f4:	970b      	str	r7, [sp, #44]	; 0x2c
   1c7f6:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   1c7fa:	9604      	str	r6, [sp, #16]
   1c7fc:	9506      	str	r5, [sp, #24]
   1c7fe:	9408      	str	r4, [sp, #32]
   1c800:	910a      	str	r1, [sp, #40]	; 0x28
   1c802:	930c      	str	r3, [sp, #48]	; 0x30
   1c804:	f000 fc1a 	bl	1d03c <rpc_transport_ipc_init>
   1c808:	b108      	cbz	r0, 1c80e <bsd_platform_init+0x6a>
   1c80a:	4604      	mov	r4, r0
   1c80c:	e005      	b.n	1c81a <bsd_platform_init+0x76>
   1c80e:	f003 fc33 	bl	20078 <interface_init>
   1c812:	4604      	mov	r4, r0
   1c814:	b150      	cbz	r0, 1c82c <bsd_platform_init+0x88>
   1c816:	f7ff ff8f 	bl	1c738 <bsd_platform_error_handler>
   1c81a:	4620      	mov	r0, r4
   1c81c:	b013      	add	sp, #76	; 0x4c
   1c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c820:	4604      	mov	r4, r0
   1c822:	f7ff ff89 	bl	1c738 <bsd_platform_error_handler>
   1c826:	4620      	mov	r0, r4
   1c828:	b013      	add	sp, #76	; 0x4c
   1c82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c82c:	f7fe fe88 	bl	1b540 <at_interface_init>
   1c830:	4604      	mov	r4, r0
   1c832:	2800      	cmp	r0, #0
   1c834:	d1ef      	bne.n	1c816 <bsd_platform_init+0x72>
   1c836:	f002 f9fb 	bl	1ec30 <ip_interface_init>
   1c83a:	4604      	mov	r4, r0
   1c83c:	2800      	cmp	r0, #0
   1c83e:	d1ea      	bne.n	1c816 <bsd_platform_init+0x72>
   1c840:	f7ff f89c 	bl	1b97c <tls_interface_init>
   1c844:	4604      	mov	r4, r0
   1c846:	2800      	cmp	r0, #0
   1c848:	d1e5      	bne.n	1c816 <bsd_platform_init+0x72>
   1c84a:	f7ff fc5d 	bl	1c108 <mfu_interface_init>
   1c84e:	4604      	mov	r4, r0
   1c850:	2800      	cmp	r0, #0
   1c852:	d1e0      	bne.n	1c816 <bsd_platform_init+0x72>
   1c854:	f004 ffa4 	bl	217a0 <authenticated_atcmd_init>
   1c858:	4604      	mov	r4, r0
   1c85a:	b978      	cbnz	r0, 1c87c <bsd_platform_init+0xd8>
   1c85c:	f000 f92e 	bl	1cabc <nrf_inbuilt_key_init>
   1c860:	4604      	mov	r4, r0
   1c862:	2800      	cmp	r0, #0
   1c864:	d1d7      	bne.n	1c816 <bsd_platform_init+0x72>
   1c866:	f001 fa3f 	bl	1dce8 <pdn_interface_init>
   1c86a:	4604      	mov	r4, r0
   1c86c:	2800      	cmp	r0, #0
   1c86e:	d1d2      	bne.n	1c816 <bsd_platform_init+0x72>
   1c870:	f004 feba 	bl	215e8 <gnss_interface_init>
   1c874:	4604      	mov	r4, r0
   1c876:	2800      	cmp	r0, #0
   1c878:	d0cf      	beq.n	1c81a <bsd_platform_init+0x76>
   1c87a:	e7cc      	b.n	1c816 <bsd_platform_init+0x72>
   1c87c:	f7ff ff5c 	bl	1c738 <bsd_platform_error_handler>
   1c880:	e7cb      	b.n	1c81a <bsd_platform_init+0x76>
   1c882:	bf00      	nop
   1c884:	0002a40c 	.word	0x0002a40c
   1c888:	20010000 	.word	0x20010000
   1c88c:	20010040 	.word	0x20010040
   1c890:	20010020 	.word	0x20010020
   1c894:	20017060 	.word	0x20017060
   1c898:	20010060 	.word	0x20010060
   1c89c:	20013060 	.word	0x20013060

0001c8a0 <bsd_platform_af_method_table_get>:
   1c8a0:	2802      	cmp	r0, #2
   1c8a2:	b508      	push	{r3, lr}
   1c8a4:	d00e      	beq.n	1c8c4 <bsd_platform_af_method_table_get+0x24>
   1c8a6:	d922      	bls.n	1c8ee <bsd_platform_af_method_table_get+0x4e>
   1c8a8:	280a      	cmp	r0, #10
   1c8aa:	d00b      	beq.n	1c8c4 <bsd_platform_af_method_table_get+0x24>
   1c8ac:	2866      	cmp	r0, #102	; 0x66
   1c8ae:	d119      	bne.n	1c8e4 <bsd_platform_af_method_table_get+0x44>
   1c8b0:	f240 2301 	movw	r3, #513	; 0x201
   1c8b4:	429a      	cmp	r2, r3
   1c8b6:	d029      	beq.n	1c90c <bsd_platform_af_method_table_get+0x6c>
   1c8b8:	f240 2302 	movw	r3, #514	; 0x202
   1c8bc:	429a      	cmp	r2, r3
   1c8be:	d111      	bne.n	1c8e4 <bsd_platform_af_method_table_get+0x44>
   1c8c0:	4813      	ldr	r0, [pc, #76]	; (1c910 <bsd_platform_af_method_table_get+0x70>)
   1c8c2:	bd08      	pop	{r3, pc}
   1c8c4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   1c8c8:	2a0a      	cmp	r2, #10
   1c8ca:	d81b      	bhi.n	1c904 <bsd_platform_af_method_table_get+0x64>
   1c8cc:	2301      	movs	r3, #1
   1c8ce:	f240 4103 	movw	r1, #1027	; 0x403
   1c8d2:	4810      	ldr	r0, [pc, #64]	; (1c914 <bsd_platform_af_method_table_get+0x74>)
   1c8d4:	fa03 f202 	lsl.w	r2, r3, r2
   1c8d8:	420a      	tst	r2, r1
   1c8da:	f100 0328 	add.w	r3, r0, #40	; 0x28
   1c8de:	bf18      	it	ne
   1c8e0:	4618      	movne	r0, r3
   1c8e2:	bd08      	pop	{r3, pc}
   1c8e4:	2016      	movs	r0, #22
   1c8e6:	f00a fa11 	bl	26d0c <bsd_os_errno_set>
   1c8ea:	2000      	movs	r0, #0
   1c8ec:	bd08      	pop	{r3, pc}
   1c8ee:	2801      	cmp	r0, #1
   1c8f0:	d1f8      	bne.n	1c8e4 <bsd_platform_af_method_table_get+0x44>
   1c8f2:	f240 2303 	movw	r3, #515	; 0x203
   1c8f6:	429a      	cmp	r2, r3
   1c8f8:	d006      	beq.n	1c908 <bsd_platform_af_method_table_get+0x68>
   1c8fa:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1c8fe:	d1f1      	bne.n	1c8e4 <bsd_platform_af_method_table_get+0x44>
   1c900:	4805      	ldr	r0, [pc, #20]	; (1c918 <bsd_platform_af_method_table_get+0x78>)
   1c902:	bd08      	pop	{r3, pc}
   1c904:	4803      	ldr	r0, [pc, #12]	; (1c914 <bsd_platform_af_method_table_get+0x74>)
   1c906:	bd08      	pop	{r3, pc}
   1c908:	4804      	ldr	r0, [pc, #16]	; (1c91c <bsd_platform_af_method_table_get+0x7c>)
   1c90a:	bd08      	pop	{r3, pc}
   1c90c:	4804      	ldr	r0, [pc, #16]	; (1c920 <bsd_platform_af_method_table_get+0x80>)
   1c90e:	bd08      	pop	{r3, pc}
   1c910:	0002a3a4 	.word	0x0002a3a4
   1c914:	0002a32c 	.word	0x0002a32c
   1c918:	0002a3cc 	.word	0x0002a3cc
   1c91c:	0002a37c 	.word	0x0002a37c
   1c920:	0002a304 	.word	0x0002a304

0001c924 <bsd_platform_fd_method_table_get>:
   1c924:	b538      	push	{r3, r4, r5, lr}
   1c926:	4605      	mov	r5, r0
   1c928:	f003 fcb8 	bl	2029c <interface_socket_from_handle_get>
   1c92c:	4604      	mov	r4, r0
   1c92e:	b950      	cbnz	r0, 1c946 <bsd_platform_fd_method_table_get+0x22>
   1c930:	4b23      	ldr	r3, [pc, #140]	; (1c9c0 <bsd_platform_fd_method_table_get+0x9c>)
   1c932:	43ab      	bics	r3, r5
   1c934:	d01a      	beq.n	1c96c <bsd_platform_fd_method_table_get+0x48>
   1c936:	4b23      	ldr	r3, [pc, #140]	; (1c9c4 <bsd_platform_fd_method_table_get+0xa0>)
   1c938:	43ab      	bics	r3, r5
   1c93a:	d015      	beq.n	1c968 <bsd_platform_fd_method_table_get+0x44>
   1c93c:	4b22      	ldr	r3, [pc, #136]	; (1c9c8 <bsd_platform_fd_method_table_get+0xa4>)
   1c93e:	43ab      	bics	r3, r5
   1c940:	d138      	bne.n	1c9b4 <bsd_platform_fd_method_table_get+0x90>
   1c942:	4822      	ldr	r0, [pc, #136]	; (1c9cc <bsd_platform_fd_method_table_get+0xa8>)
   1c944:	bd38      	pop	{r3, r4, r5, pc}
   1c946:	6883      	ldr	r3, [r0, #8]
   1c948:	6902      	ldr	r2, [r0, #16]
   1c94a:	2b02      	cmp	r3, #2
   1c94c:	d010      	beq.n	1c970 <bsd_platform_fd_method_table_get+0x4c>
   1c94e:	d91f      	bls.n	1c990 <bsd_platform_fd_method_table_get+0x6c>
   1c950:	2b0a      	cmp	r3, #10
   1c952:	d00d      	beq.n	1c970 <bsd_platform_fd_method_table_get+0x4c>
   1c954:	2b66      	cmp	r3, #102	; 0x66
   1c956:	d124      	bne.n	1c9a2 <bsd_platform_fd_method_table_get+0x7e>
   1c958:	f240 2301 	movw	r3, #513	; 0x201
   1c95c:	429a      	cmp	r2, r3
   1c95e:	d027      	beq.n	1c9b0 <bsd_platform_fd_method_table_get+0x8c>
   1c960:	f240 2302 	movw	r3, #514	; 0x202
   1c964:	429a      	cmp	r2, r3
   1c966:	d11c      	bne.n	1c9a2 <bsd_platform_fd_method_table_get+0x7e>
   1c968:	4819      	ldr	r0, [pc, #100]	; (1c9d0 <bsd_platform_fd_method_table_get+0xac>)
   1c96a:	bd38      	pop	{r3, r4, r5, pc}
   1c96c:	4819      	ldr	r0, [pc, #100]	; (1c9d4 <bsd_platform_fd_method_table_get+0xb0>)
   1c96e:	bd38      	pop	{r3, r4, r5, pc}
   1c970:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   1c974:	2a0a      	cmp	r2, #10
   1c976:	d819      	bhi.n	1c9ac <bsd_platform_fd_method_table_get+0x88>
   1c978:	2301      	movs	r3, #1
   1c97a:	f240 4103 	movw	r1, #1027	; 0x403
   1c97e:	4816      	ldr	r0, [pc, #88]	; (1c9d8 <bsd_platform_fd_method_table_get+0xb4>)
   1c980:	fa03 f202 	lsl.w	r2, r3, r2
   1c984:	420a      	tst	r2, r1
   1c986:	f100 0428 	add.w	r4, r0, #40	; 0x28
   1c98a:	bf18      	it	ne
   1c98c:	4620      	movne	r0, r4
   1c98e:	bd38      	pop	{r3, r4, r5, pc}
   1c990:	2b01      	cmp	r3, #1
   1c992:	d106      	bne.n	1c9a2 <bsd_platform_fd_method_table_get+0x7e>
   1c994:	f240 2303 	movw	r3, #515	; 0x203
   1c998:	429a      	cmp	r2, r3
   1c99a:	d0e7      	beq.n	1c96c <bsd_platform_fd_method_table_get+0x48>
   1c99c:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1c9a0:	d0cf      	beq.n	1c942 <bsd_platform_fd_method_table_get+0x1e>
   1c9a2:	2016      	movs	r0, #22
   1c9a4:	f00a f9b2 	bl	26d0c <bsd_os_errno_set>
   1c9a8:	2000      	movs	r0, #0
   1c9aa:	bd38      	pop	{r3, r4, r5, pc}
   1c9ac:	480a      	ldr	r0, [pc, #40]	; (1c9d8 <bsd_platform_fd_method_table_get+0xb4>)
   1c9ae:	bd38      	pop	{r3, r4, r5, pc}
   1c9b0:	480a      	ldr	r0, [pc, #40]	; (1c9dc <bsd_platform_fd_method_table_get+0xb8>)
   1c9b2:	bd38      	pop	{r3, r4, r5, pc}
   1c9b4:	2009      	movs	r0, #9
   1c9b6:	f00a f9a9 	bl	26d0c <bsd_os_errno_set>
   1c9ba:	4620      	mov	r0, r4
   1c9bc:	bd38      	pop	{r3, r4, r5, pc}
   1c9be:	bf00      	nop
   1c9c0:	49765432 	.word	0x49765432
   1c9c4:	789a0000 	.word	0x789a0000
   1c9c8:	49765443 	.word	0x49765443
   1c9cc:	0002a3cc 	.word	0x0002a3cc
   1c9d0:	0002a3a4 	.word	0x0002a3a4
   1c9d4:	0002a37c 	.word	0x0002a37c
   1c9d8:	0002a32c 	.word	0x0002a32c
   1c9dc:	0002a304 	.word	0x0002a304

0001c9e0 <bsd_platform_getaddrinfo>:
   1c9e0:	f002 bfc6 	b.w	1f970 <ip_interface_getaddrinfo>

0001c9e4 <bsd_platform_freeaddrinfo>:
   1c9e4:	f003 b8ae 	b.w	1fb44 <ip_interface_freeaddrinfo>

0001c9e8 <bsd_platform_poll>:
   1c9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c9ec:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1c9f0:	b083      	sub	sp, #12
   1c9f2:	9200      	str	r2, [sp, #0]
   1c9f4:	2800      	cmp	r0, #0
   1c9f6:	d048      	beq.n	1ca8a <bsd_platform_poll+0xa2>
   1c9f8:	1e4b      	subs	r3, r1, #1
   1c9fa:	2b07      	cmp	r3, #7
   1c9fc:	d845      	bhi.n	1ca8a <bsd_platform_poll+0xa2>
   1c9fe:	4680      	mov	r8, r0
   1ca00:	4605      	mov	r5, r0
   1ca02:	2400      	movs	r4, #0
   1ca04:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   1ca08:	88ab      	ldrh	r3, [r5, #4]
   1ca0a:	6828      	ldr	r0, [r5, #0]
   1ca0c:	f003 0303 	and.w	r3, r3, #3
   1ca10:	a901      	add	r1, sp, #4
   1ca12:	f043 061c 	orr.w	r6, r3, #28
   1ca16:	f003 fc4f 	bl	202b8 <interface_socket_event_get>
   1ca1a:	9b01      	ldr	r3, [sp, #4]
   1ca1c:	3508      	adds	r5, #8
   1ca1e:	4033      	ands	r3, r6
   1ca20:	f825 3c02 	strh.w	r3, [r5, #-2]
   1ca24:	b103      	cbz	r3, 1ca28 <bsd_platform_poll+0x40>
   1ca26:	3401      	adds	r4, #1
   1ca28:	42af      	cmp	r7, r5
   1ca2a:	d1ed      	bne.n	1ca08 <bsd_platform_poll+0x20>
   1ca2c:	bb9c      	cbnz	r4, 1ca96 <bsd_platform_poll+0xae>
   1ca2e:	4669      	mov	r1, sp
   1ca30:	4640      	mov	r0, r8
   1ca32:	f7f6 fe63 	bl	136fc <bsd_os_timedwait>
   1ca36:	4607      	mov	r7, r0
   1ca38:	b108      	cbz	r0, 1ca3e <bsd_platform_poll+0x56>
   1ca3a:	283c      	cmp	r0, #60	; 0x3c
   1ca3c:	d11d      	bne.n	1ca7a <bsd_platform_poll+0x92>
   1ca3e:	46c1      	mov	r9, r8
   1ca40:	2600      	movs	r6, #0
   1ca42:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1ca46:	f8d9 0000 	ldr.w	r0, [r9]
   1ca4a:	f003 0303 	and.w	r3, r3, #3
   1ca4e:	a901      	add	r1, sp, #4
   1ca50:	f043 041c 	orr.w	r4, r3, #28
   1ca54:	f003 fc30 	bl	202b8 <interface_socket_event_get>
   1ca58:	9b01      	ldr	r3, [sp, #4]
   1ca5a:	f109 0908 	add.w	r9, r9, #8
   1ca5e:	4023      	ands	r3, r4
   1ca60:	f829 3c02 	strh.w	r3, [r9, #-2]
   1ca64:	b103      	cbz	r3, 1ca68 <bsd_platform_poll+0x80>
   1ca66:	3601      	adds	r6, #1
   1ca68:	454d      	cmp	r5, r9
   1ca6a:	d1ea      	bne.n	1ca42 <bsd_platform_poll+0x5a>
   1ca6c:	b90e      	cbnz	r6, 1ca72 <bsd_platform_poll+0x8a>
   1ca6e:	2f00      	cmp	r7, #0
   1ca70:	d0dd      	beq.n	1ca2e <bsd_platform_poll+0x46>
   1ca72:	4630      	mov	r0, r6
   1ca74:	b003      	add	sp, #12
   1ca76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ca7a:	2023      	movs	r0, #35	; 0x23
   1ca7c:	f00a f946 	bl	26d0c <bsd_os_errno_set>
   1ca80:	f04f 30ff 	mov.w	r0, #4294967295
   1ca84:	b003      	add	sp, #12
   1ca86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ca8a:	2016      	movs	r0, #22
   1ca8c:	f00a f93e 	bl	26d0c <bsd_os_errno_set>
   1ca90:	f04f 30ff 	mov.w	r0, #4294967295
   1ca94:	e7ee      	b.n	1ca74 <bsd_platform_poll+0x8c>
   1ca96:	4620      	mov	r0, r4
   1ca98:	e7ec      	b.n	1ca74 <bsd_platform_poll+0x8c>
   1ca9a:	bf00      	nop

0001ca9c <bsd_platform_fcntl>:
   1ca9c:	b508      	push	{r3, lr}
   1ca9e:	4b06      	ldr	r3, [pc, #24]	; (1cab8 <bsd_platform_fcntl+0x1c>)
   1caa0:	4383      	bics	r3, r0
   1caa2:	d003      	beq.n	1caac <bsd_platform_fcntl+0x10>
   1caa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1caa8:	f003 bc4a 	b.w	20340 <interface_socket_fcntl>
   1caac:	202d      	movs	r0, #45	; 0x2d
   1caae:	f00a f92d 	bl	26d0c <bsd_os_errno_set>
   1cab2:	f04f 30ff 	mov.w	r0, #4294967295
   1cab6:	bd08      	pop	{r3, pc}
   1cab8:	49765432 	.word	0x49765432

0001cabc <nrf_inbuilt_key_init>:
   1cabc:	b570      	push	{r4, r5, r6, lr}
   1cabe:	b086      	sub	sp, #24
   1cac0:	491d      	ldr	r1, [pc, #116]	; (1cb38 <nrf_inbuilt_key_init+0x7c>)
   1cac2:	a802      	add	r0, sp, #8
   1cac4:	f7f7 fdba 	bl	1463c <nrf_mem_register>
   1cac8:	bb00      	cbnz	r0, 1cb0c <nrf_inbuilt_key_init+0x50>
   1caca:	4601      	mov	r1, r0
   1cacc:	4604      	mov	r4, r0
   1cace:	f240 2201 	movw	r2, #513	; 0x201
   1cad2:	2066      	movs	r0, #102	; 0x66
   1cad4:	f7fe fd36 	bl	1b544 <at_interface_open>
   1cad8:	4e18      	ldr	r6, [pc, #96]	; (1cb3c <nrf_inbuilt_key_init+0x80>)
   1cada:	2800      	cmp	r0, #0
   1cadc:	4605      	mov	r5, r0
   1cade:	6030      	str	r0, [r6, #0]
   1cae0:	db10      	blt.n	1cb04 <nrf_inbuilt_key_init+0x48>
   1cae2:	4817      	ldr	r0, [pc, #92]	; (1cb40 <nrf_inbuilt_key_init+0x84>)
   1cae4:	f009 f954 	bl	25d90 <strlen>
   1cae8:	4623      	mov	r3, r4
   1caea:	4602      	mov	r2, r0
   1caec:	4914      	ldr	r1, [pc, #80]	; (1cb40 <nrf_inbuilt_key_init+0x84>)
   1caee:	4628      	mov	r0, r5
   1caf0:	9401      	str	r4, [sp, #4]
   1caf2:	9400      	str	r4, [sp, #0]
   1caf4:	f7fe fcd6 	bl	1b4a4 <at_interface_write>
   1caf8:	4605      	mov	r5, r0
   1cafa:	4811      	ldr	r0, [pc, #68]	; (1cb40 <nrf_inbuilt_key_init+0x84>)
   1cafc:	f009 f948 	bl	25d90 <strlen>
   1cb00:	42a8      	cmp	r0, r5
   1cb02:	d007      	beq.n	1cb14 <nrf_inbuilt_key_init+0x58>
   1cb04:	2405      	movs	r4, #5
   1cb06:	4620      	mov	r0, r4
   1cb08:	b006      	add	sp, #24
   1cb0a:	bd70      	pop	{r4, r5, r6, pc}
   1cb0c:	2469      	movs	r4, #105	; 0x69
   1cb0e:	4620      	mov	r0, r4
   1cb10:	b006      	add	sp, #24
   1cb12:	bd70      	pop	{r4, r5, r6, pc}
   1cb14:	6830      	ldr	r0, [r6, #0]
   1cb16:	e9cd 4400 	strd	r4, r4, [sp]
   1cb1a:	a903      	add	r1, sp, #12
   1cb1c:	4623      	mov	r3, r4
   1cb1e:	220a      	movs	r2, #10
   1cb20:	f7fe fda2 	bl	1b668 <at_interface_read>
   1cb24:	2801      	cmp	r0, #1
   1cb26:	dded      	ble.n	1cb04 <nrf_inbuilt_key_init+0x48>
   1cb28:	a803      	add	r0, sp, #12
   1cb2a:	2202      	movs	r2, #2
   1cb2c:	4905      	ldr	r1, [pc, #20]	; (1cb44 <nrf_inbuilt_key_init+0x88>)
   1cb2e:	f009 f944 	bl	25dba <strncmp>
   1cb32:	2800      	cmp	r0, #0
   1cb34:	d0e7      	beq.n	1cb06 <nrf_inbuilt_key_init+0x4a>
   1cb36:	e7e5      	b.n	1cb04 <nrf_inbuilt_key_init+0x48>
   1cb38:	20028330 	.word	0x20028330
   1cb3c:	2002832c 	.word	0x2002832c
   1cb40:	0002a424 	.word	0x0002a424
   1cb44:	0002a430 	.word	0x0002a430

0001cb48 <ipc_trace_init>:
   1cb48:	4b01      	ldr	r3, [pc, #4]	; (1cb50 <ipc_trace_init+0x8>)
   1cb4a:	6018      	str	r0, [r3, #0]
   1cb4c:	4770      	bx	lr
   1cb4e:	bf00      	nop
   1cb50:	200217e8 	.word	0x200217e8

0001cb54 <bsd_os_trace_irq_handler>:
   1cb54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb56:	4b6c      	ldr	r3, [pc, #432]	; (1cd08 <bsd_os_trace_irq_handler+0x1b4>)
   1cb58:	b083      	sub	sp, #12
   1cb5a:	781b      	ldrb	r3, [r3, #0]
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	f000 80ad 	beq.w	1ccbc <bsd_os_trace_irq_handler+0x168>
   1cb62:	4b6a      	ldr	r3, [pc, #424]	; (1cd0c <bsd_os_trace_irq_handler+0x1b8>)
   1cb64:	681c      	ldr	r4, [r3, #0]
   1cb66:	68a2      	ldr	r2, [r4, #8]
   1cb68:	6863      	ldr	r3, [r4, #4]
   1cb6a:	429a      	cmp	r2, r3
   1cb6c:	d02d      	beq.n	1cbca <bsd_os_trace_irq_handler+0x76>
   1cb6e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1cb72:	f8ad 3000 	strh.w	r3, [sp]
   1cb76:	7823      	ldrb	r3, [r4, #0]
   1cb78:	466e      	mov	r6, sp
   1cb7a:	f88d 3004 	strb.w	r3, [sp, #4]
   1cb7e:	6863      	ldr	r3, [r4, #4]
   1cb80:	2105      	movs	r1, #5
   1cb82:	429a      	cmp	r2, r3
   1cb84:	bf2a      	itet	cs
   1cb86:	6927      	ldrcs	r7, [r4, #16]
   1cb88:	1a9f      	subcc	r7, r3, r2
   1cb8a:	1abf      	subcs	r7, r7, r2
   1cb8c:	429a      	cmp	r2, r3
   1cb8e:	bf94      	ite	ls
   1cb90:	2500      	movls	r5, #0
   1cb92:	68e5      	ldrhi	r5, [r4, #12]
   1cb94:	b2bf      	uxth	r7, r7
   1cb96:	bf88      	it	hi
   1cb98:	1b5b      	subhi	r3, r3, r5
   1cb9a:	4630      	mov	r0, r6
   1cb9c:	bf88      	it	hi
   1cb9e:	b29d      	uxthhi	r5, r3
   1cba0:	f8ad 7002 	strh.w	r7, [sp, #2]
   1cba4:	f00a f957 	bl	26e56 <bsd_os_trace_put>
   1cba8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cbac:	68a0      	ldr	r0, [r4, #8]
   1cbae:	f00a f952 	bl	26e56 <bsd_os_trace_put>
   1cbb2:	68a3      	ldr	r3, [r4, #8]
   1cbb4:	6922      	ldr	r2, [r4, #16]
   1cbb6:	441f      	add	r7, r3
   1cbb8:	4297      	cmp	r7, r2
   1cbba:	bf08      	it	eq
   1cbbc:	68e3      	ldreq	r3, [r4, #12]
   1cbbe:	60a7      	str	r7, [r4, #8]
   1cbc0:	bf08      	it	eq
   1cbc2:	60a3      	streq	r3, [r4, #8]
   1cbc4:	2d00      	cmp	r5, #0
   1cbc6:	f040 808d 	bne.w	1cce4 <bsd_os_trace_irq_handler+0x190>
   1cbca:	4b51      	ldr	r3, [pc, #324]	; (1cd10 <bsd_os_trace_irq_handler+0x1bc>)
   1cbcc:	681c      	ldr	r4, [r3, #0]
   1cbce:	68a2      	ldr	r2, [r4, #8]
   1cbd0:	6863      	ldr	r3, [r4, #4]
   1cbd2:	429a      	cmp	r2, r3
   1cbd4:	d02c      	beq.n	1cc30 <bsd_os_trace_irq_handler+0xdc>
   1cbd6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1cbda:	f8ad 3000 	strh.w	r3, [sp]
   1cbde:	7823      	ldrb	r3, [r4, #0]
   1cbe0:	466e      	mov	r6, sp
   1cbe2:	f88d 3004 	strb.w	r3, [sp, #4]
   1cbe6:	6863      	ldr	r3, [r4, #4]
   1cbe8:	2105      	movs	r1, #5
   1cbea:	429a      	cmp	r2, r3
   1cbec:	bf2a      	itet	cs
   1cbee:	6927      	ldrcs	r7, [r4, #16]
   1cbf0:	1a9f      	subcc	r7, r3, r2
   1cbf2:	1abf      	subcs	r7, r7, r2
   1cbf4:	429a      	cmp	r2, r3
   1cbf6:	bf94      	ite	ls
   1cbf8:	2500      	movls	r5, #0
   1cbfa:	68e5      	ldrhi	r5, [r4, #12]
   1cbfc:	b2bf      	uxth	r7, r7
   1cbfe:	bf88      	it	hi
   1cc00:	1b5b      	subhi	r3, r3, r5
   1cc02:	4630      	mov	r0, r6
   1cc04:	bf88      	it	hi
   1cc06:	b29d      	uxthhi	r5, r3
   1cc08:	f8ad 7002 	strh.w	r7, [sp, #2]
   1cc0c:	f00a f923 	bl	26e56 <bsd_os_trace_put>
   1cc10:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cc14:	68a0      	ldr	r0, [r4, #8]
   1cc16:	f00a f91e 	bl	26e56 <bsd_os_trace_put>
   1cc1a:	68a3      	ldr	r3, [r4, #8]
   1cc1c:	6922      	ldr	r2, [r4, #16]
   1cc1e:	441f      	add	r7, r3
   1cc20:	4297      	cmp	r7, r2
   1cc22:	bf08      	it	eq
   1cc24:	68e3      	ldreq	r3, [r4, #12]
   1cc26:	60a7      	str	r7, [r4, #8]
   1cc28:	bf08      	it	eq
   1cc2a:	60a3      	streq	r3, [r4, #8]
   1cc2c:	2d00      	cmp	r5, #0
   1cc2e:	d148      	bne.n	1ccc2 <bsd_os_trace_irq_handler+0x16e>
   1cc30:	4b38      	ldr	r3, [pc, #224]	; (1cd14 <bsd_os_trace_irq_handler+0x1c0>)
   1cc32:	681c      	ldr	r4, [r3, #0]
   1cc34:	68a2      	ldr	r2, [r4, #8]
   1cc36:	6863      	ldr	r3, [r4, #4]
   1cc38:	429a      	cmp	r2, r3
   1cc3a:	d02b      	beq.n	1cc94 <bsd_os_trace_irq_handler+0x140>
   1cc3c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1cc40:	f8ad 3000 	strh.w	r3, [sp]
   1cc44:	7823      	ldrb	r3, [r4, #0]
   1cc46:	466e      	mov	r6, sp
   1cc48:	f88d 3004 	strb.w	r3, [sp, #4]
   1cc4c:	6863      	ldr	r3, [r4, #4]
   1cc4e:	2105      	movs	r1, #5
   1cc50:	429a      	cmp	r2, r3
   1cc52:	bf2a      	itet	cs
   1cc54:	6927      	ldrcs	r7, [r4, #16]
   1cc56:	1a9f      	subcc	r7, r3, r2
   1cc58:	1abf      	subcs	r7, r7, r2
   1cc5a:	429a      	cmp	r2, r3
   1cc5c:	bf94      	ite	ls
   1cc5e:	2500      	movls	r5, #0
   1cc60:	68e5      	ldrhi	r5, [r4, #12]
   1cc62:	b2bf      	uxth	r7, r7
   1cc64:	bf88      	it	hi
   1cc66:	1b5b      	subhi	r3, r3, r5
   1cc68:	4630      	mov	r0, r6
   1cc6a:	bf88      	it	hi
   1cc6c:	b29d      	uxthhi	r5, r3
   1cc6e:	f8ad 7002 	strh.w	r7, [sp, #2]
   1cc72:	f00a f8f0 	bl	26e56 <bsd_os_trace_put>
   1cc76:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cc7a:	68a0      	ldr	r0, [r4, #8]
   1cc7c:	f00a f8eb 	bl	26e56 <bsd_os_trace_put>
   1cc80:	68a3      	ldr	r3, [r4, #8]
   1cc82:	6922      	ldr	r2, [r4, #16]
   1cc84:	441f      	add	r7, r3
   1cc86:	4297      	cmp	r7, r2
   1cc88:	bf08      	it	eq
   1cc8a:	68e3      	ldreq	r3, [r4, #12]
   1cc8c:	60a7      	str	r7, [r4, #8]
   1cc8e:	bf08      	it	eq
   1cc90:	60a3      	streq	r3, [r4, #8]
   1cc92:	b90d      	cbnz	r5, 1cc98 <bsd_os_trace_irq_handler+0x144>
   1cc94:	b003      	add	sp, #12
   1cc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc98:	4630      	mov	r0, r6
   1cc9a:	2105      	movs	r1, #5
   1cc9c:	f8ad 5002 	strh.w	r5, [sp, #2]
   1cca0:	f00a f8d9 	bl	26e56 <bsd_os_trace_put>
   1cca4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cca8:	68e0      	ldr	r0, [r4, #12]
   1ccaa:	f00a f8d4 	bl	26e56 <bsd_os_trace_put>
   1ccae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1ccb2:	68e3      	ldr	r3, [r4, #12]
   1ccb4:	4413      	add	r3, r2
   1ccb6:	60a3      	str	r3, [r4, #8]
   1ccb8:	b003      	add	sp, #12
   1ccba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ccbc:	f7f6 fdc8 	bl	13850 <bsd_os_trace_irq_clear>
   1ccc0:	e74f      	b.n	1cb62 <bsd_os_trace_irq_handler+0xe>
   1ccc2:	2105      	movs	r1, #5
   1ccc4:	4630      	mov	r0, r6
   1ccc6:	f8ad 5002 	strh.w	r5, [sp, #2]
   1ccca:	f00a f8c4 	bl	26e56 <bsd_os_trace_put>
   1ccce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1ccd2:	68e0      	ldr	r0, [r4, #12]
   1ccd4:	f00a f8bf 	bl	26e56 <bsd_os_trace_put>
   1ccd8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1ccdc:	68e3      	ldr	r3, [r4, #12]
   1ccde:	4413      	add	r3, r2
   1cce0:	60a3      	str	r3, [r4, #8]
   1cce2:	e7a5      	b.n	1cc30 <bsd_os_trace_irq_handler+0xdc>
   1cce4:	2105      	movs	r1, #5
   1cce6:	4630      	mov	r0, r6
   1cce8:	f8ad 5002 	strh.w	r5, [sp, #2]
   1ccec:	f00a f8b3 	bl	26e56 <bsd_os_trace_put>
   1ccf0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1ccf4:	68e0      	ldr	r0, [r4, #12]
   1ccf6:	f00a f8ae 	bl	26e56 <bsd_os_trace_put>
   1ccfa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1ccfe:	68e3      	ldr	r3, [r4, #12]
   1cd00:	4413      	add	r3, r2
   1cd02:	60a3      	str	r3, [r4, #8]
   1cd04:	e761      	b.n	1cbca <bsd_os_trace_irq_handler+0x76>
   1cd06:	bf00      	nop
   1cd08:	20024043 	.word	0x20024043
   1cd0c:	200217e4 	.word	0x200217e4
   1cd10:	200217dc 	.word	0x200217dc
   1cd14:	200217e0 	.word	0x200217e0

0001cd18 <ipc_trace_handle>:
   1cd18:	2200      	movs	r2, #0
   1cd1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd1e:	4bb0      	ldr	r3, [pc, #704]	; (1cfe0 <ipc_trace_handle+0x2c8>)
   1cd20:	b083      	sub	sp, #12
   1cd22:	681b      	ldr	r3, [r3, #0]
   1cd24:	6919      	ldr	r1, [r3, #16]
   1cd26:	695c      	ldr	r4, [r3, #20]
   1cd28:	7c18      	ldrb	r0, [r3, #16]
   1cd2a:	741a      	strb	r2, [r3, #16]
   1cd2c:	7c58      	ldrb	r0, [r3, #17]
   1cd2e:	745a      	strb	r2, [r3, #17]
   1cd30:	7c98      	ldrb	r0, [r3, #18]
   1cd32:	749a      	strb	r2, [r3, #18]
   1cd34:	7cd8      	ldrb	r0, [r3, #19]
   1cd36:	74da      	strb	r2, [r3, #19]
   1cd38:	7d18      	ldrb	r0, [r3, #20]
   1cd3a:	751a      	strb	r2, [r3, #20]
   1cd3c:	7d58      	ldrb	r0, [r3, #21]
   1cd3e:	755a      	strb	r2, [r3, #21]
   1cd40:	7d98      	ldrb	r0, [r3, #22]
   1cd42:	759a      	strb	r2, [r3, #22]
   1cd44:	7dd8      	ldrb	r0, [r3, #23]
   1cd46:	75da      	strb	r2, [r3, #23]
   1cd48:	b1b9      	cbz	r1, 1cd7a <ipc_trace_handle+0x62>
   1cd4a:	3901      	subs	r1, #1
   1cd4c:	2903      	cmp	r1, #3
   1cd4e:	d814      	bhi.n	1cd7a <ipc_trace_handle+0x62>
   1cd50:	e8df f011 	tbh	[pc, r1, lsl #1]
   1cd54:	010300d6 	.word	0x010300d6
   1cd58:	00160004 	.word	0x00160004
   1cd5c:	2501      	movs	r5, #1
   1cd5e:	2003      	movs	r0, #3
   1cd60:	2200      	movs	r2, #0
   1cd62:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1cd66:	4c9f      	ldr	r4, [pc, #636]	; (1cfe4 <ipc_trace_handle+0x2cc>)
   1cd68:	7025      	strb	r5, [r4, #0]
   1cd6a:	7a1c      	ldrb	r4, [r3, #8]
   1cd6c:	7218      	strb	r0, [r3, #8]
   1cd6e:	7a58      	ldrb	r0, [r3, #9]
   1cd70:	725a      	strb	r2, [r3, #9]
   1cd72:	7a98      	ldrb	r0, [r3, #10]
   1cd74:	729a      	strb	r2, [r3, #10]
   1cd76:	7ada      	ldrb	r2, [r3, #11]
   1cd78:	72d9      	strb	r1, [r3, #11]
   1cd7a:	b003      	add	sp, #12
   1cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd80:	2104      	movs	r1, #4
   1cd82:	2200      	movs	r2, #0
   1cd84:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   1cd88:	7a1c      	ldrb	r4, [r3, #8]
   1cd8a:	7219      	strb	r1, [r3, #8]
   1cd8c:	7a59      	ldrb	r1, [r3, #9]
   1cd8e:	725a      	strb	r2, [r3, #9]
   1cd90:	4994      	ldr	r1, [pc, #592]	; (1cfe4 <ipc_trace_handle+0x2cc>)
   1cd92:	7a9c      	ldrb	r4, [r3, #10]
   1cd94:	729a      	strb	r2, [r3, #10]
   1cd96:	7adc      	ldrb	r4, [r3, #11]
   1cd98:	72d8      	strb	r0, [r3, #11]
   1cd9a:	700a      	strb	r2, [r1, #0]
   1cd9c:	780b      	ldrb	r3, [r1, #0]
   1cd9e:	2b00      	cmp	r3, #0
   1cda0:	f000 8117 	beq.w	1cfd2 <ipc_trace_handle+0x2ba>
   1cda4:	4b90      	ldr	r3, [pc, #576]	; (1cfe8 <ipc_trace_handle+0x2d0>)
   1cda6:	681c      	ldr	r4, [r3, #0]
   1cda8:	68a2      	ldr	r2, [r4, #8]
   1cdaa:	6863      	ldr	r3, [r4, #4]
   1cdac:	429a      	cmp	r2, r3
   1cdae:	d02d      	beq.n	1ce0c <ipc_trace_handle+0xf4>
   1cdb0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1cdb4:	f8ad 3000 	strh.w	r3, [sp]
   1cdb8:	7823      	ldrb	r3, [r4, #0]
   1cdba:	466e      	mov	r6, sp
   1cdbc:	f88d 3004 	strb.w	r3, [sp, #4]
   1cdc0:	6863      	ldr	r3, [r4, #4]
   1cdc2:	2105      	movs	r1, #5
   1cdc4:	429a      	cmp	r2, r3
   1cdc6:	bf2a      	itet	cs
   1cdc8:	6927      	ldrcs	r7, [r4, #16]
   1cdca:	1a9f      	subcc	r7, r3, r2
   1cdcc:	1abf      	subcs	r7, r7, r2
   1cdce:	429a      	cmp	r2, r3
   1cdd0:	bf94      	ite	ls
   1cdd2:	2500      	movls	r5, #0
   1cdd4:	68e5      	ldrhi	r5, [r4, #12]
   1cdd6:	b2bf      	uxth	r7, r7
   1cdd8:	bf88      	it	hi
   1cdda:	1b5b      	subhi	r3, r3, r5
   1cddc:	4630      	mov	r0, r6
   1cdde:	bf88      	it	hi
   1cde0:	b29d      	uxthhi	r5, r3
   1cde2:	f8ad 7002 	strh.w	r7, [sp, #2]
   1cde6:	f00a f836 	bl	26e56 <bsd_os_trace_put>
   1cdea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cdee:	68a0      	ldr	r0, [r4, #8]
   1cdf0:	f00a f831 	bl	26e56 <bsd_os_trace_put>
   1cdf4:	68a3      	ldr	r3, [r4, #8]
   1cdf6:	6922      	ldr	r2, [r4, #16]
   1cdf8:	441f      	add	r7, r3
   1cdfa:	4297      	cmp	r7, r2
   1cdfc:	bf08      	it	eq
   1cdfe:	68e3      	ldreq	r3, [r4, #12]
   1ce00:	60a7      	str	r7, [r4, #8]
   1ce02:	bf08      	it	eq
   1ce04:	60a3      	streq	r3, [r4, #8]
   1ce06:	2d00      	cmp	r5, #0
   1ce08:	f040 80d2 	bne.w	1cfb0 <ipc_trace_handle+0x298>
   1ce0c:	4b77      	ldr	r3, [pc, #476]	; (1cfec <ipc_trace_handle+0x2d4>)
   1ce0e:	681c      	ldr	r4, [r3, #0]
   1ce10:	68a2      	ldr	r2, [r4, #8]
   1ce12:	6863      	ldr	r3, [r4, #4]
   1ce14:	429a      	cmp	r2, r3
   1ce16:	d02d      	beq.n	1ce74 <ipc_trace_handle+0x15c>
   1ce18:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1ce1c:	f8ad 3000 	strh.w	r3, [sp]
   1ce20:	7823      	ldrb	r3, [r4, #0]
   1ce22:	466e      	mov	r6, sp
   1ce24:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce28:	6863      	ldr	r3, [r4, #4]
   1ce2a:	2105      	movs	r1, #5
   1ce2c:	429a      	cmp	r2, r3
   1ce2e:	bf2a      	itet	cs
   1ce30:	6927      	ldrcs	r7, [r4, #16]
   1ce32:	1a9f      	subcc	r7, r3, r2
   1ce34:	1abf      	subcs	r7, r7, r2
   1ce36:	429a      	cmp	r2, r3
   1ce38:	bf94      	ite	ls
   1ce3a:	2500      	movls	r5, #0
   1ce3c:	68e5      	ldrhi	r5, [r4, #12]
   1ce3e:	b2bf      	uxth	r7, r7
   1ce40:	bf88      	it	hi
   1ce42:	1b5b      	subhi	r3, r3, r5
   1ce44:	4630      	mov	r0, r6
   1ce46:	bf88      	it	hi
   1ce48:	b29d      	uxthhi	r5, r3
   1ce4a:	f8ad 7002 	strh.w	r7, [sp, #2]
   1ce4e:	f00a f802 	bl	26e56 <bsd_os_trace_put>
   1ce52:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1ce56:	68a0      	ldr	r0, [r4, #8]
   1ce58:	f009 fffd 	bl	26e56 <bsd_os_trace_put>
   1ce5c:	68a3      	ldr	r3, [r4, #8]
   1ce5e:	6922      	ldr	r2, [r4, #16]
   1ce60:	441f      	add	r7, r3
   1ce62:	4297      	cmp	r7, r2
   1ce64:	bf08      	it	eq
   1ce66:	68e3      	ldreq	r3, [r4, #12]
   1ce68:	60a7      	str	r7, [r4, #8]
   1ce6a:	bf08      	it	eq
   1ce6c:	60a3      	streq	r3, [r4, #8]
   1ce6e:	2d00      	cmp	r5, #0
   1ce70:	f040 808d 	bne.w	1cf8e <ipc_trace_handle+0x276>
   1ce74:	4b5e      	ldr	r3, [pc, #376]	; (1cff0 <ipc_trace_handle+0x2d8>)
   1ce76:	681c      	ldr	r4, [r3, #0]
   1ce78:	68a2      	ldr	r2, [r4, #8]
   1ce7a:	6863      	ldr	r3, [r4, #4]
   1ce7c:	429a      	cmp	r2, r3
   1ce7e:	f43f af7c 	beq.w	1cd7a <ipc_trace_handle+0x62>
   1ce82:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   1ce86:	f8ad 3000 	strh.w	r3, [sp]
   1ce8a:	7823      	ldrb	r3, [r4, #0]
   1ce8c:	466e      	mov	r6, sp
   1ce8e:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce92:	6863      	ldr	r3, [r4, #4]
   1ce94:	2105      	movs	r1, #5
   1ce96:	429a      	cmp	r2, r3
   1ce98:	bf2a      	itet	cs
   1ce9a:	6927      	ldrcs	r7, [r4, #16]
   1ce9c:	1a9f      	subcc	r7, r3, r2
   1ce9e:	1abf      	subcs	r7, r7, r2
   1cea0:	429a      	cmp	r2, r3
   1cea2:	bf94      	ite	ls
   1cea4:	2500      	movls	r5, #0
   1cea6:	68e5      	ldrhi	r5, [r4, #12]
   1cea8:	b2bf      	uxth	r7, r7
   1ceaa:	bf88      	it	hi
   1ceac:	1b5b      	subhi	r3, r3, r5
   1ceae:	4630      	mov	r0, r6
   1ceb0:	bf88      	it	hi
   1ceb2:	b29d      	uxthhi	r5, r3
   1ceb4:	f8ad 7002 	strh.w	r7, [sp, #2]
   1ceb8:	f009 ffcd 	bl	26e56 <bsd_os_trace_put>
   1cebc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cec0:	68a0      	ldr	r0, [r4, #8]
   1cec2:	f009 ffc8 	bl	26e56 <bsd_os_trace_put>
   1cec6:	68a3      	ldr	r3, [r4, #8]
   1cec8:	6922      	ldr	r2, [r4, #16]
   1ceca:	441f      	add	r7, r3
   1cecc:	4297      	cmp	r7, r2
   1cece:	bf08      	it	eq
   1ced0:	68e3      	ldreq	r3, [r4, #12]
   1ced2:	60a7      	str	r7, [r4, #8]
   1ced4:	bf08      	it	eq
   1ced6:	60a3      	streq	r3, [r4, #8]
   1ced8:	2d00      	cmp	r5, #0
   1ceda:	f43f af4e 	beq.w	1cd7a <ipc_trace_handle+0x62>
   1cede:	2105      	movs	r1, #5
   1cee0:	4630      	mov	r0, r6
   1cee2:	f8ad 5002 	strh.w	r5, [sp, #2]
   1cee6:	f009 ffb6 	bl	26e56 <bsd_os_trace_put>
   1ceea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1ceee:	68e0      	ldr	r0, [r4, #12]
   1cef0:	f009 ffb1 	bl	26e56 <bsd_os_trace_put>
   1cef4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cef8:	68e3      	ldr	r3, [r4, #12]
   1cefa:	4413      	add	r3, r2
   1cefc:	60a3      	str	r3, [r4, #8]
   1cefe:	e73c      	b.n	1cd7a <ipc_trace_handle+0x62>
   1cf00:	4a38      	ldr	r2, [pc, #224]	; (1cfe4 <ipc_trace_handle+0x2cc>)
   1cf02:	7811      	ldrb	r1, [r2, #0]
   1cf04:	b109      	cbz	r1, 1cf0a <ipc_trace_handle+0x1f2>
   1cf06:	2100      	movs	r1, #0
   1cf08:	7011      	strb	r1, [r2, #0]
   1cf0a:	68a5      	ldr	r5, [r4, #8]
   1cf0c:	2d00      	cmp	r5, #0
   1cf0e:	d039      	beq.n	1cf84 <ipc_trace_handle+0x26c>
   1cf10:	f04f 0c00 	mov.w	ip, #0
   1cf14:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1cfec <ipc_trace_handle+0x2d4>
   1cf18:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1cfe8 <ipc_trace_handle+0x2d0>
   1cf1c:	4934      	ldr	r1, [pc, #208]	; (1cff0 <ipc_trace_handle+0x2d8>)
   1cf1e:	46e1      	mov	r9, ip
   1cf20:	4666      	mov	r6, ip
   1cf22:	4662      	mov	r2, ip
   1cf24:	f8d1 e000 	ldr.w	lr, [r1]
   1cf28:	f8da 8000 	ldr.w	r8, [sl]
   1cf2c:	f8db 7000 	ldr.w	r7, [fp]
   1cf30:	e008      	b.n	1cf44 <ipc_trace_handle+0x22c>
   1cf32:	2963      	cmp	r1, #99	; 0x63
   1cf34:	d016      	beq.n	1cf64 <ipc_trace_handle+0x24c>
   1cf36:	2961      	cmp	r1, #97	; 0x61
   1cf38:	bf04      	itt	eq
   1cf3a:	4607      	moveq	r7, r0
   1cf3c:	2601      	moveq	r6, #1
   1cf3e:	3201      	adds	r2, #1
   1cf40:	42aa      	cmp	r2, r5
   1cf42:	d013      	beq.n	1cf6c <ipc_trace_handle+0x254>
   1cf44:	1c91      	adds	r1, r2, #2
   1cf46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1cf4a:	6848      	ldr	r0, [r1, #4]
   1cf4c:	7801      	ldrb	r1, [r0, #0]
   1cf4e:	2962      	cmp	r1, #98	; 0x62
   1cf50:	d1ef      	bne.n	1cf32 <ipc_trace_handle+0x21a>
   1cf52:	4680      	mov	r8, r0
   1cf54:	f04f 0901 	mov.w	r9, #1
   1cf58:	e7f1      	b.n	1cf3e <ipc_trace_handle+0x226>
   1cf5a:	f7f6 fc71 	bl	13840 <bsd_os_trace_irq_set>
   1cf5e:	b003      	add	sp, #12
   1cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf64:	4686      	mov	lr, r0
   1cf66:	f04f 0c01 	mov.w	ip, #1
   1cf6a:	e7e8      	b.n	1cf3e <ipc_trace_handle+0x226>
   1cf6c:	bba6      	cbnz	r6, 1cfd8 <ipc_trace_handle+0x2c0>
   1cf6e:	f1b9 0f00 	cmp.w	r9, #0
   1cf72:	d001      	beq.n	1cf78 <ipc_trace_handle+0x260>
   1cf74:	f8ca 8000 	str.w	r8, [sl]
   1cf78:	f1bc 0f00 	cmp.w	ip, #0
   1cf7c:	d002      	beq.n	1cf84 <ipc_trace_handle+0x26c>
   1cf7e:	4a1c      	ldr	r2, [pc, #112]	; (1cff0 <ipc_trace_handle+0x2d8>)
   1cf80:	f8c2 e000 	str.w	lr, [r2]
   1cf84:	2001      	movs	r0, #1
   1cf86:	2200      	movs	r2, #0
   1cf88:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1cf8c:	e6ed      	b.n	1cd6a <ipc_trace_handle+0x52>
   1cf8e:	2105      	movs	r1, #5
   1cf90:	4630      	mov	r0, r6
   1cf92:	f8ad 5002 	strh.w	r5, [sp, #2]
   1cf96:	f009 ff5e 	bl	26e56 <bsd_os_trace_put>
   1cf9a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cf9e:	68e0      	ldr	r0, [r4, #12]
   1cfa0:	f009 ff59 	bl	26e56 <bsd_os_trace_put>
   1cfa4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cfa8:	68e3      	ldr	r3, [r4, #12]
   1cfaa:	4413      	add	r3, r2
   1cfac:	60a3      	str	r3, [r4, #8]
   1cfae:	e761      	b.n	1ce74 <ipc_trace_handle+0x15c>
   1cfb0:	2105      	movs	r1, #5
   1cfb2:	4630      	mov	r0, r6
   1cfb4:	f8ad 5002 	strh.w	r5, [sp, #2]
   1cfb8:	f009 ff4d 	bl	26e56 <bsd_os_trace_put>
   1cfbc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1cfc0:	68e0      	ldr	r0, [r4, #12]
   1cfc2:	f009 ff48 	bl	26e56 <bsd_os_trace_put>
   1cfc6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1cfca:	68e3      	ldr	r3, [r4, #12]
   1cfcc:	4413      	add	r3, r2
   1cfce:	60a3      	str	r3, [r4, #8]
   1cfd0:	e71c      	b.n	1ce0c <ipc_trace_handle+0xf4>
   1cfd2:	f7f6 fc3d 	bl	13850 <bsd_os_trace_irq_clear>
   1cfd6:	e6e5      	b.n	1cda4 <ipc_trace_handle+0x8c>
   1cfd8:	f8cb 7000 	str.w	r7, [fp]
   1cfdc:	e7c7      	b.n	1cf6e <ipc_trace_handle+0x256>
   1cfde:	bf00      	nop
   1cfe0:	200217e8 	.word	0x200217e8
   1cfe4:	20024043 	.word	0x20024043
   1cfe8:	200217e4 	.word	0x200217e4
   1cfec:	200217dc 	.word	0x200217dc
   1cff0:	200217e0 	.word	0x200217e0

0001cff4 <rpc_trace_coredump_in_progress>:
   1cff4:	4b01      	ldr	r3, [pc, #4]	; (1cffc <rpc_trace_coredump_in_progress+0x8>)
   1cff6:	7818      	ldrb	r0, [r3, #0]
   1cff8:	4770      	bx	lr
   1cffa:	bf00      	nop
   1cffc:	20024043 	.word	0x20024043

0001d000 <transport_reset>:
   1d000:	2000      	movs	r0, #0
   1d002:	4770      	bx	lr

0001d004 <transport_data_free>:
   1d004:	4b0b      	ldr	r3, [pc, #44]	; (1d034 <transport_data_free+0x30>)
   1d006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d00a:	4413      	add	r3, r2
   1d00c:	4298      	cmp	r0, r3
   1d00e:	d20d      	bcs.n	1d02c <transport_data_free+0x28>
   1d010:	4282      	cmp	r2, r0
   1d012:	d80b      	bhi.n	1d02c <transport_data_free+0x28>
   1d014:	b510      	push	{r4, lr}
   1d016:	4604      	mov	r4, r0
   1d018:	f000 fd48 	bl	1daac <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1d01c:	b140      	cbz	r0, 1d030 <transport_data_free+0x2c>
   1d01e:	4a06      	ldr	r2, [pc, #24]	; (1d038 <transport_data_free+0x34>)
   1d020:	6084      	str	r4, [r0, #8]
   1d022:	6002      	str	r2, [r0, #0]
   1d024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d028:	f000 bc88 	b.w	1d93c <rpc_transport_ipc_tx_send>
   1d02c:	f7f7 bc54 	b.w	148d8 <nrf_shared_free>
   1d030:	bd10      	pop	{r4, pc}
   1d032:	bf00      	nop
   1d034:	200217ec 	.word	0x200217ec
   1d038:	00020001 	.word	0x00020001

0001d03c <rpc_transport_ipc_init>:
   1d03c:	2800      	cmp	r0, #0
   1d03e:	d02b      	beq.n	1d098 <rpc_transport_ipc_init+0x5c>
   1d040:	b530      	push	{r4, r5, lr}
   1d042:	b089      	sub	sp, #36	; 0x24
   1d044:	aa01      	add	r2, sp, #4
   1d046:	4669      	mov	r1, sp
   1d048:	4604      	mov	r4, r0
   1d04a:	f000 fb8d 	bl	1d768 <rpc_transport_ipc_tx_init>
   1d04e:	4603      	mov	r3, r0
   1d050:	b140      	cbz	r0, 1d064 <rpc_transport_ipc_init+0x28>
   1d052:	4a13      	ldr	r2, [pc, #76]	; (1d0a0 <rpc_transport_ipc_init+0x64>)
   1d054:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d058:	c803      	ldmia	r0, {r0, r1}
   1d05a:	e882 0003 	stmia.w	r2, {r0, r1}
   1d05e:	4618      	mov	r0, r3
   1d060:	b009      	add	sp, #36	; 0x24
   1d062:	bd30      	pop	{r4, r5, pc}
   1d064:	e9dd 1200 	ldrd	r1, r2, [sp]
   1d068:	4620      	mov	r0, r4
   1d06a:	f000 f84b 	bl	1d104 <rpc_transport_ipc_rx_init>
   1d06e:	4603      	mov	r3, r0
   1d070:	2800      	cmp	r0, #0
   1d072:	d1ee      	bne.n	1d052 <rpc_transport_ipc_init+0x16>
   1d074:	4b0b      	ldr	r3, [pc, #44]	; (1d0a4 <rpc_transport_ipc_init+0x68>)
   1d076:	490c      	ldr	r1, [pc, #48]	; (1d0a8 <rpc_transport_ipc_init+0x6c>)
   1d078:	480c      	ldr	r0, [pc, #48]	; (1d0ac <rpc_transport_ipc_init+0x70>)
   1d07a:	4a0d      	ldr	r2, [pc, #52]	; (1d0b0 <rpc_transport_ipc_init+0x74>)
   1d07c:	9303      	str	r3, [sp, #12]
   1d07e:	4d0d      	ldr	r5, [pc, #52]	; (1d0b4 <rpc_transport_ipc_init+0x78>)
   1d080:	4b0d      	ldr	r3, [pc, #52]	; (1d0b8 <rpc_transport_ipc_init+0x7c>)
   1d082:	9104      	str	r1, [sp, #16]
   1d084:	9005      	str	r0, [sp, #20]
   1d086:	490d      	ldr	r1, [pc, #52]	; (1d0bc <rpc_transport_ipc_init+0x80>)
   1d088:	a802      	add	r0, sp, #8
   1d08a:	9307      	str	r3, [sp, #28]
   1d08c:	9506      	str	r5, [sp, #24]
   1d08e:	9202      	str	r2, [sp, #8]
   1d090:	f003 fb6e 	bl	20770 <rpc_transport_register>
   1d094:	4603      	mov	r3, r0
   1d096:	e7dc      	b.n	1d052 <rpc_transport_ipc_init+0x16>
   1d098:	230e      	movs	r3, #14
   1d09a:	4618      	mov	r0, r3
   1d09c:	4770      	bx	lr
   1d09e:	bf00      	nop
   1d0a0:	200217ec 	.word	0x200217ec
   1d0a4:	0001da3d 	.word	0x0001da3d
   1d0a8:	0001db0d 	.word	0x0001db0d
   1d0ac:	0001d6fd 	.word	0x0001d6fd
   1d0b0:	0001d93d 	.word	0x0001d93d
   1d0b4:	0001d005 	.word	0x0001d005
   1d0b8:	0001d001 	.word	0x0001d001
   1d0bc:	200217f4 	.word	0x200217f4

0001d0c0 <rpc_transport_rx_handle>:
   1d0c0:	b160      	cbz	r0, 1d0dc <rpc_transport_rx_handle+0x1c>
   1d0c2:	b508      	push	{r3, lr}
   1d0c4:	6843      	ldr	r3, [r0, #4]
   1d0c6:	b2db      	uxtb	r3, r3
   1d0c8:	2b02      	cmp	r3, #2
   1d0ca:	d00e      	beq.n	1d0ea <rpc_transport_rx_handle+0x2a>
   1d0cc:	6803      	ldr	r3, [r0, #0]
   1d0ce:	0c1b      	lsrs	r3, r3, #16
   1d0d0:	2b02      	cmp	r3, #2
   1d0d2:	d005      	beq.n	1d0e0 <rpc_transport_rx_handle+0x20>
   1d0d4:	2b04      	cmp	r3, #4
   1d0d6:	d00e      	beq.n	1d0f6 <rpc_transport_rx_handle+0x36>
   1d0d8:	2000      	movs	r0, #0
   1d0da:	bd08      	pop	{r3, pc}
   1d0dc:	2000      	movs	r0, #0
   1d0de:	4770      	bx	lr
   1d0e0:	6880      	ldr	r0, [r0, #8]
   1d0e2:	f7f7 fbf9 	bl	148d8 <nrf_shared_free>
   1d0e6:	2000      	movs	r0, #0
   1d0e8:	bd08      	pop	{r3, pc}
   1d0ea:	4601      	mov	r1, r0
   1d0ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d0f0:	4803      	ldr	r0, [pc, #12]	; (1d100 <rpc_transport_rx_handle+0x40>)
   1d0f2:	f003 ba27 	b.w	20544 <rpc_transport_input>
   1d0f6:	4802      	ldr	r0, [pc, #8]	; (1d100 <rpc_transport_rx_handle+0x40>)
   1d0f8:	f003 fb9a 	bl	20830 <rpc_transport_unregister>
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	bd08      	pop	{r3, pc}
   1d100:	200217f4 	.word	0x200217f4

0001d104 <rpc_transport_ipc_rx_init>:
   1d104:	2800      	cmp	r0, #0
   1d106:	f000 80ff 	beq.w	1d308 <rpc_transport_ipc_rx_init+0x204>
   1d10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d10e:	6805      	ldr	r5, [r0, #0]
   1d110:	b095      	sub	sp, #84	; 0x54
   1d112:	2d00      	cmp	r5, #0
   1d114:	f000 80ee 	beq.w	1d2f4 <rpc_transport_ipc_rx_init+0x1f0>
   1d118:	6883      	ldr	r3, [r0, #8]
   1d11a:	2b00      	cmp	r3, #0
   1d11c:	f000 80ea 	beq.w	1d2f4 <rpc_transport_ipc_rx_init+0x1f0>
   1d120:	6907      	ldr	r7, [r0, #16]
   1d122:	2f00      	cmp	r7, #0
   1d124:	f000 80e6 	beq.w	1d2f4 <rpc_transport_ipc_rx_init+0x1f0>
   1d128:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1d12a:	2c00      	cmp	r4, #0
   1d12c:	f000 80e2 	beq.w	1d2f4 <rpc_transport_ipc_rx_init+0x1f0>
   1d130:	6844      	ldr	r4, [r0, #4]
   1d132:	2c1b      	cmp	r4, #27
   1d134:	f240 80e3 	bls.w	1d2fe <rpc_transport_ipc_rx_init+0x1fa>
   1d138:	68c4      	ldr	r4, [r0, #12]
   1d13a:	2c0b      	cmp	r4, #11
   1d13c:	f240 80df 	bls.w	1d2fe <rpc_transport_ipc_rx_init+0x1fa>
   1d140:	f8d0 e014 	ldr.w	lr, [r0, #20]
   1d144:	f1be 0f17 	cmp.w	lr, #23
   1d148:	f240 80d9 	bls.w	1d2fe <rpc_transport_ipc_rx_init+0x1fa>
   1d14c:	2600      	movs	r6, #0
   1d14e:	4604      	mov	r4, r0
   1d150:	486f      	ldr	r0, [pc, #444]	; (1d310 <rpc_transport_ipc_rx_init+0x20c>)
   1d152:	e9cd 1200 	strd	r1, r2, [sp]
   1d156:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 1d330 <rpc_transport_ipc_rx_init+0x22c>
   1d15a:	496e      	ldr	r1, [pc, #440]	; (1d314 <rpc_transport_ipc_rx_init+0x210>)
   1d15c:	8006      	strh	r6, [r0, #0]
   1d15e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1d160:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1d334 <rpc_transport_ipc_rx_init+0x230>
   1d164:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 1d338 <rpc_transport_ipc_rx_init+0x234>
   1d168:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 1d33c <rpc_transport_ipc_rx_init+0x238>
   1d16c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1d340 <rpc_transport_ipc_rx_init+0x23c>
   1d170:	4672      	mov	r2, lr
   1d172:	600e      	str	r6, [r1, #0]
   1d174:	f8ca 0000 	str.w	r0, [sl]
   1d178:	4631      	mov	r1, r6
   1d17a:	4638      	mov	r0, r7
   1d17c:	f8cc 6000 	str.w	r6, [ip]
   1d180:	f8cb 3000 	str.w	r3, [fp]
   1d184:	f8c8 6000 	str.w	r6, [r8]
   1d188:	f8c9 6000 	str.w	r6, [r9]
   1d18c:	f008 fe98 	bl	25ec0 <memset>
   1d190:	69e3      	ldr	r3, [r4, #28]
   1d192:	4638      	mov	r0, r7
   1d194:	603b      	str	r3, [r7, #0]
   1d196:	69a3      	ldr	r3, [r4, #24]
   1d198:	607b      	str	r3, [r7, #4]
   1d19a:	f7ff fcd5 	bl	1cb48 <ipc_trace_init>
   1d19e:	2201      	movs	r2, #1
   1d1a0:	f04f 0c04 	mov.w	ip, #4
   1d1a4:	4b5c      	ldr	r3, [pc, #368]	; (1d318 <rpc_transport_ipc_rx_init+0x214>)
   1d1a6:	495d      	ldr	r1, [pc, #372]	; (1d31c <rpc_transport_ipc_rx_init+0x218>)
   1d1a8:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   1d1ac:	6809      	ldr	r1, [r1, #0]
   1d1ae:	2080      	movs	r0, #128	; 0x80
   1d1b0:	9104      	str	r1, [sp, #16]
   1d1b2:	495b      	ldr	r1, [pc, #364]	; (1d320 <rpc_transport_ipc_rx_init+0x21c>)
   1d1b4:	f8dd e010 	ldr.w	lr, [sp, #16]
   1d1b8:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   1d1bc:	6809      	ldr	r1, [r1, #0]
   1d1be:	702e      	strb	r6, [r5, #0]
   1d1c0:	9103      	str	r1, [sp, #12]
   1d1c2:	706e      	strb	r6, [r5, #1]
   1d1c4:	70ee      	strb	r6, [r5, #3]
   1d1c6:	70aa      	strb	r2, [r5, #2]
   1d1c8:	9903      	ldr	r1, [sp, #12]
   1d1ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1d1cc:	f8db e000 	ldr.w	lr, [fp]
   1d1d0:	6069      	str	r1, [r5, #4]
   1d1d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1d1d4:	9c01      	ldr	r4, [sp, #4]
   1d1d6:	60a9      	str	r1, [r5, #8]
   1d1d8:	60ec      	str	r4, [r5, #12]
   1d1da:	9c00      	ldr	r4, [sp, #0]
   1d1dc:	4951      	ldr	r1, [pc, #324]	; (1d324 <rpc_transport_ipc_rx_init+0x220>)
   1d1de:	61af      	str	r7, [r5, #24]
   1d1e0:	f8c5 e014 	str.w	lr, [r5, #20]
   1d1e4:	612c      	str	r4, [r5, #16]
   1d1e6:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   1d1ea:	680c      	ldr	r4, [r1, #0]
   1d1ec:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   1d1f0:	9405      	str	r4, [sp, #20]
   1d1f2:	9c05      	ldr	r4, [sp, #20]
   1d1f4:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   1d1f8:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   1d1fc:	f44f 6780 	mov.w	r7, #1024	; 0x400
   1d200:	9406      	str	r4, [sp, #24]
   1d202:	9c06      	ldr	r4, [sp, #24]
   1d204:	2410      	movs	r4, #16
   1d206:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   1d20a:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   1d20e:	4d46      	ldr	r5, [pc, #280]	; (1d328 <rpc_transport_ipc_rx_init+0x224>)
   1d210:	9407      	str	r4, [sp, #28]
   1d212:	9c07      	ldr	r4, [sp, #28]
   1d214:	2440      	movs	r4, #64	; 0x40
   1d216:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1d21a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   1d21e:	9408      	str	r4, [sp, #32]
   1d220:	9c08      	ldr	r4, [sp, #32]
   1d222:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   1d226:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   1d22a:	9009      	str	r0, [sp, #36]	; 0x24
   1d22c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d22e:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   1d232:	6808      	ldr	r0, [r1, #0]
   1d234:	900a      	str	r0, [sp, #40]	; 0x28
   1d236:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d238:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   1d23c:	6888      	ldr	r0, [r1, #8]
   1d23e:	900b      	str	r0, [sp, #44]	; 0x2c
   1d240:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d242:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   1d246:	6908      	ldr	r0, [r1, #16]
   1d248:	900c      	str	r0, [sp, #48]	; 0x30
   1d24a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d24c:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   1d250:	6988      	ldr	r0, [r1, #24]
   1d252:	900d      	str	r0, [sp, #52]	; 0x34
   1d254:	980d      	ldr	r0, [sp, #52]	; 0x34
   1d256:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   1d25a:	69c8      	ldr	r0, [r1, #28]
   1d25c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   1d260:	900e      	str	r0, [sp, #56]	; 0x38
   1d262:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d264:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1d268:	4310      	orrs	r0, r2
   1d26a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   1d26e:	680c      	ldr	r4, [r1, #0]
   1d270:	482e      	ldr	r0, [pc, #184]	; (1d32c <rpc_transport_ipc_rx_init+0x228>)
   1d272:	940f      	str	r4, [sp, #60]	; 0x3c
   1d274:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1d276:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1d27a:	ea44 040c 	orr.w	r4, r4, ip
   1d27e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1d282:	680c      	ldr	r4, [r1, #0]
   1d284:	9410      	str	r4, [sp, #64]	; 0x40
   1d286:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1d288:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1d28c:	f044 0410 	orr.w	r4, r4, #16
   1d290:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1d294:	680c      	ldr	r4, [r1, #0]
   1d296:	9411      	str	r4, [sp, #68]	; 0x44
   1d298:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1d29a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1d29e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1d2a2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1d2a6:	680c      	ldr	r4, [r1, #0]
   1d2a8:	9412      	str	r4, [sp, #72]	; 0x48
   1d2aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1d2ac:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1d2b0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1d2b4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   1d2b8:	f8da 3000 	ldr.w	r3, [sl]
   1d2bc:	6809      	ldr	r1, [r1, #0]
   1d2be:	015b      	lsls	r3, r3, #5
   1d2c0:	9113      	str	r1, [sp, #76]	; 0x4c
   1d2c2:	b2db      	uxtb	r3, r3
   1d2c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1d2c6:	f8c8 2000 	str.w	r2, [r8]
   1d2ca:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   1d2ce:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   1d2d2:	6047      	str	r7, [r0, #4]
   1d2d4:	9602      	str	r6, [sp, #8]
   1d2d6:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   1d2da:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   1d2de:	9302      	str	r3, [sp, #8]
   1d2e0:	9b02      	ldr	r3, [sp, #8]
   1d2e2:	f8d8 3000 	ldr.w	r3, [r8]
   1d2e6:	2b01      	cmp	r3, #1
   1d2e8:	d0fb      	beq.n	1d2e2 <rpc_transport_ipc_rx_init+0x1de>
   1d2ea:	f8d9 0000 	ldr.w	r0, [r9]
   1d2ee:	b015      	add	sp, #84	; 0x54
   1d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2f4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1d2f8:	b015      	add	sp, #84	; 0x54
   1d2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2fe:	f24c 0009 	movw	r0, #49161	; 0xc009
   1d302:	b015      	add	sp, #84	; 0x54
   1d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d308:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1d30c:	4770      	bx	lr
   1d30e:	bf00      	nop
   1d310:	20022256 	.word	0x20022256
   1d314:	20021804 	.word	0x20021804
   1d318:	4002a000 	.word	0x4002a000
   1d31c:	4002a610 	.word	0x4002a610
   1d320:	4002a614 	.word	0x4002a614
   1d324:	4002a590 	.word	0x4002a590
   1d328:	40005000 	.word	0x40005000
   1d32c:	e000e100 	.word	0xe000e100
   1d330:	200217fc 	.word	0x200217fc
   1d334:	20021808 	.word	0x20021808
   1d338:	20021800 	.word	0x20021800
   1d33c:	2002180c 	.word	0x2002180c
   1d340:	200217f8 	.word	0x200217f8

0001d344 <IPC_IRQHandler>:
   1d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d348:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1d34c:	4cb1      	ldr	r4, [pc, #708]	; (1d614 <IPC_IRQHandler+0x2d0>)
   1d34e:	b087      	sub	sp, #28
   1d350:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1d354:	f3bf 8f4f 	dsb	sy
   1d358:	f3bf 8f6f 	isb	sy
   1d35c:	4eae      	ldr	r6, [pc, #696]	; (1d618 <IPC_IRQHandler+0x2d4>)
   1d35e:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   1d362:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1d366:	061f      	lsls	r7, r3, #24
   1d368:	f100 80c8 	bmi.w	1d4fc <IPC_IRQHandler+0x1b8>
   1d36c:	4baa      	ldr	r3, [pc, #680]	; (1d618 <IPC_IRQHandler+0x2d4>)
   1d36e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1d372:	07d0      	lsls	r0, r2, #31
   1d374:	f100 80d4 	bmi.w	1d520 <IPC_IRQHandler+0x1dc>
   1d378:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1d37c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1d380:	f040 80b6 	bne.w	1d4f0 <IPC_IRQHandler+0x1ac>
   1d384:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   1d388:	0749      	lsls	r1, r1, #29
   1d38a:	f100 80ea 	bmi.w	1d562 <IPC_IRQHandler+0x21e>
   1d38e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d392:	06db      	lsls	r3, r3, #27
   1d394:	f140 809d 	bpl.w	1d4d2 <IPC_IRQHandler+0x18e>
   1d398:	2100      	movs	r1, #0
   1d39a:	4a9f      	ldr	r2, [pc, #636]	; (1d618 <IPC_IRQHandler+0x2d4>)
   1d39c:	4b9f      	ldr	r3, [pc, #636]	; (1d61c <IPC_IRQHandler+0x2d8>)
   1d39e:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   1d3a2:	681b      	ldr	r3, [r3, #0]
   1d3a4:	9304      	str	r3, [sp, #16]
   1d3a6:	9b04      	ldr	r3, [sp, #16]
   1d3a8:	f8df 829c 	ldr.w	r8, [pc, #668]	; 1d648 <IPC_IRQHandler+0x304>
   1d3ac:	4f9c      	ldr	r7, [pc, #624]	; (1d620 <IPC_IRQHandler+0x2dc>)
   1d3ae:	f8df 929c 	ldr.w	r9, [pc, #668]	; 1d64c <IPC_IRQHandler+0x308>
   1d3b2:	f8d8 a000 	ldr.w	sl, [r8]
   1d3b6:	f8da 1000 	ldr.w	r1, [sl]
   1d3ba:	2900      	cmp	r1, #0
   1d3bc:	d03f      	beq.n	1d43e <IPC_IRQHandler+0xfa>
   1d3be:	2200      	movs	r2, #0
   1d3c0:	4614      	mov	r4, r2
   1d3c2:	e002      	b.n	1d3ca <IPC_IRQHandler+0x86>
   1d3c4:	3401      	adds	r4, #1
   1d3c6:	428c      	cmp	r4, r1
   1d3c8:	d227      	bcs.n	1d41a <IPC_IRQHandler+0xd6>
   1d3ca:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   1d3ce:	68ab      	ldr	r3, [r5, #8]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d0f7      	beq.n	1d3c4 <IPC_IRQHandler+0x80>
   1d3d4:	686e      	ldr	r6, [r5, #4]
   1d3d6:	b2f6      	uxtb	r6, r6
   1d3d8:	2e01      	cmp	r6, #1
   1d3da:	d1f3      	bne.n	1d3c4 <IPC_IRQHandler+0x80>
   1d3dc:	6868      	ldr	r0, [r5, #4]
   1d3de:	f8b9 3000 	ldrh.w	r3, [r9]
   1d3e2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1d3e6:	d1ed      	bne.n	1d3c4 <IPC_IRQHandler+0x80>
   1d3e8:	686a      	ldr	r2, [r5, #4]
   1d3ea:	3301      	adds	r3, #1
   1d3ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1d3f0:	f042 0202 	orr.w	r2, r2, #2
   1d3f4:	606a      	str	r2, [r5, #4]
   1d3f6:	68a8      	ldr	r0, [r5, #8]
   1d3f8:	f8a9 3000 	strh.w	r3, [r9]
   1d3fc:	f7ff fe60 	bl	1d0c0 <rpc_transport_rx_handle>
   1d400:	4632      	mov	r2, r6
   1d402:	b928      	cbnz	r0, 1d410 <IPC_IRQHandler+0xcc>
   1d404:	686b      	ldr	r3, [r5, #4]
   1d406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d40a:	f043 0303 	orr.w	r3, r3, #3
   1d40e:	606b      	str	r3, [r5, #4]
   1d410:	f8da 1000 	ldr.w	r1, [sl]
   1d414:	3401      	adds	r4, #1
   1d416:	428c      	cmp	r4, r1
   1d418:	d3d7      	bcc.n	1d3ca <IPC_IRQHandler+0x86>
   1d41a:	2a00      	cmp	r2, #0
   1d41c:	d1cd      	bne.n	1d3ba <IPC_IRQHandler+0x76>
   1d41e:	b171      	cbz	r1, 1d43e <IPC_IRQHandler+0xfa>
   1d420:	4613      	mov	r3, r2
   1d422:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   1d426:	6890      	ldr	r0, [r2, #8]
   1d428:	3301      	adds	r3, #1
   1d42a:	b130      	cbz	r0, 1d43a <IPC_IRQHandler+0xf6>
   1d42c:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1d430:	fa5f fb8b 	uxtb.w	fp, fp
   1d434:	f1bb 0f01 	cmp.w	fp, #1
   1d438:	d003      	beq.n	1d442 <IPC_IRQHandler+0xfe>
   1d43a:	428b      	cmp	r3, r1
   1d43c:	d1f1      	bne.n	1d422 <IPC_IRQHandler+0xde>
   1d43e:	f04f 0b00 	mov.w	fp, #0
   1d442:	f8d7 a000 	ldr.w	sl, [r7]
   1d446:	f8da 2000 	ldr.w	r2, [sl]
   1d44a:	2a00      	cmp	r2, #0
   1d44c:	d03d      	beq.n	1d4ca <IPC_IRQHandler+0x186>
   1d44e:	2100      	movs	r1, #0
   1d450:	460c      	mov	r4, r1
   1d452:	e002      	b.n	1d45a <IPC_IRQHandler+0x116>
   1d454:	3401      	adds	r4, #1
   1d456:	4294      	cmp	r4, r2
   1d458:	d227      	bcs.n	1d4aa <IPC_IRQHandler+0x166>
   1d45a:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   1d45e:	68ab      	ldr	r3, [r5, #8]
   1d460:	2b00      	cmp	r3, #0
   1d462:	d0f7      	beq.n	1d454 <IPC_IRQHandler+0x110>
   1d464:	686e      	ldr	r6, [r5, #4]
   1d466:	b2f6      	uxtb	r6, r6
   1d468:	2e01      	cmp	r6, #1
   1d46a:	d1f3      	bne.n	1d454 <IPC_IRQHandler+0x110>
   1d46c:	6868      	ldr	r0, [r5, #4]
   1d46e:	f8b9 3000 	ldrh.w	r3, [r9]
   1d472:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1d476:	d1ed      	bne.n	1d454 <IPC_IRQHandler+0x110>
   1d478:	686a      	ldr	r2, [r5, #4]
   1d47a:	3301      	adds	r3, #1
   1d47c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1d480:	f042 0202 	orr.w	r2, r2, #2
   1d484:	606a      	str	r2, [r5, #4]
   1d486:	68a8      	ldr	r0, [r5, #8]
   1d488:	f8a9 3000 	strh.w	r3, [r9]
   1d48c:	f7ff fe18 	bl	1d0c0 <rpc_transport_rx_handle>
   1d490:	4631      	mov	r1, r6
   1d492:	b928      	cbnz	r0, 1d4a0 <IPC_IRQHandler+0x15c>
   1d494:	686a      	ldr	r2, [r5, #4]
   1d496:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   1d49a:	f043 0303 	orr.w	r3, r3, #3
   1d49e:	606b      	str	r3, [r5, #4]
   1d4a0:	f8da 2000 	ldr.w	r2, [sl]
   1d4a4:	3401      	adds	r4, #1
   1d4a6:	4294      	cmp	r4, r2
   1d4a8:	d3d7      	bcc.n	1d45a <IPC_IRQHandler+0x116>
   1d4aa:	2900      	cmp	r1, #0
   1d4ac:	d1cd      	bne.n	1d44a <IPC_IRQHandler+0x106>
   1d4ae:	b162      	cbz	r2, 1d4ca <IPC_IRQHandler+0x186>
   1d4b0:	460b      	mov	r3, r1
   1d4b2:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1d4b6:	6888      	ldr	r0, [r1, #8]
   1d4b8:	3301      	adds	r3, #1
   1d4ba:	b120      	cbz	r0, 1d4c6 <IPC_IRQHandler+0x182>
   1d4bc:	6849      	ldr	r1, [r1, #4]
   1d4be:	b2c9      	uxtb	r1, r1
   1d4c0:	2901      	cmp	r1, #1
   1d4c2:	f43f af76 	beq.w	1d3b2 <IPC_IRQHandler+0x6e>
   1d4c6:	4293      	cmp	r3, r2
   1d4c8:	d1f3      	bne.n	1d4b2 <IPC_IRQHandler+0x16e>
   1d4ca:	f1bb 0f00 	cmp.w	fp, #0
   1d4ce:	f47f af70 	bne.w	1d3b2 <IPC_IRQHandler+0x6e>
   1d4d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d4d6:	4b53      	ldr	r3, [pc, #332]	; (1d624 <IPC_IRQHandler+0x2e0>)
   1d4d8:	4a4e      	ldr	r2, [pc, #312]	; (1d614 <IPC_IRQHandler+0x2d0>)
   1d4da:	681b      	ldr	r3, [r3, #0]
   1d4dc:	015b      	lsls	r3, r3, #5
   1d4de:	b2db      	uxtb	r3, r3
   1d4e0:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   1d4e4:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   1d4e8:	6051      	str	r1, [r2, #4]
   1d4ea:	b007      	add	sp, #28
   1d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4f0:	2206      	movs	r2, #6
   1d4f2:	4b4d      	ldr	r3, [pc, #308]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d4f4:	601a      	str	r2, [r3, #0]
   1d4f6:	b007      	add	sp, #28
   1d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4fc:	f7ff fc0c 	bl	1cd18 <ipc_trace_handle>
   1d500:	f7ff fd78 	bl	1cff4 <rpc_trace_coredump_in_progress>
   1d504:	2800      	cmp	r0, #0
   1d506:	d151      	bne.n	1d5ac <IPC_IRQHandler+0x268>
   1d508:	4b48      	ldr	r3, [pc, #288]	; (1d62c <IPC_IRQHandler+0x2e8>)
   1d50a:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   1d50e:	681b      	ldr	r3, [r3, #0]
   1d510:	9301      	str	r3, [sp, #4]
   1d512:	9b01      	ldr	r3, [sp, #4]
   1d514:	4b40      	ldr	r3, [pc, #256]	; (1d618 <IPC_IRQHandler+0x2d4>)
   1d516:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1d51a:	07d0      	lsls	r0, r2, #31
   1d51c:	f57f af2c 	bpl.w	1d378 <IPC_IRQHandler+0x34>
   1d520:	2000      	movs	r0, #0
   1d522:	f248 0203 	movw	r2, #32771	; 0x8003
   1d526:	4942      	ldr	r1, [pc, #264]	; (1d630 <IPC_IRQHandler+0x2ec>)
   1d528:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1d52c:	6809      	ldr	r1, [r1, #0]
   1d52e:	9102      	str	r1, [sp, #8]
   1d530:	9902      	ldr	r1, [sp, #8]
   1d532:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1d536:	4293      	cmp	r3, r2
   1d538:	d046      	beq.n	1d5c8 <IPC_IRQHandler+0x284>
   1d53a:	d822      	bhi.n	1d582 <IPC_IRQHandler+0x23e>
   1d53c:	f248 0201 	movw	r2, #32769	; 0x8001
   1d540:	4293      	cmp	r3, r2
   1d542:	d03a      	beq.n	1d5ba <IPC_IRQHandler+0x276>
   1d544:	f248 0202 	movw	r2, #32770	; 0x8002
   1d548:	4293      	cmp	r3, r2
   1d54a:	d129      	bne.n	1d5a0 <IPC_IRQHandler+0x25c>
   1d54c:	2103      	movs	r1, #3
   1d54e:	2006      	movs	r0, #6
   1d550:	4a35      	ldr	r2, [pc, #212]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d552:	4b38      	ldr	r3, [pc, #224]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d554:	6011      	str	r1, [r2, #0]
   1d556:	6018      	str	r0, [r3, #0]
   1d558:	b007      	add	sp, #28
   1d55a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d55e:	f7ff b91f 	b.w	1c7a0 <rpc_transport_ipc_fault_handler>
   1d562:	4d31      	ldr	r5, [pc, #196]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d564:	6829      	ldr	r1, [r5, #0]
   1d566:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d56a:	2901      	cmp	r1, #1
   1d56c:	4932      	ldr	r1, [pc, #200]	; (1d638 <IPC_IRQHandler+0x2f4>)
   1d56e:	d033      	beq.n	1d5d8 <IPC_IRQHandler+0x294>
   1d570:	680a      	ldr	r2, [r1, #0]
   1d572:	9203      	str	r2, [sp, #12]
   1d574:	9a03      	ldr	r2, [sp, #12]
   1d576:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1d57a:	06da      	lsls	r2, r3, #27
   1d57c:	f57f af14 	bpl.w	1d3a8 <IPC_IRQHandler+0x64>
   1d580:	e70a      	b.n	1d398 <IPC_IRQHandler+0x54>
   1d582:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1d586:	d90b      	bls.n	1d5a0 <IPC_IRQHandler+0x25c>
   1d588:	4a2c      	ldr	r2, [pc, #176]	; (1d63c <IPC_IRQHandler+0x2f8>)
   1d58a:	4293      	cmp	r3, r2
   1d58c:	d902      	bls.n	1d594 <IPC_IRQHandler+0x250>
   1d58e:	4a2c      	ldr	r2, [pc, #176]	; (1d640 <IPC_IRQHandler+0x2fc>)
   1d590:	4293      	cmp	r3, r2
   1d592:	d105      	bne.n	1d5a0 <IPC_IRQHandler+0x25c>
   1d594:	2003      	movs	r0, #3
   1d596:	4924      	ldr	r1, [pc, #144]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d598:	4a26      	ldr	r2, [pc, #152]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d59a:	6008      	str	r0, [r1, #0]
   1d59c:	6013      	str	r3, [r2, #0]
   1d59e:	e7aa      	b.n	1d4f6 <IPC_IRQHandler+0x1b2>
   1d5a0:	2003      	movs	r0, #3
   1d5a2:	4a21      	ldr	r2, [pc, #132]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d5a4:	4b23      	ldr	r3, [pc, #140]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d5a6:	6010      	str	r0, [r2, #0]
   1d5a8:	6018      	str	r0, [r3, #0]
   1d5aa:	e7d5      	b.n	1d558 <IPC_IRQHandler+0x214>
   1d5ac:	23e0      	movs	r3, #224	; 0xe0
   1d5ae:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   1d5b2:	6065      	str	r5, [r4, #4]
   1d5b4:	b007      	add	sp, #28
   1d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5ba:	2103      	movs	r1, #3
   1d5bc:	2007      	movs	r0, #7
   1d5be:	4a1a      	ldr	r2, [pc, #104]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d5c0:	4b1c      	ldr	r3, [pc, #112]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d5c2:	6011      	str	r1, [r2, #0]
   1d5c4:	6018      	str	r0, [r3, #0]
   1d5c6:	e7c7      	b.n	1d558 <IPC_IRQHandler+0x214>
   1d5c8:	2304      	movs	r3, #4
   1d5ca:	2103      	movs	r1, #3
   1d5cc:	4c19      	ldr	r4, [pc, #100]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d5ce:	4a16      	ldr	r2, [pc, #88]	; (1d628 <IPC_IRQHandler+0x2e4>)
   1d5d0:	4618      	mov	r0, r3
   1d5d2:	6023      	str	r3, [r4, #0]
   1d5d4:	6011      	str	r1, [r2, #0]
   1d5d6:	e7bf      	b.n	1d558 <IPC_IRQHandler+0x214>
   1d5d8:	4a1a      	ldr	r2, [pc, #104]	; (1d644 <IPC_IRQHandler+0x300>)
   1d5da:	680b      	ldr	r3, [r1, #0]
   1d5dc:	6812      	ldr	r2, [r2, #0]
   1d5de:	9305      	str	r3, [sp, #20]
   1d5e0:	6893      	ldr	r3, [r2, #8]
   1d5e2:	4819      	ldr	r0, [pc, #100]	; (1d648 <IPC_IRQHandler+0x304>)
   1d5e4:	490e      	ldr	r1, [pc, #56]	; (1d620 <IPC_IRQHandler+0x2dc>)
   1d5e6:	6003      	str	r3, [r0, #0]
   1d5e8:	6854      	ldr	r4, [r2, #4]
   1d5ea:	9a05      	ldr	r2, [sp, #20]
   1d5ec:	600c      	str	r4, [r1, #0]
   1d5ee:	b173      	cbz	r3, 1d60e <IPC_IRQHandler+0x2ca>
   1d5f0:	b16c      	cbz	r4, 1d60e <IPC_IRQHandler+0x2ca>
   1d5f2:	681b      	ldr	r3, [r3, #0]
   1d5f4:	2b10      	cmp	r3, #16
   1d5f6:	d802      	bhi.n	1d5fe <IPC_IRQHandler+0x2ba>
   1d5f8:	6822      	ldr	r2, [r4, #0]
   1d5fa:	2a10      	cmp	r2, #16
   1d5fc:	d928      	bls.n	1d650 <IPC_IRQHandler+0x30c>
   1d5fe:	f24c 0306 	movw	r3, #49158	; 0xc006
   1d602:	2203      	movs	r2, #3
   1d604:	490b      	ldr	r1, [pc, #44]	; (1d634 <IPC_IRQHandler+0x2f0>)
   1d606:	4618      	mov	r0, r3
   1d608:	600b      	str	r3, [r1, #0]
   1d60a:	602a      	str	r2, [r5, #0]
   1d60c:	e7a4      	b.n	1d558 <IPC_IRQHandler+0x214>
   1d60e:	2310      	movs	r3, #16
   1d610:	e7f7      	b.n	1d602 <IPC_IRQHandler+0x2be>
   1d612:	bf00      	nop
   1d614:	e000e100 	.word	0xe000e100
   1d618:	4002a000 	.word	0x4002a000
   1d61c:	4002a110 	.word	0x4002a110
   1d620:	20021804 	.word	0x20021804
   1d624:	200217fc 	.word	0x200217fc
   1d628:	20021800 	.word	0x20021800
   1d62c:	4002a11c 	.word	0x4002a11c
   1d630:	4002a100 	.word	0x4002a100
   1d634:	200217f8 	.word	0x200217f8
   1d638:	4002a108 	.word	0x4002a108
   1d63c:	04400004 	.word	0x04400004
   1d640:	05500001 	.word	0x05500001
   1d644:	2002180c 	.word	0x2002180c
   1d648:	20021808 	.word	0x20021808
   1d64c:	20022256 	.word	0x20022256
   1d650:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1d6f8 <IPC_IRQHandler+0x3b4>
   1d654:	2a00      	cmp	r2, #0
   1d656:	d042      	beq.n	1d6de <IPC_IRQHandler+0x39a>
   1d658:	2300      	movs	r3, #0
   1d65a:	f104 0904 	add.w	r9, r4, #4
   1d65e:	461e      	mov	r6, r3
   1d660:	e002      	b.n	1d668 <IPC_IRQHandler+0x324>
   1d662:	3601      	adds	r6, #1
   1d664:	4296      	cmp	r6, r2
   1d666:	d22a      	bcs.n	1d6be <IPC_IRQHandler+0x37a>
   1d668:	00f7      	lsls	r7, r6, #3
   1d66a:	19e1      	adds	r1, r4, r7
   1d66c:	6888      	ldr	r0, [r1, #8]
   1d66e:	2800      	cmp	r0, #0
   1d670:	d0f7      	beq.n	1d662 <IPC_IRQHandler+0x31e>
   1d672:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1d676:	fa5f fa8a 	uxtb.w	sl, sl
   1d67a:	f1ba 0f01 	cmp.w	sl, #1
   1d67e:	d1f0      	bne.n	1d662 <IPC_IRQHandler+0x31e>
   1d680:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1d684:	f8b8 0000 	ldrh.w	r0, [r8]
   1d688:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   1d68c:	d1e9      	bne.n	1d662 <IPC_IRQHandler+0x31e>
   1d68e:	684b      	ldr	r3, [r1, #4]
   1d690:	1c42      	adds	r2, r0, #1
   1d692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d696:	f043 0302 	orr.w	r3, r3, #2
   1d69a:	604b      	str	r3, [r1, #4]
   1d69c:	6888      	ldr	r0, [r1, #8]
   1d69e:	f8a8 2000 	strh.w	r2, [r8]
   1d6a2:	f7ff fd0d 	bl	1d0c0 <rpc_transport_rx_handle>
   1d6a6:	4653      	mov	r3, sl
   1d6a8:	b938      	cbnz	r0, 1d6ba <IPC_IRQHandler+0x376>
   1d6aa:	f859 2007 	ldr.w	r2, [r9, r7]
   1d6ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1d6b2:	f042 0203 	orr.w	r2, r2, #3
   1d6b6:	f849 2007 	str.w	r2, [r9, r7]
   1d6ba:	6822      	ldr	r2, [r4, #0]
   1d6bc:	e7d1      	b.n	1d662 <IPC_IRQHandler+0x31e>
   1d6be:	2b00      	cmp	r3, #0
   1d6c0:	d1c8      	bne.n	1d654 <IPC_IRQHandler+0x310>
   1d6c2:	b912      	cbnz	r2, 1d6ca <IPC_IRQHandler+0x386>
   1d6c4:	e00b      	b.n	1d6de <IPC_IRQHandler+0x39a>
   1d6c6:	4293      	cmp	r3, r2
   1d6c8:	d009      	beq.n	1d6de <IPC_IRQHandler+0x39a>
   1d6ca:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   1d6ce:	6888      	ldr	r0, [r1, #8]
   1d6d0:	3301      	adds	r3, #1
   1d6d2:	2800      	cmp	r0, #0
   1d6d4:	d0f7      	beq.n	1d6c6 <IPC_IRQHandler+0x382>
   1d6d6:	6849      	ldr	r1, [r1, #4]
   1d6d8:	b2c9      	uxtb	r1, r1
   1d6da:	2901      	cmp	r1, #1
   1d6dc:	d1f3      	bne.n	1d6c6 <IPC_IRQHandler+0x382>
   1d6de:	2002      	movs	r0, #2
   1d6e0:	4b03      	ldr	r3, [pc, #12]	; (1d6f0 <IPC_IRQHandler+0x3ac>)
   1d6e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d6e6:	4a03      	ldr	r2, [pc, #12]	; (1d6f4 <IPC_IRQHandler+0x3b0>)
   1d6e8:	681b      	ldr	r3, [r3, #0]
   1d6ea:	6028      	str	r0, [r5, #0]
   1d6ec:	e6f6      	b.n	1d4dc <IPC_IRQHandler+0x198>
   1d6ee:	bf00      	nop
   1d6f0:	200217fc 	.word	0x200217fc
   1d6f4:	e000e100 	.word	0xe000e100
   1d6f8:	20022256 	.word	0x20022256

0001d6fc <rpc_transport_msg_free>:
   1d6fc:	b430      	push	{r4, r5}
   1d6fe:	4b18      	ldr	r3, [pc, #96]	; (1d760 <rpc_transport_msg_free+0x64>)
   1d700:	681c      	ldr	r4, [r3, #0]
   1d702:	6825      	ldr	r5, [r4, #0]
   1d704:	b16d      	cbz	r5, 1d722 <rpc_transport_msg_free+0x26>
   1d706:	68a3      	ldr	r3, [r4, #8]
   1d708:	4283      	cmp	r3, r0
   1d70a:	d027      	beq.n	1d75c <rpc_transport_msg_free+0x60>
   1d70c:	2300      	movs	r3, #0
   1d70e:	e002      	b.n	1d716 <rpc_transport_msg_free+0x1a>
   1d710:	6889      	ldr	r1, [r1, #8]
   1d712:	4281      	cmp	r1, r0
   1d714:	d019      	beq.n	1d74a <rpc_transport_msg_free+0x4e>
   1d716:	3301      	adds	r3, #1
   1d718:	00da      	lsls	r2, r3, #3
   1d71a:	42ab      	cmp	r3, r5
   1d71c:	eb04 0102 	add.w	r1, r4, r2
   1d720:	d1f6      	bne.n	1d710 <rpc_transport_msg_free+0x14>
   1d722:	4b10      	ldr	r3, [pc, #64]	; (1d764 <rpc_transport_msg_free+0x68>)
   1d724:	681c      	ldr	r4, [r3, #0]
   1d726:	6825      	ldr	r5, [r4, #0]
   1d728:	b16d      	cbz	r5, 1d746 <rpc_transport_msg_free+0x4a>
   1d72a:	68a3      	ldr	r3, [r4, #8]
   1d72c:	4283      	cmp	r3, r0
   1d72e:	d015      	beq.n	1d75c <rpc_transport_msg_free+0x60>
   1d730:	2300      	movs	r3, #0
   1d732:	e002      	b.n	1d73a <rpc_transport_msg_free+0x3e>
   1d734:	6889      	ldr	r1, [r1, #8]
   1d736:	4281      	cmp	r1, r0
   1d738:	d007      	beq.n	1d74a <rpc_transport_msg_free+0x4e>
   1d73a:	3301      	adds	r3, #1
   1d73c:	00da      	lsls	r2, r3, #3
   1d73e:	429d      	cmp	r5, r3
   1d740:	eb04 0102 	add.w	r1, r4, r2
   1d744:	d1f6      	bne.n	1d734 <rpc_transport_msg_free+0x38>
   1d746:	bc30      	pop	{r4, r5}
   1d748:	4770      	bx	lr
   1d74a:	3204      	adds	r2, #4
   1d74c:	58a3      	ldr	r3, [r4, r2]
   1d74e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d752:	f043 0303 	orr.w	r3, r3, #3
   1d756:	50a3      	str	r3, [r4, r2]
   1d758:	bc30      	pop	{r4, r5}
   1d75a:	4770      	bx	lr
   1d75c:	2204      	movs	r2, #4
   1d75e:	e7f5      	b.n	1d74c <rpc_transport_msg_free+0x50>
   1d760:	20021808 	.word	0x20021808
   1d764:	20021804 	.word	0x20021804

0001d768 <rpc_transport_ipc_tx_init>:
   1d768:	2800      	cmp	r0, #0
   1d76a:	f000 80b8 	beq.w	1d8de <rpc_transport_ipc_tx_init+0x176>
   1d76e:	2900      	cmp	r1, #0
   1d770:	f000 80b5 	beq.w	1d8de <rpc_transport_ipc_tx_init+0x176>
   1d774:	2a00      	cmp	r2, #0
   1d776:	f000 80b2 	beq.w	1d8de <rpc_transport_ipc_tx_init+0x176>
   1d77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d77e:	6a04      	ldr	r4, [r0, #32]
   1d780:	b085      	sub	sp, #20
   1d782:	2c00      	cmp	r4, #0
   1d784:	f000 80a6 	beq.w	1d8d4 <rpc_transport_ipc_tx_init+0x16c>
   1d788:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1d78a:	2800      	cmp	r0, #0
   1d78c:	f000 80a2 	beq.w	1d8d4 <rpc_transport_ipc_tx_init+0x16c>
   1d790:	f642 4587 	movw	r5, #11399	; 0x2c87
   1d794:	f04f 0a00 	mov.w	sl, #0
   1d798:	4e55      	ldr	r6, [pc, #340]	; (1d8f0 <rpc_transport_ipc_tx_init+0x188>)
   1d79a:	42a8      	cmp	r0, r5
   1d79c:	f886 a000 	strb.w	sl, [r6]
   1d7a0:	f240 80a0 	bls.w	1d8e4 <rpc_transport_ipc_tx_init+0x17c>
   1d7a4:	2708      	movs	r7, #8
   1d7a6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1d928 <rpc_transport_ipc_tx_init+0x1c0>
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	4616      	mov	r6, r2
   1d7ae:	460d      	mov	r5, r1
   1d7b0:	2244      	movs	r2, #68	; 0x44
   1d7b2:	4651      	mov	r1, sl
   1d7b4:	f8c9 4000 	str.w	r4, [r9]
   1d7b8:	f008 fb82 	bl	25ec0 <memset>
   1d7bc:	f8d9 2000 	ldr.w	r2, [r9]
   1d7c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1d7c4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1d92c <rpc_transport_ipc_tx_init+0x1c4>
   1d7c8:	f882 a001 	strb.w	sl, [r2, #1]
   1d7cc:	f882 a002 	strb.w	sl, [r2, #2]
   1d7d0:	f882 a003 	strb.w	sl, [r2, #3]
   1d7d4:	7017      	strb	r7, [r2, #0]
   1d7d6:	4618      	mov	r0, r3
   1d7d8:	2244      	movs	r2, #68	; 0x44
   1d7da:	4651      	mov	r1, sl
   1d7dc:	f8c8 3000 	str.w	r3, [r8]
   1d7e0:	f008 fb6e 	bl	25ec0 <memset>
   1d7e4:	f8d8 2000 	ldr.w	r2, [r8]
   1d7e8:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1d7ec:	f8df b140 	ldr.w	fp, [pc, #320]	; 1d930 <rpc_transport_ipc_tx_init+0x1c8>
   1d7f0:	7017      	strb	r7, [r2, #0]
   1d7f2:	f882 a001 	strb.w	sl, [r2, #1]
   1d7f6:	f882 a002 	strb.w	sl, [r2, #2]
   1d7fa:	f882 a003 	strb.w	sl, [r2, #3]
   1d7fe:	4618      	mov	r0, r3
   1d800:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d804:	4651      	mov	r1, sl
   1d806:	f8cb 3000 	str.w	r3, [fp]
   1d80a:	f008 fb59 	bl	25ec0 <memset>
   1d80e:	4b39      	ldr	r3, [pc, #228]	; (1d8f4 <rpc_transport_ipc_tx_init+0x18c>)
   1d810:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   1d814:	f8c3 c000 	str.w	ip, [r3]
   1d818:	4651      	mov	r1, sl
   1d81a:	4660      	mov	r0, ip
   1d81c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d820:	f008 fb4e 	bl	25ec0 <memset>
   1d824:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   1d828:	2106      	movs	r1, #6
   1d82a:	f04f 0e01 	mov.w	lr, #1
   1d82e:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   1d832:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   1d836:	4b30      	ldr	r3, [pc, #192]	; (1d8f8 <rpc_transport_ipc_tx_init+0x190>)
   1d838:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   1d83c:	605c      	str	r4, [r3, #4]
   1d83e:	4c2f      	ldr	r4, [pc, #188]	; (1d8fc <rpc_transport_ipc_tx_init+0x194>)
   1d840:	f8c3 c008 	str.w	ip, [r3, #8]
   1d844:	8199      	strh	r1, [r3, #12]
   1d846:	f8a3 e000 	strh.w	lr, [r3]
   1d84a:	4619      	mov	r1, r3
   1d84c:	611c      	str	r4, [r3, #16]
   1d84e:	4b2c      	ldr	r3, [pc, #176]	; (1d900 <rpc_transport_ipc_tx_init+0x198>)
   1d850:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 1d934 <rpc_transport_ipc_tx_init+0x1cc>
   1d854:	6120      	str	r0, [r4, #16]
   1d856:	482b      	ldr	r0, [pc, #172]	; (1d904 <rpc_transport_ipc_tx_init+0x19c>)
   1d858:	6063      	str	r3, [r4, #4]
   1d85a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   1d85e:	60a0      	str	r0, [r4, #8]
   1d860:	f8c4 c000 	str.w	ip, [r4]
   1d864:	4828      	ldr	r0, [pc, #160]	; (1d908 <rpc_transport_ipc_tx_init+0x1a0>)
   1d866:	60e3      	str	r3, [r4, #12]
   1d868:	6162      	str	r2, [r4, #20]
   1d86a:	f7f6 fee7 	bl	1463c <nrf_mem_register>
   1d86e:	2800      	cmp	r0, #0
   1d870:	d132      	bne.n	1d8d8 <rpc_transport_ipc_tx_init+0x170>
   1d872:	f04f 0c02 	mov.w	ip, #2
   1d876:	2420      	movs	r4, #32
   1d878:	f8d9 1000 	ldr.w	r1, [r9]
   1d87c:	f8db 2000 	ldr.w	r2, [fp]
   1d880:	6029      	str	r1, [r5, #0]
   1d882:	4b1c      	ldr	r3, [pc, #112]	; (1d8f4 <rpc_transport_ipc_tx_init+0x18c>)
   1d884:	f8d8 1000 	ldr.w	r1, [r8]
   1d888:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1d938 <rpc_transport_ipc_tx_init+0x1d0>
   1d88c:	4d1f      	ldr	r5, [pc, #124]	; (1d90c <rpc_transport_ipc_tx_init+0x1a4>)
   1d88e:	6031      	str	r1, [r6, #0]
   1d890:	f8ce 2000 	str.w	r2, [lr]
   1d894:	681b      	ldr	r3, [r3, #0]
   1d896:	491e      	ldr	r1, [pc, #120]	; (1d910 <rpc_transport_ipc_tx_init+0x1a8>)
   1d898:	f502 7200 	add.w	r2, r2, #512	; 0x200
   1d89c:	602a      	str	r2, [r5, #0]
   1d89e:	4e1d      	ldr	r6, [pc, #116]	; (1d914 <rpc_transport_ipc_tx_init+0x1ac>)
   1d8a0:	4a1d      	ldr	r2, [pc, #116]	; (1d918 <rpc_transport_ipc_tx_init+0x1b0>)
   1d8a2:	4d1e      	ldr	r5, [pc, #120]	; (1d91c <rpc_transport_ipc_tx_init+0x1b4>)
   1d8a4:	600b      	str	r3, [r1, #0]
   1d8a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1d8aa:	491d      	ldr	r1, [pc, #116]	; (1d920 <rpc_transport_ipc_tx_init+0x1b8>)
   1d8ac:	6033      	str	r3, [r6, #0]
   1d8ae:	8028      	strh	r0, [r5, #0]
   1d8b0:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   1d8b4:	6809      	ldr	r1, [r1, #0]
   1d8b6:	4b1b      	ldr	r3, [pc, #108]	; (1d924 <rpc_transport_ipc_tx_init+0x1bc>)
   1d8b8:	9103      	str	r1, [sp, #12]
   1d8ba:	9903      	ldr	r1, [sp, #12]
   1d8bc:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   1d8c0:	6819      	ldr	r1, [r3, #0]
   1d8c2:	443b      	add	r3, r7
   1d8c4:	9102      	str	r1, [sp, #8]
   1d8c6:	9902      	ldr	r1, [sp, #8]
   1d8c8:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   1d8cc:	681b      	ldr	r3, [r3, #0]
   1d8ce:	9301      	str	r3, [sp, #4]
   1d8d0:	9b01      	ldr	r3, [sp, #4]
   1d8d2:	e001      	b.n	1d8d8 <rpc_transport_ipc_tx_init+0x170>
   1d8d4:	f24c 0007 	movw	r0, #49159	; 0xc007
   1d8d8:	b005      	add	sp, #20
   1d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8de:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1d8e2:	4770      	bx	lr
   1d8e4:	f24c 0004 	movw	r0, #49156	; 0xc004
   1d8e8:	b005      	add	sp, #20
   1d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8ee:	bf00      	nop
   1d8f0:	20024044 	.word	0x20024044
   1d8f4:	20021838 	.word	0x20021838
   1d8f8:	20021824 	.word	0x20021824
   1d8fc:	20021848 	.word	0x20021848
   1d900:	00040080 	.word	0x00040080
   1d904:	00040100 	.word	0x00040100
   1d908:	20021810 	.word	0x20021810
   1d90c:	2002181c 	.word	0x2002181c
   1d910:	20021818 	.word	0x20021818
   1d914:	20021814 	.word	0x20021814
   1d918:	4002a000 	.word	0x4002a000
   1d91c:	20022258 	.word	0x20022258
   1d920:	4002a514 	.word	0x4002a514
   1d924:	4002a51c 	.word	0x4002a51c
   1d928:	20021844 	.word	0x20021844
   1d92c:	2002183c 	.word	0x2002183c
   1d930:	20021840 	.word	0x20021840
   1d934:	00080040 	.word	0x00080040
   1d938:	20021820 	.word	0x20021820

0001d93c <rpc_transport_ipc_tx_send>:
   1d93c:	2800      	cmp	r0, #0
   1d93e:	d05f      	beq.n	1da00 <rpc_transport_ipc_tx_send+0xc4>
   1d940:	b470      	push	{r4, r5, r6}
   1d942:	4b33      	ldr	r3, [pc, #204]	; (1da10 <rpc_transport_ipc_tx_send+0xd4>)
   1d944:	b083      	sub	sp, #12
   1d946:	681a      	ldr	r2, [r3, #0]
   1d948:	4b32      	ldr	r3, [pc, #200]	; (1da14 <rpc_transport_ipc_tx_send+0xd8>)
   1d94a:	4282      	cmp	r2, r0
   1d94c:	d81e      	bhi.n	1d98c <rpc_transport_ipc_tx_send+0x50>
   1d94e:	681b      	ldr	r3, [r3, #0]
   1d950:	4931      	ldr	r1, [pc, #196]	; (1da18 <rpc_transport_ipc_tx_send+0xdc>)
   1d952:	4283      	cmp	r3, r0
   1d954:	6809      	ldr	r1, [r1, #0]
   1d956:	d803      	bhi.n	1d960 <rpc_transport_ipc_tx_send+0x24>
   1d958:	4c30      	ldr	r4, [pc, #192]	; (1da1c <rpc_transport_ipc_tx_send+0xe0>)
   1d95a:	6824      	ldr	r4, [r4, #0]
   1d95c:	4284      	cmp	r4, r0
   1d95e:	d847      	bhi.n	1d9f0 <rpc_transport_ipc_tx_send+0xb4>
   1d960:	4281      	cmp	r1, r0
   1d962:	d90e      	bls.n	1d982 <rpc_transport_ipc_tx_send+0x46>
   1d964:	4b2e      	ldr	r3, [pc, #184]	; (1da20 <rpc_transport_ipc_tx_send+0xe4>)
   1d966:	781b      	ldrb	r3, [r3, #0]
   1d968:	2b00      	cmp	r3, #0
   1d96a:	d14c      	bne.n	1da06 <rpc_transport_ipc_tx_send+0xca>
   1d96c:	1a83      	subs	r3, r0, r2
   1d96e:	492d      	ldr	r1, [pc, #180]	; (1da24 <rpc_transport_ipc_tx_send+0xe8>)
   1d970:	099e      	lsrs	r6, r3, #6
   1d972:	069b      	lsls	r3, r3, #26
   1d974:	680a      	ldr	r2, [r1, #0]
   1d976:	4c2c      	ldr	r4, [pc, #176]	; (1da28 <rpc_transport_ipc_tx_send+0xec>)
   1d978:	f04f 0103 	mov.w	r1, #3
   1d97c:	f04f 0502 	mov.w	r5, #2
   1d980:	d014      	beq.n	1d9ac <rpc_transport_ipc_tx_send+0x70>
   1d982:	f24c 0010 	movw	r0, #49168	; 0xc010
   1d986:	b003      	add	sp, #12
   1d988:	bc70      	pop	{r4, r5, r6}
   1d98a:	4770      	bx	lr
   1d98c:	681b      	ldr	r3, [r3, #0]
   1d98e:	4298      	cmp	r0, r3
   1d990:	d3f7      	bcc.n	1d982 <rpc_transport_ipc_tx_send+0x46>
   1d992:	4a22      	ldr	r2, [pc, #136]	; (1da1c <rpc_transport_ipc_tx_send+0xe0>)
   1d994:	6812      	ldr	r2, [r2, #0]
   1d996:	4290      	cmp	r0, r2
   1d998:	d2f3      	bcs.n	1d982 <rpc_transport_ipc_tx_send+0x46>
   1d99a:	2101      	movs	r1, #1
   1d99c:	1ac3      	subs	r3, r0, r3
   1d99e:	4a23      	ldr	r2, [pc, #140]	; (1da2c <rpc_transport_ipc_tx_send+0xf0>)
   1d9a0:	099e      	lsrs	r6, r3, #6
   1d9a2:	069b      	lsls	r3, r3, #26
   1d9a4:	460d      	mov	r5, r1
   1d9a6:	6812      	ldr	r2, [r2, #0]
   1d9a8:	4c21      	ldr	r4, [pc, #132]	; (1da30 <rpc_transport_ipc_tx_send+0xf4>)
   1d9aa:	d1ea      	bne.n	1d982 <rpc_transport_ipc_tx_send+0x46>
   1d9ac:	6843      	ldr	r3, [r0, #4]
   1d9ae:	b2db      	uxtb	r3, r3
   1d9b0:	429d      	cmp	r5, r3
   1d9b2:	d120      	bne.n	1d9f6 <rpc_transport_ipc_tx_send+0xba>
   1d9b4:	2020      	movs	r0, #32
   1d9b6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   1d9ba:	4d1e      	ldr	r5, [pc, #120]	; (1da34 <rpc_transport_ipc_tx_send+0xf8>)
   1d9bc:	6853      	ldr	r3, [r2, #4]
   1d9be:	882e      	ldrh	r6, [r5, #0]
   1d9c0:	b29b      	uxth	r3, r3
   1d9c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1d9c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d9ca:	f043 0301 	orr.w	r3, r3, #1
   1d9ce:	6053      	str	r3, [r2, #4]
   1d9d0:	bf00      	nop
   1d9d2:	3801      	subs	r0, #1
   1d9d4:	d1fc      	bne.n	1d9d0 <rpc_transport_ipc_tx_send+0x94>
   1d9d6:	2201      	movs	r2, #1
   1d9d8:	4b17      	ldr	r3, [pc, #92]	; (1da38 <rpc_transport_ipc_tx_send+0xfc>)
   1d9da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   1d9de:	6822      	ldr	r2, [r4, #0]
   1d9e0:	882b      	ldrh	r3, [r5, #0]
   1d9e2:	9201      	str	r2, [sp, #4]
   1d9e4:	9a01      	ldr	r2, [sp, #4]
   1d9e6:	3301      	adds	r3, #1
   1d9e8:	802b      	strh	r3, [r5, #0]
   1d9ea:	b003      	add	sp, #12
   1d9ec:	bc70      	pop	{r4, r5, r6}
   1d9ee:	4770      	bx	lr
   1d9f0:	4281      	cmp	r1, r0
   1d9f2:	d9d2      	bls.n	1d99a <rpc_transport_ipc_tx_send+0x5e>
   1d9f4:	e7b6      	b.n	1d964 <rpc_transport_ipc_tx_send+0x28>
   1d9f6:	f24c 0007 	movw	r0, #49159	; 0xc007
   1d9fa:	b003      	add	sp, #12
   1d9fc:	bc70      	pop	{r4, r5, r6}
   1d9fe:	4770      	bx	lr
   1da00:	f24c 000e 	movw	r0, #49166	; 0xc00e
   1da04:	4770      	bx	lr
   1da06:	f24c 000f 	movw	r0, #49167	; 0xc00f
   1da0a:	b003      	add	sp, #12
   1da0c:	bc70      	pop	{r4, r5, r6}
   1da0e:	4770      	bx	lr
   1da10:	20021820 	.word	0x20021820
   1da14:	20021818 	.word	0x20021818
   1da18:	2002181c 	.word	0x2002181c
   1da1c:	20021814 	.word	0x20021814
   1da20:	20024044 	.word	0x20024044
   1da24:	20021844 	.word	0x20021844
   1da28:	4002a00c 	.word	0x4002a00c
   1da2c:	2002183c 	.word	0x2002183c
   1da30:	4002a004 	.word	0x4002a004
   1da34:	20022258 	.word	0x20022258
   1da38:	4002a000 	.word	0x4002a000

0001da3c <rpc_transport_ipc_tx_rpc_data_alloc>:
   1da3c:	4b18      	ldr	r3, [pc, #96]	; (1daa0 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   1da3e:	781b      	ldrb	r3, [r3, #0]
   1da40:	bb63      	cbnz	r3, 1da9c <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   1da42:	b4f0      	push	{r4, r5, r6, r7}
   1da44:	4a17      	ldr	r2, [pc, #92]	; (1daa4 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   1da46:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1da4a:	6814      	ldr	r4, [r2, #0]
   1da4c:	4b16      	ldr	r3, [pc, #88]	; (1daa8 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   1da4e:	6825      	ldr	r5, [r4, #0]
   1da50:	681e      	ldr	r6, [r3, #0]
   1da52:	b1a5      	cbz	r5, 1da7e <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   1da54:	4607      	mov	r7, r0
   1da56:	00c1      	lsls	r1, r0, #3
   1da58:	1863      	adds	r3, r4, r1
   1da5a:	685a      	ldr	r2, [r3, #4]
   1da5c:	b2d2      	uxtb	r2, r2
   1da5e:	2a03      	cmp	r2, #3
   1da60:	d104      	bne.n	1da6c <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   1da62:	609f      	str	r7, [r3, #8]
   1da64:	685a      	ldr	r2, [r3, #4]
   1da66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1da6a:	605a      	str	r2, [r3, #4]
   1da6c:	685a      	ldr	r2, [r3, #4]
   1da6e:	f012 0fff 	tst.w	r2, #255	; 0xff
   1da72:	d101      	bne.n	1da78 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   1da74:	689b      	ldr	r3, [r3, #8]
   1da76:	b12b      	cbz	r3, 1da84 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   1da78:	3001      	adds	r0, #1
   1da7a:	42a8      	cmp	r0, r5
   1da7c:	d1eb      	bne.n	1da56 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   1da7e:	2000      	movs	r0, #0
   1da80:	bcf0      	pop	{r4, r5, r6, r7}
   1da82:	4770      	bx	lr
   1da84:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1da88:	4421      	add	r1, r4
   1da8a:	6088      	str	r0, [r1, #8]
   1da8c:	6843      	ldr	r3, [r0, #4]
   1da8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1da92:	f043 0302 	orr.w	r3, r3, #2
   1da96:	6043      	str	r3, [r0, #4]
   1da98:	bcf0      	pop	{r4, r5, r6, r7}
   1da9a:	4770      	bx	lr
   1da9c:	2000      	movs	r0, #0
   1da9e:	4770      	bx	lr
   1daa0:	20024044 	.word	0x20024044
   1daa4:	20021844 	.word	0x20021844
   1daa8:	20021840 	.word	0x20021840

0001daac <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   1daac:	b4f0      	push	{r4, r5, r6, r7}
   1daae:	4a15      	ldr	r2, [pc, #84]	; (1db04 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   1dab0:	4b15      	ldr	r3, [pc, #84]	; (1db08 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   1dab2:	6814      	ldr	r4, [r2, #0]
   1dab4:	681e      	ldr	r6, [r3, #0]
   1dab6:	6825      	ldr	r5, [r4, #0]
   1dab8:	b1ad      	cbz	r5, 1dae6 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   1daba:	2000      	movs	r0, #0
   1dabc:	4607      	mov	r7, r0
   1dabe:	00c1      	lsls	r1, r0, #3
   1dac0:	1863      	adds	r3, r4, r1
   1dac2:	685a      	ldr	r2, [r3, #4]
   1dac4:	b2d2      	uxtb	r2, r2
   1dac6:	2a03      	cmp	r2, #3
   1dac8:	d104      	bne.n	1dad4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   1daca:	609f      	str	r7, [r3, #8]
   1dacc:	685a      	ldr	r2, [r3, #4]
   1dace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1dad2:	605a      	str	r2, [r3, #4]
   1dad4:	685a      	ldr	r2, [r3, #4]
   1dad6:	f012 0fff 	tst.w	r2, #255	; 0xff
   1dada:	d101      	bne.n	1dae0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   1dadc:	689b      	ldr	r3, [r3, #8]
   1dade:	b12b      	cbz	r3, 1daec <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   1dae0:	3001      	adds	r0, #1
   1dae2:	4285      	cmp	r5, r0
   1dae4:	d1eb      	bne.n	1dabe <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   1dae6:	2000      	movs	r0, #0
   1dae8:	bcf0      	pop	{r4, r5, r6, r7}
   1daea:	4770      	bx	lr
   1daec:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1daf0:	4421      	add	r1, r4
   1daf2:	6088      	str	r0, [r1, #8]
   1daf4:	6843      	ldr	r3, [r0, #4]
   1daf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1dafa:	f043 0301 	orr.w	r3, r3, #1
   1dafe:	6043      	str	r3, [r0, #4]
   1db00:	bcf0      	pop	{r4, r5, r6, r7}
   1db02:	4770      	bx	lr
   1db04:	2002183c 	.word	0x2002183c
   1db08:	20021838 	.word	0x20021838

0001db0c <rpc_transport_ipc_tx_data_alloc>:
   1db0c:	4b03      	ldr	r3, [pc, #12]	; (1db1c <rpc_transport_ipc_tx_data_alloc+0x10>)
   1db0e:	781b      	ldrb	r3, [r3, #0]
   1db10:	b90b      	cbnz	r3, 1db16 <rpc_transport_ipc_tx_data_alloc+0xa>
   1db12:	f7f6 bed7 	b.w	148c4 <nrf_shared_malloc>
   1db16:	2000      	movs	r0, #0
   1db18:	4770      	bx	lr
   1db1a:	bf00      	nop
   1db1c:	20024044 	.word	0x20024044

0001db20 <pdn_id_get_parser>:
   1db20:	780b      	ldrb	r3, [r1, #0]
   1db22:	b570      	push	{r4, r5, r6, lr}
   1db24:	4606      	mov	r6, r0
   1db26:	b1eb      	cbz	r3, 1db64 <pdn_id_get_parser+0x44>
   1db28:	4608      	mov	r0, r1
   1db2a:	2400      	movs	r4, #0
   1db2c:	460a      	mov	r2, r1
   1db2e:	2b20      	cmp	r3, #32
   1db30:	4615      	mov	r5, r2
   1db32:	d012      	beq.n	1db5a <pdn_id_get_parser+0x3a>
   1db34:	7013      	strb	r3, [r2, #0]
   1db36:	3401      	adds	r4, #1
   1db38:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1db3c:	190a      	adds	r2, r1, r4
   1db3e:	4615      	mov	r5, r2
   1db40:	2b00      	cmp	r3, #0
   1db42:	d1f4      	bne.n	1db2e <pdn_id_get_parser+0xe>
   1db44:	2400      	movs	r4, #0
   1db46:	4608      	mov	r0, r1
   1db48:	702c      	strb	r4, [r5, #0]
   1db4a:	f008 f853 	bl	25bf4 <atoi>
   1db4e:	4b06      	ldr	r3, [pc, #24]	; (1db68 <pdn_id_get_parser+0x48>)
   1db50:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1db54:	6058      	str	r0, [r3, #4]
   1db56:	4620      	mov	r0, r4
   1db58:	bd70      	pop	{r4, r5, r6, pc}
   1db5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1db5e:	2b00      	cmp	r3, #0
   1db60:	d1e5      	bne.n	1db2e <pdn_id_get_parser+0xe>
   1db62:	e7ef      	b.n	1db44 <pdn_id_get_parser+0x24>
   1db64:	460d      	mov	r5, r1
   1db66:	e7ed      	b.n	1db44 <pdn_id_get_parser+0x24>
   1db68:	20021964 	.word	0x20021964

0001db6c <conext_create_parser>:
   1db6c:	780b      	ldrb	r3, [r1, #0]
   1db6e:	b570      	push	{r4, r5, r6, lr}
   1db70:	4606      	mov	r6, r0
   1db72:	b1eb      	cbz	r3, 1dbb0 <conext_create_parser+0x44>
   1db74:	4608      	mov	r0, r1
   1db76:	2400      	movs	r4, #0
   1db78:	460a      	mov	r2, r1
   1db7a:	2b20      	cmp	r3, #32
   1db7c:	4615      	mov	r5, r2
   1db7e:	d012      	beq.n	1dba6 <conext_create_parser+0x3a>
   1db80:	7013      	strb	r3, [r2, #0]
   1db82:	3401      	adds	r4, #1
   1db84:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1db88:	190a      	adds	r2, r1, r4
   1db8a:	4615      	mov	r5, r2
   1db8c:	2b00      	cmp	r3, #0
   1db8e:	d1f4      	bne.n	1db7a <conext_create_parser+0xe>
   1db90:	2400      	movs	r4, #0
   1db92:	4b08      	ldr	r3, [pc, #32]	; (1dbb4 <conext_create_parser+0x48>)
   1db94:	702c      	strb	r4, [r5, #0]
   1db96:	4608      	mov	r0, r1
   1db98:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
   1db9c:	f008 f82a 	bl	25bf4 <atoi>
   1dba0:	6028      	str	r0, [r5, #0]
   1dba2:	4620      	mov	r0, r4
   1dba4:	bd70      	pop	{r4, r5, r6, pc}
   1dba6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1dbaa:	2b00      	cmp	r3, #0
   1dbac:	d1e5      	bne.n	1db7a <conext_create_parser+0xe>
   1dbae:	e7ef      	b.n	1db90 <conext_create_parser+0x24>
   1dbb0:	460d      	mov	r5, r1
   1dbb2:	e7ed      	b.n	1db90 <conext_create_parser+0x24>
   1dbb4:	20021964 	.word	0x20021964

0001dbb8 <ok_rsp_parser>:
   1dbb8:	b508      	push	{r3, lr}
   1dbba:	2280      	movs	r2, #128	; 0x80
   1dbbc:	2100      	movs	r1, #0
   1dbbe:	4802      	ldr	r0, [pc, #8]	; (1dbc8 <ok_rsp_parser+0x10>)
   1dbc0:	f008 f97e 	bl	25ec0 <memset>
   1dbc4:	2000      	movs	r0, #0
   1dbc6:	bd08      	pop	{r3, pc}
   1dbc8:	20021864 	.word	0x20021864

0001dbcc <event_wait.constprop.2>:
   1dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbce:	4c1f      	ldr	r4, [pc, #124]	; (1dc4c <event_wait.constprop.2+0x80>)
   1dbd0:	b083      	sub	sp, #12
   1dbd2:	4606      	mov	r6, r0
   1dbd4:	491e      	ldr	r1, [pc, #120]	; (1dc50 <event_wait.constprop.2+0x84>)
   1dbd6:	4620      	mov	r0, r4
   1dbd8:	f008 f8a5 	bl	25d26 <strstr>
   1dbdc:	bb10      	cbnz	r0, 1dc24 <event_wait.constprop.2+0x58>
   1dbde:	4605      	mov	r5, r0
   1dbe0:	4601      	mov	r1, r0
   1dbe2:	2280      	movs	r2, #128	; 0x80
   1dbe4:	4620      	mov	r0, r4
   1dbe6:	f008 f96b 	bl	25ec0 <memset>
   1dbea:	4b1a      	ldr	r3, [pc, #104]	; (1dc54 <event_wait.constprop.2+0x88>)
   1dbec:	9501      	str	r5, [sp, #4]
   1dbee:	6818      	ldr	r0, [r3, #0]
   1dbf0:	2280      	movs	r2, #128	; 0x80
   1dbf2:	462b      	mov	r3, r5
   1dbf4:	9500      	str	r5, [sp, #0]
   1dbf6:	4621      	mov	r1, r4
   1dbf8:	f7fd fd36 	bl	1b668 <at_interface_read>
   1dbfc:	4607      	mov	r7, r0
   1dbfe:	4816      	ldr	r0, [pc, #88]	; (1dc58 <event_wait.constprop.2+0x8c>)
   1dc00:	f008 f8c6 	bl	25d90 <strlen>
   1dc04:	4287      	cmp	r7, r0
   1dc06:	4605      	mov	r5, r0
   1dc08:	db14      	blt.n	1dc34 <event_wait.constprop.2+0x68>
   1dc0a:	4602      	mov	r2, r0
   1dc0c:	4621      	mov	r1, r4
   1dc0e:	4812      	ldr	r0, [pc, #72]	; (1dc58 <event_wait.constprop.2+0x8c>)
   1dc10:	f008 f8d3 	bl	25dba <strncmp>
   1dc14:	b970      	cbnz	r0, 1dc34 <event_wait.constprop.2+0x68>
   1dc16:	4630      	mov	r0, r6
   1dc18:	1961      	adds	r1, r4, r5
   1dc1a:	b003      	add	sp, #12
   1dc1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1dc20:	f7ff bfca 	b.w	1dbb8 <ok_rsp_parser>
   1dc24:	4620      	mov	r0, r4
   1dc26:	2280      	movs	r2, #128	; 0x80
   1dc28:	2100      	movs	r1, #0
   1dc2a:	f008 f949 	bl	25ec0 <memset>
   1dc2e:	2000      	movs	r0, #0
   1dc30:	b003      	add	sp, #12
   1dc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc34:	4809      	ldr	r0, [pc, #36]	; (1dc5c <event_wait.constprop.2+0x90>)
   1dc36:	f008 f8ab 	bl	25d90 <strlen>
   1dc3a:	4904      	ldr	r1, [pc, #16]	; (1dc4c <event_wait.constprop.2+0x80>)
   1dc3c:	4602      	mov	r2, r0
   1dc3e:	4807      	ldr	r0, [pc, #28]	; (1dc5c <event_wait.constprop.2+0x90>)
   1dc40:	f008 f8bb 	bl	25dba <strncmp>
   1dc44:	f04f 30ff 	mov.w	r0, #4294967295
   1dc48:	e7f2      	b.n	1dc30 <event_wait.constprop.2+0x64>
   1dc4a:	bf00      	nop
   1dc4c:	20021864 	.word	0x20021864
   1dc50:	0002a434 	.word	0x0002a434
   1dc54:	20021860 	.word	0x20021860
   1dc58:	0002a430 	.word	0x0002a430
   1dc5c:	0002a43c 	.word	0x0002a43c

0001dc60 <pdn_id_get.part.0>:
   1dc60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc62:	4c1c      	ldr	r4, [pc, #112]	; (1dcd4 <pdn_id_get.part.0+0x74>)
   1dc64:	b083      	sub	sp, #12
   1dc66:	2280      	movs	r2, #128	; 0x80
   1dc68:	2100      	movs	r1, #0
   1dc6a:	4606      	mov	r6, r0
   1dc6c:	4620      	mov	r0, r4
   1dc6e:	f008 f927 	bl	25ec0 <memset>
   1dc72:	2300      	movs	r3, #0
   1dc74:	4a18      	ldr	r2, [pc, #96]	; (1dcd8 <pdn_id_get.part.0+0x78>)
   1dc76:	4621      	mov	r1, r4
   1dc78:	6810      	ldr	r0, [r2, #0]
   1dc7a:	e9cd 3300 	strd	r3, r3, [sp]
   1dc7e:	2280      	movs	r2, #128	; 0x80
   1dc80:	f7fd fcf2 	bl	1b668 <at_interface_read>
   1dc84:	4607      	mov	r7, r0
   1dc86:	4815      	ldr	r0, [pc, #84]	; (1dcdc <pdn_id_get.part.0+0x7c>)
   1dc88:	f008 f882 	bl	25d90 <strlen>
   1dc8c:	4287      	cmp	r7, r0
   1dc8e:	db18      	blt.n	1dcc2 <pdn_id_get.part.0+0x62>
   1dc90:	4605      	mov	r5, r0
   1dc92:	4602      	mov	r2, r0
   1dc94:	4621      	mov	r1, r4
   1dc96:	4811      	ldr	r0, [pc, #68]	; (1dcdc <pdn_id_get.part.0+0x7c>)
   1dc98:	f008 f88f 	bl	25dba <strncmp>
   1dc9c:	b988      	cbnz	r0, 1dcc2 <pdn_id_get.part.0+0x62>
   1dc9e:	1961      	adds	r1, r4, r5
   1dca0:	4630      	mov	r0, r6
   1dca2:	f7ff ff3d 	bl	1db20 <pdn_id_get_parser>
   1dca6:	b130      	cbz	r0, 1dcb6 <pdn_id_get.part.0+0x56>
   1dca8:	4b0d      	ldr	r3, [pc, #52]	; (1dce0 <pdn_id_get.part.0+0x80>)
   1dcaa:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1dcae:	681a      	ldr	r2, [r3, #0]
   1dcb0:	605a      	str	r2, [r3, #4]
   1dcb2:	b003      	add	sp, #12
   1dcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dcb6:	4630      	mov	r0, r6
   1dcb8:	b003      	add	sp, #12
   1dcba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1dcbe:	f7ff bf85 	b.w	1dbcc <event_wait.constprop.2>
   1dcc2:	4808      	ldr	r0, [pc, #32]	; (1dce4 <pdn_id_get.part.0+0x84>)
   1dcc4:	f008 f864 	bl	25d90 <strlen>
   1dcc8:	4902      	ldr	r1, [pc, #8]	; (1dcd4 <pdn_id_get.part.0+0x74>)
   1dcca:	4602      	mov	r2, r0
   1dccc:	4805      	ldr	r0, [pc, #20]	; (1dce4 <pdn_id_get.part.0+0x84>)
   1dcce:	f008 f874 	bl	25dba <strncmp>
   1dcd2:	e7e9      	b.n	1dca8 <pdn_id_get.part.0+0x48>
   1dcd4:	20021864 	.word	0x20021864
   1dcd8:	20021860 	.word	0x20021860
   1dcdc:	0002a444 	.word	0x0002a444
   1dce0:	20021964 	.word	0x20021964
   1dce4:	0002a43c 	.word	0x0002a43c

0001dce8 <pdn_interface_init>:
   1dce8:	f04f 33ff 	mov.w	r3, #4294967295
   1dcec:	b510      	push	{r4, lr}
   1dcee:	4c09      	ldr	r4, [pc, #36]	; (1dd14 <pdn_interface_init+0x2c>)
   1dcf0:	2228      	movs	r2, #40	; 0x28
   1dcf2:	2100      	movs	r1, #0
   1dcf4:	4808      	ldr	r0, [pc, #32]	; (1dd18 <pdn_interface_init+0x30>)
   1dcf6:	6023      	str	r3, [r4, #0]
   1dcf8:	f008 f8e2 	bl	25ec0 <memset>
   1dcfc:	f240 2201 	movw	r2, #513	; 0x201
   1dd00:	2100      	movs	r1, #0
   1dd02:	2066      	movs	r0, #102	; 0x66
   1dd04:	f7fd fc1e 	bl	1b544 <at_interface_open>
   1dd08:	2800      	cmp	r0, #0
   1dd0a:	6020      	str	r0, [r4, #0]
   1dd0c:	bfb4      	ite	lt
   1dd0e:	2003      	movlt	r0, #3
   1dd10:	2000      	movge	r0, #0
   1dd12:	bd10      	pop	{r4, pc}
   1dd14:	20021860 	.word	0x20021860
   1dd18:	20021964 	.word	0x20021964

0001dd1c <pdn_interface_open>:
   1dd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd20:	2866      	cmp	r0, #102	; 0x66
   1dd22:	b082      	sub	sp, #8
   1dd24:	f040 80ca 	bne.w	1debc <pdn_interface_open+0x1a0>
   1dd28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1dd2c:	f040 80ad 	bne.w	1de8a <pdn_interface_open+0x16e>
   1dd30:	f240 2302 	movw	r3, #514	; 0x202
   1dd34:	429a      	cmp	r2, r3
   1dd36:	f040 80a8 	bne.w	1de8a <pdn_interface_open+0x16e>
   1dd3a:	4c63      	ldr	r4, [pc, #396]	; (1dec8 <pdn_interface_open+0x1ac>)
   1dd3c:	6825      	ldr	r5, [r4, #0]
   1dd3e:	b34d      	cbz	r5, 1dd94 <pdn_interface_open+0x78>
   1dd40:	6863      	ldr	r3, [r4, #4]
   1dd42:	2b00      	cmp	r3, #0
   1dd44:	f000 809d 	beq.w	1de82 <pdn_interface_open+0x166>
   1dd48:	68a3      	ldr	r3, [r4, #8]
   1dd4a:	2b00      	cmp	r3, #0
   1dd4c:	f000 809b 	beq.w	1de86 <pdn_interface_open+0x16a>
   1dd50:	68e3      	ldr	r3, [r4, #12]
   1dd52:	2b00      	cmp	r3, #0
   1dd54:	f000 809f 	beq.w	1de96 <pdn_interface_open+0x17a>
   1dd58:	6923      	ldr	r3, [r4, #16]
   1dd5a:	2b00      	cmp	r3, #0
   1dd5c:	f000 809d 	beq.w	1de9a <pdn_interface_open+0x17e>
   1dd60:	6963      	ldr	r3, [r4, #20]
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	f000 80a6 	beq.w	1deb4 <pdn_interface_open+0x198>
   1dd68:	69a3      	ldr	r3, [r4, #24]
   1dd6a:	2b00      	cmp	r3, #0
   1dd6c:	f000 80a4 	beq.w	1deb8 <pdn_interface_open+0x19c>
   1dd70:	69e3      	ldr	r3, [r4, #28]
   1dd72:	2b00      	cmp	r3, #0
   1dd74:	f000 8093 	beq.w	1de9e <pdn_interface_open+0x182>
   1dd78:	6a23      	ldr	r3, [r4, #32]
   1dd7a:	b153      	cbz	r3, 1dd92 <pdn_interface_open+0x76>
   1dd7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd7e:	2509      	movs	r5, #9
   1dd80:	b143      	cbz	r3, 1dd94 <pdn_interface_open+0x78>
   1dd82:	200c      	movs	r0, #12
   1dd84:	f008 ffc2 	bl	26d0c <bsd_os_errno_set>
   1dd88:	f04f 30ff 	mov.w	r0, #4294967295
   1dd8c:	b002      	add	sp, #8
   1dd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd92:	2508      	movs	r5, #8
   1dd94:	2074      	movs	r0, #116	; 0x74
   1dd96:	f7f6 fd6b 	bl	14870 <nrf_malloc>
   1dd9a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	d0ef      	beq.n	1dd82 <pdn_interface_open+0x66>
   1dda2:	2274      	movs	r2, #116	; 0x74
   1dda4:	2100      	movs	r1, #0
   1dda6:	f008 f88b 	bl	25ec0 <memset>
   1ddaa:	2101      	movs	r1, #1
   1ddac:	2603      	movs	r6, #3
   1ddae:	f04f 30ff 	mov.w	r0, #4294967295
   1ddb2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ddb6:	2280      	movs	r2, #128	; 0x80
   1ddb8:	6099      	str	r1, [r3, #8]
   1ddba:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1ddbe:	2100      	movs	r1, #0
   1ddc0:	671e      	str	r6, [r3, #112]	; 0x70
   1ddc2:	6058      	str	r0, [r3, #4]
   1ddc4:	4841      	ldr	r0, [pc, #260]	; (1decc <pdn_interface_open+0x1b0>)
   1ddc6:	f008 f87b 	bl	25ec0 <memset>
   1ddca:	4f41      	ldr	r7, [pc, #260]	; (1ded0 <pdn_interface_open+0x1b4>)
   1ddcc:	4a41      	ldr	r2, [pc, #260]	; (1ded4 <pdn_interface_open+0x1b8>)
   1ddce:	2180      	movs	r1, #128	; 0x80
   1ddd0:	483e      	ldr	r0, [pc, #248]	; (1decc <pdn_interface_open+0x1b0>)
   1ddd2:	f7f4 fa01 	bl	121d8 <snprintf>
   1ddd6:	483d      	ldr	r0, [pc, #244]	; (1decc <pdn_interface_open+0x1b0>)
   1ddd8:	f8d7 8000 	ldr.w	r8, [r7]
   1dddc:	2600      	movs	r6, #0
   1ddde:	f007 ffd7 	bl	25d90 <strlen>
   1dde2:	4633      	mov	r3, r6
   1dde4:	4602      	mov	r2, r0
   1dde6:	4939      	ldr	r1, [pc, #228]	; (1decc <pdn_interface_open+0x1b0>)
   1dde8:	4640      	mov	r0, r8
   1ddea:	9601      	str	r6, [sp, #4]
   1ddec:	9600      	str	r6, [sp, #0]
   1ddee:	f7fd fb59 	bl	1b4a4 <at_interface_write>
   1ddf2:	4680      	mov	r8, r0
   1ddf4:	4835      	ldr	r0, [pc, #212]	; (1decc <pdn_interface_open+0x1b0>)
   1ddf6:	f007 ffcb 	bl	25d90 <strlen>
   1ddfa:	4540      	cmp	r0, r8
   1ddfc:	d121      	bne.n	1de42 <pdn_interface_open+0x126>
   1ddfe:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1dee0 <pdn_interface_open+0x1c4>
   1de02:	4631      	mov	r1, r6
   1de04:	2280      	movs	r2, #128	; 0x80
   1de06:	4640      	mov	r0, r8
   1de08:	f008 f85a 	bl	25ec0 <memset>
   1de0c:	6838      	ldr	r0, [r7, #0]
   1de0e:	4633      	mov	r3, r6
   1de10:	e9cd 6600 	strd	r6, r6, [sp]
   1de14:	4641      	mov	r1, r8
   1de16:	2280      	movs	r2, #128	; 0x80
   1de18:	f7fd fc26 	bl	1b668 <at_interface_read>
   1de1c:	4607      	mov	r7, r0
   1de1e:	482e      	ldr	r0, [pc, #184]	; (1ded8 <pdn_interface_open+0x1bc>)
   1de20:	f007 ffb6 	bl	25d90 <strlen>
   1de24:	4287      	cmp	r7, r0
   1de26:	4606      	mov	r6, r0
   1de28:	db3b      	blt.n	1dea2 <pdn_interface_open+0x186>
   1de2a:	4602      	mov	r2, r0
   1de2c:	4641      	mov	r1, r8
   1de2e:	482a      	ldr	r0, [pc, #168]	; (1ded8 <pdn_interface_open+0x1bc>)
   1de30:	f007 ffc3 	bl	25dba <strncmp>
   1de34:	bba8      	cbnz	r0, 1dea2 <pdn_interface_open+0x186>
   1de36:	eb08 0106 	add.w	r1, r8, r6
   1de3a:	4628      	mov	r0, r5
   1de3c:	f7ff fe96 	bl	1db6c <conext_create_parser>
   1de40:	b178      	cbz	r0, 1de62 <pdn_interface_open+0x146>
   1de42:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1de46:	f7f6 fd31 	bl	148ac <nrf_free>
   1de4a:	2274      	movs	r2, #116	; 0x74
   1de4c:	2100      	movs	r1, #0
   1de4e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1de52:	f008 f835 	bl	25ec0 <memset>
   1de56:	2300      	movs	r3, #0
   1de58:	f04f 30ff 	mov.w	r0, #4294967295
   1de5c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1de60:	e794      	b.n	1dd8c <pdn_interface_open+0x70>
   1de62:	4628      	mov	r0, r5
   1de64:	f7ff feb2 	bl	1dbcc <event_wait.constprop.2>
   1de68:	2800      	cmp	r0, #0
   1de6a:	d1ea      	bne.n	1de42 <pdn_interface_open+0x126>
   1de6c:	2202      	movs	r2, #2
   1de6e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1de72:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   1de76:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1de7a:	609a      	str	r2, [r3, #8]
   1de7c:	b002      	add	sp, #8
   1de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de82:	2501      	movs	r5, #1
   1de84:	e786      	b.n	1dd94 <pdn_interface_open+0x78>
   1de86:	2502      	movs	r5, #2
   1de88:	e784      	b.n	1dd94 <pdn_interface_open+0x78>
   1de8a:	2016      	movs	r0, #22
   1de8c:	f008 ff3e 	bl	26d0c <bsd_os_errno_set>
   1de90:	f04f 30ff 	mov.w	r0, #4294967295
   1de94:	e77a      	b.n	1dd8c <pdn_interface_open+0x70>
   1de96:	2503      	movs	r5, #3
   1de98:	e77c      	b.n	1dd94 <pdn_interface_open+0x78>
   1de9a:	2504      	movs	r5, #4
   1de9c:	e77a      	b.n	1dd94 <pdn_interface_open+0x78>
   1de9e:	2507      	movs	r5, #7
   1dea0:	e778      	b.n	1dd94 <pdn_interface_open+0x78>
   1dea2:	480e      	ldr	r0, [pc, #56]	; (1dedc <pdn_interface_open+0x1c0>)
   1dea4:	f007 ff74 	bl	25d90 <strlen>
   1dea8:	490d      	ldr	r1, [pc, #52]	; (1dee0 <pdn_interface_open+0x1c4>)
   1deaa:	4602      	mov	r2, r0
   1deac:	480b      	ldr	r0, [pc, #44]	; (1dedc <pdn_interface_open+0x1c0>)
   1deae:	f007 ff84 	bl	25dba <strncmp>
   1deb2:	e7c6      	b.n	1de42 <pdn_interface_open+0x126>
   1deb4:	2505      	movs	r5, #5
   1deb6:	e76d      	b.n	1dd94 <pdn_interface_open+0x78>
   1deb8:	2506      	movs	r5, #6
   1deba:	e76b      	b.n	1dd94 <pdn_interface_open+0x78>
   1debc:	202f      	movs	r0, #47	; 0x2f
   1debe:	f008 ff25 	bl	26d0c <bsd_os_errno_set>
   1dec2:	f04f 30ff 	mov.w	r0, #4294967295
   1dec6:	e761      	b.n	1dd8c <pdn_interface_open+0x70>
   1dec8:	20021964 	.word	0x20021964
   1decc:	200218e4 	.word	0x200218e4
   1ded0:	20021860 	.word	0x20021860
   1ded4:	0002a4b0 	.word	0x0002a4b0
   1ded8:	0002a4c0 	.word	0x0002a4c0
   1dedc:	0002a43c 	.word	0x0002a43c
   1dee0:	20021864 	.word	0x20021864

0001dee4 <pdn_interface_connect>:
   1dee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dee8:	b083      	sub	sp, #12
   1deea:	2900      	cmp	r1, #0
   1deec:	f000 80e7 	beq.w	1e0be <pdn_interface_connect+0x1da>
   1def0:	2a64      	cmp	r2, #100	; 0x64
   1def2:	4691      	mov	r9, r2
   1def4:	f200 80e3 	bhi.w	1e0be <pdn_interface_connect+0x1da>
   1def8:	4604      	mov	r4, r0
   1defa:	4608      	mov	r0, r1
   1defc:	4688      	mov	r8, r1
   1defe:	f007 ff47 	bl	25d90 <strlen>
   1df02:	2864      	cmp	r0, #100	; 0x64
   1df04:	f200 80db 	bhi.w	1e0be <pdn_interface_connect+0x1da>
   1df08:	4b71      	ldr	r3, [pc, #452]	; (1e0d0 <pdn_interface_connect+0x1ec>)
   1df0a:	43a3      	bics	r3, r4
   1df0c:	d15b      	bne.n	1dfc6 <pdn_interface_connect+0xe2>
   1df0e:	f024 44f1 	bic.w	r4, r4, #2021654528	; 0x78800000
   1df12:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1df16:	2c09      	cmp	r4, #9
   1df18:	dc55      	bgt.n	1dfc6 <pdn_interface_connect+0xe2>
   1df1a:	4e6e      	ldr	r6, [pc, #440]	; (1e0d4 <pdn_interface_connect+0x1f0>)
   1df1c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1df20:	2b00      	cmp	r3, #0
   1df22:	d050      	beq.n	1dfc6 <pdn_interface_connect+0xe2>
   1df24:	689a      	ldr	r2, [r3, #8]
   1df26:	2a00      	cmp	r2, #0
   1df28:	d04d      	beq.n	1dfc6 <pdn_interface_connect+0xe2>
   1df2a:	2c00      	cmp	r4, #0
   1df2c:	db4b      	blt.n	1dfc6 <pdn_interface_connect+0xe2>
   1df2e:	689b      	ldr	r3, [r3, #8]
   1df30:	2b02      	cmp	r3, #2
   1df32:	d148      	bne.n	1dfc6 <pdn_interface_connect+0xe2>
   1df34:	4f68      	ldr	r7, [pc, #416]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1df36:	2280      	movs	r2, #128	; 0x80
   1df38:	2100      	movs	r1, #0
   1df3a:	4638      	mov	r0, r7
   1df3c:	f007 ffc0 	bl	25ec0 <memset>
   1df40:	4a66      	ldr	r2, [pc, #408]	; (1e0dc <pdn_interface_connect+0x1f8>)
   1df42:	2180      	movs	r1, #128	; 0x80
   1df44:	4638      	mov	r0, r7
   1df46:	f7f4 f947 	bl	121d8 <snprintf>
   1df4a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1df4e:	4605      	mov	r5, r0
   1df50:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   1df54:	681b      	ldr	r3, [r3, #0]
   1df56:	4a62      	ldr	r2, [pc, #392]	; (1e0e0 <pdn_interface_connect+0x1fc>)
   1df58:	1838      	adds	r0, r7, r0
   1df5a:	f7f4 f93d 	bl	121d8 <snprintf>
   1df5e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1df62:	4405      	add	r5, r0
   1df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1df66:	f003 0203 	and.w	r2, r3, #3
   1df6a:	2a03      	cmp	r2, #3
   1df6c:	f000 809e 	beq.w	1e0ac <pdn_interface_connect+0x1c8>
   1df70:	079b      	lsls	r3, r3, #30
   1df72:	eb07 0005 	add.w	r0, r7, r5
   1df76:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   1df7a:	bf4c      	ite	mi
   1df7c:	4b59      	ldrmi	r3, [pc, #356]	; (1e0e4 <pdn_interface_connect+0x200>)
   1df7e:	4b5a      	ldrpl	r3, [pc, #360]	; (1e0e8 <pdn_interface_connect+0x204>)
   1df80:	4a5a      	ldr	r2, [pc, #360]	; (1e0ec <pdn_interface_connect+0x208>)
   1df82:	f7f4 f929 	bl	121d8 <snprintf>
   1df86:	4405      	add	r5, r0
   1df88:	4643      	mov	r3, r8
   1df8a:	4a59      	ldr	r2, [pc, #356]	; (1e0f0 <pdn_interface_connect+0x20c>)
   1df8c:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   1df90:	1978      	adds	r0, r7, r5
   1df92:	f7f4 f921 	bl	121d8 <snprintf>
   1df96:	4428      	add	r0, r5
   1df98:	2880      	cmp	r0, #128	; 0x80
   1df9a:	dc14      	bgt.n	1dfc6 <pdn_interface_connect+0xe2>
   1df9c:	f8df a164 	ldr.w	sl, [pc, #356]	; 1e104 <pdn_interface_connect+0x220>
   1dfa0:	484d      	ldr	r0, [pc, #308]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1dfa2:	f8da 5000 	ldr.w	r5, [sl]
   1dfa6:	f007 fef3 	bl	25d90 <strlen>
   1dfaa:	2300      	movs	r3, #0
   1dfac:	4602      	mov	r2, r0
   1dfae:	9301      	str	r3, [sp, #4]
   1dfb0:	4628      	mov	r0, r5
   1dfb2:	9300      	str	r3, [sp, #0]
   1dfb4:	4948      	ldr	r1, [pc, #288]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1dfb6:	f7fd fa75 	bl	1b4a4 <at_interface_write>
   1dfba:	4605      	mov	r5, r0
   1dfbc:	4846      	ldr	r0, [pc, #280]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1dfbe:	f007 fee7 	bl	25d90 <strlen>
   1dfc2:	42a8      	cmp	r0, r5
   1dfc4:	d007      	beq.n	1dfd6 <pdn_interface_connect+0xf2>
   1dfc6:	2009      	movs	r0, #9
   1dfc8:	f008 fea0 	bl	26d0c <bsd_os_errno_set>
   1dfcc:	f04f 30ff 	mov.w	r0, #4294967295
   1dfd0:	b003      	add	sp, #12
   1dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfd6:	4620      	mov	r0, r4
   1dfd8:	f7ff fdf8 	bl	1dbcc <event_wait.constprop.2>
   1dfdc:	4605      	mov	r5, r0
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	d1f1      	bne.n	1dfc6 <pdn_interface_connect+0xe2>
   1dfe2:	4601      	mov	r1, r0
   1dfe4:	2280      	movs	r2, #128	; 0x80
   1dfe6:	483c      	ldr	r0, [pc, #240]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1dfe8:	f007 ff6a 	bl	25ec0 <memset>
   1dfec:	4a41      	ldr	r2, [pc, #260]	; (1e0f4 <pdn_interface_connect+0x210>)
   1dfee:	2180      	movs	r1, #128	; 0x80
   1dff0:	4839      	ldr	r0, [pc, #228]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1dff2:	f7f4 f8f1 	bl	121d8 <snprintf>
   1dff6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1dffa:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   1dffe:	681b      	ldr	r3, [r3, #0]
   1e000:	4a3d      	ldr	r2, [pc, #244]	; (1e0f8 <pdn_interface_connect+0x214>)
   1e002:	4438      	add	r0, r7
   1e004:	f7f4 f8e8 	bl	121d8 <snprintf>
   1e008:	4833      	ldr	r0, [pc, #204]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e00a:	f8da b000 	ldr.w	fp, [sl]
   1e00e:	f007 febf 	bl	25d90 <strlen>
   1e012:	462b      	mov	r3, r5
   1e014:	4602      	mov	r2, r0
   1e016:	9501      	str	r5, [sp, #4]
   1e018:	9500      	str	r5, [sp, #0]
   1e01a:	492f      	ldr	r1, [pc, #188]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e01c:	4658      	mov	r0, fp
   1e01e:	f7fd fa41 	bl	1b4a4 <at_interface_write>
   1e022:	4605      	mov	r5, r0
   1e024:	482c      	ldr	r0, [pc, #176]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e026:	f007 feb3 	bl	25d90 <strlen>
   1e02a:	42a8      	cmp	r0, r5
   1e02c:	d1cb      	bne.n	1dfc6 <pdn_interface_connect+0xe2>
   1e02e:	4620      	mov	r0, r4
   1e030:	f7ff fdcc 	bl	1dbcc <event_wait.constprop.2>
   1e034:	4605      	mov	r5, r0
   1e036:	2800      	cmp	r0, #0
   1e038:	d1c5      	bne.n	1dfc6 <pdn_interface_connect+0xe2>
   1e03a:	2103      	movs	r1, #3
   1e03c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1e040:	464a      	mov	r2, r9
   1e042:	6099      	str	r1, [r3, #8]
   1e044:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e048:	4641      	mov	r1, r8
   1e04a:	300c      	adds	r0, #12
   1e04c:	f007 ff0b 	bl	25e66 <memcpy>
   1e050:	2280      	movs	r2, #128	; 0x80
   1e052:	4629      	mov	r1, r5
   1e054:	4820      	ldr	r0, [pc, #128]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e056:	f007 ff33 	bl	25ec0 <memset>
   1e05a:	4a28      	ldr	r2, [pc, #160]	; (1e0fc <pdn_interface_connect+0x218>)
   1e05c:	2180      	movs	r1, #128	; 0x80
   1e05e:	481e      	ldr	r0, [pc, #120]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e060:	f7f4 f8ba 	bl	121d8 <snprintf>
   1e064:	4601      	mov	r1, r0
   1e066:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1e06a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1e06e:	681b      	ldr	r3, [r3, #0]
   1e070:	4a21      	ldr	r2, [pc, #132]	; (1e0f8 <pdn_interface_connect+0x214>)
   1e072:	1838      	adds	r0, r7, r0
   1e074:	f7f4 f8b0 	bl	121d8 <snprintf>
   1e078:	4817      	ldr	r0, [pc, #92]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e07a:	f8da 6000 	ldr.w	r6, [sl]
   1e07e:	f007 fe87 	bl	25d90 <strlen>
   1e082:	462b      	mov	r3, r5
   1e084:	4602      	mov	r2, r0
   1e086:	4914      	ldr	r1, [pc, #80]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e088:	4630      	mov	r0, r6
   1e08a:	9501      	str	r5, [sp, #4]
   1e08c:	9500      	str	r5, [sp, #0]
   1e08e:	f7fd fa09 	bl	1b4a4 <at_interface_write>
   1e092:	4606      	mov	r6, r0
   1e094:	4810      	ldr	r0, [pc, #64]	; (1e0d8 <pdn_interface_connect+0x1f4>)
   1e096:	f007 fe7b 	bl	25d90 <strlen>
   1e09a:	42b0      	cmp	r0, r6
   1e09c:	d115      	bne.n	1e0ca <pdn_interface_connect+0x1e6>
   1e09e:	4620      	mov	r0, r4
   1e0a0:	f7ff fdde 	bl	1dc60 <pdn_id_get.part.0>
   1e0a4:	4628      	mov	r0, r5
   1e0a6:	b003      	add	sp, #12
   1e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0ac:	f1c5 0180 	rsb	r1, r5, #128	; 0x80
   1e0b0:	1978      	adds	r0, r7, r5
   1e0b2:	4b13      	ldr	r3, [pc, #76]	; (1e100 <pdn_interface_connect+0x21c>)
   1e0b4:	4a0d      	ldr	r2, [pc, #52]	; (1e0ec <pdn_interface_connect+0x208>)
   1e0b6:	f7f4 f88f 	bl	121d8 <snprintf>
   1e0ba:	4405      	add	r5, r0
   1e0bc:	e764      	b.n	1df88 <pdn_interface_connect+0xa4>
   1e0be:	200e      	movs	r0, #14
   1e0c0:	f008 fe24 	bl	26d0c <bsd_os_errno_set>
   1e0c4:	f04f 30ff 	mov.w	r0, #4294967295
   1e0c8:	e782      	b.n	1dfd0 <pdn_interface_connect+0xec>
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	e780      	b.n	1dfd0 <pdn_interface_connect+0xec>
   1e0ce:	bf00      	nop
   1e0d0:	789a0000 	.word	0x789a0000
   1e0d4:	20021964 	.word	0x20021964
   1e0d8:	200218e4 	.word	0x200218e4
   1e0dc:	0002a45c 	.word	0x0002a45c
   1e0e0:	0002a468 	.word	0x0002a468
   1e0e4:	0002a47c 	.word	0x0002a47c
   1e0e8:	0002a484 	.word	0x0002a484
   1e0ec:	0002a474 	.word	0x0002a474
   1e0f0:	0002a4a8 	.word	0x0002a4a8
   1e0f4:	0002a488 	.word	0x0002a488
   1e0f8:	0002a494 	.word	0x0002a494
   1e0fc:	0002a498 	.word	0x0002a498
   1e100:	0002a46c 	.word	0x0002a46c
   1e104:	20021860 	.word	0x20021860

0001e108 <pdn_interface_close>:
   1e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e10c:	4b4c      	ldr	r3, [pc, #304]	; (1e240 <pdn_interface_close+0x138>)
   1e10e:	b082      	sub	sp, #8
   1e110:	4383      	bics	r3, r0
   1e112:	f040 8088 	bne.w	1e226 <pdn_interface_close+0x11e>
   1e116:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1e11a:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   1e11e:	2c09      	cmp	r4, #9
   1e120:	f300 8081 	bgt.w	1e226 <pdn_interface_close+0x11e>
   1e124:	4e47      	ldr	r6, [pc, #284]	; (1e244 <pdn_interface_close+0x13c>)
   1e126:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e12a:	2800      	cmp	r0, #0
   1e12c:	d07b      	beq.n	1e226 <pdn_interface_close+0x11e>
   1e12e:	6883      	ldr	r3, [r0, #8]
   1e130:	2b00      	cmp	r3, #0
   1e132:	d078      	beq.n	1e226 <pdn_interface_close+0x11e>
   1e134:	2c00      	cmp	r4, #0
   1e136:	db76      	blt.n	1e226 <pdn_interface_close+0x11e>
   1e138:	6883      	ldr	r3, [r0, #8]
   1e13a:	2b03      	cmp	r3, #3
   1e13c:	d00d      	beq.n	1e15a <pdn_interface_close+0x52>
   1e13e:	f7f6 fbb5 	bl	148ac <nrf_free>
   1e142:	2274      	movs	r2, #116	; 0x74
   1e144:	2100      	movs	r1, #0
   1e146:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e14a:	f007 feb9 	bl	25ec0 <memset>
   1e14e:	2000      	movs	r0, #0
   1e150:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
   1e154:	b002      	add	sp, #8
   1e156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e15a:	4d3b      	ldr	r5, [pc, #236]	; (1e248 <pdn_interface_close+0x140>)
   1e15c:	2280      	movs	r2, #128	; 0x80
   1e15e:	2100      	movs	r1, #0
   1e160:	4628      	mov	r0, r5
   1e162:	f007 fead 	bl	25ec0 <memset>
   1e166:	4a39      	ldr	r2, [pc, #228]	; (1e24c <pdn_interface_close+0x144>)
   1e168:	2180      	movs	r1, #128	; 0x80
   1e16a:	4628      	mov	r0, r5
   1e16c:	f7f4 f834 	bl	121d8 <snprintf>
   1e170:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1e174:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   1e178:	681b      	ldr	r3, [r3, #0]
   1e17a:	4a35      	ldr	r2, [pc, #212]	; (1e250 <pdn_interface_close+0x148>)
   1e17c:	4428      	add	r0, r5
   1e17e:	4f35      	ldr	r7, [pc, #212]	; (1e254 <pdn_interface_close+0x14c>)
   1e180:	f7f4 f82a 	bl	121d8 <snprintf>
   1e184:	4628      	mov	r0, r5
   1e186:	f8d7 8000 	ldr.w	r8, [r7]
   1e18a:	f007 fe01 	bl	25d90 <strlen>
   1e18e:	2300      	movs	r3, #0
   1e190:	4602      	mov	r2, r0
   1e192:	4629      	mov	r1, r5
   1e194:	4640      	mov	r0, r8
   1e196:	e9cd 3300 	strd	r3, r3, [sp]
   1e19a:	f7fd f983 	bl	1b4a4 <at_interface_write>
   1e19e:	4680      	mov	r8, r0
   1e1a0:	4628      	mov	r0, r5
   1e1a2:	f007 fdf5 	bl	25d90 <strlen>
   1e1a6:	4540      	cmp	r0, r8
   1e1a8:	d102      	bne.n	1e1b0 <pdn_interface_close+0xa8>
   1e1aa:	4620      	mov	r0, r4
   1e1ac:	f7ff fd0e 	bl	1dbcc <event_wait.constprop.2>
   1e1b0:	2280      	movs	r2, #128	; 0x80
   1e1b2:	2100      	movs	r1, #0
   1e1b4:	4824      	ldr	r0, [pc, #144]	; (1e248 <pdn_interface_close+0x140>)
   1e1b6:	f007 fe83 	bl	25ec0 <memset>
   1e1ba:	4a27      	ldr	r2, [pc, #156]	; (1e258 <pdn_interface_close+0x150>)
   1e1bc:	2180      	movs	r1, #128	; 0x80
   1e1be:	4822      	ldr	r0, [pc, #136]	; (1e248 <pdn_interface_close+0x140>)
   1e1c0:	f7f4 f80a 	bl	121d8 <snprintf>
   1e1c4:	4601      	mov	r1, r0
   1e1c6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1e1ca:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1e1ce:	681b      	ldr	r3, [r3, #0]
   1e1d0:	4a1f      	ldr	r2, [pc, #124]	; (1e250 <pdn_interface_close+0x148>)
   1e1d2:	1828      	adds	r0, r5, r0
   1e1d4:	f7f4 f800 	bl	121d8 <snprintf>
   1e1d8:	481b      	ldr	r0, [pc, #108]	; (1e248 <pdn_interface_close+0x140>)
   1e1da:	683d      	ldr	r5, [r7, #0]
   1e1dc:	f007 fdd8 	bl	25d90 <strlen>
   1e1e0:	2300      	movs	r3, #0
   1e1e2:	4602      	mov	r2, r0
   1e1e4:	9301      	str	r3, [sp, #4]
   1e1e6:	4628      	mov	r0, r5
   1e1e8:	9300      	str	r3, [sp, #0]
   1e1ea:	4917      	ldr	r1, [pc, #92]	; (1e248 <pdn_interface_close+0x140>)
   1e1ec:	f7fd f95a 	bl	1b4a4 <at_interface_write>
   1e1f0:	4605      	mov	r5, r0
   1e1f2:	4815      	ldr	r0, [pc, #84]	; (1e248 <pdn_interface_close+0x140>)
   1e1f4:	f007 fdcc 	bl	25d90 <strlen>
   1e1f8:	42a8      	cmp	r0, r5
   1e1fa:	d11a      	bne.n	1e232 <pdn_interface_close+0x12a>
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	f7ff fce5 	bl	1dbcc <event_wait.constprop.2>
   1e202:	4605      	mov	r5, r0
   1e204:	b9a8      	cbnz	r0, 1e232 <pdn_interface_close+0x12a>
   1e206:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e20a:	f7f6 fb4f 	bl	148ac <nrf_free>
   1e20e:	2274      	movs	r2, #116	; 0x74
   1e210:	4629      	mov	r1, r5
   1e212:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1e216:	f007 fe53 	bl	25ec0 <memset>
   1e21a:	4628      	mov	r0, r5
   1e21c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   1e220:	b002      	add	sp, #8
   1e222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e226:	2009      	movs	r0, #9
   1e228:	f008 fd70 	bl	26d0c <bsd_os_errno_set>
   1e22c:	f04f 30ff 	mov.w	r0, #4294967295
   1e230:	e790      	b.n	1e154 <pdn_interface_close+0x4c>
   1e232:	2023      	movs	r0, #35	; 0x23
   1e234:	f008 fd6a 	bl	26d0c <bsd_os_errno_set>
   1e238:	f04f 30ff 	mov.w	r0, #4294967295
   1e23c:	e78a      	b.n	1e154 <pdn_interface_close+0x4c>
   1e23e:	bf00      	nop
   1e240:	789a0000 	.word	0x789a0000
   1e244:	20021964 	.word	0x20021964
   1e248:	200218e4 	.word	0x200218e4
   1e24c:	0002a450 	.word	0x0002a450
   1e250:	0002a494 	.word	0x0002a494
   1e254:	20021860 	.word	0x20021860
   1e258:	0002a45c 	.word	0x0002a45c

0001e25c <pdn_interface_setopt>:
   1e25c:	b510      	push	{r4, lr}
   1e25e:	f240 2402 	movw	r4, #514	; 0x202
   1e262:	42a1      	cmp	r1, r4
   1e264:	d101      	bne.n	1e26a <pdn_interface_setopt+0xe>
   1e266:	2a01      	cmp	r2, #1
   1e268:	d005      	beq.n	1e276 <pdn_interface_setopt+0x1a>
   1e26a:	2016      	movs	r0, #22
   1e26c:	f008 fd4e 	bl	26d0c <bsd_os_errno_set>
   1e270:	f04f 30ff 	mov.w	r0, #4294967295
   1e274:	bd10      	pop	{r4, pc}
   1e276:	2b00      	cmp	r3, #0
   1e278:	d0f7      	beq.n	1e26a <pdn_interface_setopt+0xe>
   1e27a:	9a02      	ldr	r2, [sp, #8]
   1e27c:	2a00      	cmp	r2, #0
   1e27e:	d0f4      	beq.n	1e26a <pdn_interface_setopt+0xe>
   1e280:	4a1e      	ldr	r2, [pc, #120]	; (1e2fc <pdn_interface_setopt+0xa0>)
   1e282:	4382      	bics	r2, r0
   1e284:	d001      	beq.n	1e28a <pdn_interface_setopt+0x2e>
   1e286:	2009      	movs	r0, #9
   1e288:	e7f0      	b.n	1e26c <pdn_interface_setopt+0x10>
   1e28a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1e28e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1e292:	2809      	cmp	r0, #9
   1e294:	dcf7      	bgt.n	1e286 <pdn_interface_setopt+0x2a>
   1e296:	4a1a      	ldr	r2, [pc, #104]	; (1e300 <pdn_interface_setopt+0xa4>)
   1e298:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   1e29c:	2a00      	cmp	r2, #0
   1e29e:	d0f2      	beq.n	1e286 <pdn_interface_setopt+0x2a>
   1e2a0:	6891      	ldr	r1, [r2, #8]
   1e2a2:	2900      	cmp	r1, #0
   1e2a4:	d0ef      	beq.n	1e286 <pdn_interface_setopt+0x2a>
   1e2a6:	2800      	cmp	r0, #0
   1e2a8:	dbed      	blt.n	1e286 <pdn_interface_setopt+0x2a>
   1e2aa:	6891      	ldr	r1, [r2, #8]
   1e2ac:	b1f9      	cbz	r1, 1e2ee <pdn_interface_setopt+0x92>
   1e2ae:	6891      	ldr	r1, [r2, #8]
   1e2b0:	2903      	cmp	r1, #3
   1e2b2:	d01c      	beq.n	1e2ee <pdn_interface_setopt+0x92>
   1e2b4:	6891      	ldr	r1, [r2, #8]
   1e2b6:	2904      	cmp	r1, #4
   1e2b8:	d019      	beq.n	1e2ee <pdn_interface_setopt+0x92>
   1e2ba:	9902      	ldr	r1, [sp, #8]
   1e2bc:	0888      	lsrs	r0, r1, #2
   1e2be:	1e41      	subs	r1, r0, #1
   1e2c0:	2901      	cmp	r1, #1
   1e2c2:	d8d2      	bhi.n	1e26a <pdn_interface_setopt+0xe>
   1e2c4:	9902      	ldr	r1, [sp, #8]
   1e2c6:	0789      	lsls	r1, r1, #30
   1e2c8:	d1cf      	bne.n	1e26a <pdn_interface_setopt+0xe>
   1e2ca:	6819      	ldr	r1, [r3, #0]
   1e2cc:	2902      	cmp	r1, #2
   1e2ce:	d010      	beq.n	1e2f2 <pdn_interface_setopt+0x96>
   1e2d0:	290a      	cmp	r1, #10
   1e2d2:	d1ca      	bne.n	1e26a <pdn_interface_setopt+0xe>
   1e2d4:	2102      	movs	r1, #2
   1e2d6:	2802      	cmp	r0, #2
   1e2d8:	d106      	bne.n	1e2e8 <pdn_interface_setopt+0x8c>
   1e2da:	685b      	ldr	r3, [r3, #4]
   1e2dc:	2b02      	cmp	r3, #2
   1e2de:	d00a      	beq.n	1e2f6 <pdn_interface_setopt+0x9a>
   1e2e0:	2b0a      	cmp	r3, #10
   1e2e2:	d1c2      	bne.n	1e26a <pdn_interface_setopt+0xe>
   1e2e4:	f041 0102 	orr.w	r1, r1, #2
   1e2e8:	6711      	str	r1, [r2, #112]	; 0x70
   1e2ea:	2000      	movs	r0, #0
   1e2ec:	e7be      	b.n	1e26c <pdn_interface_setopt+0x10>
   1e2ee:	200e      	movs	r0, #14
   1e2f0:	e7bc      	b.n	1e26c <pdn_interface_setopt+0x10>
   1e2f2:	2101      	movs	r1, #1
   1e2f4:	e7ef      	b.n	1e2d6 <pdn_interface_setopt+0x7a>
   1e2f6:	f041 0101 	orr.w	r1, r1, #1
   1e2fa:	e7f5      	b.n	1e2e8 <pdn_interface_setopt+0x8c>
   1e2fc:	789a0000 	.word	0x789a0000
   1e300:	20021964 	.word	0x20021964

0001e304 <pdn_interface_getopt>:
   1e304:	b510      	push	{r4, lr}
   1e306:	f240 2402 	movw	r4, #514	; 0x202
   1e30a:	42a1      	cmp	r1, r4
   1e30c:	d101      	bne.n	1e312 <pdn_interface_getopt+0xe>
   1e30e:	2a01      	cmp	r2, #1
   1e310:	d005      	beq.n	1e31e <pdn_interface_getopt+0x1a>
   1e312:	2016      	movs	r0, #22
   1e314:	f008 fcfa 	bl	26d0c <bsd_os_errno_set>
   1e318:	f04f 30ff 	mov.w	r0, #4294967295
   1e31c:	bd10      	pop	{r4, pc}
   1e31e:	2b00      	cmp	r3, #0
   1e320:	d0f7      	beq.n	1e312 <pdn_interface_getopt+0xe>
   1e322:	9b02      	ldr	r3, [sp, #8]
   1e324:	2b00      	cmp	r3, #0
   1e326:	d0f4      	beq.n	1e312 <pdn_interface_getopt+0xe>
   1e328:	4b1c      	ldr	r3, [pc, #112]	; (1e39c <pdn_interface_getopt+0x98>)
   1e32a:	4383      	bics	r3, r0
   1e32c:	d005      	beq.n	1e33a <pdn_interface_getopt+0x36>
   1e32e:	2009      	movs	r0, #9
   1e330:	f008 fcec 	bl	26d0c <bsd_os_errno_set>
   1e334:	f04f 30ff 	mov.w	r0, #4294967295
   1e338:	bd10      	pop	{r4, pc}
   1e33a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1e33e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1e342:	2809      	cmp	r0, #9
   1e344:	dcf3      	bgt.n	1e32e <pdn_interface_getopt+0x2a>
   1e346:	4b16      	ldr	r3, [pc, #88]	; (1e3a0 <pdn_interface_getopt+0x9c>)
   1e348:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e34c:	2b00      	cmp	r3, #0
   1e34e:	d0ee      	beq.n	1e32e <pdn_interface_getopt+0x2a>
   1e350:	689a      	ldr	r2, [r3, #8]
   1e352:	2a00      	cmp	r2, #0
   1e354:	d0eb      	beq.n	1e32e <pdn_interface_getopt+0x2a>
   1e356:	2800      	cmp	r0, #0
   1e358:	dbe9      	blt.n	1e32e <pdn_interface_getopt+0x2a>
   1e35a:	689a      	ldr	r2, [r3, #8]
   1e35c:	b1e2      	cbz	r2, 1e398 <pdn_interface_getopt+0x94>
   1e35e:	689a      	ldr	r2, [r3, #8]
   1e360:	2a04      	cmp	r2, #4
   1e362:	d019      	beq.n	1e398 <pdn_interface_getopt+0x94>
   1e364:	9a02      	ldr	r2, [sp, #8]
   1e366:	6812      	ldr	r2, [r2, #0]
   1e368:	2a07      	cmp	r2, #7
   1e36a:	d9d2      	bls.n	1e312 <pdn_interface_getopt+0xe>
   1e36c:	f012 0203 	ands.w	r2, r2, #3
   1e370:	d1cf      	bne.n	1e312 <pdn_interface_getopt+0xe>
   1e372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1e374:	0799      	lsls	r1, r3, #30
   1e376:	d503      	bpl.n	1e380 <pdn_interface_getopt+0x7c>
   1e378:	210a      	movs	r1, #10
   1e37a:	2201      	movs	r2, #1
   1e37c:	9802      	ldr	r0, [sp, #8]
   1e37e:	6001      	str	r1, [r0, #0]
   1e380:	07db      	lsls	r3, r3, #31
   1e382:	d504      	bpl.n	1e38e <pdn_interface_getopt+0x8a>
   1e384:	2302      	movs	r3, #2
   1e386:	9902      	ldr	r1, [sp, #8]
   1e388:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1e38c:	3201      	adds	r2, #1
   1e38e:	9b02      	ldr	r3, [sp, #8]
   1e390:	0092      	lsls	r2, r2, #2
   1e392:	601a      	str	r2, [r3, #0]
   1e394:	2000      	movs	r0, #0
   1e396:	e7bd      	b.n	1e314 <pdn_interface_getopt+0x10>
   1e398:	200e      	movs	r0, #14
   1e39a:	e7bb      	b.n	1e314 <pdn_interface_getopt+0x10>
   1e39c:	789a0000 	.word	0x789a0000
   1e3a0:	20021964 	.word	0x20021964

0001e3a4 <pdn_interface_pdn_id_get>:
   1e3a4:	2900      	cmp	r1, #0
   1e3a6:	f000 839b 	beq.w	1eae0 <pdn_interface_pdn_id_get+0x73c>
   1e3aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3ac:	4ca2      	ldr	r4, [pc, #648]	; (1e638 <pdn_interface_pdn_id_get+0x294>)
   1e3ae:	2802      	cmp	r0, #2
   1e3b0:	b083      	sub	sp, #12
   1e3b2:	460d      	mov	r5, r1
   1e3b4:	6823      	ldr	r3, [r4, #0]
   1e3b6:	f000 8093 	beq.w	1e4e0 <pdn_interface_pdn_id_get+0x13c>
   1e3ba:	280a      	cmp	r0, #10
   1e3bc:	d03e      	beq.n	1e43c <pdn_interface_pdn_id_get+0x98>
   1e3be:	b11b      	cbz	r3, 1e3c8 <pdn_interface_pdn_id_get+0x24>
   1e3c0:	689b      	ldr	r3, [r3, #8]
   1e3c2:	2b03      	cmp	r3, #3
   1e3c4:	f000 8126 	beq.w	1e614 <pdn_interface_pdn_id_get+0x270>
   1e3c8:	6863      	ldr	r3, [r4, #4]
   1e3ca:	b11b      	cbz	r3, 1e3d4 <pdn_interface_pdn_id_get+0x30>
   1e3cc:	689b      	ldr	r3, [r3, #8]
   1e3ce:	2b03      	cmp	r3, #3
   1e3d0:	f000 810f 	beq.w	1e5f2 <pdn_interface_pdn_id_get+0x24e>
   1e3d4:	68a3      	ldr	r3, [r4, #8]
   1e3d6:	b11b      	cbz	r3, 1e3e0 <pdn_interface_pdn_id_get+0x3c>
   1e3d8:	689b      	ldr	r3, [r3, #8]
   1e3da:	2b03      	cmp	r3, #3
   1e3dc:	f000 80f8 	beq.w	1e5d0 <pdn_interface_pdn_id_get+0x22c>
   1e3e0:	68e3      	ldr	r3, [r4, #12]
   1e3e2:	b11b      	cbz	r3, 1e3ec <pdn_interface_pdn_id_get+0x48>
   1e3e4:	689b      	ldr	r3, [r3, #8]
   1e3e6:	2b03      	cmp	r3, #3
   1e3e8:	f000 80e1 	beq.w	1e5ae <pdn_interface_pdn_id_get+0x20a>
   1e3ec:	6923      	ldr	r3, [r4, #16]
   1e3ee:	b11b      	cbz	r3, 1e3f8 <pdn_interface_pdn_id_get+0x54>
   1e3f0:	689b      	ldr	r3, [r3, #8]
   1e3f2:	2b03      	cmp	r3, #3
   1e3f4:	f000 8122 	beq.w	1e63c <pdn_interface_pdn_id_get+0x298>
   1e3f8:	6963      	ldr	r3, [r4, #20]
   1e3fa:	b11b      	cbz	r3, 1e404 <pdn_interface_pdn_id_get+0x60>
   1e3fc:	689b      	ldr	r3, [r3, #8]
   1e3fe:	2b03      	cmp	r3, #3
   1e400:	f000 8160 	beq.w	1e6c4 <pdn_interface_pdn_id_get+0x320>
   1e404:	69a3      	ldr	r3, [r4, #24]
   1e406:	b11b      	cbz	r3, 1e410 <pdn_interface_pdn_id_get+0x6c>
   1e408:	689b      	ldr	r3, [r3, #8]
   1e40a:	2b03      	cmp	r3, #3
   1e40c:	f000 8149 	beq.w	1e6a2 <pdn_interface_pdn_id_get+0x2fe>
   1e410:	69e3      	ldr	r3, [r4, #28]
   1e412:	b11b      	cbz	r3, 1e41c <pdn_interface_pdn_id_get+0x78>
   1e414:	689b      	ldr	r3, [r3, #8]
   1e416:	2b03      	cmp	r3, #3
   1e418:	f000 8132 	beq.w	1e680 <pdn_interface_pdn_id_get+0x2dc>
   1e41c:	6a23      	ldr	r3, [r4, #32]
   1e41e:	b11b      	cbz	r3, 1e428 <pdn_interface_pdn_id_get+0x84>
   1e420:	689b      	ldr	r3, [r3, #8]
   1e422:	2b03      	cmp	r3, #3
   1e424:	f000 811b 	beq.w	1e65e <pdn_interface_pdn_id_get+0x2ba>
   1e428:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e42a:	b11b      	cbz	r3, 1e434 <pdn_interface_pdn_id_get+0x90>
   1e42c:	689b      	ldr	r3, [r3, #8]
   1e42e:	2b03      	cmp	r3, #3
   1e430:	f000 80ac 	beq.w	1e58c <pdn_interface_pdn_id_get+0x1e8>
   1e434:	f04f 30ff 	mov.w	r0, #4294967295
   1e438:	b003      	add	sp, #12
   1e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e43c:	b11b      	cbz	r3, 1e446 <pdn_interface_pdn_id_get+0xa2>
   1e43e:	689b      	ldr	r3, [r3, #8]
   1e440:	2b03      	cmp	r3, #3
   1e442:	f000 8319 	beq.w	1ea78 <pdn_interface_pdn_id_get+0x6d4>
   1e446:	6863      	ldr	r3, [r4, #4]
   1e448:	b11b      	cbz	r3, 1e452 <pdn_interface_pdn_id_get+0xae>
   1e44a:	689b      	ldr	r3, [r3, #8]
   1e44c:	2b03      	cmp	r3, #3
   1e44e:	f000 82e1 	beq.w	1ea14 <pdn_interface_pdn_id_get+0x670>
   1e452:	68a3      	ldr	r3, [r4, #8]
   1e454:	b11b      	cbz	r3, 1e45e <pdn_interface_pdn_id_get+0xba>
   1e456:	689b      	ldr	r3, [r3, #8]
   1e458:	2b03      	cmp	r3, #3
   1e45a:	f000 82bb 	beq.w	1e9d4 <pdn_interface_pdn_id_get+0x630>
   1e45e:	68e3      	ldr	r3, [r4, #12]
   1e460:	b11b      	cbz	r3, 1e46a <pdn_interface_pdn_id_get+0xc6>
   1e462:	689e      	ldr	r6, [r3, #8]
   1e464:	2e03      	cmp	r6, #3
   1e466:	f000 81d6 	beq.w	1e816 <pdn_interface_pdn_id_get+0x472>
   1e46a:	6923      	ldr	r3, [r4, #16]
   1e46c:	b11b      	cbz	r3, 1e476 <pdn_interface_pdn_id_get+0xd2>
   1e46e:	689b      	ldr	r3, [r3, #8]
   1e470:	2b03      	cmp	r3, #3
   1e472:	f000 81e9 	beq.w	1e848 <pdn_interface_pdn_id_get+0x4a4>
   1e476:	6963      	ldr	r3, [r4, #20]
   1e478:	b11b      	cbz	r3, 1e482 <pdn_interface_pdn_id_get+0xde>
   1e47a:	689b      	ldr	r3, [r3, #8]
   1e47c:	2b03      	cmp	r3, #3
   1e47e:	f000 81fb 	beq.w	1e878 <pdn_interface_pdn_id_get+0x4d4>
   1e482:	69a3      	ldr	r3, [r4, #24]
   1e484:	b11b      	cbz	r3, 1e48e <pdn_interface_pdn_id_get+0xea>
   1e486:	689b      	ldr	r3, [r3, #8]
   1e488:	2b03      	cmp	r3, #3
   1e48a:	f000 820d 	beq.w	1e8a8 <pdn_interface_pdn_id_get+0x504>
   1e48e:	69e3      	ldr	r3, [r4, #28]
   1e490:	b11b      	cbz	r3, 1e49a <pdn_interface_pdn_id_get+0xf6>
   1e492:	689b      	ldr	r3, [r3, #8]
   1e494:	2b03      	cmp	r3, #3
   1e496:	f000 821f 	beq.w	1e8d8 <pdn_interface_pdn_id_get+0x534>
   1e49a:	6a23      	ldr	r3, [r4, #32]
   1e49c:	b11b      	cbz	r3, 1e4a6 <pdn_interface_pdn_id_get+0x102>
   1e49e:	689b      	ldr	r3, [r3, #8]
   1e4a0:	2b03      	cmp	r3, #3
   1e4a2:	f000 8233 	beq.w	1e90c <pdn_interface_pdn_id_get+0x568>
   1e4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e4a8:	2b00      	cmp	r3, #0
   1e4aa:	d0c3      	beq.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e4ac:	689b      	ldr	r3, [r3, #8]
   1e4ae:	2b03      	cmp	r3, #3
   1e4b0:	d1c0      	bne.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e4b2:	4628      	mov	r0, r5
   1e4b4:	f007 fc6c 	bl	25d90 <strlen>
   1e4b8:	4606      	mov	r6, r0
   1e4ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1e4bc:	300c      	adds	r0, #12
   1e4be:	f007 fc67 	bl	25d90 <strlen>
   1e4c2:	4286      	cmp	r6, r0
   1e4c4:	d1b6      	bne.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e4c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e4c8:	4628      	mov	r0, r5
   1e4ca:	310c      	adds	r1, #12
   1e4cc:	f007 fc68 	bl	25da0 <strcmp>
   1e4d0:	2800      	cmp	r0, #0
   1e4d2:	d1af      	bne.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e4d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e4d8:	0792      	lsls	r2, r2, #30
   1e4da:	d5ab      	bpl.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e4dc:	2609      	movs	r6, #9
   1e4de:	e11a      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e4e0:	b11b      	cbz	r3, 1e4ea <pdn_interface_pdn_id_get+0x146>
   1e4e2:	689b      	ldr	r3, [r3, #8]
   1e4e4:	2b03      	cmp	r3, #3
   1e4e6:	f000 82e1 	beq.w	1eaac <pdn_interface_pdn_id_get+0x708>
   1e4ea:	6863      	ldr	r3, [r4, #4]
   1e4ec:	b11b      	cbz	r3, 1e4f6 <pdn_interface_pdn_id_get+0x152>
   1e4ee:	689b      	ldr	r3, [r3, #8]
   1e4f0:	2b03      	cmp	r3, #3
   1e4f2:	f000 82a9 	beq.w	1ea48 <pdn_interface_pdn_id_get+0x6a4>
   1e4f6:	68a3      	ldr	r3, [r4, #8]
   1e4f8:	b11b      	cbz	r3, 1e502 <pdn_interface_pdn_id_get+0x15e>
   1e4fa:	689b      	ldr	r3, [r3, #8]
   1e4fc:	2b03      	cmp	r3, #3
   1e4fe:	f000 824f 	beq.w	1e9a0 <pdn_interface_pdn_id_get+0x5fc>
   1e502:	68e3      	ldr	r3, [r4, #12]
   1e504:	b11b      	cbz	r3, 1e50e <pdn_interface_pdn_id_get+0x16a>
   1e506:	689e      	ldr	r6, [r3, #8]
   1e508:	2e03      	cmp	r6, #3
   1e50a:	f000 80ec 	beq.w	1e6e6 <pdn_interface_pdn_id_get+0x342>
   1e50e:	6923      	ldr	r3, [r4, #16]
   1e510:	b11b      	cbz	r3, 1e51a <pdn_interface_pdn_id_get+0x176>
   1e512:	689b      	ldr	r3, [r3, #8]
   1e514:	2b03      	cmp	r3, #3
   1e516:	f000 8130 	beq.w	1e77a <pdn_interface_pdn_id_get+0x3d6>
   1e51a:	6963      	ldr	r3, [r4, #20]
   1e51c:	b11b      	cbz	r3, 1e526 <pdn_interface_pdn_id_get+0x182>
   1e51e:	689b      	ldr	r3, [r3, #8]
   1e520:	2b03      	cmp	r3, #3
   1e522:	f000 8144 	beq.w	1e7ae <pdn_interface_pdn_id_get+0x40a>
   1e526:	69a3      	ldr	r3, [r4, #24]
   1e528:	b11b      	cbz	r3, 1e532 <pdn_interface_pdn_id_get+0x18e>
   1e52a:	689b      	ldr	r3, [r3, #8]
   1e52c:	2b03      	cmp	r3, #3
   1e52e:	f000 8158 	beq.w	1e7e2 <pdn_interface_pdn_id_get+0x43e>
   1e532:	69e3      	ldr	r3, [r4, #28]
   1e534:	b11b      	cbz	r3, 1e53e <pdn_interface_pdn_id_get+0x19a>
   1e536:	689b      	ldr	r3, [r3, #8]
   1e538:	2b03      	cmp	r3, #3
   1e53a:	f000 8201 	beq.w	1e940 <pdn_interface_pdn_id_get+0x59c>
   1e53e:	6a23      	ldr	r3, [r4, #32]
   1e540:	b11b      	cbz	r3, 1e54a <pdn_interface_pdn_id_get+0x1a6>
   1e542:	689b      	ldr	r3, [r3, #8]
   1e544:	2b03      	cmp	r3, #3
   1e546:	f000 8213 	beq.w	1e970 <pdn_interface_pdn_id_get+0x5cc>
   1e54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	f43f af71 	beq.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e552:	689b      	ldr	r3, [r3, #8]
   1e554:	2b03      	cmp	r3, #3
   1e556:	f47f af6d 	bne.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e55a:	4628      	mov	r0, r5
   1e55c:	f007 fc18 	bl	25d90 <strlen>
   1e560:	4606      	mov	r6, r0
   1e562:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1e564:	300c      	adds	r0, #12
   1e566:	f007 fc13 	bl	25d90 <strlen>
   1e56a:	4286      	cmp	r6, r0
   1e56c:	f47f af62 	bne.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e570:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e572:	4628      	mov	r0, r5
   1e574:	310c      	adds	r1, #12
   1e576:	f007 fc13 	bl	25da0 <strcmp>
   1e57a:	2800      	cmp	r0, #0
   1e57c:	f47f af5a 	bne.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e580:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e584:	07d2      	lsls	r2, r2, #31
   1e586:	f57f af55 	bpl.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e58a:	e7a7      	b.n	1e4dc <pdn_interface_pdn_id_get+0x138>
   1e58c:	4628      	mov	r0, r5
   1e58e:	f007 fbff 	bl	25d90 <strlen>
   1e592:	4606      	mov	r6, r0
   1e594:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1e596:	300c      	adds	r0, #12
   1e598:	f007 fbfa 	bl	25d90 <strlen>
   1e59c:	4286      	cmp	r6, r0
   1e59e:	f47f af49 	bne.w	1e434 <pdn_interface_pdn_id_get+0x90>
   1e5a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1e5a4:	4628      	mov	r0, r5
   1e5a6:	310c      	adds	r1, #12
   1e5a8:	f007 fbfa 	bl	25da0 <strcmp>
   1e5ac:	e742      	b.n	1e434 <pdn_interface_pdn_id_get+0x90>
   1e5ae:	4628      	mov	r0, r5
   1e5b0:	f007 fbee 	bl	25d90 <strlen>
   1e5b4:	4606      	mov	r6, r0
   1e5b6:	68e0      	ldr	r0, [r4, #12]
   1e5b8:	300c      	adds	r0, #12
   1e5ba:	f007 fbe9 	bl	25d90 <strlen>
   1e5be:	4286      	cmp	r6, r0
   1e5c0:	f47f af14 	bne.w	1e3ec <pdn_interface_pdn_id_get+0x48>
   1e5c4:	68e1      	ldr	r1, [r4, #12]
   1e5c6:	4628      	mov	r0, r5
   1e5c8:	310c      	adds	r1, #12
   1e5ca:	f007 fbe9 	bl	25da0 <strcmp>
   1e5ce:	e70d      	b.n	1e3ec <pdn_interface_pdn_id_get+0x48>
   1e5d0:	4628      	mov	r0, r5
   1e5d2:	f007 fbdd 	bl	25d90 <strlen>
   1e5d6:	4606      	mov	r6, r0
   1e5d8:	68a0      	ldr	r0, [r4, #8]
   1e5da:	300c      	adds	r0, #12
   1e5dc:	f007 fbd8 	bl	25d90 <strlen>
   1e5e0:	4286      	cmp	r6, r0
   1e5e2:	f47f aefd 	bne.w	1e3e0 <pdn_interface_pdn_id_get+0x3c>
   1e5e6:	68a1      	ldr	r1, [r4, #8]
   1e5e8:	4628      	mov	r0, r5
   1e5ea:	310c      	adds	r1, #12
   1e5ec:	f007 fbd8 	bl	25da0 <strcmp>
   1e5f0:	e6f6      	b.n	1e3e0 <pdn_interface_pdn_id_get+0x3c>
   1e5f2:	4628      	mov	r0, r5
   1e5f4:	f007 fbcc 	bl	25d90 <strlen>
   1e5f8:	4606      	mov	r6, r0
   1e5fa:	6860      	ldr	r0, [r4, #4]
   1e5fc:	300c      	adds	r0, #12
   1e5fe:	f007 fbc7 	bl	25d90 <strlen>
   1e602:	4286      	cmp	r6, r0
   1e604:	f47f aee6 	bne.w	1e3d4 <pdn_interface_pdn_id_get+0x30>
   1e608:	6861      	ldr	r1, [r4, #4]
   1e60a:	4628      	mov	r0, r5
   1e60c:	310c      	adds	r1, #12
   1e60e:	f007 fbc7 	bl	25da0 <strcmp>
   1e612:	e6df      	b.n	1e3d4 <pdn_interface_pdn_id_get+0x30>
   1e614:	4608      	mov	r0, r1
   1e616:	f007 fbbb 	bl	25d90 <strlen>
   1e61a:	4606      	mov	r6, r0
   1e61c:	6820      	ldr	r0, [r4, #0]
   1e61e:	300c      	adds	r0, #12
   1e620:	f007 fbb6 	bl	25d90 <strlen>
   1e624:	42b0      	cmp	r0, r6
   1e626:	f47f aecf 	bne.w	1e3c8 <pdn_interface_pdn_id_get+0x24>
   1e62a:	6821      	ldr	r1, [r4, #0]
   1e62c:	4628      	mov	r0, r5
   1e62e:	310c      	adds	r1, #12
   1e630:	f007 fbb6 	bl	25da0 <strcmp>
   1e634:	e6c8      	b.n	1e3c8 <pdn_interface_pdn_id_get+0x24>
   1e636:	bf00      	nop
   1e638:	20021964 	.word	0x20021964
   1e63c:	4628      	mov	r0, r5
   1e63e:	f007 fba7 	bl	25d90 <strlen>
   1e642:	4606      	mov	r6, r0
   1e644:	6920      	ldr	r0, [r4, #16]
   1e646:	300c      	adds	r0, #12
   1e648:	f007 fba2 	bl	25d90 <strlen>
   1e64c:	4286      	cmp	r6, r0
   1e64e:	f47f aed3 	bne.w	1e3f8 <pdn_interface_pdn_id_get+0x54>
   1e652:	6921      	ldr	r1, [r4, #16]
   1e654:	4628      	mov	r0, r5
   1e656:	310c      	adds	r1, #12
   1e658:	f007 fba2 	bl	25da0 <strcmp>
   1e65c:	e6cc      	b.n	1e3f8 <pdn_interface_pdn_id_get+0x54>
   1e65e:	4628      	mov	r0, r5
   1e660:	f007 fb96 	bl	25d90 <strlen>
   1e664:	4606      	mov	r6, r0
   1e666:	6a20      	ldr	r0, [r4, #32]
   1e668:	300c      	adds	r0, #12
   1e66a:	f007 fb91 	bl	25d90 <strlen>
   1e66e:	4286      	cmp	r6, r0
   1e670:	f47f aeda 	bne.w	1e428 <pdn_interface_pdn_id_get+0x84>
   1e674:	6a21      	ldr	r1, [r4, #32]
   1e676:	4628      	mov	r0, r5
   1e678:	310c      	adds	r1, #12
   1e67a:	f007 fb91 	bl	25da0 <strcmp>
   1e67e:	e6d3      	b.n	1e428 <pdn_interface_pdn_id_get+0x84>
   1e680:	4628      	mov	r0, r5
   1e682:	f007 fb85 	bl	25d90 <strlen>
   1e686:	4606      	mov	r6, r0
   1e688:	69e0      	ldr	r0, [r4, #28]
   1e68a:	300c      	adds	r0, #12
   1e68c:	f007 fb80 	bl	25d90 <strlen>
   1e690:	4286      	cmp	r6, r0
   1e692:	f47f aec3 	bne.w	1e41c <pdn_interface_pdn_id_get+0x78>
   1e696:	69e1      	ldr	r1, [r4, #28]
   1e698:	4628      	mov	r0, r5
   1e69a:	310c      	adds	r1, #12
   1e69c:	f007 fb80 	bl	25da0 <strcmp>
   1e6a0:	e6bc      	b.n	1e41c <pdn_interface_pdn_id_get+0x78>
   1e6a2:	4628      	mov	r0, r5
   1e6a4:	f007 fb74 	bl	25d90 <strlen>
   1e6a8:	4606      	mov	r6, r0
   1e6aa:	69a0      	ldr	r0, [r4, #24]
   1e6ac:	300c      	adds	r0, #12
   1e6ae:	f007 fb6f 	bl	25d90 <strlen>
   1e6b2:	4286      	cmp	r6, r0
   1e6b4:	f47f aeac 	bne.w	1e410 <pdn_interface_pdn_id_get+0x6c>
   1e6b8:	69a1      	ldr	r1, [r4, #24]
   1e6ba:	4628      	mov	r0, r5
   1e6bc:	310c      	adds	r1, #12
   1e6be:	f007 fb6f 	bl	25da0 <strcmp>
   1e6c2:	e6a5      	b.n	1e410 <pdn_interface_pdn_id_get+0x6c>
   1e6c4:	4628      	mov	r0, r5
   1e6c6:	f007 fb63 	bl	25d90 <strlen>
   1e6ca:	4606      	mov	r6, r0
   1e6cc:	6960      	ldr	r0, [r4, #20]
   1e6ce:	300c      	adds	r0, #12
   1e6d0:	f007 fb5e 	bl	25d90 <strlen>
   1e6d4:	4286      	cmp	r6, r0
   1e6d6:	f47f ae95 	bne.w	1e404 <pdn_interface_pdn_id_get+0x60>
   1e6da:	6961      	ldr	r1, [r4, #20]
   1e6dc:	4628      	mov	r0, r5
   1e6de:	310c      	adds	r1, #12
   1e6e0:	f007 fb5e 	bl	25da0 <strcmp>
   1e6e4:	e68e      	b.n	1e404 <pdn_interface_pdn_id_get+0x60>
   1e6e6:	4628      	mov	r0, r5
   1e6e8:	f007 fb52 	bl	25d90 <strlen>
   1e6ec:	4607      	mov	r7, r0
   1e6ee:	68e0      	ldr	r0, [r4, #12]
   1e6f0:	300c      	adds	r0, #12
   1e6f2:	f007 fb4d 	bl	25d90 <strlen>
   1e6f6:	4287      	cmp	r7, r0
   1e6f8:	f47f af09 	bne.w	1e50e <pdn_interface_pdn_id_get+0x16a>
   1e6fc:	68e1      	ldr	r1, [r4, #12]
   1e6fe:	4628      	mov	r0, r5
   1e700:	310c      	adds	r1, #12
   1e702:	f007 fb4d 	bl	25da0 <strcmp>
   1e706:	2800      	cmp	r0, #0
   1e708:	f47f af01 	bne.w	1e50e <pdn_interface_pdn_id_get+0x16a>
   1e70c:	68e3      	ldr	r3, [r4, #12]
   1e70e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e710:	07d1      	lsls	r1, r2, #31
   1e712:	f57f aefc 	bpl.w	1e50e <pdn_interface_pdn_id_get+0x16a>
   1e716:	6858      	ldr	r0, [r3, #4]
   1e718:	1c43      	adds	r3, r0, #1
   1e71a:	f47f ae8d 	bne.w	1e438 <pdn_interface_pdn_id_get+0x94>
   1e71e:	4db9      	ldr	r5, [pc, #740]	; (1ea04 <pdn_interface_pdn_id_get+0x660>)
   1e720:	2280      	movs	r2, #128	; 0x80
   1e722:	2100      	movs	r1, #0
   1e724:	4628      	mov	r0, r5
   1e726:	f007 fbcb 	bl	25ec0 <memset>
   1e72a:	4ab7      	ldr	r2, [pc, #732]	; (1ea08 <pdn_interface_pdn_id_get+0x664>)
   1e72c:	2180      	movs	r1, #128	; 0x80
   1e72e:	4628      	mov	r0, r5
   1e730:	f7f3 fd52 	bl	121d8 <snprintf>
   1e734:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e738:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
   1e73c:	4ab3      	ldr	r2, [pc, #716]	; (1ea0c <pdn_interface_pdn_id_get+0x668>)
   1e73e:	681b      	ldr	r3, [r3, #0]
   1e740:	4428      	add	r0, r5
   1e742:	f7f3 fd49 	bl	121d8 <snprintf>
   1e746:	4bb2      	ldr	r3, [pc, #712]	; (1ea10 <pdn_interface_pdn_id_get+0x66c>)
   1e748:	4628      	mov	r0, r5
   1e74a:	681f      	ldr	r7, [r3, #0]
   1e74c:	f007 fb20 	bl	25d90 <strlen>
   1e750:	2300      	movs	r3, #0
   1e752:	4602      	mov	r2, r0
   1e754:	4629      	mov	r1, r5
   1e756:	4638      	mov	r0, r7
   1e758:	e9cd 3300 	strd	r3, r3, [sp]
   1e75c:	f7fc fea2 	bl	1b4a4 <at_interface_write>
   1e760:	4607      	mov	r7, r0
   1e762:	4628      	mov	r0, r5
   1e764:	f007 fb14 	bl	25d90 <strlen>
   1e768:	42b8      	cmp	r0, r7
   1e76a:	d102      	bne.n	1e772 <pdn_interface_pdn_id_get+0x3ce>
   1e76c:	4630      	mov	r0, r6
   1e76e:	f7ff fa77 	bl	1dc60 <pdn_id_get.part.0>
   1e772:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   1e776:	6858      	ldr	r0, [r3, #4]
   1e778:	e65e      	b.n	1e438 <pdn_interface_pdn_id_get+0x94>
   1e77a:	4628      	mov	r0, r5
   1e77c:	f007 fb08 	bl	25d90 <strlen>
   1e780:	4606      	mov	r6, r0
   1e782:	6920      	ldr	r0, [r4, #16]
   1e784:	300c      	adds	r0, #12
   1e786:	f007 fb03 	bl	25d90 <strlen>
   1e78a:	4286      	cmp	r6, r0
   1e78c:	f47f aec5 	bne.w	1e51a <pdn_interface_pdn_id_get+0x176>
   1e790:	6921      	ldr	r1, [r4, #16]
   1e792:	4628      	mov	r0, r5
   1e794:	310c      	adds	r1, #12
   1e796:	f007 fb03 	bl	25da0 <strcmp>
   1e79a:	2800      	cmp	r0, #0
   1e79c:	f47f aebd 	bne.w	1e51a <pdn_interface_pdn_id_get+0x176>
   1e7a0:	6923      	ldr	r3, [r4, #16]
   1e7a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e7a4:	07d2      	lsls	r2, r2, #31
   1e7a6:	f57f aeb8 	bpl.w	1e51a <pdn_interface_pdn_id_get+0x176>
   1e7aa:	2604      	movs	r6, #4
   1e7ac:	e7b3      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e7ae:	4628      	mov	r0, r5
   1e7b0:	f007 faee 	bl	25d90 <strlen>
   1e7b4:	4606      	mov	r6, r0
   1e7b6:	6960      	ldr	r0, [r4, #20]
   1e7b8:	300c      	adds	r0, #12
   1e7ba:	f007 fae9 	bl	25d90 <strlen>
   1e7be:	4286      	cmp	r6, r0
   1e7c0:	f47f aeb1 	bne.w	1e526 <pdn_interface_pdn_id_get+0x182>
   1e7c4:	6961      	ldr	r1, [r4, #20]
   1e7c6:	4628      	mov	r0, r5
   1e7c8:	310c      	adds	r1, #12
   1e7ca:	f007 fae9 	bl	25da0 <strcmp>
   1e7ce:	2800      	cmp	r0, #0
   1e7d0:	f47f aea9 	bne.w	1e526 <pdn_interface_pdn_id_get+0x182>
   1e7d4:	6963      	ldr	r3, [r4, #20]
   1e7d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e7d8:	07d7      	lsls	r7, r2, #31
   1e7da:	f57f aea4 	bpl.w	1e526 <pdn_interface_pdn_id_get+0x182>
   1e7de:	2605      	movs	r6, #5
   1e7e0:	e799      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e7e2:	4628      	mov	r0, r5
   1e7e4:	f007 fad4 	bl	25d90 <strlen>
   1e7e8:	4606      	mov	r6, r0
   1e7ea:	69a0      	ldr	r0, [r4, #24]
   1e7ec:	300c      	adds	r0, #12
   1e7ee:	f007 facf 	bl	25d90 <strlen>
   1e7f2:	4286      	cmp	r6, r0
   1e7f4:	f47f ae9d 	bne.w	1e532 <pdn_interface_pdn_id_get+0x18e>
   1e7f8:	69a1      	ldr	r1, [r4, #24]
   1e7fa:	4628      	mov	r0, r5
   1e7fc:	310c      	adds	r1, #12
   1e7fe:	f007 facf 	bl	25da0 <strcmp>
   1e802:	2800      	cmp	r0, #0
   1e804:	f47f ae95 	bne.w	1e532 <pdn_interface_pdn_id_get+0x18e>
   1e808:	69a3      	ldr	r3, [r4, #24]
   1e80a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e80c:	07d6      	lsls	r6, r2, #31
   1e80e:	f57f ae90 	bpl.w	1e532 <pdn_interface_pdn_id_get+0x18e>
   1e812:	2606      	movs	r6, #6
   1e814:	e77f      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e816:	4628      	mov	r0, r5
   1e818:	f007 faba 	bl	25d90 <strlen>
   1e81c:	4607      	mov	r7, r0
   1e81e:	68e0      	ldr	r0, [r4, #12]
   1e820:	300c      	adds	r0, #12
   1e822:	f007 fab5 	bl	25d90 <strlen>
   1e826:	4287      	cmp	r7, r0
   1e828:	f47f ae1f 	bne.w	1e46a <pdn_interface_pdn_id_get+0xc6>
   1e82c:	68e1      	ldr	r1, [r4, #12]
   1e82e:	4628      	mov	r0, r5
   1e830:	310c      	adds	r1, #12
   1e832:	f007 fab5 	bl	25da0 <strcmp>
   1e836:	2800      	cmp	r0, #0
   1e838:	f47f ae17 	bne.w	1e46a <pdn_interface_pdn_id_get+0xc6>
   1e83c:	68e3      	ldr	r3, [r4, #12]
   1e83e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e840:	0791      	lsls	r1, r2, #30
   1e842:	f53f af68 	bmi.w	1e716 <pdn_interface_pdn_id_get+0x372>
   1e846:	e610      	b.n	1e46a <pdn_interface_pdn_id_get+0xc6>
   1e848:	4628      	mov	r0, r5
   1e84a:	f007 faa1 	bl	25d90 <strlen>
   1e84e:	4606      	mov	r6, r0
   1e850:	6920      	ldr	r0, [r4, #16]
   1e852:	300c      	adds	r0, #12
   1e854:	f007 fa9c 	bl	25d90 <strlen>
   1e858:	4286      	cmp	r6, r0
   1e85a:	f47f ae0c 	bne.w	1e476 <pdn_interface_pdn_id_get+0xd2>
   1e85e:	6921      	ldr	r1, [r4, #16]
   1e860:	4628      	mov	r0, r5
   1e862:	310c      	adds	r1, #12
   1e864:	f007 fa9c 	bl	25da0 <strcmp>
   1e868:	2800      	cmp	r0, #0
   1e86a:	f47f ae04 	bne.w	1e476 <pdn_interface_pdn_id_get+0xd2>
   1e86e:	6923      	ldr	r3, [r4, #16]
   1e870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e872:	0792      	lsls	r2, r2, #30
   1e874:	d499      	bmi.n	1e7aa <pdn_interface_pdn_id_get+0x406>
   1e876:	e5fe      	b.n	1e476 <pdn_interface_pdn_id_get+0xd2>
   1e878:	4628      	mov	r0, r5
   1e87a:	f007 fa89 	bl	25d90 <strlen>
   1e87e:	4606      	mov	r6, r0
   1e880:	6960      	ldr	r0, [r4, #20]
   1e882:	300c      	adds	r0, #12
   1e884:	f007 fa84 	bl	25d90 <strlen>
   1e888:	4286      	cmp	r6, r0
   1e88a:	f47f adfa 	bne.w	1e482 <pdn_interface_pdn_id_get+0xde>
   1e88e:	6961      	ldr	r1, [r4, #20]
   1e890:	4628      	mov	r0, r5
   1e892:	310c      	adds	r1, #12
   1e894:	f007 fa84 	bl	25da0 <strcmp>
   1e898:	2800      	cmp	r0, #0
   1e89a:	f47f adf2 	bne.w	1e482 <pdn_interface_pdn_id_get+0xde>
   1e89e:	6963      	ldr	r3, [r4, #20]
   1e8a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e8a2:	0797      	lsls	r7, r2, #30
   1e8a4:	d49b      	bmi.n	1e7de <pdn_interface_pdn_id_get+0x43a>
   1e8a6:	e5ec      	b.n	1e482 <pdn_interface_pdn_id_get+0xde>
   1e8a8:	4628      	mov	r0, r5
   1e8aa:	f007 fa71 	bl	25d90 <strlen>
   1e8ae:	4606      	mov	r6, r0
   1e8b0:	69a0      	ldr	r0, [r4, #24]
   1e8b2:	300c      	adds	r0, #12
   1e8b4:	f007 fa6c 	bl	25d90 <strlen>
   1e8b8:	4286      	cmp	r6, r0
   1e8ba:	f47f ade8 	bne.w	1e48e <pdn_interface_pdn_id_get+0xea>
   1e8be:	69a1      	ldr	r1, [r4, #24]
   1e8c0:	4628      	mov	r0, r5
   1e8c2:	310c      	adds	r1, #12
   1e8c4:	f007 fa6c 	bl	25da0 <strcmp>
   1e8c8:	2800      	cmp	r0, #0
   1e8ca:	f47f ade0 	bne.w	1e48e <pdn_interface_pdn_id_get+0xea>
   1e8ce:	69a3      	ldr	r3, [r4, #24]
   1e8d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e8d2:	0796      	lsls	r6, r2, #30
   1e8d4:	d49d      	bmi.n	1e812 <pdn_interface_pdn_id_get+0x46e>
   1e8d6:	e5da      	b.n	1e48e <pdn_interface_pdn_id_get+0xea>
   1e8d8:	4628      	mov	r0, r5
   1e8da:	f007 fa59 	bl	25d90 <strlen>
   1e8de:	4606      	mov	r6, r0
   1e8e0:	69e0      	ldr	r0, [r4, #28]
   1e8e2:	300c      	adds	r0, #12
   1e8e4:	f007 fa54 	bl	25d90 <strlen>
   1e8e8:	4286      	cmp	r6, r0
   1e8ea:	f47f add6 	bne.w	1e49a <pdn_interface_pdn_id_get+0xf6>
   1e8ee:	69e1      	ldr	r1, [r4, #28]
   1e8f0:	4628      	mov	r0, r5
   1e8f2:	310c      	adds	r1, #12
   1e8f4:	f007 fa54 	bl	25da0 <strcmp>
   1e8f8:	2800      	cmp	r0, #0
   1e8fa:	f47f adce 	bne.w	1e49a <pdn_interface_pdn_id_get+0xf6>
   1e8fe:	69e3      	ldr	r3, [r4, #28]
   1e900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e902:	0790      	lsls	r0, r2, #30
   1e904:	f57f adc9 	bpl.w	1e49a <pdn_interface_pdn_id_get+0xf6>
   1e908:	2607      	movs	r6, #7
   1e90a:	e704      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e90c:	4628      	mov	r0, r5
   1e90e:	f007 fa3f 	bl	25d90 <strlen>
   1e912:	4606      	mov	r6, r0
   1e914:	6a20      	ldr	r0, [r4, #32]
   1e916:	300c      	adds	r0, #12
   1e918:	f007 fa3a 	bl	25d90 <strlen>
   1e91c:	4286      	cmp	r6, r0
   1e91e:	f47f adc2 	bne.w	1e4a6 <pdn_interface_pdn_id_get+0x102>
   1e922:	6a21      	ldr	r1, [r4, #32]
   1e924:	4628      	mov	r0, r5
   1e926:	310c      	adds	r1, #12
   1e928:	f007 fa3a 	bl	25da0 <strcmp>
   1e92c:	2800      	cmp	r0, #0
   1e92e:	f47f adba 	bne.w	1e4a6 <pdn_interface_pdn_id_get+0x102>
   1e932:	6a23      	ldr	r3, [r4, #32]
   1e934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e936:	0791      	lsls	r1, r2, #30
   1e938:	f57f adb5 	bpl.w	1e4a6 <pdn_interface_pdn_id_get+0x102>
   1e93c:	2608      	movs	r6, #8
   1e93e:	e6ea      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e940:	4628      	mov	r0, r5
   1e942:	f007 fa25 	bl	25d90 <strlen>
   1e946:	4606      	mov	r6, r0
   1e948:	69e0      	ldr	r0, [r4, #28]
   1e94a:	300c      	adds	r0, #12
   1e94c:	f007 fa20 	bl	25d90 <strlen>
   1e950:	4286      	cmp	r6, r0
   1e952:	f47f adf4 	bne.w	1e53e <pdn_interface_pdn_id_get+0x19a>
   1e956:	69e1      	ldr	r1, [r4, #28]
   1e958:	4628      	mov	r0, r5
   1e95a:	310c      	adds	r1, #12
   1e95c:	f007 fa20 	bl	25da0 <strcmp>
   1e960:	2800      	cmp	r0, #0
   1e962:	f47f adec 	bne.w	1e53e <pdn_interface_pdn_id_get+0x19a>
   1e966:	69e3      	ldr	r3, [r4, #28]
   1e968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e96a:	07d0      	lsls	r0, r2, #31
   1e96c:	d4cc      	bmi.n	1e908 <pdn_interface_pdn_id_get+0x564>
   1e96e:	e5e6      	b.n	1e53e <pdn_interface_pdn_id_get+0x19a>
   1e970:	4628      	mov	r0, r5
   1e972:	f007 fa0d 	bl	25d90 <strlen>
   1e976:	4606      	mov	r6, r0
   1e978:	6a20      	ldr	r0, [r4, #32]
   1e97a:	300c      	adds	r0, #12
   1e97c:	f007 fa08 	bl	25d90 <strlen>
   1e980:	4286      	cmp	r6, r0
   1e982:	f47f ade2 	bne.w	1e54a <pdn_interface_pdn_id_get+0x1a6>
   1e986:	6a21      	ldr	r1, [r4, #32]
   1e988:	4628      	mov	r0, r5
   1e98a:	310c      	adds	r1, #12
   1e98c:	f007 fa08 	bl	25da0 <strcmp>
   1e990:	2800      	cmp	r0, #0
   1e992:	f47f adda 	bne.w	1e54a <pdn_interface_pdn_id_get+0x1a6>
   1e996:	6a23      	ldr	r3, [r4, #32]
   1e998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e99a:	07d1      	lsls	r1, r2, #31
   1e99c:	d4ce      	bmi.n	1e93c <pdn_interface_pdn_id_get+0x598>
   1e99e:	e5d4      	b.n	1e54a <pdn_interface_pdn_id_get+0x1a6>
   1e9a0:	4628      	mov	r0, r5
   1e9a2:	f007 f9f5 	bl	25d90 <strlen>
   1e9a6:	4606      	mov	r6, r0
   1e9a8:	68a0      	ldr	r0, [r4, #8]
   1e9aa:	300c      	adds	r0, #12
   1e9ac:	f007 f9f0 	bl	25d90 <strlen>
   1e9b0:	4286      	cmp	r6, r0
   1e9b2:	f47f ada6 	bne.w	1e502 <pdn_interface_pdn_id_get+0x15e>
   1e9b6:	68a1      	ldr	r1, [r4, #8]
   1e9b8:	4628      	mov	r0, r5
   1e9ba:	310c      	adds	r1, #12
   1e9bc:	f007 f9f0 	bl	25da0 <strcmp>
   1e9c0:	2800      	cmp	r0, #0
   1e9c2:	f47f ad9e 	bne.w	1e502 <pdn_interface_pdn_id_get+0x15e>
   1e9c6:	68a3      	ldr	r3, [r4, #8]
   1e9c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e9ca:	07d0      	lsls	r0, r2, #31
   1e9cc:	f57f ad99 	bpl.w	1e502 <pdn_interface_pdn_id_get+0x15e>
   1e9d0:	2602      	movs	r6, #2
   1e9d2:	e6a0      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1e9d4:	4628      	mov	r0, r5
   1e9d6:	f007 f9db 	bl	25d90 <strlen>
   1e9da:	4606      	mov	r6, r0
   1e9dc:	68a0      	ldr	r0, [r4, #8]
   1e9de:	300c      	adds	r0, #12
   1e9e0:	f007 f9d6 	bl	25d90 <strlen>
   1e9e4:	4286      	cmp	r6, r0
   1e9e6:	f47f ad3a 	bne.w	1e45e <pdn_interface_pdn_id_get+0xba>
   1e9ea:	68a1      	ldr	r1, [r4, #8]
   1e9ec:	4628      	mov	r0, r5
   1e9ee:	310c      	adds	r1, #12
   1e9f0:	f007 f9d6 	bl	25da0 <strcmp>
   1e9f4:	2800      	cmp	r0, #0
   1e9f6:	f47f ad32 	bne.w	1e45e <pdn_interface_pdn_id_get+0xba>
   1e9fa:	68a3      	ldr	r3, [r4, #8]
   1e9fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1e9fe:	0790      	lsls	r0, r2, #30
   1ea00:	d4e6      	bmi.n	1e9d0 <pdn_interface_pdn_id_get+0x62c>
   1ea02:	e52c      	b.n	1e45e <pdn_interface_pdn_id_get+0xba>
   1ea04:	200218e4 	.word	0x200218e4
   1ea08:	0002a498 	.word	0x0002a498
   1ea0c:	0002a494 	.word	0x0002a494
   1ea10:	20021860 	.word	0x20021860
   1ea14:	4628      	mov	r0, r5
   1ea16:	f007 f9bb 	bl	25d90 <strlen>
   1ea1a:	4606      	mov	r6, r0
   1ea1c:	6860      	ldr	r0, [r4, #4]
   1ea1e:	300c      	adds	r0, #12
   1ea20:	f007 f9b6 	bl	25d90 <strlen>
   1ea24:	4286      	cmp	r6, r0
   1ea26:	f47f ad14 	bne.w	1e452 <pdn_interface_pdn_id_get+0xae>
   1ea2a:	6861      	ldr	r1, [r4, #4]
   1ea2c:	4628      	mov	r0, r5
   1ea2e:	310c      	adds	r1, #12
   1ea30:	f007 f9b6 	bl	25da0 <strcmp>
   1ea34:	2800      	cmp	r0, #0
   1ea36:	f47f ad0c 	bne.w	1e452 <pdn_interface_pdn_id_get+0xae>
   1ea3a:	6863      	ldr	r3, [r4, #4]
   1ea3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ea3e:	0796      	lsls	r6, r2, #30
   1ea40:	f57f ad07 	bpl.w	1e452 <pdn_interface_pdn_id_get+0xae>
   1ea44:	2601      	movs	r6, #1
   1ea46:	e666      	b.n	1e716 <pdn_interface_pdn_id_get+0x372>
   1ea48:	4628      	mov	r0, r5
   1ea4a:	f007 f9a1 	bl	25d90 <strlen>
   1ea4e:	4606      	mov	r6, r0
   1ea50:	6860      	ldr	r0, [r4, #4]
   1ea52:	300c      	adds	r0, #12
   1ea54:	f007 f99c 	bl	25d90 <strlen>
   1ea58:	4286      	cmp	r6, r0
   1ea5a:	f47f ad4c 	bne.w	1e4f6 <pdn_interface_pdn_id_get+0x152>
   1ea5e:	6861      	ldr	r1, [r4, #4]
   1ea60:	4628      	mov	r0, r5
   1ea62:	310c      	adds	r1, #12
   1ea64:	f007 f99c 	bl	25da0 <strcmp>
   1ea68:	2800      	cmp	r0, #0
   1ea6a:	f47f ad44 	bne.w	1e4f6 <pdn_interface_pdn_id_get+0x152>
   1ea6e:	6863      	ldr	r3, [r4, #4]
   1ea70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ea72:	07d6      	lsls	r6, r2, #31
   1ea74:	d4e6      	bmi.n	1ea44 <pdn_interface_pdn_id_get+0x6a0>
   1ea76:	e53e      	b.n	1e4f6 <pdn_interface_pdn_id_get+0x152>
   1ea78:	4608      	mov	r0, r1
   1ea7a:	f007 f989 	bl	25d90 <strlen>
   1ea7e:	4606      	mov	r6, r0
   1ea80:	6820      	ldr	r0, [r4, #0]
   1ea82:	300c      	adds	r0, #12
   1ea84:	f007 f984 	bl	25d90 <strlen>
   1ea88:	4286      	cmp	r6, r0
   1ea8a:	f47f acdc 	bne.w	1e446 <pdn_interface_pdn_id_get+0xa2>
   1ea8e:	6821      	ldr	r1, [r4, #0]
   1ea90:	4628      	mov	r0, r5
   1ea92:	310c      	adds	r1, #12
   1ea94:	f007 f984 	bl	25da0 <strcmp>
   1ea98:	4606      	mov	r6, r0
   1ea9a:	2800      	cmp	r0, #0
   1ea9c:	f47f acd3 	bne.w	1e446 <pdn_interface_pdn_id_get+0xa2>
   1eaa0:	6823      	ldr	r3, [r4, #0]
   1eaa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1eaa4:	0797      	lsls	r7, r2, #30
   1eaa6:	f53f ae36 	bmi.w	1e716 <pdn_interface_pdn_id_get+0x372>
   1eaaa:	e4cc      	b.n	1e446 <pdn_interface_pdn_id_get+0xa2>
   1eaac:	4608      	mov	r0, r1
   1eaae:	f007 f96f 	bl	25d90 <strlen>
   1eab2:	4606      	mov	r6, r0
   1eab4:	6820      	ldr	r0, [r4, #0]
   1eab6:	300c      	adds	r0, #12
   1eab8:	f007 f96a 	bl	25d90 <strlen>
   1eabc:	4286      	cmp	r6, r0
   1eabe:	f47f ad14 	bne.w	1e4ea <pdn_interface_pdn_id_get+0x146>
   1eac2:	6821      	ldr	r1, [r4, #0]
   1eac4:	4628      	mov	r0, r5
   1eac6:	310c      	adds	r1, #12
   1eac8:	f007 f96a 	bl	25da0 <strcmp>
   1eacc:	4606      	mov	r6, r0
   1eace:	2800      	cmp	r0, #0
   1ead0:	f47f ad0b 	bne.w	1e4ea <pdn_interface_pdn_id_get+0x146>
   1ead4:	6823      	ldr	r3, [r4, #0]
   1ead6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ead8:	07d7      	lsls	r7, r2, #31
   1eada:	f53f ae1c 	bmi.w	1e716 <pdn_interface_pdn_id_get+0x372>
   1eade:	e504      	b.n	1e4ea <pdn_interface_pdn_id_get+0x146>
   1eae0:	f04f 30ff 	mov.w	r0, #4294967295
   1eae4:	4770      	bx	lr
   1eae6:	bf00      	nop

0001eae8 <gnss_client_event_handler>:
   1eae8:	f850 1b08 	ldr.w	r1, [r0], #8
   1eaec:	0c09      	lsrs	r1, r1, #16
   1eaee:	f002 b899 	b.w	20c24 <rpc_gnss_event_handler>
   1eaf2:	bf00      	nop

0001eaf4 <rpc_gnss_client_init>:
   1eaf4:	4801      	ldr	r0, [pc, #4]	; (1eafc <rpc_gnss_client_init+0x8>)
   1eaf6:	f001 bcbb 	b.w	20470 <rpc_client_register>
   1eafa:	bf00      	nop
   1eafc:	0002a4cc 	.word	0x0002a4cc

0001eb00 <rpc_gnss_client_request_alloc>:
   1eb00:	2300      	movs	r3, #0
   1eb02:	b510      	push	{r4, lr}
   1eb04:	b082      	sub	sp, #8
   1eb06:	9301      	str	r3, [sp, #4]
   1eb08:	b158      	cbz	r0, 1eb22 <rpc_gnss_client_request_alloc+0x22>
   1eb0a:	4604      	mov	r4, r0
   1eb0c:	aa01      	add	r2, sp, #4
   1eb0e:	2007      	movs	r0, #7
   1eb10:	f001 feee 	bl	208f0 <rpc_message_alloc>
   1eb14:	b918      	cbnz	r0, 1eb1e <rpc_gnss_client_request_alloc+0x1e>
   1eb16:	9b01      	ldr	r3, [sp, #4]
   1eb18:	b10b      	cbz	r3, 1eb1e <rpc_gnss_client_request_alloc+0x1e>
   1eb1a:	3308      	adds	r3, #8
   1eb1c:	6023      	str	r3, [r4, #0]
   1eb1e:	b002      	add	sp, #8
   1eb20:	bd10      	pop	{r4, pc}
   1eb22:	2007      	movs	r0, #7
   1eb24:	b002      	add	sp, #8
   1eb26:	bd10      	pop	{r4, pc}

0001eb28 <rpc_gnss_client_request_send>:
   1eb28:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1eb2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1eb30:	d10b      	bne.n	1eb4a <rpc_gnss_client_request_send+0x22>
   1eb32:	b160      	cbz	r0, 1eb4e <rpc_gnss_client_request_send+0x26>
   1eb34:	4603      	mov	r3, r0
   1eb36:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1eb3a:	2007      	movs	r0, #7
   1eb3c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1eb40:	f843 1d08 	str.w	r1, [r3, #-8]!
   1eb44:	4619      	mov	r1, r3
   1eb46:	f001 bebb 	b.w	208c0 <rpc_message_send>
   1eb4a:	200f      	movs	r0, #15
   1eb4c:	4770      	bx	lr
   1eb4e:	2007      	movs	r0, #7
   1eb50:	4770      	bx	lr
   1eb52:	bf00      	nop

0001eb54 <rpc_gnss_client_message_free>:
   1eb54:	b120      	cbz	r0, 1eb60 <rpc_gnss_client_message_free+0xc>
   1eb56:	f1a0 0108 	sub.w	r1, r0, #8
   1eb5a:	2007      	movs	r0, #7
   1eb5c:	f001 befc 	b.w	20958 <rpc_message_free>
   1eb60:	2007      	movs	r0, #7
   1eb62:	4770      	bx	lr

0001eb64 <rpc_gnss_client_data_free>:
   1eb64:	b118      	cbz	r0, 1eb6e <rpc_gnss_client_data_free+0xa>
   1eb66:	4601      	mov	r1, r0
   1eb68:	2007      	movs	r0, #7
   1eb6a:	f001 bfa5 	b.w	20ab8 <rpc_message_data_free>
   1eb6e:	2007      	movs	r0, #7
   1eb70:	4770      	bx	lr
   1eb72:	bf00      	nop

0001eb74 <ip_recvd_packet_free_cb>:
   1eb74:	b510      	push	{r4, lr}
   1eb76:	4604      	mov	r4, r0
   1eb78:	6800      	ldr	r0, [r0, #0]
   1eb7a:	f7fc fe8b 	bl	1b894 <rpc_ip_client_data_free>
   1eb7e:	68a0      	ldr	r0, [r4, #8]
   1eb80:	b118      	cbz	r0, 1eb8a <ip_recvd_packet_free_cb+0x16>
   1eb82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb86:	f7f5 be91 	b.w	148ac <nrf_free>
   1eb8a:	bd10      	pop	{r4, pc}

0001eb8c <rpc_error_to_nrf_bsd_error>:
   1eb8c:	2810      	cmp	r0, #16
   1eb8e:	bf9a      	itte	ls
   1eb90:	4b02      	ldrls	r3, [pc, #8]	; (1eb9c <rpc_error_to_nrf_bsd_error+0x10>)
   1eb92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1eb96:	202d      	movhi	r0, #45	; 0x2d
   1eb98:	4770      	bx	lr
   1eb9a:	bf00      	nop
   1eb9c:	0002a4dc 	.word	0x0002a4dc

0001eba0 <ip_interface_request_create>:
   1eba0:	b570      	push	{r4, r5, r6, lr}
   1eba2:	2500      	movs	r5, #0
   1eba4:	b082      	sub	sp, #8
   1eba6:	ac02      	add	r4, sp, #8
   1eba8:	f844 5d04 	str.w	r5, [r4, #-4]!
   1ebac:	4606      	mov	r6, r0
   1ebae:	460d      	mov	r5, r1
   1ebb0:	4620      	mov	r0, r4
   1ebb2:	4619      	mov	r1, r3
   1ebb4:	4614      	mov	r4, r2
   1ebb6:	f7fc fe3b 	bl	1b830 <rpc_ip_client_request_alloc>
   1ebba:	b960      	cbnz	r0, 1ebd6 <ip_interface_request_create+0x36>
   1ebbc:	9b01      	ldr	r3, [sp, #4]
   1ebbe:	2208      	movs	r2, #8
   1ebc0:	7258      	strb	r0, [r3, #9]
   1ebc2:	7298      	strb	r0, [r3, #10]
   1ebc4:	72d8      	strb	r0, [r3, #11]
   1ebc6:	4618      	mov	r0, r3
   1ebc8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   1ebcc:	60dc      	str	r4, [r3, #12]
   1ebce:	611d      	str	r5, [r3, #16]
   1ebd0:	721a      	strb	r2, [r3, #8]
   1ebd2:	b002      	add	sp, #8
   1ebd4:	bd70      	pop	{r4, r5, r6, pc}
   1ebd6:	9b01      	ldr	r3, [sp, #4]
   1ebd8:	4618      	mov	r0, r3
   1ebda:	b002      	add	sp, #8
   1ebdc:	bd70      	pop	{r4, r5, r6, pc}
   1ebde:	bf00      	nop

0001ebe0 <ip_interface_request_send>:
   1ebe0:	b570      	push	{r4, r5, r6, lr}
   1ebe2:	460c      	mov	r4, r1
   1ebe4:	4605      	mov	r5, r0
   1ebe6:	4611      	mov	r1, r2
   1ebe8:	4620      	mov	r0, r4
   1ebea:	461e      	mov	r6, r3
   1ebec:	f7fc fe34 	bl	1b858 <rpc_ip_client_request_send>
   1ebf0:	b900      	cbnz	r0, 1ebf4 <ip_interface_request_send+0x14>
   1ebf2:	bd70      	pop	{r4, r5, r6, pc}
   1ebf4:	6820      	ldr	r0, [r4, #0]
   1ebf6:	b108      	cbz	r0, 1ebfc <ip_interface_request_send+0x1c>
   1ebf8:	f7fc fe4c 	bl	1b894 <rpc_ip_client_data_free>
   1ebfc:	4620      	mov	r0, r4
   1ebfe:	f7fc fe41 	bl	1b884 <rpc_ip_client_message_free>
   1ec02:	602e      	str	r6, [r5, #0]
   1ec04:	2023      	movs	r0, #35	; 0x23
   1ec06:	bd70      	pop	{r4, r5, r6, pc}

0001ec08 <ip_interface_wait>:
   1ec08:	b538      	push	{r3, r4, r5, lr}
   1ec0a:	4605      	mov	r5, r0
   1ec0c:	f001 fad6 	bl	201bc <interface_socket_wait>
   1ec10:	4604      	mov	r4, r0
   1ec12:	b108      	cbz	r0, 1ec18 <ip_interface_wait+0x10>
   1ec14:	4620      	mov	r0, r4
   1ec16:	bd38      	pop	{r3, r4, r5, pc}
   1ec18:	4628      	mov	r0, r5
   1ec1a:	f001 fb3f 	bl	2029c <interface_socket_from_handle_get>
   1ec1e:	2800      	cmp	r0, #0
   1ec20:	d0f8      	beq.n	1ec14 <ip_interface_wait+0xc>
   1ec22:	6844      	ldr	r4, [r0, #4]
   1ec24:	2c00      	cmp	r4, #0
   1ec26:	d0f5      	beq.n	1ec14 <ip_interface_wait+0xc>
   1ec28:	2300      	movs	r3, #0
   1ec2a:	6043      	str	r3, [r0, #4]
   1ec2c:	4620      	mov	r0, r4
   1ec2e:	bd38      	pop	{r3, r4, r5, pc}

0001ec30 <ip_interface_init>:
   1ec30:	b538      	push	{r3, r4, r5, lr}
   1ec32:	2300      	movs	r3, #0
   1ec34:	4d07      	ldr	r5, [pc, #28]	; (1ec54 <ip_interface_init+0x24>)
   1ec36:	4c08      	ldr	r4, [pc, #32]	; (1ec58 <ip_interface_init+0x28>)
   1ec38:	4619      	mov	r1, r3
   1ec3a:	2220      	movs	r2, #32
   1ec3c:	4807      	ldr	r0, [pc, #28]	; (1ec5c <ip_interface_init+0x2c>)
   1ec3e:	602b      	str	r3, [r5, #0]
   1ec40:	6023      	str	r3, [r4, #0]
   1ec42:	f007 f93d 	bl	25ec0 <memset>
   1ec46:	f7fc fded 	bl	1b824 <rpc_ip_client_init>
   1ec4a:	3000      	adds	r0, #0
   1ec4c:	bf18      	it	ne
   1ec4e:	2001      	movne	r0, #1
   1ec50:	4240      	negs	r0, r0
   1ec52:	bd38      	pop	{r3, r4, r5, pc}
   1ec54:	2002199c 	.word	0x2002199c
   1ec58:	20021998 	.word	0x20021998
   1ec5c:	200219a4 	.word	0x200219a4

0001ec60 <ip_interface_open>:
   1ec60:	2300      	movs	r3, #0
   1ec62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec66:	f020 0608 	bic.w	r6, r0, #8
   1ec6a:	b082      	sub	sp, #8
   1ec6c:	2e02      	cmp	r6, #2
   1ec6e:	9300      	str	r3, [sp, #0]
   1ec70:	f040 8088 	bne.w	1ed84 <ip_interface_open+0x124>
   1ec74:	1e4b      	subs	r3, r1, #1
   1ec76:	2b01      	cmp	r3, #1
   1ec78:	460c      	mov	r4, r1
   1ec7a:	d856      	bhi.n	1ed2a <ip_interface_open+0xca>
   1ec7c:	4607      	mov	r7, r0
   1ec7e:	2a00      	cmp	r2, #0
   1ec80:	d14f      	bne.n	1ed22 <ip_interface_open+0xc2>
   1ec82:	2901      	cmp	r1, #1
   1ec84:	bf08      	it	eq
   1ec86:	2601      	moveq	r6, #1
   1ec88:	4a41      	ldr	r2, [pc, #260]	; (1ed90 <ip_interface_open+0x130>)
   1ec8a:	4621      	mov	r1, r4
   1ec8c:	4668      	mov	r0, sp
   1ec8e:	f001 f9ff 	bl	20090 <interface_socket_allocate>
   1ec92:	9b00      	ldr	r3, [sp, #0]
   1ec94:	4680      	mov	r8, r0
   1ec96:	2b00      	cmp	r3, #0
   1ec98:	d050      	beq.n	1ed3c <ip_interface_open+0xdc>
   1ec9a:	2100      	movs	r1, #0
   1ec9c:	a802      	add	r0, sp, #8
   1ec9e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1eca2:	e9c3 7402 	strd	r7, r4, [r3, #8]
   1eca6:	611e      	str	r6, [r3, #16]
   1eca8:	f7fc fdc2 	bl	1b830 <rpc_ip_client_request_alloc>
   1ecac:	2800      	cmp	r0, #0
   1ecae:	d142      	bne.n	1ed36 <ip_interface_open+0xd6>
   1ecb0:	f247 0201 	movw	r2, #28673	; 0x7001
   1ecb4:	f04f 33ff 	mov.w	r3, #4294967295
   1ecb8:	2108      	movs	r1, #8
   1ecba:	9d01      	ldr	r5, [sp, #4]
   1ecbc:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   1ecc0:	60ea      	str	r2, [r5, #12]
   1ecc2:	7268      	strb	r0, [r5, #9]
   1ecc4:	72a8      	strb	r0, [r5, #10]
   1ecc6:	72e8      	strb	r0, [r5, #11]
   1ecc8:	7229      	strb	r1, [r5, #8]
   1ecca:	742b      	strb	r3, [r5, #16]
   1eccc:	746b      	strb	r3, [r5, #17]
   1ecce:	74ab      	strb	r3, [r5, #18]
   1ecd0:	74eb      	strb	r3, [r5, #19]
   1ecd2:	2f0a      	cmp	r7, #10
   1ecd4:	bf0c      	ite	eq
   1ecd6:	2202      	moveq	r2, #2
   1ecd8:	2201      	movne	r2, #1
   1ecda:	68ab      	ldr	r3, [r5, #8]
   1ecdc:	61ee      	str	r6, [r5, #28]
   1ecde:	330c      	adds	r3, #12
   1ece0:	61ac      	str	r4, [r5, #24]
   1ece2:	616a      	str	r2, [r5, #20]
   1ece4:	60ab      	str	r3, [r5, #8]
   1ece6:	f247 0101 	movw	r1, #28673	; 0x7001
   1ecea:	4628      	mov	r0, r5
   1ecec:	9f00      	ldr	r7, [sp, #0]
   1ecee:	f7fc fdb3 	bl	1b858 <rpc_ip_client_request_send>
   1ecf2:	4606      	mov	r6, r0
   1ecf4:	b338      	cbz	r0, 1ed46 <ip_interface_open+0xe6>
   1ecf6:	6828      	ldr	r0, [r5, #0]
   1ecf8:	b108      	cbz	r0, 1ecfe <ip_interface_open+0x9e>
   1ecfa:	f7fc fdcb 	bl	1b894 <rpc_ip_client_data_free>
   1ecfe:	4628      	mov	r0, r5
   1ed00:	f7fc fdc0 	bl	1b884 <rpc_ip_client_message_free>
   1ed04:	2301      	movs	r3, #1
   1ed06:	2523      	movs	r5, #35	; 0x23
   1ed08:	603b      	str	r3, [r7, #0]
   1ed0a:	4640      	mov	r0, r8
   1ed0c:	f001 fa14 	bl	20138 <interface_socket_free>
   1ed10:	4628      	mov	r0, r5
   1ed12:	f007 fffb 	bl	26d0c <bsd_os_errno_set>
   1ed16:	f04f 38ff 	mov.w	r8, #4294967295
   1ed1a:	4640      	mov	r0, r8
   1ed1c:	b002      	add	sp, #8
   1ed1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed22:	2901      	cmp	r1, #1
   1ed24:	d00c      	beq.n	1ed40 <ip_interface_open+0xe0>
   1ed26:	2a02      	cmp	r2, #2
   1ed28:	d0ae      	beq.n	1ec88 <ip_interface_open+0x28>
   1ed2a:	2016      	movs	r0, #22
   1ed2c:	f007 ffee 	bl	26d0c <bsd_os_errno_set>
   1ed30:	f04f 38ff 	mov.w	r8, #4294967295
   1ed34:	e7f1      	b.n	1ed1a <ip_interface_open+0xba>
   1ed36:	9d01      	ldr	r5, [sp, #4]
   1ed38:	2d00      	cmp	r5, #0
   1ed3a:	d1ca      	bne.n	1ecd2 <ip_interface_open+0x72>
   1ed3c:	250c      	movs	r5, #12
   1ed3e:	e7e4      	b.n	1ed0a <ip_interface_open+0xaa>
   1ed40:	2a01      	cmp	r2, #1
   1ed42:	d0a1      	beq.n	1ec88 <ip_interface_open+0x28>
   1ed44:	e7f1      	b.n	1ed2a <ip_interface_open+0xca>
   1ed46:	f04f 33ff 	mov.w	r3, #4294967295
   1ed4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ed4e:	2102      	movs	r1, #2
   1ed50:	4640      	mov	r0, r8
   1ed52:	f001 fa33 	bl	201bc <interface_socket_wait>
   1ed56:	4605      	mov	r5, r0
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	d1d6      	bne.n	1ed0a <ip_interface_open+0xaa>
   1ed5c:	4640      	mov	r0, r8
   1ed5e:	f001 fa9d 	bl	2029c <interface_socket_from_handle_get>
   1ed62:	b118      	cbz	r0, 1ed6c <ip_interface_open+0x10c>
   1ed64:	6845      	ldr	r5, [r0, #4]
   1ed66:	b10d      	cbz	r5, 1ed6c <ip_interface_open+0x10c>
   1ed68:	6046      	str	r6, [r0, #4]
   1ed6a:	e7ce      	b.n	1ed0a <ip_interface_open+0xaa>
   1ed6c:	2c02      	cmp	r4, #2
   1ed6e:	d1d4      	bne.n	1ed1a <ip_interface_open+0xba>
   1ed70:	9b00      	ldr	r3, [sp, #0]
   1ed72:	681a      	ldr	r2, [r3, #0]
   1ed74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1ed78:	601a      	str	r2, [r3, #0]
   1ed7a:	681a      	ldr	r2, [r3, #0]
   1ed7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   1ed80:	601a      	str	r2, [r3, #0]
   1ed82:	e7ca      	b.n	1ed1a <ip_interface_open+0xba>
   1ed84:	202f      	movs	r0, #47	; 0x2f
   1ed86:	f007 ffc1 	bl	26d0c <bsd_os_errno_set>
   1ed8a:	f04f 38ff 	mov.w	r8, #4294967295
   1ed8e:	e7c4      	b.n	1ed1a <ip_interface_open+0xba>
   1ed90:	0001eb75 	.word	0x0001eb75

0001ed94 <ip_interface_close>:
   1ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed98:	b082      	sub	sp, #8
   1ed9a:	4606      	mov	r6, r0
   1ed9c:	f001 fa7e 	bl	2029c <interface_socket_from_handle_get>
   1eda0:	2800      	cmp	r0, #0
   1eda2:	d063      	beq.n	1ee6c <ip_interface_close+0xd8>
   1eda4:	4604      	mov	r4, r0
   1eda6:	2100      	movs	r1, #0
   1eda8:	a802      	add	r0, sp, #8
   1edaa:	6827      	ldr	r7, [r4, #0]
   1edac:	f840 1d04 	str.w	r1, [r0, #-4]!
   1edb0:	f8d4 8014 	ldr.w	r8, [r4, #20]
   1edb4:	f7fc fd3c 	bl	1b830 <rpc_ip_client_request_alloc>
   1edb8:	2800      	cmp	r0, #0
   1edba:	d13a      	bne.n	1ee32 <ip_interface_close+0x9e>
   1edbc:	f247 0309 	movw	r3, #28681	; 0x7009
   1edc0:	2208      	movs	r2, #8
   1edc2:	9d01      	ldr	r5, [sp, #4]
   1edc4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1edc8:	60eb      	str	r3, [r5, #12]
   1edca:	f8c5 8010 	str.w	r8, [r5, #16]
   1edce:	7268      	strb	r0, [r5, #9]
   1edd0:	72a8      	strb	r0, [r5, #10]
   1edd2:	72e8      	strb	r0, [r5, #11]
   1edd4:	722a      	strb	r2, [r5, #8]
   1edd6:	6823      	ldr	r3, [r4, #0]
   1edd8:	f247 0109 	movw	r1, #28681	; 0x7009
   1eddc:	0c1b      	lsrs	r3, r3, #16
   1edde:	041b      	lsls	r3, r3, #16
   1ede0:	f043 030d 	orr.w	r3, r3, #13
   1ede4:	6023      	str	r3, [r4, #0]
   1ede6:	6823      	ldr	r3, [r4, #0]
   1ede8:	4628      	mov	r0, r5
   1edea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1edee:	6023      	str	r3, [r4, #0]
   1edf0:	6823      	ldr	r3, [r4, #0]
   1edf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1edf6:	6023      	str	r3, [r4, #0]
   1edf8:	f7fc fd2e 	bl	1b858 <rpc_ip_client_request_send>
   1edfc:	bb40      	cbnz	r0, 1ee50 <ip_interface_close+0xbc>
   1edfe:	f04f 33ff 	mov.w	r3, #4294967295
   1ee02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ee06:	210e      	movs	r1, #14
   1ee08:	4630      	mov	r0, r6
   1ee0a:	f001 f9d7 	bl	201bc <interface_socket_wait>
   1ee0e:	4604      	mov	r4, r0
   1ee10:	b1a0      	cbz	r0, 1ee3c <ip_interface_close+0xa8>
   1ee12:	4c17      	ldr	r4, [pc, #92]	; (1ee70 <ip_interface_close+0xdc>)
   1ee14:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   1ee18:	b120      	cbz	r0, 1ee24 <ip_interface_close+0x90>
   1ee1a:	f7fc fd33 	bl	1b884 <rpc_ip_client_message_free>
   1ee1e:	2300      	movs	r3, #0
   1ee20:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   1ee24:	4630      	mov	r0, r6
   1ee26:	f001 f987 	bl	20138 <interface_socket_free>
   1ee2a:	2000      	movs	r0, #0
   1ee2c:	b002      	add	sp, #8
   1ee2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee32:	9d01      	ldr	r5, [sp, #4]
   1ee34:	200c      	movs	r0, #12
   1ee36:	2d00      	cmp	r5, #0
   1ee38:	d1cd      	bne.n	1edd6 <ip_interface_close+0x42>
   1ee3a:	e012      	b.n	1ee62 <ip_interface_close+0xce>
   1ee3c:	4630      	mov	r0, r6
   1ee3e:	f001 fa2d 	bl	2029c <interface_socket_from_handle_get>
   1ee42:	2800      	cmp	r0, #0
   1ee44:	d0e5      	beq.n	1ee12 <ip_interface_close+0x7e>
   1ee46:	6843      	ldr	r3, [r0, #4]
   1ee48:	2b00      	cmp	r3, #0
   1ee4a:	d0e2      	beq.n	1ee12 <ip_interface_close+0x7e>
   1ee4c:	6044      	str	r4, [r0, #4]
   1ee4e:	e7e0      	b.n	1ee12 <ip_interface_close+0x7e>
   1ee50:	6828      	ldr	r0, [r5, #0]
   1ee52:	b108      	cbz	r0, 1ee58 <ip_interface_close+0xc4>
   1ee54:	f7fc fd1e 	bl	1b894 <rpc_ip_client_data_free>
   1ee58:	4628      	mov	r0, r5
   1ee5a:	f7fc fd13 	bl	1b884 <rpc_ip_client_message_free>
   1ee5e:	2023      	movs	r0, #35	; 0x23
   1ee60:	6027      	str	r7, [r4, #0]
   1ee62:	f007 ff53 	bl	26d0c <bsd_os_errno_set>
   1ee66:	f04f 30ff 	mov.w	r0, #4294967295
   1ee6a:	e7df      	b.n	1ee2c <ip_interface_close+0x98>
   1ee6c:	2009      	movs	r0, #9
   1ee6e:	e7f8      	b.n	1ee62 <ip_interface_close+0xce>
   1ee70:	200219a4 	.word	0x200219a4

0001ee74 <ip_interface_sendto>:
   1ee74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee78:	2400      	movs	r4, #0
   1ee7a:	b083      	sub	sp, #12
   1ee7c:	4688      	mov	r8, r1
   1ee7e:	4617      	mov	r7, r2
   1ee80:	4699      	mov	r9, r3
   1ee82:	9401      	str	r4, [sp, #4]
   1ee84:	4605      	mov	r5, r0
   1ee86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1ee88:	f001 fa08 	bl	2029c <interface_socket_from_handle_get>
   1ee8c:	2800      	cmp	r0, #0
   1ee8e:	f000 80c2 	beq.w	1f016 <ip_interface_sendto+0x1a2>
   1ee92:	68c3      	ldr	r3, [r0, #12]
   1ee94:	4604      	mov	r4, r0
   1ee96:	2b01      	cmp	r3, #1
   1ee98:	d05c      	beq.n	1ef54 <ip_interface_sendto+0xe0>
   1ee9a:	6822      	ldr	r2, [r4, #0]
   1ee9c:	0391      	lsls	r1, r2, #14
   1ee9e:	f140 80a6 	bpl.w	1efee <ip_interface_sendto+0x17a>
   1eea2:	4639      	mov	r1, r7
   1eea4:	a801      	add	r0, sp, #4
   1eea6:	f7fc fcc3 	bl	1b830 <rpc_ip_client_request_alloc>
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	f040 80aa 	bne.w	1f004 <ip_interface_sendto+0x190>
   1eeb0:	220c      	movs	r2, #12
   1eeb2:	9b01      	ldr	r3, [sp, #4]
   1eeb4:	721a      	strb	r2, [r3, #8]
   1eeb6:	7258      	strb	r0, [r3, #9]
   1eeb8:	7298      	strb	r0, [r3, #10]
   1eeba:	72d8      	strb	r0, [r3, #11]
   1eebc:	b1ee      	cbz	r6, 1eefa <ip_interface_sendto+0x86>
   1eebe:	68a2      	ldr	r2, [r4, #8]
   1eec0:	6871      	ldr	r1, [r6, #4]
   1eec2:	428a      	cmp	r2, r1
   1eec4:	d108      	bne.n	1eed8 <ip_interface_sendto+0x64>
   1eec6:	2a02      	cmp	r2, #2
   1eec8:	f103 001c 	add.w	r0, r3, #28
   1eecc:	7831      	ldrb	r1, [r6, #0]
   1eece:	d045      	beq.n	1ef5c <ip_interface_sendto+0xe8>
   1eed0:	2a0a      	cmp	r2, #10
   1eed2:	d101      	bne.n	1eed8 <ip_interface_sendto+0x64>
   1eed4:	2924      	cmp	r1, #36	; 0x24
   1eed6:	d068      	beq.n	1efaa <ip_interface_sendto+0x136>
   1eed8:	6818      	ldr	r0, [r3, #0]
   1eeda:	b110      	cbz	r0, 1eee2 <ip_interface_sendto+0x6e>
   1eedc:	f7fc fcda 	bl	1b894 <rpc_ip_client_data_free>
   1eee0:	9b01      	ldr	r3, [sp, #4]
   1eee2:	4618      	mov	r0, r3
   1eee4:	f7fc fcce 	bl	1b884 <rpc_ip_client_message_free>
   1eee8:	2016      	movs	r0, #22
   1eeea:	f007 ff0f 	bl	26d0c <bsd_os_errno_set>
   1eeee:	f04f 36ff 	mov.w	r6, #4294967295
   1eef2:	4630      	mov	r0, r6
   1eef4:	b003      	add	sp, #12
   1eef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eefa:	f247 0206 	movw	r2, #28678	; 0x7006
   1eefe:	4616      	mov	r6, r2
   1ef00:	f8c3 9014 	str.w	r9, [r3, #20]
   1ef04:	6961      	ldr	r1, [r4, #20]
   1ef06:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1ef0a:	60da      	str	r2, [r3, #12]
   1ef0c:	6119      	str	r1, [r3, #16]
   1ef0e:	605f      	str	r7, [r3, #4]
   1ef10:	f1b8 0f00 	cmp.w	r8, #0
   1ef14:	d004      	beq.n	1ef20 <ip_interface_sendto+0xac>
   1ef16:	463a      	mov	r2, r7
   1ef18:	4641      	mov	r1, r8
   1ef1a:	6818      	ldr	r0, [r3, #0]
   1ef1c:	f006 ffa3 	bl	25e66 <memcpy>
   1ef20:	6827      	ldr	r7, [r4, #0]
   1ef22:	6823      	ldr	r3, [r4, #0]
   1ef24:	4631      	mov	r1, r6
   1ef26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1ef2a:	6023      	str	r3, [r4, #0]
   1ef2c:	6823      	ldr	r3, [r4, #0]
   1ef2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1ef32:	6023      	str	r3, [r4, #0]
   1ef34:	9e01      	ldr	r6, [sp, #4]
   1ef36:	4630      	mov	r0, r6
   1ef38:	f7fc fc8e 	bl	1b858 <rpc_ip_client_request_send>
   1ef3c:	4680      	mov	r8, r0
   1ef3e:	b1c0      	cbz	r0, 1ef72 <ip_interface_sendto+0xfe>
   1ef40:	6830      	ldr	r0, [r6, #0]
   1ef42:	b108      	cbz	r0, 1ef48 <ip_interface_sendto+0xd4>
   1ef44:	f7fc fca6 	bl	1b894 <rpc_ip_client_data_free>
   1ef48:	4630      	mov	r0, r6
   1ef4a:	f7fc fc9b 	bl	1b884 <rpc_ip_client_message_free>
   1ef4e:	6027      	str	r7, [r4, #0]
   1ef50:	2023      	movs	r0, #35	; 0x23
   1ef52:	e7ca      	b.n	1eeea <ip_interface_sendto+0x76>
   1ef54:	2e00      	cmp	r6, #0
   1ef56:	d0a0      	beq.n	1ee9a <ip_interface_sendto+0x26>
   1ef58:	2016      	movs	r0, #22
   1ef5a:	e7c6      	b.n	1eeea <ip_interface_sendto+0x76>
   1ef5c:	2910      	cmp	r1, #16
   1ef5e:	d1bb      	bne.n	1eed8 <ip_interface_sendto+0x64>
   1ef60:	2204      	movs	r2, #4
   1ef62:	8931      	ldrh	r1, [r6, #8]
   1ef64:	835a      	strh	r2, [r3, #26]
   1ef66:	8319      	strh	r1, [r3, #24]
   1ef68:	f106 010c 	add.w	r1, r6, #12
   1ef6c:	f006 ff7b 	bl	25e66 <memcpy>
   1ef70:	e022      	b.n	1efb8 <ip_interface_sendto+0x144>
   1ef72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ef76:	f04f 33ff 	mov.w	r3, #4294967295
   1ef7a:	4611      	mov	r1, r2
   1ef7c:	4628      	mov	r0, r5
   1ef7e:	f001 f91d 	bl	201bc <interface_socket_wait>
   1ef82:	b140      	cbz	r0, 1ef96 <ip_interface_sendto+0x122>
   1ef84:	6823      	ldr	r3, [r4, #0]
   1ef86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ef8a:	6023      	str	r3, [r4, #0]
   1ef8c:	6823      	ldr	r3, [r4, #0]
   1ef8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1ef92:	6023      	str	r3, [r4, #0]
   1ef94:	e7a9      	b.n	1eeea <ip_interface_sendto+0x76>
   1ef96:	4628      	mov	r0, r5
   1ef98:	f001 f980 	bl	2029c <interface_socket_from_handle_get>
   1ef9c:	4603      	mov	r3, r0
   1ef9e:	b1b8      	cbz	r0, 1efd0 <ip_interface_sendto+0x15c>
   1efa0:	6840      	ldr	r0, [r0, #4]
   1efa2:	b1a8      	cbz	r0, 1efd0 <ip_interface_sendto+0x15c>
   1efa4:	f8c3 8004 	str.w	r8, [r3, #4]
   1efa8:	e7ec      	b.n	1ef84 <ip_interface_sendto+0x110>
   1efaa:	2210      	movs	r2, #16
   1efac:	8931      	ldrh	r1, [r6, #8]
   1efae:	835a      	strh	r2, [r3, #26]
   1efb0:	8319      	strh	r1, [r3, #24]
   1efb2:	18b1      	adds	r1, r6, r2
   1efb4:	f006 ff57 	bl	25e66 <memcpy>
   1efb8:	f247 0207 	movw	r2, #28679	; 0x7007
   1efbc:	9b01      	ldr	r3, [sp, #4]
   1efbe:	4616      	mov	r6, r2
   1efc0:	6899      	ldr	r1, [r3, #8]
   1efc2:	8b58      	ldrh	r0, [r3, #26]
   1efc4:	3104      	adds	r1, #4
   1efc6:	4401      	add	r1, r0
   1efc8:	f8c3 9014 	str.w	r9, [r3, #20]
   1efcc:	6099      	str	r1, [r3, #8]
   1efce:	e799      	b.n	1ef04 <ip_interface_sendto+0x90>
   1efd0:	6823      	ldr	r3, [r4, #0]
   1efd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1efd6:	6023      	str	r3, [r4, #0]
   1efd8:	4c10      	ldr	r4, [pc, #64]	; (1f01c <ip_interface_sendto+0x1a8>)
   1efda:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   1efde:	4618      	mov	r0, r3
   1efe0:	699e      	ldr	r6, [r3, #24]
   1efe2:	f7fc fc4f 	bl	1b884 <rpc_ip_client_message_free>
   1efe6:	2300      	movs	r3, #0
   1efe8:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   1efec:	e781      	b.n	1eef2 <ip_interface_sendto+0x7e>
   1efee:	6822      	ldr	r2, [r4, #0]
   1eff0:	0092      	lsls	r2, r2, #2
   1eff2:	d405      	bmi.n	1f000 <ip_interface_sendto+0x18c>
   1eff4:	2b02      	cmp	r3, #2
   1eff6:	d007      	beq.n	1f008 <ip_interface_sendto+0x194>
   1eff8:	6823      	ldr	r3, [r4, #0]
   1effa:	b29b      	uxth	r3, r3
   1effc:	2b05      	cmp	r3, #5
   1effe:	d003      	beq.n	1f008 <ip_interface_sendto+0x194>
   1f000:	2039      	movs	r0, #57	; 0x39
   1f002:	e772      	b.n	1eeea <ip_interface_sendto+0x76>
   1f004:	200c      	movs	r0, #12
   1f006:	e770      	b.n	1eeea <ip_interface_sendto+0x76>
   1f008:	6823      	ldr	r3, [r4, #0]
   1f00a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1f00e:	bf0c      	ite	eq
   1f010:	2023      	moveq	r0, #35	; 0x23
   1f012:	2039      	movne	r0, #57	; 0x39
   1f014:	e769      	b.n	1eeea <ip_interface_sendto+0x76>
   1f016:	2009      	movs	r0, #9
   1f018:	e767      	b.n	1eeea <ip_interface_sendto+0x76>
   1f01a:	bf00      	nop
   1f01c:	200219a4 	.word	0x200219a4

0001f020 <ip_interface_recvfrom>:
   1f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f024:	b085      	sub	sp, #20
   1f026:	2a00      	cmp	r2, #0
   1f028:	f000 80ea 	beq.w	1f200 <ip_interface_recvfrom+0x1e0>
   1f02c:	468a      	mov	sl, r1
   1f02e:	4699      	mov	r9, r3
   1f030:	4607      	mov	r7, r0
   1f032:	4616      	mov	r6, r2
   1f034:	f001 f932 	bl	2029c <interface_socket_from_handle_get>
   1f038:	4604      	mov	r4, r0
   1f03a:	2800      	cmp	r0, #0
   1f03c:	f000 80e7 	beq.w	1f20e <ip_interface_recvfrom+0x1ee>
   1f040:	6803      	ldr	r3, [r0, #0]
   1f042:	02dd      	lsls	r5, r3, #11
   1f044:	d54f      	bpl.n	1f0e6 <ip_interface_recvfrom+0xc6>
   1f046:	f019 0f02 	tst.w	r9, #2
   1f04a:	bf18      	it	ne
   1f04c:	f04f 0800 	movne.w	r8, #0
   1f050:	f04f 3bff 	mov.w	fp, #4294967295
   1f054:	bf08      	it	eq
   1f056:	6803      	ldreq	r3, [r0, #0]
   1f058:	f009 0510 	and.w	r5, r9, #16
   1f05c:	bf04      	itt	eq
   1f05e:	f083 5880 	eoreq.w	r8, r3, #268435456	; 0x10000000
   1f062:	f3c8 7800 	ubfxeq	r8, r8, #28, #1
   1f066:	6823      	ldr	r3, [r4, #0]
   1f068:	03d8      	lsls	r0, r3, #15
   1f06a:	d556      	bpl.n	1f11a <ip_interface_recvfrom+0xfa>
   1f06c:	6823      	ldr	r3, [r4, #0]
   1f06e:	69a0      	ldr	r0, [r4, #24]
   1f070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1f074:	6023      	str	r3, [r4, #0]
   1f076:	6803      	ldr	r3, [r0, #0]
   1f078:	68db      	ldr	r3, [r3, #12]
   1f07a:	4798      	blx	r3
   1f07c:	f1b0 3fff 	cmp.w	r0, #4294967295
   1f080:	4683      	mov	fp, r0
   1f082:	d069      	beq.n	1f158 <ip_interface_recvfrom+0x138>
   1f084:	4286      	cmp	r6, r0
   1f086:	dd03      	ble.n	1f090 <ip_interface_recvfrom+0x70>
   1f088:	68e3      	ldr	r3, [r4, #12]
   1f08a:	2b01      	cmp	r3, #1
   1f08c:	f000 8090 	beq.w	1f1b0 <ip_interface_recvfrom+0x190>
   1f090:	2500      	movs	r5, #0
   1f092:	69a0      	ldr	r0, [r4, #24]
   1f094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f096:	b103      	cbz	r3, 1f09a <ip_interface_recvfrom+0x7a>
   1f098:	681b      	ldr	r3, [r3, #0]
   1f09a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f09c:	e9cd a600 	strd	sl, r6, [sp]
   1f0a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f0a4:	6803      	ldr	r3, [r0, #0]
   1f0a6:	464a      	mov	r2, r9
   1f0a8:	689b      	ldr	r3, [r3, #8]
   1f0aa:	4669      	mov	r1, sp
   1f0ac:	4798      	blx	r3
   1f0ae:	4683      	mov	fp, r0
   1f0b0:	69a0      	ldr	r0, [r4, #24]
   1f0b2:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f0b6:	6803      	ldr	r3, [r0, #0]
   1f0b8:	bf18      	it	ne
   1f0ba:	2601      	movne	r6, #1
   1f0bc:	68db      	ldr	r3, [r3, #12]
   1f0be:	bf0a      	itet	eq
   1f0c0:	2600      	moveq	r6, #0
   1f0c2:	f04f 0800 	movne.w	r8, #0
   1f0c6:	f04f 0823 	moveq.w	r8, #35	; 0x23
   1f0ca:	4798      	blx	r3
   1f0cc:	3001      	adds	r0, #1
   1f0ce:	d11f      	bne.n	1f110 <ip_interface_recvfrom+0xf0>
   1f0d0:	b10d      	cbz	r5, 1f0d6 <ip_interface_recvfrom+0xb6>
   1f0d2:	2e00      	cmp	r6, #0
   1f0d4:	d073      	beq.n	1f1be <ip_interface_recvfrom+0x19e>
   1f0d6:	f1b8 0f00 	cmp.w	r8, #0
   1f0da:	f040 808b 	bne.w	1f1f4 <ip_interface_recvfrom+0x1d4>
   1f0de:	4658      	mov	r0, fp
   1f0e0:	b005      	add	sp, #20
   1f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0e6:	6803      	ldr	r3, [r0, #0]
   1f0e8:	b29b      	uxth	r3, r3
   1f0ea:	2b06      	cmp	r3, #6
   1f0ec:	d074      	beq.n	1f1d8 <ip_interface_recvfrom+0x1b8>
   1f0ee:	6803      	ldr	r3, [r0, #0]
   1f0f0:	b29b      	uxth	r3, r3
   1f0f2:	2b07      	cmp	r3, #7
   1f0f4:	bf0c      	ite	eq
   1f0f6:	f04f 0809 	moveq.w	r8, #9
   1f0fa:	f04f 0839 	movne.w	r8, #57	; 0x39
   1f0fe:	69a0      	ldr	r0, [r4, #24]
   1f100:	6803      	ldr	r3, [r0, #0]
   1f102:	68db      	ldr	r3, [r3, #12]
   1f104:	4798      	blx	r3
   1f106:	3001      	adds	r0, #1
   1f108:	bf18      	it	ne
   1f10a:	f04f 3bff 	movne.w	fp, #4294967295
   1f10e:	d071      	beq.n	1f1f4 <ip_interface_recvfrom+0x1d4>
   1f110:	6823      	ldr	r3, [r4, #0]
   1f112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f116:	6023      	str	r3, [r4, #0]
   1f118:	e7dd      	b.n	1f0d6 <ip_interface_recvfrom+0xb6>
   1f11a:	f1b8 0f00 	cmp.w	r8, #0
   1f11e:	d072      	beq.n	1f206 <ip_interface_recvfrom+0x1e6>
   1f120:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f124:	69e3      	ldr	r3, [r4, #28]
   1f126:	4611      	mov	r1, r2
   1f128:	2b00      	cmp	r3, #0
   1f12a:	bf08      	it	eq
   1f12c:	f04f 33ff 	moveq.w	r3, #4294967295
   1f130:	4638      	mov	r0, r7
   1f132:	f001 f843 	bl	201bc <interface_socket_wait>
   1f136:	4680      	mov	r8, r0
   1f138:	b358      	cbz	r0, 1f192 <ip_interface_recvfrom+0x172>
   1f13a:	6823      	ldr	r3, [r4, #0]
   1f13c:	69a0      	ldr	r0, [r4, #24]
   1f13e:	031b      	lsls	r3, r3, #12
   1f140:	d521      	bpl.n	1f186 <ip_interface_recvfrom+0x166>
   1f142:	6823      	ldr	r3, [r4, #0]
   1f144:	b29b      	uxth	r3, r3
   1f146:	2b0d      	cmp	r3, #13
   1f148:	d01d      	beq.n	1f186 <ip_interface_recvfrom+0x166>
   1f14a:	68e5      	ldr	r5, [r4, #12]
   1f14c:	f1a5 0501 	sub.w	r5, r5, #1
   1f150:	fab5 f585 	clz	r5, r5
   1f154:	096d      	lsrs	r5, r5, #5
   1f156:	e79d      	b.n	1f094 <ip_interface_recvfrom+0x74>
   1f158:	6823      	ldr	r3, [r4, #0]
   1f15a:	031a      	lsls	r2, r3, #12
   1f15c:	d5dd      	bpl.n	1f11a <ip_interface_recvfrom+0xfa>
   1f15e:	6823      	ldr	r3, [r4, #0]
   1f160:	b29b      	uxth	r3, r3
   1f162:	2b0d      	cmp	r3, #13
   1f164:	d0d9      	beq.n	1f11a <ip_interface_recvfrom+0xfa>
   1f166:	68e3      	ldr	r3, [r4, #12]
   1f168:	69a0      	ldr	r0, [r4, #24]
   1f16a:	2b01      	cmp	r3, #1
   1f16c:	d037      	beq.n	1f1de <ip_interface_recvfrom+0x1be>
   1f16e:	f04f 0839 	mov.w	r8, #57	; 0x39
   1f172:	6823      	ldr	r3, [r4, #0]
   1f174:	0c1b      	lsrs	r3, r3, #16
   1f176:	041b      	lsls	r3, r3, #16
   1f178:	f043 030d 	orr.w	r3, r3, #13
   1f17c:	6023      	str	r3, [r4, #0]
   1f17e:	6823      	ldr	r3, [r4, #0]
   1f180:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f184:	6023      	str	r3, [r4, #0]
   1f186:	6803      	ldr	r3, [r0, #0]
   1f188:	68db      	ldr	r3, [r3, #12]
   1f18a:	4798      	blx	r3
   1f18c:	3001      	adds	r0, #1
   1f18e:	d1bf      	bne.n	1f110 <ip_interface_recvfrom+0xf0>
   1f190:	e030      	b.n	1f1f4 <ip_interface_recvfrom+0x1d4>
   1f192:	4638      	mov	r0, r7
   1f194:	f001 f882 	bl	2029c <interface_socket_from_handle_get>
   1f198:	b138      	cbz	r0, 1f1aa <ip_interface_recvfrom+0x18a>
   1f19a:	f8d0 8004 	ldr.w	r8, [r0, #4]
   1f19e:	f1b8 0f00 	cmp.w	r8, #0
   1f1a2:	d002      	beq.n	1f1aa <ip_interface_recvfrom+0x18a>
   1f1a4:	2300      	movs	r3, #0
   1f1a6:	6043      	str	r3, [r0, #4]
   1f1a8:	e7c7      	b.n	1f13a <ip_interface_recvfrom+0x11a>
   1f1aa:	f04f 0801 	mov.w	r8, #1
   1f1ae:	e75a      	b.n	1f066 <ip_interface_recvfrom+0x46>
   1f1b0:	b11d      	cbz	r5, 1f1ba <ip_interface_recvfrom+0x19a>
   1f1b2:	6823      	ldr	r3, [r4, #0]
   1f1b4:	00d9      	lsls	r1, r3, #3
   1f1b6:	d5b3      	bpl.n	1f120 <ip_interface_recvfrom+0x100>
   1f1b8:	e76a      	b.n	1f090 <ip_interface_recvfrom+0x70>
   1f1ba:	69a0      	ldr	r0, [r4, #24]
   1f1bc:	e76a      	b.n	1f094 <ip_interface_recvfrom+0x74>
   1f1be:	6823      	ldr	r3, [r4, #0]
   1f1c0:	f04f 0b00 	mov.w	fp, #0
   1f1c4:	0c1b      	lsrs	r3, r3, #16
   1f1c6:	041b      	lsls	r3, r3, #16
   1f1c8:	f043 030d 	orr.w	r3, r3, #13
   1f1cc:	6023      	str	r3, [r4, #0]
   1f1ce:	6823      	ldr	r3, [r4, #0]
   1f1d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f1d4:	6023      	str	r3, [r4, #0]
   1f1d6:	e782      	b.n	1f0de <ip_interface_recvfrom+0xbe>
   1f1d8:	f04f 0809 	mov.w	r8, #9
   1f1dc:	e78f      	b.n	1f0fe <ip_interface_recvfrom+0xde>
   1f1de:	6803      	ldr	r3, [r0, #0]
   1f1e0:	68db      	ldr	r3, [r3, #12]
   1f1e2:	4798      	blx	r3
   1f1e4:	3001      	adds	r0, #1
   1f1e6:	d0ea      	beq.n	1f1be <ip_interface_recvfrom+0x19e>
   1f1e8:	f04f 0823 	mov.w	r8, #35	; 0x23
   1f1ec:	6823      	ldr	r3, [r4, #0]
   1f1ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1f1f2:	6023      	str	r3, [r4, #0]
   1f1f4:	4640      	mov	r0, r8
   1f1f6:	f007 fd89 	bl	26d0c <bsd_os_errno_set>
   1f1fa:	f04f 3bff 	mov.w	fp, #4294967295
   1f1fe:	e76e      	b.n	1f0de <ip_interface_recvfrom+0xbe>
   1f200:	f04f 0816 	mov.w	r8, #22
   1f204:	e7f6      	b.n	1f1f4 <ip_interface_recvfrom+0x1d4>
   1f206:	69a0      	ldr	r0, [r4, #24]
   1f208:	f04f 0823 	mov.w	r8, #35	; 0x23
   1f20c:	e7bb      	b.n	1f186 <ip_interface_recvfrom+0x166>
   1f20e:	f04f 0809 	mov.w	r8, #9
   1f212:	e7ef      	b.n	1f1f4 <ip_interface_recvfrom+0x1d4>

0001f214 <ip_interface_connect>:
   1f214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f218:	b082      	sub	sp, #8
   1f21a:	2900      	cmp	r1, #0
   1f21c:	d043      	beq.n	1f2a6 <ip_interface_connect+0x92>
   1f21e:	2a00      	cmp	r2, #0
   1f220:	d041      	beq.n	1f2a6 <ip_interface_connect+0x92>
   1f222:	4606      	mov	r6, r0
   1f224:	460f      	mov	r7, r1
   1f226:	f001 f839 	bl	2029c <interface_socket_from_handle_get>
   1f22a:	4605      	mov	r5, r0
   1f22c:	2800      	cmp	r0, #0
   1f22e:	f000 8092 	beq.w	1f356 <ip_interface_connect+0x142>
   1f232:	6803      	ldr	r3, [r0, #0]
   1f234:	b29b      	uxth	r3, r3
   1f236:	2b02      	cmp	r3, #2
   1f238:	d004      	beq.n	1f244 <ip_interface_connect+0x30>
   1f23a:	6803      	ldr	r3, [r0, #0]
   1f23c:	b29b      	uxth	r3, r3
   1f23e:	2b04      	cmp	r3, #4
   1f240:	f040 8089 	bne.w	1f356 <ip_interface_connect+0x142>
   1f244:	6829      	ldr	r1, [r5, #0]
   1f246:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   1f24a:	d178      	bne.n	1f33e <ip_interface_connect+0x12a>
   1f24c:	a802      	add	r0, sp, #8
   1f24e:	f840 1d04 	str.w	r1, [r0, #-4]!
   1f252:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1f256:	f7fc faeb 	bl	1b830 <rpc_ip_client_request_alloc>
   1f25a:	bb70      	cbnz	r0, 1f2ba <ip_interface_connect+0xa6>
   1f25c:	2108      	movs	r1, #8
   1f25e:	0433      	lsls	r3, r6, #16
   1f260:	9c01      	ldr	r4, [sp, #4]
   1f262:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   1f266:	f042 0202 	orr.w	r2, r2, #2
   1f26a:	60e2      	str	r2, [r4, #12]
   1f26c:	f8c4 8010 	str.w	r8, [r4, #16]
   1f270:	7260      	strb	r0, [r4, #9]
   1f272:	72a0      	strb	r0, [r4, #10]
   1f274:	72e0      	strb	r0, [r4, #11]
   1f276:	7221      	strb	r1, [r4, #8]
   1f278:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   1f27c:	f043 0302 	orr.w	r3, r3, #2
   1f280:	60e3      	str	r3, [r4, #12]
   1f282:	68a3      	ldr	r3, [r4, #8]
   1f284:	696a      	ldr	r2, [r5, #20]
   1f286:	3304      	adds	r3, #4
   1f288:	6122      	str	r2, [r4, #16]
   1f28a:	60a3      	str	r3, [r4, #8]
   1f28c:	68ab      	ldr	r3, [r5, #8]
   1f28e:	687a      	ldr	r2, [r7, #4]
   1f290:	4293      	cmp	r3, r2
   1f292:	d108      	bne.n	1f2a6 <ip_interface_connect+0x92>
   1f294:	2b02      	cmp	r3, #2
   1f296:	f104 0018 	add.w	r0, r4, #24
   1f29a:	783a      	ldrb	r2, [r7, #0]
   1f29c:	d035      	beq.n	1f30a <ip_interface_connect+0xf6>
   1f29e:	2b0a      	cmp	r3, #10
   1f2a0:	d101      	bne.n	1f2a6 <ip_interface_connect+0x92>
   1f2a2:	2a24      	cmp	r2, #36	; 0x24
   1f2a4:	d00e      	beq.n	1f2c4 <ip_interface_connect+0xb0>
   1f2a6:	2416      	movs	r4, #22
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	f007 fd2f 	bl	26d0c <bsd_os_errno_set>
   1f2ae:	f04f 34ff 	mov.w	r4, #4294967295
   1f2b2:	4620      	mov	r0, r4
   1f2b4:	b002      	add	sp, #8
   1f2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2ba:	9c01      	ldr	r4, [sp, #4]
   1f2bc:	2c00      	cmp	r4, #0
   1f2be:	d04c      	beq.n	1f35a <ip_interface_connect+0x146>
   1f2c0:	0433      	lsls	r3, r6, #16
   1f2c2:	e7d9      	b.n	1f278 <ip_interface_connect+0x64>
   1f2c4:	2210      	movs	r2, #16
   1f2c6:	893b      	ldrh	r3, [r7, #8]
   1f2c8:	18b9      	adds	r1, r7, r2
   1f2ca:	82e2      	strh	r2, [r4, #22]
   1f2cc:	82a3      	strh	r3, [r4, #20]
   1f2ce:	f006 fdca 	bl	25e66 <memcpy>
   1f2d2:	68a3      	ldr	r3, [r4, #8]
   1f2d4:	8ae2      	ldrh	r2, [r4, #22]
   1f2d6:	f247 0102 	movw	r1, #28674	; 0x7002
   1f2da:	4413      	add	r3, r2
   1f2dc:	60a3      	str	r3, [r4, #8]
   1f2de:	f8d5 8000 	ldr.w	r8, [r5]
   1f2e2:	682b      	ldr	r3, [r5, #0]
   1f2e4:	4620      	mov	r0, r4
   1f2e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1f2ea:	602b      	str	r3, [r5, #0]
   1f2ec:	f7fc fab4 	bl	1b858 <rpc_ip_client_request_send>
   1f2f0:	4607      	mov	r7, r0
   1f2f2:	b1a8      	cbz	r0, 1f320 <ip_interface_connect+0x10c>
   1f2f4:	6820      	ldr	r0, [r4, #0]
   1f2f6:	b108      	cbz	r0, 1f2fc <ip_interface_connect+0xe8>
   1f2f8:	f7fc facc 	bl	1b894 <rpc_ip_client_data_free>
   1f2fc:	4620      	mov	r0, r4
   1f2fe:	f7fc fac1 	bl	1b884 <rpc_ip_client_message_free>
   1f302:	2423      	movs	r4, #35	; 0x23
   1f304:	f8c5 8000 	str.w	r8, [r5]
   1f308:	e7ce      	b.n	1f2a8 <ip_interface_connect+0x94>
   1f30a:	2a10      	cmp	r2, #16
   1f30c:	d1cb      	bne.n	1f2a6 <ip_interface_connect+0x92>
   1f30e:	2204      	movs	r2, #4
   1f310:	893b      	ldrh	r3, [r7, #8]
   1f312:	f107 010c 	add.w	r1, r7, #12
   1f316:	82e2      	strh	r2, [r4, #22]
   1f318:	82a3      	strh	r3, [r4, #20]
   1f31a:	f006 fda4 	bl	25e66 <memcpy>
   1f31e:	e7d8      	b.n	1f2d2 <ip_interface_connect+0xbe>
   1f320:	f04f 33ff 	mov.w	r3, #4294967295
   1f324:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f328:	2105      	movs	r1, #5
   1f32a:	4630      	mov	r0, r6
   1f32c:	f000 ff46 	bl	201bc <interface_socket_wait>
   1f330:	4604      	mov	r4, r0
   1f332:	b130      	cbz	r0, 1f342 <ip_interface_connect+0x12e>
   1f334:	2c73      	cmp	r4, #115	; 0x73
   1f336:	d0b7      	beq.n	1f2a8 <ip_interface_connect+0x94>
   1f338:	f8c5 8000 	str.w	r8, [r5]
   1f33c:	e7b4      	b.n	1f2a8 <ip_interface_connect+0x94>
   1f33e:	2472      	movs	r4, #114	; 0x72
   1f340:	e7b2      	b.n	1f2a8 <ip_interface_connect+0x94>
   1f342:	4630      	mov	r0, r6
   1f344:	f000 ffaa 	bl	2029c <interface_socket_from_handle_get>
   1f348:	2800      	cmp	r0, #0
   1f34a:	d0b2      	beq.n	1f2b2 <ip_interface_connect+0x9e>
   1f34c:	6844      	ldr	r4, [r0, #4]
   1f34e:	2c00      	cmp	r4, #0
   1f350:	d0af      	beq.n	1f2b2 <ip_interface_connect+0x9e>
   1f352:	6047      	str	r7, [r0, #4]
   1f354:	e7ee      	b.n	1f334 <ip_interface_connect+0x120>
   1f356:	2409      	movs	r4, #9
   1f358:	e7a6      	b.n	1f2a8 <ip_interface_connect+0x94>
   1f35a:	240c      	movs	r4, #12
   1f35c:	e7a4      	b.n	1f2a8 <ip_interface_connect+0x94>
   1f35e:	bf00      	nop

0001f360 <ip_interface_bind>:
   1f360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f364:	b082      	sub	sp, #8
   1f366:	b389      	cbz	r1, 1f3cc <ip_interface_bind+0x6c>
   1f368:	b382      	cbz	r2, 1f3cc <ip_interface_bind+0x6c>
   1f36a:	4607      	mov	r7, r0
   1f36c:	460e      	mov	r6, r1
   1f36e:	f000 ff95 	bl	2029c <interface_socket_from_handle_get>
   1f372:	4605      	mov	r5, r0
   1f374:	2800      	cmp	r0, #0
   1f376:	d07b      	beq.n	1f470 <ip_interface_bind+0x110>
   1f378:	6803      	ldr	r3, [r0, #0]
   1f37a:	b29b      	uxth	r3, r3
   1f37c:	2b02      	cmp	r3, #2
   1f37e:	d177      	bne.n	1f470 <ip_interface_bind+0x110>
   1f380:	2100      	movs	r1, #0
   1f382:	a802      	add	r0, sp, #8
   1f384:	f840 1d04 	str.w	r1, [r0, #-4]!
   1f388:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1f38c:	f7fc fa50 	bl	1b830 <rpc_ip_client_request_alloc>
   1f390:	bb30      	cbnz	r0, 1f3e0 <ip_interface_bind+0x80>
   1f392:	f247 0305 	movw	r3, #28677	; 0x7005
   1f396:	2208      	movs	r2, #8
   1f398:	9c01      	ldr	r4, [sp, #4]
   1f39a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1f39e:	60e3      	str	r3, [r4, #12]
   1f3a0:	f8c4 8010 	str.w	r8, [r4, #16]
   1f3a4:	7260      	strb	r0, [r4, #9]
   1f3a6:	72a0      	strb	r0, [r4, #10]
   1f3a8:	72e0      	strb	r0, [r4, #11]
   1f3aa:	7222      	strb	r2, [r4, #8]
   1f3ac:	68a3      	ldr	r3, [r4, #8]
   1f3ae:	3304      	adds	r3, #4
   1f3b0:	60a3      	str	r3, [r4, #8]
   1f3b2:	68ab      	ldr	r3, [r5, #8]
   1f3b4:	6872      	ldr	r2, [r6, #4]
   1f3b6:	4293      	cmp	r3, r2
   1f3b8:	d108      	bne.n	1f3cc <ip_interface_bind+0x6c>
   1f3ba:	2b02      	cmp	r3, #2
   1f3bc:	f104 0018 	add.w	r0, r4, #24
   1f3c0:	7832      	ldrb	r2, [r6, #0]
   1f3c2:	d03c      	beq.n	1f43e <ip_interface_bind+0xde>
   1f3c4:	2b0a      	cmp	r3, #10
   1f3c6:	d101      	bne.n	1f3cc <ip_interface_bind+0x6c>
   1f3c8:	2a24      	cmp	r2, #36	; 0x24
   1f3ca:	d00e      	beq.n	1f3ea <ip_interface_bind+0x8a>
   1f3cc:	2416      	movs	r4, #22
   1f3ce:	4620      	mov	r0, r4
   1f3d0:	f007 fc9c 	bl	26d0c <bsd_os_errno_set>
   1f3d4:	f04f 34ff 	mov.w	r4, #4294967295
   1f3d8:	4620      	mov	r0, r4
   1f3da:	b002      	add	sp, #8
   1f3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3e0:	9c01      	ldr	r4, [sp, #4]
   1f3e2:	2c00      	cmp	r4, #0
   1f3e4:	d1e2      	bne.n	1f3ac <ip_interface_bind+0x4c>
   1f3e6:	240c      	movs	r4, #12
   1f3e8:	e7f1      	b.n	1f3ce <ip_interface_bind+0x6e>
   1f3ea:	2210      	movs	r2, #16
   1f3ec:	8933      	ldrh	r3, [r6, #8]
   1f3ee:	18b1      	adds	r1, r6, r2
   1f3f0:	82e2      	strh	r2, [r4, #22]
   1f3f2:	82a3      	strh	r3, [r4, #20]
   1f3f4:	f006 fd37 	bl	25e66 <memcpy>
   1f3f8:	68a3      	ldr	r3, [r4, #8]
   1f3fa:	8ae2      	ldrh	r2, [r4, #22]
   1f3fc:	f247 0105 	movw	r1, #28677	; 0x7005
   1f400:	4413      	add	r3, r2
   1f402:	60a3      	str	r3, [r4, #8]
   1f404:	682b      	ldr	r3, [r5, #0]
   1f406:	4620      	mov	r0, r4
   1f408:	0c1b      	lsrs	r3, r3, #16
   1f40a:	041b      	lsls	r3, r3, #16
   1f40c:	f043 0303 	orr.w	r3, r3, #3
   1f410:	602b      	str	r3, [r5, #0]
   1f412:	682e      	ldr	r6, [r5, #0]
   1f414:	f7fc fa20 	bl	1b858 <rpc_ip_client_request_send>
   1f418:	4680      	mov	r8, r0
   1f41a:	b9d8      	cbnz	r0, 1f454 <ip_interface_bind+0xf4>
   1f41c:	f04f 33ff 	mov.w	r3, #4294967295
   1f420:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f424:	2104      	movs	r1, #4
   1f426:	4638      	mov	r0, r7
   1f428:	f000 fec8 	bl	201bc <interface_socket_wait>
   1f42c:	4604      	mov	r4, r0
   1f42e:	b308      	cbz	r0, 1f474 <ip_interface_bind+0x114>
   1f430:	682b      	ldr	r3, [r5, #0]
   1f432:	0c1b      	lsrs	r3, r3, #16
   1f434:	041b      	lsls	r3, r3, #16
   1f436:	f043 0302 	orr.w	r3, r3, #2
   1f43a:	602b      	str	r3, [r5, #0]
   1f43c:	e7c7      	b.n	1f3ce <ip_interface_bind+0x6e>
   1f43e:	2a10      	cmp	r2, #16
   1f440:	d1c4      	bne.n	1f3cc <ip_interface_bind+0x6c>
   1f442:	2204      	movs	r2, #4
   1f444:	8933      	ldrh	r3, [r6, #8]
   1f446:	f106 010c 	add.w	r1, r6, #12
   1f44a:	82e2      	strh	r2, [r4, #22]
   1f44c:	82a3      	strh	r3, [r4, #20]
   1f44e:	f006 fd0a 	bl	25e66 <memcpy>
   1f452:	e7d1      	b.n	1f3f8 <ip_interface_bind+0x98>
   1f454:	6820      	ldr	r0, [r4, #0]
   1f456:	b108      	cbz	r0, 1f45c <ip_interface_bind+0xfc>
   1f458:	f7fc fa1c 	bl	1b894 <rpc_ip_client_data_free>
   1f45c:	0c36      	lsrs	r6, r6, #16
   1f45e:	0436      	lsls	r6, r6, #16
   1f460:	4620      	mov	r0, r4
   1f462:	f046 0602 	orr.w	r6, r6, #2
   1f466:	f7fc fa0d 	bl	1b884 <rpc_ip_client_message_free>
   1f46a:	2423      	movs	r4, #35	; 0x23
   1f46c:	602e      	str	r6, [r5, #0]
   1f46e:	e7ae      	b.n	1f3ce <ip_interface_bind+0x6e>
   1f470:	2409      	movs	r4, #9
   1f472:	e7ac      	b.n	1f3ce <ip_interface_bind+0x6e>
   1f474:	4638      	mov	r0, r7
   1f476:	f000 ff11 	bl	2029c <interface_socket_from_handle_get>
   1f47a:	2800      	cmp	r0, #0
   1f47c:	d0ac      	beq.n	1f3d8 <ip_interface_bind+0x78>
   1f47e:	6844      	ldr	r4, [r0, #4]
   1f480:	2c00      	cmp	r4, #0
   1f482:	d0a9      	beq.n	1f3d8 <ip_interface_bind+0x78>
   1f484:	f8c0 8004 	str.w	r8, [r0, #4]
   1f488:	e7d2      	b.n	1f430 <ip_interface_bind+0xd0>
   1f48a:	bf00      	nop

0001f48c <ip_interface_listen>:
   1f48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f490:	b082      	sub	sp, #8
   1f492:	4606      	mov	r6, r0
   1f494:	f000 ff02 	bl	2029c <interface_socket_from_handle_get>
   1f498:	2800      	cmp	r0, #0
   1f49a:	d067      	beq.n	1f56c <ip_interface_listen+0xe0>
   1f49c:	6803      	ldr	r3, [r0, #0]
   1f49e:	4605      	mov	r5, r0
   1f4a0:	b29b      	uxth	r3, r3
   1f4a2:	2b04      	cmp	r3, #4
   1f4a4:	d162      	bne.n	1f56c <ip_interface_listen+0xe0>
   1f4a6:	2100      	movs	r1, #0
   1f4a8:	4a32      	ldr	r2, [pc, #200]	; (1f574 <ip_interface_listen+0xe8>)
   1f4aa:	4630      	mov	r0, r6
   1f4ac:	f000 fe58 	bl	20160 <interface_socket_packet_handler_update>
   1f4b0:	4601      	mov	r1, r0
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	d15c      	bne.n	1f570 <ip_interface_listen+0xe4>
   1f4b6:	a802      	add	r0, sp, #8
   1f4b8:	f840 1d04 	str.w	r1, [r0, #-4]!
   1f4bc:	696f      	ldr	r7, [r5, #20]
   1f4be:	f7fc f9b7 	bl	1b830 <rpc_ip_client_request_alloc>
   1f4c2:	bba8      	cbnz	r0, 1f530 <ip_interface_listen+0xa4>
   1f4c4:	f247 0308 	movw	r3, #28680	; 0x7008
   1f4c8:	2208      	movs	r2, #8
   1f4ca:	9c01      	ldr	r4, [sp, #4]
   1f4cc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f4d0:	60e3      	str	r3, [r4, #12]
   1f4d2:	6127      	str	r7, [r4, #16]
   1f4d4:	7260      	strb	r0, [r4, #9]
   1f4d6:	72a0      	strb	r0, [r4, #10]
   1f4d8:	72e0      	strb	r0, [r4, #11]
   1f4da:	7222      	strb	r2, [r4, #8]
   1f4dc:	68a3      	ldr	r3, [r4, #8]
   1f4de:	f247 0108 	movw	r1, #28680	; 0x7008
   1f4e2:	3304      	adds	r3, #4
   1f4e4:	60a3      	str	r3, [r4, #8]
   1f4e6:	682b      	ldr	r3, [r5, #0]
   1f4e8:	4620      	mov	r0, r4
   1f4ea:	0c1b      	lsrs	r3, r3, #16
   1f4ec:	041b      	lsls	r3, r3, #16
   1f4ee:	f043 0306 	orr.w	r3, r3, #6
   1f4f2:	602b      	str	r3, [r5, #0]
   1f4f4:	682f      	ldr	r7, [r5, #0]
   1f4f6:	f7fc f9af 	bl	1b858 <rpc_ip_client_request_send>
   1f4fa:	4680      	mov	r8, r0
   1f4fc:	b9e8      	cbnz	r0, 1f53a <ip_interface_listen+0xae>
   1f4fe:	f04f 33ff 	mov.w	r3, #4294967295
   1f502:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f506:	2107      	movs	r1, #7
   1f508:	4630      	mov	r0, r6
   1f50a:	f000 fe57 	bl	201bc <interface_socket_wait>
   1f50e:	4604      	mov	r4, r0
   1f510:	b308      	cbz	r0, 1f556 <ip_interface_listen+0xca>
   1f512:	682b      	ldr	r3, [r5, #0]
   1f514:	0c1b      	lsrs	r3, r3, #16
   1f516:	041b      	lsls	r3, r3, #16
   1f518:	f043 0304 	orr.w	r3, r3, #4
   1f51c:	602b      	str	r3, [r5, #0]
   1f51e:	4620      	mov	r0, r4
   1f520:	f007 fbf4 	bl	26d0c <bsd_os_errno_set>
   1f524:	f04f 34ff 	mov.w	r4, #4294967295
   1f528:	4620      	mov	r0, r4
   1f52a:	b002      	add	sp, #8
   1f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f530:	9c01      	ldr	r4, [sp, #4]
   1f532:	2c00      	cmp	r4, #0
   1f534:	d1d2      	bne.n	1f4dc <ip_interface_listen+0x50>
   1f536:	240c      	movs	r4, #12
   1f538:	e7f1      	b.n	1f51e <ip_interface_listen+0x92>
   1f53a:	6820      	ldr	r0, [r4, #0]
   1f53c:	b108      	cbz	r0, 1f542 <ip_interface_listen+0xb6>
   1f53e:	f7fc f9a9 	bl	1b894 <rpc_ip_client_data_free>
   1f542:	0c3f      	lsrs	r7, r7, #16
   1f544:	043f      	lsls	r7, r7, #16
   1f546:	4620      	mov	r0, r4
   1f548:	f047 0704 	orr.w	r7, r7, #4
   1f54c:	f7fc f99a 	bl	1b884 <rpc_ip_client_message_free>
   1f550:	2423      	movs	r4, #35	; 0x23
   1f552:	602f      	str	r7, [r5, #0]
   1f554:	e7e3      	b.n	1f51e <ip_interface_listen+0x92>
   1f556:	4630      	mov	r0, r6
   1f558:	f000 fea0 	bl	2029c <interface_socket_from_handle_get>
   1f55c:	2800      	cmp	r0, #0
   1f55e:	d0e3      	beq.n	1f528 <ip_interface_listen+0x9c>
   1f560:	6844      	ldr	r4, [r0, #4]
   1f562:	2c00      	cmp	r4, #0
   1f564:	d0e0      	beq.n	1f528 <ip_interface_listen+0x9c>
   1f566:	f8c0 8004 	str.w	r8, [r0, #4]
   1f56a:	e7d2      	b.n	1f512 <ip_interface_listen+0x86>
   1f56c:	2409      	movs	r4, #9
   1f56e:	e7d6      	b.n	1f51e <ip_interface_listen+0x92>
   1f570:	2423      	movs	r4, #35	; 0x23
   1f572:	e7d4      	b.n	1f51e <ip_interface_listen+0x92>
   1f574:	0001eb75 	.word	0x0001eb75

0001f578 <ip_interface_accept>:
   1f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f57c:	2500      	movs	r5, #0
   1f57e:	b085      	sub	sp, #20
   1f580:	460f      	mov	r7, r1
   1f582:	4690      	mov	r8, r2
   1f584:	9502      	str	r5, [sp, #8]
   1f586:	4606      	mov	r6, r0
   1f588:	f000 fe88 	bl	2029c <interface_socket_from_handle_get>
   1f58c:	4604      	mov	r4, r0
   1f58e:	2800      	cmp	r0, #0
   1f590:	f000 811c 	beq.w	1f7cc <ip_interface_accept+0x254>
   1f594:	6803      	ldr	r3, [r0, #0]
   1f596:	b29b      	uxth	r3, r3
   1f598:	2b07      	cmp	r3, #7
   1f59a:	d10a      	bne.n	1f5b2 <ip_interface_accept+0x3a>
   1f59c:	6803      	ldr	r3, [r0, #0]
   1f59e:	6805      	ldr	r5, [r0, #0]
   1f5a0:	00db      	lsls	r3, r3, #3
   1f5a2:	d416      	bmi.n	1f5d2 <ip_interface_accept+0x5a>
   1f5a4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1f5a8:	d019      	beq.n	1f5de <ip_interface_accept+0x66>
   1f5aa:	6805      	ldr	r5, [r0, #0]
   1f5ac:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1f5b0:	d124      	bne.n	1f5fc <ip_interface_accept+0x84>
   1f5b2:	f04f 0909 	mov.w	r9, #9
   1f5b6:	9b02      	ldr	r3, [sp, #8]
   1f5b8:	b113      	cbz	r3, 1f5c0 <ip_interface_accept+0x48>
   1f5ba:	4628      	mov	r0, r5
   1f5bc:	f000 fdbc 	bl	20138 <interface_socket_free>
   1f5c0:	4648      	mov	r0, r9
   1f5c2:	f04f 39ff 	mov.w	r9, #4294967295
   1f5c6:	f007 fba1 	bl	26d0c <bsd_os_errno_set>
   1f5ca:	4648      	mov	r0, r9
   1f5cc:	b005      	add	sp, #20
   1f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5d2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1f5d6:	d16d      	bne.n	1f6b4 <ip_interface_accept+0x13c>
   1f5d8:	f04f 0923 	mov.w	r9, #35	; 0x23
   1f5dc:	e7eb      	b.n	1f5b6 <ip_interface_accept+0x3e>
   1f5de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f5e2:	f04f 33ff 	mov.w	r3, #4294967295
   1f5e6:	4611      	mov	r1, r2
   1f5e8:	4630      	mov	r0, r6
   1f5ea:	f000 fde7 	bl	201bc <interface_socket_wait>
   1f5ee:	4681      	mov	r9, r0
   1f5f0:	2800      	cmp	r0, #0
   1f5f2:	d07e      	beq.n	1f6f2 <ip_interface_accept+0x17a>
   1f5f4:	6825      	ldr	r5, [r4, #0]
   1f5f6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1f5fa:	d0dc      	beq.n	1f5b6 <ip_interface_accept+0x3e>
   1f5fc:	f04f 30ff 	mov.w	r0, #4294967295
   1f600:	2300      	movs	r3, #0
   1f602:	e9cd 0300 	strd	r0, r3, [sp]
   1f606:	4a75      	ldr	r2, [pc, #468]	; (1f7dc <ip_interface_accept+0x264>)
   1f608:	68e1      	ldr	r1, [r4, #12]
   1f60a:	a802      	add	r0, sp, #8
   1f60c:	f000 fd40 	bl	20090 <interface_socket_allocate>
   1f610:	9b02      	ldr	r3, [sp, #8]
   1f612:	4605      	mov	r5, r0
   1f614:	2b00      	cmp	r3, #0
   1f616:	f000 80dd 	beq.w	1f7d4 <ip_interface_accept+0x25c>
   1f61a:	2100      	movs	r1, #0
   1f61c:	6922      	ldr	r2, [r4, #16]
   1f61e:	a804      	add	r0, sp, #16
   1f620:	611a      	str	r2, [r3, #16]
   1f622:	68a2      	ldr	r2, [r4, #8]
   1f624:	f840 1d04 	str.w	r1, [r0, #-4]!
   1f628:	609a      	str	r2, [r3, #8]
   1f62a:	68e2      	ldr	r2, [r4, #12]
   1f62c:	60da      	str	r2, [r3, #12]
   1f62e:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1f632:	f7fc f8fd 	bl	1b830 <rpc_ip_client_request_alloc>
   1f636:	2800      	cmp	r0, #0
   1f638:	d143      	bne.n	1f6c2 <ip_interface_accept+0x14a>
   1f63a:	f247 030c 	movw	r3, #28684	; 0x700c
   1f63e:	2108      	movs	r1, #8
   1f640:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f644:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f648:	f8cb 300c 	str.w	r3, [fp, #12]
   1f64c:	f8cb 9010 	str.w	r9, [fp, #16]
   1f650:	f88b 0009 	strb.w	r0, [fp, #9]
   1f654:	f88b 000a 	strb.w	r0, [fp, #10]
   1f658:	f88b 000b 	strb.w	r0, [fp, #11]
   1f65c:	f88b 1008 	strb.w	r1, [fp, #8]
   1f660:	6823      	ldr	r3, [r4, #0]
   1f662:	f247 010c 	movw	r1, #28684	; 0x700c
   1f666:	0c1b      	lsrs	r3, r3, #16
   1f668:	041b      	lsls	r3, r3, #16
   1f66a:	f043 0308 	orr.w	r3, r3, #8
   1f66e:	6023      	str	r3, [r4, #0]
   1f670:	4658      	mov	r0, fp
   1f672:	f8d4 9000 	ldr.w	r9, [r4]
   1f676:	f7fc f8ef 	bl	1b858 <rpc_ip_client_request_send>
   1f67a:	4682      	mov	sl, r0
   1f67c:	bb48      	cbnz	r0, 1f6d2 <ip_interface_accept+0x15a>
   1f67e:	6822      	ldr	r2, [r4, #0]
   1f680:	9900      	ldr	r1, [sp, #0]
   1f682:	f04f 33ff 	mov.w	r3, #4294967295
   1f686:	400a      	ands	r2, r1
   1f688:	6022      	str	r2, [r4, #0]
   1f68a:	2109      	movs	r1, #9
   1f68c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f690:	4630      	mov	r0, r6
   1f692:	f000 fd93 	bl	201bc <interface_socket_wait>
   1f696:	4681      	mov	r9, r0
   1f698:	2800      	cmp	r0, #0
   1f69a:	f000 8085 	beq.w	1f7a8 <ip_interface_accept+0x230>
   1f69e:	6823      	ldr	r3, [r4, #0]
   1f6a0:	9a01      	ldr	r2, [sp, #4]
   1f6a2:	431a      	orrs	r2, r3
   1f6a4:	6022      	str	r2, [r4, #0]
   1f6a6:	6823      	ldr	r3, [r4, #0]
   1f6a8:	0c1b      	lsrs	r3, r3, #16
   1f6aa:	041b      	lsls	r3, r3, #16
   1f6ac:	f043 0307 	orr.w	r3, r3, #7
   1f6b0:	6023      	str	r3, [r4, #0]
   1f6b2:	e780      	b.n	1f5b6 <ip_interface_accept+0x3e>
   1f6b4:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   1f6b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f6bc:	e9cd 2300 	strd	r2, r3, [sp]
   1f6c0:	e7a1      	b.n	1f606 <ip_interface_accept+0x8e>
   1f6c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f6c6:	f04f 090c 	mov.w	r9, #12
   1f6ca:	f1bb 0f00 	cmp.w	fp, #0
   1f6ce:	d1c7      	bne.n	1f660 <ip_interface_accept+0xe8>
   1f6d0:	e771      	b.n	1f5b6 <ip_interface_accept+0x3e>
   1f6d2:	f8db 0000 	ldr.w	r0, [fp]
   1f6d6:	b108      	cbz	r0, 1f6dc <ip_interface_accept+0x164>
   1f6d8:	f7fc f8dc 	bl	1b894 <rpc_ip_client_data_free>
   1f6dc:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1f6e0:	4658      	mov	r0, fp
   1f6e2:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1f6e6:	f7fc f8cd 	bl	1b884 <rpc_ip_client_message_free>
   1f6ea:	f049 0307 	orr.w	r3, r9, #7
   1f6ee:	6023      	str	r3, [r4, #0]
   1f6f0:	e772      	b.n	1f5d8 <ip_interface_accept+0x60>
   1f6f2:	4630      	mov	r0, r6
   1f6f4:	f000 fdd2 	bl	2029c <interface_socket_from_handle_get>
   1f6f8:	b130      	cbz	r0, 1f708 <ip_interface_accept+0x190>
   1f6fa:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1f6fe:	f1b9 0f00 	cmp.w	r9, #0
   1f702:	d001      	beq.n	1f708 <ip_interface_accept+0x190>
   1f704:	6045      	str	r5, [r0, #4]
   1f706:	e775      	b.n	1f5f4 <ip_interface_accept+0x7c>
   1f708:	6823      	ldr	r3, [r4, #0]
   1f70a:	03d9      	lsls	r1, r3, #15
   1f70c:	f53f af76 	bmi.w	1f5fc <ip_interface_accept+0x84>
   1f710:	4d33      	ldr	r5, [pc, #204]	; (1f7e0 <ip_interface_accept+0x268>)
   1f712:	9902      	ldr	r1, [sp, #8]
   1f714:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1f718:	699b      	ldr	r3, [r3, #24]
   1f71a:	614b      	str	r3, [r1, #20]
   1f71c:	b147      	cbz	r7, 1f730 <ip_interface_accept+0x1b8>
   1f71e:	688b      	ldr	r3, [r1, #8]
   1f720:	2b0a      	cmp	r3, #10
   1f722:	d024      	beq.n	1f76e <ip_interface_accept+0x1f6>
   1f724:	2b02      	cmp	r3, #2
   1f726:	d103      	bne.n	1f730 <ip_interface_accept+0x1b8>
   1f728:	f8d8 2000 	ldr.w	r2, [r8]
   1f72c:	2a10      	cmp	r2, #16
   1f72e:	d032      	beq.n	1f796 <ip_interface_accept+0x21e>
   1f730:	680a      	ldr	r2, [r1, #0]
   1f732:	482c      	ldr	r0, [pc, #176]	; (1f7e4 <ip_interface_accept+0x26c>)
   1f734:	4002      	ands	r2, r0
   1f736:	f042 0205 	orr.w	r2, r2, #5
   1f73a:	600a      	str	r2, [r1, #0]
   1f73c:	9a02      	ldr	r2, [sp, #8]
   1f73e:	6811      	ldr	r1, [r2, #0]
   1f740:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   1f744:	6011      	str	r1, [r2, #0]
   1f746:	6811      	ldr	r1, [r2, #0]
   1f748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1f74c:	6011      	str	r1, [r2, #0]
   1f74e:	6823      	ldr	r3, [r4, #0]
   1f750:	4003      	ands	r3, r0
   1f752:	f043 0307 	orr.w	r3, r3, #7
   1f756:	6023      	str	r3, [r4, #0]
   1f758:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1f75c:	f7fc f892 	bl	1b884 <rpc_ip_client_message_free>
   1f760:	2300      	movs	r3, #0
   1f762:	4648      	mov	r0, r9
   1f764:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   1f768:	b005      	add	sp, #20
   1f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f76e:	f8d8 2000 	ldr.w	r2, [r8]
   1f772:	2a24      	cmp	r2, #36	; 0x24
   1f774:	d1dc      	bne.n	1f730 <ip_interface_accept+0x1b8>
   1f776:	703a      	strb	r2, [r7, #0]
   1f778:	2210      	movs	r2, #16
   1f77a:	607b      	str	r3, [r7, #4]
   1f77c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1f780:	f107 0010 	add.w	r0, r7, #16
   1f784:	8b9b      	ldrh	r3, [r3, #28]
   1f786:	813b      	strh	r3, [r7, #8]
   1f788:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   1f78c:	3120      	adds	r1, #32
   1f78e:	f006 fb6a 	bl	25e66 <memcpy>
   1f792:	9902      	ldr	r1, [sp, #8]
   1f794:	e7cc      	b.n	1f730 <ip_interface_accept+0x1b8>
   1f796:	703a      	strb	r2, [r7, #0]
   1f798:	607b      	str	r3, [r7, #4]
   1f79a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   1f79e:	f107 000c 	add.w	r0, r7, #12
   1f7a2:	8b9b      	ldrh	r3, [r3, #28]
   1f7a4:	2204      	movs	r2, #4
   1f7a6:	e7ee      	b.n	1f786 <ip_interface_accept+0x20e>
   1f7a8:	4630      	mov	r0, r6
   1f7aa:	f000 fd77 	bl	2029c <interface_socket_from_handle_get>
   1f7ae:	b138      	cbz	r0, 1f7c0 <ip_interface_accept+0x248>
   1f7b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1f7b4:	f1b9 0f00 	cmp.w	r9, #0
   1f7b8:	d002      	beq.n	1f7c0 <ip_interface_accept+0x248>
   1f7ba:	f8c0 a004 	str.w	sl, [r0, #4]
   1f7be:	e76e      	b.n	1f69e <ip_interface_accept+0x126>
   1f7c0:	6823      	ldr	r3, [r4, #0]
   1f7c2:	9a01      	ldr	r2, [sp, #4]
   1f7c4:	46a9      	mov	r9, r5
   1f7c6:	4313      	orrs	r3, r2
   1f7c8:	6023      	str	r3, [r4, #0]
   1f7ca:	e7a1      	b.n	1f710 <ip_interface_accept+0x198>
   1f7cc:	4605      	mov	r5, r0
   1f7ce:	f04f 0909 	mov.w	r9, #9
   1f7d2:	e6f0      	b.n	1f5b6 <ip_interface_accept+0x3e>
   1f7d4:	f04f 090c 	mov.w	r9, #12
   1f7d8:	e6f2      	b.n	1f5c0 <ip_interface_accept+0x48>
   1f7da:	bf00      	nop
   1f7dc:	0001eb75 	.word	0x0001eb75
   1f7e0:	200219a4 	.word	0x200219a4
   1f7e4:	ffff0000 	.word	0xffff0000

0001f7e8 <ip_interface_setopt>:
   1f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7ec:	2901      	cmp	r1, #1
   1f7ee:	b082      	sub	sp, #8
   1f7f0:	f040 80a2 	bne.w	1f938 <ip_interface_setopt+0x150>
   1f7f4:	4616      	mov	r6, r2
   1f7f6:	461d      	mov	r5, r3
   1f7f8:	4607      	mov	r7, r0
   1f7fa:	f000 fd4f 	bl	2029c <interface_socket_from_handle_get>
   1f7fe:	4604      	mov	r4, r0
   1f800:	2800      	cmp	r0, #0
   1f802:	f000 809f 	beq.w	1f944 <ip_interface_setopt+0x15c>
   1f806:	2e14      	cmp	r6, #20
   1f808:	d06f      	beq.n	1f8ea <ip_interface_setopt+0x102>
   1f80a:	2e19      	cmp	r6, #25
   1f80c:	d163      	bne.n	1f8d6 <ip_interface_setopt+0xee>
   1f80e:	2d00      	cmp	r5, #0
   1f810:	f000 809a 	beq.w	1f948 <ip_interface_setopt+0x160>
   1f814:	4628      	mov	r0, r5
   1f816:	f006 fabb 	bl	25d90 <strlen>
   1f81a:	9b08      	ldr	r3, [sp, #32]
   1f81c:	4298      	cmp	r0, r3
   1f81e:	f040 8093 	bne.w	1f948 <ip_interface_setopt+0x160>
   1f822:	6823      	ldr	r3, [r4, #0]
   1f824:	b29b      	uxth	r3, r3
   1f826:	2b02      	cmp	r3, #2
   1f828:	f040 808c 	bne.w	1f944 <ip_interface_setopt+0x15c>
   1f82c:	4629      	mov	r1, r5
   1f82e:	68a0      	ldr	r0, [r4, #8]
   1f830:	f7fe fdb8 	bl	1e3a4 <pdn_interface_pdn_id_get>
   1f834:	9000      	str	r0, [sp, #0]
   1f836:	3001      	adds	r0, #1
   1f838:	f000 8088 	beq.w	1f94c <ip_interface_setopt+0x164>
   1f83c:	6823      	ldr	r3, [r4, #0]
   1f83e:	025a      	lsls	r2, r3, #9
   1f840:	d467      	bmi.n	1f912 <ip_interface_setopt+0x12a>
   1f842:	6823      	ldr	r3, [r4, #0]
   1f844:	021b      	lsls	r3, r3, #8
   1f846:	d464      	bmi.n	1f912 <ip_interface_setopt+0x12a>
   1f848:	2200      	movs	r2, #0
   1f84a:	6826      	ldr	r6, [r4, #0]
   1f84c:	6823      	ldr	r3, [r4, #0]
   1f84e:	a802      	add	r0, sp, #8
   1f850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1f854:	6023      	str	r3, [r4, #0]
   1f856:	2104      	movs	r1, #4
   1f858:	f840 2d04 	str.w	r2, [r0, #-4]!
   1f85c:	f8d4 8014 	ldr.w	r8, [r4, #20]
   1f860:	f7fb ffe6 	bl	1b830 <rpc_ip_client_request_alloc>
   1f864:	2800      	cmp	r0, #0
   1f866:	d161      	bne.n	1f92c <ip_interface_setopt+0x144>
   1f868:	f247 0303 	movw	r3, #28675	; 0x7003
   1f86c:	2208      	movs	r2, #8
   1f86e:	9d01      	ldr	r5, [sp, #4]
   1f870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   1f874:	60eb      	str	r3, [r5, #12]
   1f876:	f8c5 8010 	str.w	r8, [r5, #16]
   1f87a:	7268      	strb	r0, [r5, #9]
   1f87c:	72a8      	strb	r0, [r5, #10]
   1f87e:	72e8      	strb	r0, [r5, #11]
   1f880:	722a      	strb	r2, [r5, #8]
   1f882:	f04f 0c08 	mov.w	ip, #8
   1f886:	2300      	movs	r3, #0
   1f888:	2010      	movs	r0, #16
   1f88a:	2130      	movs	r1, #48	; 0x30
   1f88c:	68aa      	ldr	r2, [r5, #8]
   1f88e:	756b      	strb	r3, [r5, #21]
   1f890:	4462      	add	r2, ip
   1f892:	60aa      	str	r2, [r5, #8]
   1f894:	75ab      	strb	r3, [r5, #22]
   1f896:	75eb      	strb	r3, [r5, #23]
   1f898:	76ab      	strb	r3, [r5, #26]
   1f89a:	76eb      	strb	r3, [r5, #27]
   1f89c:	f885 c014 	strb.w	ip, [r5, #20]
   1f8a0:	7628      	strb	r0, [r5, #24]
   1f8a2:	7669      	strb	r1, [r5, #25]
   1f8a4:	2204      	movs	r2, #4
   1f8a6:	4669      	mov	r1, sp
   1f8a8:	6828      	ldr	r0, [r5, #0]
   1f8aa:	f006 fadc 	bl	25e66 <memcpy>
   1f8ae:	f247 0103 	movw	r1, #28675	; 0x7003
   1f8b2:	4628      	mov	r0, r5
   1f8b4:	f7fb ffd0 	bl	1b858 <rpc_ip_client_request_send>
   1f8b8:	4680      	mov	r8, r0
   1f8ba:	bb60      	cbnz	r0, 1f916 <ip_interface_setopt+0x12e>
   1f8bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f8c0:	f04f 33ff 	mov.w	r3, #4294967295
   1f8c4:	4611      	mov	r1, r2
   1f8c6:	4638      	mov	r0, r7
   1f8c8:	f000 fc78 	bl	201bc <interface_socket_wait>
   1f8cc:	4605      	mov	r5, r0
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	d03e      	beq.n	1f950 <ip_interface_setopt+0x168>
   1f8d2:	6026      	str	r6, [r4, #0]
   1f8d4:	e000      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f8d6:	252a      	movs	r5, #42	; 0x2a
   1f8d8:	4628      	mov	r0, r5
   1f8da:	f007 fa17 	bl	26d0c <bsd_os_errno_set>
   1f8de:	f04f 35ff 	mov.w	r5, #4294967295
   1f8e2:	4628      	mov	r0, r5
   1f8e4:	b002      	add	sp, #8
   1f8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f8ea:	b36d      	cbz	r5, 1f948 <ip_interface_setopt+0x160>
   1f8ec:	9b08      	ldr	r3, [sp, #32]
   1f8ee:	2b08      	cmp	r3, #8
   1f8f0:	d12c      	bne.n	1f94c <ip_interface_setopt+0x164>
   1f8f2:	686b      	ldr	r3, [r5, #4]
   1f8f4:	682a      	ldr	r2, [r5, #0]
   1f8f6:	2500      	movs	r5, #0
   1f8f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1f8fc:	481a      	ldr	r0, [pc, #104]	; (1f968 <ip_interface_setopt+0x180>)
   1f8fe:	fba0 0303 	umull	r0, r3, r0, r3
   1f902:	4628      	mov	r0, r5
   1f904:	099b      	lsrs	r3, r3, #6
   1f906:	fb01 3302 	mla	r3, r1, r2, r3
   1f90a:	61e3      	str	r3, [r4, #28]
   1f90c:	b002      	add	sp, #8
   1f90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f912:	2523      	movs	r5, #35	; 0x23
   1f914:	e7e0      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f916:	6828      	ldr	r0, [r5, #0]
   1f918:	b108      	cbz	r0, 1f91e <ip_interface_setopt+0x136>
   1f91a:	f7fb ffbb 	bl	1b894 <rpc_ip_client_data_free>
   1f91e:	4628      	mov	r0, r5
   1f920:	f7fb ffb0 	bl	1b884 <rpc_ip_client_message_free>
   1f924:	2523      	movs	r5, #35	; 0x23
   1f926:	6026      	str	r6, [r4, #0]
   1f928:	6026      	str	r6, [r4, #0]
   1f92a:	e7d5      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f92c:	9d01      	ldr	r5, [sp, #4]
   1f92e:	2d00      	cmp	r5, #0
   1f930:	d1a7      	bne.n	1f882 <ip_interface_setopt+0x9a>
   1f932:	6026      	str	r6, [r4, #0]
   1f934:	250c      	movs	r5, #12
   1f936:	e7cf      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f938:	202a      	movs	r0, #42	; 0x2a
   1f93a:	f007 f9e7 	bl	26d0c <bsd_os_errno_set>
   1f93e:	f04f 35ff 	mov.w	r5, #4294967295
   1f942:	e7ce      	b.n	1f8e2 <ip_interface_setopt+0xfa>
   1f944:	2509      	movs	r5, #9
   1f946:	e7c7      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f948:	250e      	movs	r5, #14
   1f94a:	e7c5      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f94c:	2516      	movs	r5, #22
   1f94e:	e7c3      	b.n	1f8d8 <ip_interface_setopt+0xf0>
   1f950:	4638      	mov	r0, r7
   1f952:	f000 fca3 	bl	2029c <interface_socket_from_handle_get>
   1f956:	b120      	cbz	r0, 1f962 <ip_interface_setopt+0x17a>
   1f958:	6845      	ldr	r5, [r0, #4]
   1f95a:	b115      	cbz	r5, 1f962 <ip_interface_setopt+0x17a>
   1f95c:	f8c0 8004 	str.w	r8, [r0, #4]
   1f960:	e7b7      	b.n	1f8d2 <ip_interface_setopt+0xea>
   1f962:	6026      	str	r6, [r4, #0]
   1f964:	e7bd      	b.n	1f8e2 <ip_interface_setopt+0xfa>
   1f966:	bf00      	nop
   1f968:	10624dd3 	.word	0x10624dd3

0001f96c <ip_interface_getopt>:
   1f96c:	f000 bcbc 	b.w	202e8 <interface_socket_getopt>

0001f970 <ip_interface_getaddrinfo>:
   1f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f974:	f04f 0c00 	mov.w	ip, #0
   1f978:	2401      	movs	r4, #1
   1f97a:	4e6c      	ldr	r6, [pc, #432]	; (1fb2c <ip_interface_getaddrinfo+0x1bc>)
   1f97c:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 1fb38 <ip_interface_getaddrinfo+0x1c8>
   1f980:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1fb3c <ip_interface_getaddrinfo+0x1cc>
   1f984:	b085      	sub	sp, #20
   1f986:	4607      	mov	r7, r0
   1f988:	4615      	mov	r5, r2
   1f98a:	9301      	str	r3, [sp, #4]
   1f98c:	f8a6 c000 	strh.w	ip, [r6]
   1f990:	f8ca 4000 	str.w	r4, [sl]
   1f994:	f8c9 4000 	str.w	r4, [r9]
   1f998:	b171      	cbz	r1, 1f9b8 <ip_interface_getaddrinfo+0x48>
   1f99a:	4608      	mov	r0, r1
   1f99c:	220a      	movs	r2, #10
   1f99e:	4661      	mov	r1, ip
   1f9a0:	f006 f94b 	bl	25c3a <strtol>
   1f9a4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1f9a8:	1e42      	subs	r2, r0, #1
   1f9aa:	429a      	cmp	r2, r3
   1f9ac:	f200 8086 	bhi.w	1fabc <ip_interface_getaddrinfo+0x14c>
   1f9b0:	0203      	lsls	r3, r0, #8
   1f9b2:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   1f9b6:	8030      	strh	r0, [r6, #0]
   1f9b8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1fb40 <ip_interface_getaddrinfo+0x1d0>
   1f9bc:	f8d8 3000 	ldr.w	r3, [r8]
   1f9c0:	2b00      	cmp	r3, #0
   1f9c2:	d177      	bne.n	1fab4 <ip_interface_getaddrinfo+0x144>
   1f9c4:	4a5a      	ldr	r2, [pc, #360]	; (1fb30 <ip_interface_getaddrinfo+0x1c0>)
   1f9c6:	6013      	str	r3, [r2, #0]
   1f9c8:	4a5a      	ldr	r2, [pc, #360]	; (1fb34 <ip_interface_getaddrinfo+0x1c4>)
   1f9ca:	6013      	str	r3, [r2, #0]
   1f9cc:	2f00      	cmp	r7, #0
   1f9ce:	d065      	beq.n	1fa9c <ip_interface_getaddrinfo+0x12c>
   1f9d0:	4638      	mov	r0, r7
   1f9d2:	f006 f9dd 	bl	25d90 <strlen>
   1f9d6:	4683      	mov	fp, r0
   1f9d8:	b125      	cbz	r5, 1f9e4 <ip_interface_getaddrinfo+0x74>
   1f9da:	69ea      	ldr	r2, [r5, #28]
   1f9dc:	b112      	cbz	r2, 1f9e4 <ip_interface_getaddrinfo+0x74>
   1f9de:	6851      	ldr	r1, [r2, #4]
   1f9e0:	2966      	cmp	r1, #102	; 0x66
   1f9e2:	d06f      	beq.n	1fac4 <ip_interface_getaddrinfo+0x154>
   1f9e4:	f04f 32ff 	mov.w	r2, #4294967295
   1f9e8:	2100      	movs	r1, #0
   1f9ea:	ae04      	add	r6, sp, #16
   1f9ec:	f846 1d04 	str.w	r1, [r6, #-4]!
   1f9f0:	4630      	mov	r0, r6
   1f9f2:	4659      	mov	r1, fp
   1f9f4:	9200      	str	r2, [sp, #0]
   1f9f6:	f7fb ff1b 	bl	1b830 <rpc_ip_client_request_alloc>
   1f9fa:	9a00      	ldr	r2, [sp, #0]
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d14f      	bne.n	1faa0 <ip_interface_getaddrinfo+0x130>
   1fa00:	f247 010d 	movw	r1, #28685	; 0x700d
   1fa04:	f04f 0c08 	mov.w	ip, #8
   1fa08:	9c03      	ldr	r4, [sp, #12]
   1fa0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1fa0e:	60e1      	str	r1, [r4, #12]
   1fa10:	6122      	str	r2, [r4, #16]
   1fa12:	7260      	strb	r0, [r4, #9]
   1fa14:	72a0      	strb	r0, [r4, #10]
   1fa16:	72e0      	strb	r0, [r4, #11]
   1fa18:	f884 c008 	strb.w	ip, [r4, #8]
   1fa1c:	2d00      	cmp	r5, #0
   1fa1e:	d06a      	beq.n	1faf6 <ip_interface_getaddrinfo+0x186>
   1fa20:	686a      	ldr	r2, [r5, #4]
   1fa22:	f022 0108 	bic.w	r1, r2, #8
   1fa26:	2902      	cmp	r1, #2
   1fa28:	d16e      	bne.n	1fb08 <ip_interface_getaddrinfo+0x198>
   1fa2a:	68a9      	ldr	r1, [r5, #8]
   1fa2c:	2902      	cmp	r1, #2
   1fa2e:	bf08      	it	eq
   1fa30:	f8ca 1000 	streq.w	r1, [sl]
   1fa34:	2a0a      	cmp	r2, #10
   1fa36:	bf14      	ite	ne
   1fa38:	2201      	movne	r2, #1
   1fa3a:	2202      	moveq	r2, #2
   1fa3c:	61a2      	str	r2, [r4, #24]
   1fa3e:	68ea      	ldr	r2, [r5, #12]
   1fa40:	f8c9 1000 	str.w	r1, [r9]
   1fa44:	6222      	str	r2, [r4, #32]
   1fa46:	68aa      	ldr	r2, [r5, #8]
   1fa48:	61e2      	str	r2, [r4, #28]
   1fa4a:	682a      	ldr	r2, [r5, #0]
   1fa4c:	6162      	str	r2, [r4, #20]
   1fa4e:	68a2      	ldr	r2, [r4, #8]
   1fa50:	3210      	adds	r2, #16
   1fa52:	60a2      	str	r2, [r4, #8]
   1fa54:	b12f      	cbz	r7, 1fa62 <ip_interface_getaddrinfo+0xf2>
   1fa56:	6820      	ldr	r0, [r4, #0]
   1fa58:	b118      	cbz	r0, 1fa62 <ip_interface_getaddrinfo+0xf2>
   1fa5a:	465a      	mov	r2, fp
   1fa5c:	4639      	mov	r1, r7
   1fa5e:	f006 fa02 	bl	25e66 <memcpy>
   1fa62:	2301      	movs	r3, #1
   1fa64:	f247 010d 	movw	r1, #28685	; 0x700d
   1fa68:	4620      	mov	r0, r4
   1fa6a:	f8c8 3000 	str.w	r3, [r8]
   1fa6e:	f7fb fef3 	bl	1b858 <rpc_ip_client_request_send>
   1fa72:	2800      	cmp	r0, #0
   1fa74:	d146      	bne.n	1fb04 <ip_interface_getaddrinfo+0x194>
   1fa76:	f04f 33ff 	mov.w	r3, #4294967295
   1fa7a:	9303      	str	r3, [sp, #12]
   1fa7c:	4631      	mov	r1, r6
   1fa7e:	4620      	mov	r0, r4
   1fa80:	f7f3 fe3c 	bl	136fc <bsd_os_timedwait>
   1fa84:	f8d8 3000 	ldr.w	r3, [r8]
   1fa88:	2b01      	cmp	r3, #1
   1fa8a:	d0f7      	beq.n	1fa7c <ip_interface_getaddrinfo+0x10c>
   1fa8c:	4b29      	ldr	r3, [pc, #164]	; (1fb34 <ip_interface_getaddrinfo+0x1c4>)
   1fa8e:	6818      	ldr	r0, [r3, #0]
   1fa90:	bb60      	cbnz	r0, 1faec <ip_interface_getaddrinfo+0x17c>
   1fa92:	4b27      	ldr	r3, [pc, #156]	; (1fb30 <ip_interface_getaddrinfo+0x1c0>)
   1fa94:	9a01      	ldr	r2, [sp, #4]
   1fa96:	681b      	ldr	r3, [r3, #0]
   1fa98:	6013      	str	r3, [r2, #0]
   1fa9a:	e00c      	b.n	1fab6 <ip_interface_getaddrinfo+0x146>
   1fa9c:	46bb      	mov	fp, r7
   1fa9e:	e79b      	b.n	1f9d8 <ip_interface_getaddrinfo+0x68>
   1faa0:	9c03      	ldr	r4, [sp, #12]
   1faa2:	2c00      	cmp	r4, #0
   1faa4:	d1ba      	bne.n	1fa1c <ip_interface_getaddrinfo+0xac>
   1faa6:	200c      	movs	r0, #12
   1faa8:	2300      	movs	r3, #0
   1faaa:	f8c8 3000 	str.w	r3, [r8]
   1faae:	b005      	add	sp, #20
   1fab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fab4:	2073      	movs	r0, #115	; 0x73
   1fab6:	b005      	add	sp, #20
   1fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fabc:	2016      	movs	r0, #22
   1fabe:	b005      	add	sp, #20
   1fac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fac4:	6891      	ldr	r1, [r2, #8]
   1fac6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1faca:	d18b      	bne.n	1f9e4 <ip_interface_getaddrinfo+0x74>
   1facc:	f240 2102 	movw	r1, #514	; 0x202
   1fad0:	68d0      	ldr	r0, [r2, #12]
   1fad2:	4288      	cmp	r0, r1
   1fad4:	d186      	bne.n	1f9e4 <ip_interface_getaddrinfo+0x74>
   1fad6:	6991      	ldr	r1, [r2, #24]
   1fad8:	2900      	cmp	r1, #0
   1fada:	d083      	beq.n	1f9e4 <ip_interface_getaddrinfo+0x74>
   1fadc:	6868      	ldr	r0, [r5, #4]
   1fade:	f7fe fc61 	bl	1e3a4 <pdn_interface_pdn_id_get>
   1fae2:	1c43      	adds	r3, r0, #1
   1fae4:	f43f af7e 	beq.w	1f9e4 <ip_interface_getaddrinfo+0x74>
   1fae8:	4602      	mov	r2, r0
   1faea:	e77d      	b.n	1f9e8 <ip_interface_getaddrinfo+0x78>
   1faec:	4b11      	ldr	r3, [pc, #68]	; (1fb34 <ip_interface_getaddrinfo+0x1c4>)
   1faee:	6818      	ldr	r0, [r3, #0]
   1faf0:	2800      	cmp	r0, #0
   1faf2:	d0e0      	beq.n	1fab6 <ip_interface_getaddrinfo+0x146>
   1faf4:	e7d8      	b.n	1faa8 <ip_interface_getaddrinfo+0x138>
   1faf6:	4629      	mov	r1, r5
   1faf8:	2210      	movs	r2, #16
   1fafa:	f104 0014 	add.w	r0, r4, #20
   1fafe:	f006 f9df 	bl	25ec0 <memset>
   1fb02:	e7a4      	b.n	1fa4e <ip_interface_getaddrinfo+0xde>
   1fb04:	2023      	movs	r0, #35	; 0x23
   1fb06:	e7cf      	b.n	1faa8 <ip_interface_getaddrinfo+0x138>
   1fb08:	202f      	movs	r0, #47	; 0x2f
   1fb0a:	f007 f8ff 	bl	26d0c <bsd_os_errno_set>
   1fb0e:	68a2      	ldr	r2, [r4, #8]
   1fb10:	3210      	adds	r2, #16
   1fb12:	60a2      	str	r2, [r4, #8]
   1fb14:	b917      	cbnz	r7, 1fb1c <ip_interface_getaddrinfo+0x1ac>
   1fb16:	f04f 30ff 	mov.w	r0, #4294967295
   1fb1a:	e7c5      	b.n	1faa8 <ip_interface_getaddrinfo+0x138>
   1fb1c:	6820      	ldr	r0, [r4, #0]
   1fb1e:	2800      	cmp	r0, #0
   1fb20:	d0f9      	beq.n	1fb16 <ip_interface_getaddrinfo+0x1a6>
   1fb22:	465a      	mov	r2, fp
   1fb24:	4639      	mov	r1, r7
   1fb26:	f006 f99e 	bl	25e66 <memcpy>
   1fb2a:	e7f4      	b.n	1fb16 <ip_interface_getaddrinfo+0x1a6>
   1fb2c:	2002225a 	.word	0x2002225a
   1fb30:	2002199c 	.word	0x2002199c
   1fb34:	20021994 	.word	0x20021994
   1fb38:	2002198c 	.word	0x2002198c
   1fb3c:	20021990 	.word	0x20021990
   1fb40:	20021998 	.word	0x20021998

0001fb44 <ip_interface_freeaddrinfo>:
   1fb44:	b538      	push	{r3, r4, r5, lr}
   1fb46:	4c0b      	ldr	r4, [pc, #44]	; (1fb74 <ip_interface_freeaddrinfo+0x30>)
   1fb48:	6823      	ldr	r3, [r4, #0]
   1fb4a:	2b02      	cmp	r3, #2
   1fb4c:	d000      	beq.n	1fb50 <ip_interface_freeaddrinfo+0xc>
   1fb4e:	bd38      	pop	{r3, r4, r5, pc}
   1fb50:	b130      	cbz	r0, 1fb60 <ip_interface_freeaddrinfo+0x1c>
   1fb52:	4605      	mov	r5, r0
   1fb54:	6940      	ldr	r0, [r0, #20]
   1fb56:	f7f4 fea9 	bl	148ac <nrf_free>
   1fb5a:	4628      	mov	r0, r5
   1fb5c:	f7f4 fea6 	bl	148ac <nrf_free>
   1fb60:	2300      	movs	r3, #0
   1fb62:	4a05      	ldr	r2, [pc, #20]	; (1fb78 <ip_interface_freeaddrinfo+0x34>)
   1fb64:	4905      	ldr	r1, [pc, #20]	; (1fb7c <ip_interface_freeaddrinfo+0x38>)
   1fb66:	6023      	str	r3, [r4, #0]
   1fb68:	6013      	str	r3, [r2, #0]
   1fb6a:	6808      	ldr	r0, [r1, #0]
   1fb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1fb70:	f7fb be90 	b.w	1b894 <rpc_ip_client_data_free>
   1fb74:	20021998 	.word	0x20021998
   1fb78:	20021994 	.word	0x20021994
   1fb7c:	200219a0 	.word	0x200219a0

0001fb80 <rpc_ip_event_handler>:
   1fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb84:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1fb88:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1fb8c:	4605      	mov	r5, r0
   1fb8e:	b089      	sub	sp, #36	; 0x24
   1fb90:	460e      	mov	r6, r1
   1fb92:	68c0      	ldr	r0, [r0, #12]
   1fb94:	d05c      	beq.n	1fc50 <rpc_ip_event_handler+0xd0>
   1fb96:	0c04      	lsrs	r4, r0, #16
   1fb98:	4620      	mov	r0, r4
   1fb9a:	f000 fb7f 	bl	2029c <interface_socket_from_handle_get>
   1fb9e:	f248 030d 	movw	r3, #32781	; 0x800d
   1fba2:	429e      	cmp	r6, r3
   1fba4:	4607      	mov	r7, r0
   1fba6:	46a0      	mov	r8, r4
   1fba8:	d03f      	beq.n	1fc2a <rpc_ip_event_handler+0xaa>
   1fbaa:	2f00      	cmp	r7, #0
   1fbac:	d04c      	beq.n	1fc48 <rpc_ip_event_handler+0xc8>
   1fbae:	4640      	mov	r0, r8
   1fbb0:	4633      	mov	r3, r6
   1fbb2:	462a      	mov	r2, r5
   1fbb4:	4639      	mov	r1, r7
   1fbb6:	f7fc fa1b 	bl	1bff0 <tls_rpc_ip_event_handler>
   1fbba:	2800      	cmp	r0, #0
   1fbbc:	d040      	beq.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fbbe:	f248 0307 	movw	r3, #32775	; 0x8007
   1fbc2:	429e      	cmp	r6, r3
   1fbc4:	d95f      	bls.n	1fc86 <rpc_ip_event_handler+0x106>
   1fbc6:	f248 030c 	movw	r3, #32780	; 0x800c
   1fbca:	429e      	cmp	r6, r3
   1fbcc:	f000 8186 	beq.w	1fedc <rpc_ip_event_handler+0x35c>
   1fbd0:	f240 810a 	bls.w	1fde8 <rpc_ip_event_handler+0x268>
   1fbd4:	f249 0302 	movw	r3, #36866	; 0x9002
   1fbd8:	429e      	cmp	r6, r3
   1fbda:	f000 808b 	beq.w	1fcf4 <rpc_ip_event_handler+0x174>
   1fbde:	f249 0303 	movw	r3, #36867	; 0x9003
   1fbe2:	429e      	cmp	r6, r3
   1fbe4:	f000 8127 	beq.w	1fe36 <rpc_ip_event_handler+0x2b6>
   1fbe8:	f249 0301 	movw	r3, #36865	; 0x9001
   1fbec:	429e      	cmp	r6, r3
   1fbee:	d12b      	bne.n	1fc48 <rpc_ip_event_handler+0xc8>
   1fbf0:	683c      	ldr	r4, [r7, #0]
   1fbf2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1fbf6:	f000 81a6 	beq.w	1ff46 <rpc_ip_event_handler+0x3c6>
   1fbfa:	68ab      	ldr	r3, [r5, #8]
   1fbfc:	2b04      	cmp	r3, #4
   1fbfe:	f200 8210 	bhi.w	20022 <__kernel_ram_size+0x22>
   1fc02:	2300      	movs	r3, #0
   1fc04:	6829      	ldr	r1, [r5, #0]
   1fc06:	686a      	ldr	r2, [r5, #4]
   1fc08:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1fc0c:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1fc10:	69b8      	ldr	r0, [r7, #24]
   1fc12:	a904      	add	r1, sp, #16
   1fc14:	6803      	ldr	r3, [r0, #0]
   1fc16:	685b      	ldr	r3, [r3, #4]
   1fc18:	4798      	blx	r3
   1fc1a:	3001      	adds	r0, #1
   1fc1c:	f000 81e9 	beq.w	1fff2 <rpc_ip_event_handler+0x472>
   1fc20:	683b      	ldr	r3, [r7, #0]
   1fc22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1fc26:	603b      	str	r3, [r7, #0]
   1fc28:	e00a      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fc2a:	f8df 933c 	ldr.w	r9, [pc, #828]	; 1ff68 <rpc_ip_event_handler+0x3e8>
   1fc2e:	682f      	ldr	r7, [r5, #0]
   1fc30:	f8d9 3000 	ldr.w	r3, [r9]
   1fc34:	2b01      	cmp	r3, #1
   1fc36:	d015      	beq.n	1fc64 <rpc_ip_event_handler+0xe4>
   1fc38:	b117      	cbz	r7, 1fc40 <rpc_ip_event_handler+0xc0>
   1fc3a:	4638      	mov	r0, r7
   1fc3c:	f7fb fe2a 	bl	1b894 <rpc_ip_client_data_free>
   1fc40:	2000      	movs	r0, #0
   1fc42:	b009      	add	sp, #36	; 0x24
   1fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc48:	6828      	ldr	r0, [r5, #0]
   1fc4a:	2800      	cmp	r0, #0
   1fc4c:	d1f6      	bne.n	1fc3c <rpc_ip_event_handler+0xbc>
   1fc4e:	e7f7      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fc50:	f000 fadc 	bl	2020c <interface_from_internal_id_search>
   1fc54:	4680      	mov	r8, r0
   1fc56:	f000 fb21 	bl	2029c <interface_socket_from_handle_get>
   1fc5a:	4607      	mov	r7, r0
   1fc5c:	4644      	mov	r4, r8
   1fc5e:	2f00      	cmp	r7, #0
   1fc60:	d1a5      	bne.n	1fbae <rpc_ip_event_handler+0x2e>
   1fc62:	e7f1      	b.n	1fc48 <rpc_ip_event_handler+0xc8>
   1fc64:	696b      	ldr	r3, [r5, #20]
   1fc66:	2b00      	cmp	r3, #0
   1fc68:	d04e      	beq.n	1fd08 <rpc_ip_event_handler+0x188>
   1fc6a:	2b10      	cmp	r3, #16
   1fc6c:	bf96      	itet	ls
   1fc6e:	4ab8      	ldrls	r2, [pc, #736]	; (1ff50 <rpc_ip_event_handler+0x3d0>)
   1fc70:	212d      	movhi	r1, #45	; 0x2d
   1fc72:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   1fc76:	2302      	movs	r3, #2
   1fc78:	4ab6      	ldr	r2, [pc, #728]	; (1ff54 <rpc_ip_event_handler+0x3d4>)
   1fc7a:	6011      	str	r1, [r2, #0]
   1fc7c:	f8c9 3000 	str.w	r3, [r9]
   1fc80:	2f00      	cmp	r7, #0
   1fc82:	d1da      	bne.n	1fc3a <rpc_ip_event_handler+0xba>
   1fc84:	e7dc      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fc86:	f248 0306 	movw	r3, #32774	; 0x8006
   1fc8a:	429e      	cmp	r6, r3
   1fc8c:	f080 80fe 	bcs.w	1fe8c <rpc_ip_event_handler+0x30c>
   1fc90:	f248 0302 	movw	r3, #32770	; 0x8002
   1fc94:	429e      	cmp	r6, r3
   1fc96:	f000 80e0 	beq.w	1fe5a <rpc_ip_event_handler+0x2da>
   1fc9a:	d919      	bls.n	1fcd0 <rpc_ip_event_handler+0x150>
   1fc9c:	f248 0303 	movw	r3, #32771	; 0x8003
   1fca0:	429e      	cmp	r6, r3
   1fca2:	f000 812f 	beq.w	1ff04 <rpc_ip_event_handler+0x384>
   1fca6:	f248 0305 	movw	r3, #32773	; 0x8005
   1fcaa:	429e      	cmp	r6, r3
   1fcac:	d1cc      	bne.n	1fc48 <rpc_ip_event_handler+0xc8>
   1fcae:	683b      	ldr	r3, [r7, #0]
   1fcb0:	b29b      	uxth	r3, r3
   1fcb2:	2b03      	cmp	r3, #3
   1fcb4:	d1c4      	bne.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fcb6:	696b      	ldr	r3, [r5, #20]
   1fcb8:	2b00      	cmp	r3, #0
   1fcba:	f000 81a3 	beq.w	20004 <__kernel_ram_size+0x4>
   1fcbe:	2b10      	cmp	r3, #16
   1fcc0:	f200 80c9 	bhi.w	1fe56 <rpc_ip_event_handler+0x2d6>
   1fcc4:	4aa2      	ldr	r2, [pc, #648]	; (1ff50 <rpc_ip_event_handler+0x3d0>)
   1fcc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1fcca:	607b      	str	r3, [r7, #4]
   1fccc:	2000      	movs	r0, #0
   1fcce:	e7b8      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fcd0:	f248 0301 	movw	r3, #32769	; 0x8001
   1fcd4:	429e      	cmp	r6, r3
   1fcd6:	d1b7      	bne.n	1fc48 <rpc_ip_event_handler+0xc8>
   1fcd8:	683b      	ldr	r3, [r7, #0]
   1fcda:	2b01      	cmp	r3, #1
   1fcdc:	d1b0      	bne.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fcde:	6968      	ldr	r0, [r5, #20]
   1fce0:	2800      	cmp	r0, #0
   1fce2:	f000 818a 	beq.w	1fffa <rpc_ip_event_handler+0x47a>
   1fce6:	2810      	cmp	r0, #16
   1fce8:	f200 80b5 	bhi.w	1fe56 <rpc_ip_event_handler+0x2d6>
   1fcec:	4b98      	ldr	r3, [pc, #608]	; (1ff50 <rpc_ip_event_handler+0x3d0>)
   1fcee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1fcf2:	e7ea      	b.n	1fcca <rpc_ip_event_handler+0x14a>
   1fcf4:	683b      	ldr	r3, [r7, #0]
   1fcf6:	b29b      	uxth	r3, r3
   1fcf8:	2b07      	cmp	r3, #7
   1fcfa:	d1a1      	bne.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fcfc:	683b      	ldr	r3, [r7, #0]
   1fcfe:	2000      	movs	r0, #0
   1fd00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1fd04:	603b      	str	r3, [r7, #0]
   1fd06:	e79c      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fd08:	4b93      	ldr	r3, [pc, #588]	; (1ff58 <rpc_ip_event_handler+0x3d8>)
   1fd0a:	601f      	str	r7, [r3, #0]
   1fd0c:	69ac      	ldr	r4, [r5, #24]
   1fd0e:	0163      	lsls	r3, r4, #5
   1fd10:	4618      	mov	r0, r3
   1fd12:	9303      	str	r3, [sp, #12]
   1fd14:	f7f4 fdac 	bl	14870 <nrf_malloc>
   1fd18:	9002      	str	r0, [sp, #8]
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	f000 80ff 	beq.w	1ff1e <rpc_ip_event_handler+0x39e>
   1fd20:	00e5      	lsls	r5, r4, #3
   1fd22:	1928      	adds	r0, r5, r4
   1fd24:	0080      	lsls	r0, r0, #2
   1fd26:	f7f4 fda3 	bl	14870 <nrf_malloc>
   1fd2a:	2800      	cmp	r0, #0
   1fd2c:	f000 8107 	beq.w	1ff3e <rpc_ip_event_handler+0x3be>
   1fd30:	2c00      	cmp	r4, #0
   1fd32:	d078      	beq.n	1fe26 <rpc_ip_event_handler+0x2a6>
   1fd34:	f105 0210 	add.w	r2, r5, #16
   1fd38:	1883      	adds	r3, r0, r2
   1fd3a:	9301      	str	r3, [sp, #4]
   1fd3c:	9b02      	ldr	r3, [sp, #8]
   1fd3e:	2404      	movs	r4, #4
   1fd40:	f8df a228 	ldr.w	sl, [pc, #552]	; 1ff6c <rpc_ip_event_handler+0x3ec>
   1fd44:	f8df b228 	ldr.w	fp, [pc, #552]	; 1ff70 <rpc_ip_event_handler+0x3f0>
   1fd48:	f100 0810 	add.w	r8, r0, #16
   1fd4c:	f103 0620 	add.w	r6, r3, #32
   1fd50:	e01d      	b.n	1fd8e <rpc_ip_event_handler+0x20e>
   1fd52:	220a      	movs	r2, #10
   1fd54:	f848 2c0c 	str.w	r2, [r8, #-12]
   1fd58:	f04f 0224 	mov.w	r2, #36	; 0x24
   1fd5c:	4640      	mov	r0, r8
   1fd5e:	f808 2c10 	strb.w	r2, [r8, #-16]
   1fd62:	f828 3c08 	strh.w	r3, [r8, #-8]
   1fd66:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1fd6a:	f006 f87c 	bl	25e66 <memcpy>
   1fd6e:	f856 3c10 	ldr.w	r3, [r6, #-16]
   1fd72:	f108 0808 	add.w	r8, r8, #8
   1fd76:	441c      	add	r4, r3
   1fd78:	193b      	adds	r3, r7, r4
   1fd7a:	f846 3c08 	str.w	r3, [r6, #-8]
   1fd7e:	9b01      	ldr	r3, [sp, #4]
   1fd80:	f846 6c04 	str.w	r6, [r6, #-4]
   1fd84:	4543      	cmp	r3, r8
   1fd86:	442c      	add	r4, r5
   1fd88:	f106 0620 	add.w	r6, r6, #32
   1fd8c:	d045      	beq.n	1fe1a <rpc_ip_event_handler+0x29a>
   1fd8e:	593b      	ldr	r3, [r7, r4]
   1fd90:	193a      	adds	r2, r7, r4
   1fd92:	f846 3c20 	str.w	r3, [r6, #-32]
   1fd96:	6853      	ldr	r3, [r2, #4]
   1fd98:	f8da 1000 	ldr.w	r1, [sl]
   1fd9c:	2b02      	cmp	r3, #2
   1fd9e:	bf14      	ite	ne
   1fda0:	2002      	movne	r0, #2
   1fda2:	200a      	moveq	r0, #10
   1fda4:	f8db 3000 	ldr.w	r3, [fp]
   1fda8:	e946 0107 	strd	r0, r1, [r6, #-28]
   1fdac:	f846 3c14 	str.w	r3, [r6, #-20]
   1fdb0:	8a10      	ldrh	r0, [r2, #16]
   1fdb2:	f1a8 0310 	sub.w	r3, r8, #16
   1fdb6:	f846 0c10 	str.w	r0, [r6, #-16]
   1fdba:	8a55      	ldrh	r5, [r2, #18]
   1fdbc:	f846 3c0c 	str.w	r3, [r6, #-12]
   1fdc0:	4b66      	ldr	r3, [pc, #408]	; (1ff5c <rpc_ip_event_handler+0x3dc>)
   1fdc2:	3414      	adds	r4, #20
   1fdc4:	2804      	cmp	r0, #4
   1fdc6:	eb07 0104 	add.w	r1, r7, r4
   1fdca:	881b      	ldrh	r3, [r3, #0]
   1fdcc:	d1c1      	bne.n	1fd52 <rpc_ip_event_handler+0x1d2>
   1fdce:	2210      	movs	r2, #16
   1fdd0:	2002      	movs	r0, #2
   1fdd2:	f828 3c08 	strh.w	r3, [r8, #-8]
   1fdd6:	f848 0c0c 	str.w	r0, [r8, #-12]
   1fdda:	f808 2c10 	strb.w	r2, [r8, #-16]
   1fdde:	f856 2c10 	ldr.w	r2, [r6, #-16]
   1fde2:	f1a8 0004 	sub.w	r0, r8, #4
   1fde6:	e7c0      	b.n	1fd6a <rpc_ip_event_handler+0x1ea>
   1fde8:	f248 0308 	movw	r3, #32776	; 0x8008
   1fdec:	429e      	cmp	r6, r3
   1fdee:	d065      	beq.n	1febc <rpc_ip_event_handler+0x33c>
   1fdf0:	f248 0309 	movw	r3, #32777	; 0x8009
   1fdf4:	429e      	cmp	r6, r3
   1fdf6:	f47f af27 	bne.w	1fc48 <rpc_ip_event_handler+0xc8>
   1fdfa:	683b      	ldr	r3, [r7, #0]
   1fdfc:	b29b      	uxth	r3, r3
   1fdfe:	2b0d      	cmp	r3, #13
   1fe00:	f47f af1e 	bne.w	1fc40 <rpc_ip_event_handler+0xc0>
   1fe04:	6968      	ldr	r0, [r5, #20]
   1fe06:	2800      	cmp	r0, #0
   1fe08:	f47f af6d 	bne.w	1fce6 <rpc_ip_event_handler+0x166>
   1fe0c:	683b      	ldr	r3, [r7, #0]
   1fe0e:	0c1b      	lsrs	r3, r3, #16
   1fe10:	041b      	lsls	r3, r3, #16
   1fe12:	f043 030e 	orr.w	r3, r3, #14
   1fe16:	603b      	str	r3, [r7, #0]
   1fe18:	e713      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fe1a:	2200      	movs	r2, #0
   1fe1c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   1fe20:	440b      	add	r3, r1
   1fe22:	f843 2c04 	str.w	r2, [r3, #-4]
   1fe26:	2202      	movs	r2, #2
   1fe28:	4b4d      	ldr	r3, [pc, #308]	; (1ff60 <rpc_ip_event_handler+0x3e0>)
   1fe2a:	f8c9 2000 	str.w	r2, [r9]
   1fe2e:	9a02      	ldr	r2, [sp, #8]
   1fe30:	2000      	movs	r0, #0
   1fe32:	601a      	str	r2, [r3, #0]
   1fe34:	e705      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fe36:	683b      	ldr	r3, [r7, #0]
   1fe38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1fe3c:	603b      	str	r3, [r7, #0]
   1fe3e:	683b      	ldr	r3, [r7, #0]
   1fe40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1fe44:	603b      	str	r3, [r7, #0]
   1fe46:	683b      	ldr	r3, [r7, #0]
   1fe48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1fe4c:	603b      	str	r3, [r7, #0]
   1fe4e:	692b      	ldr	r3, [r5, #16]
   1fe50:	2b10      	cmp	r3, #16
   1fe52:	f67f af37 	bls.w	1fcc4 <rpc_ip_event_handler+0x144>
   1fe56:	232d      	movs	r3, #45	; 0x2d
   1fe58:	e737      	b.n	1fcca <rpc_ip_event_handler+0x14a>
   1fe5a:	683b      	ldr	r3, [r7, #0]
   1fe5c:	0098      	lsls	r0, r3, #2
   1fe5e:	f57f aeef 	bpl.w	1fc40 <rpc_ip_event_handler+0xc0>
   1fe62:	683b      	ldr	r3, [r7, #0]
   1fe64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1fe68:	603b      	str	r3, [r7, #0]
   1fe6a:	6968      	ldr	r0, [r5, #20]
   1fe6c:	2800      	cmp	r0, #0
   1fe6e:	f000 8095 	beq.w	1ff9c <rpc_ip_event_handler+0x41c>
   1fe72:	2810      	cmp	r0, #16
   1fe74:	bf8e      	itee	hi
   1fe76:	232d      	movhi	r3, #45	; 0x2d
   1fe78:	4b35      	ldrls	r3, [pc, #212]	; (1ff50 <rpc_ip_event_handler+0x3d0>)
   1fe7a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   1fe7e:	2000      	movs	r0, #0
   1fe80:	607b      	str	r3, [r7, #4]
   1fe82:	683b      	ldr	r3, [r7, #0]
   1fe84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1fe88:	603b      	str	r3, [r7, #0]
   1fe8a:	e6da      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fe8c:	683b      	ldr	r3, [r7, #0]
   1fe8e:	0299      	lsls	r1, r3, #10
   1fe90:	f57f aed6 	bpl.w	1fc40 <rpc_ip_event_handler+0xc0>
   1fe94:	696b      	ldr	r3, [r5, #20]
   1fe96:	2b00      	cmp	r3, #0
   1fe98:	d16c      	bne.n	1ff74 <rpc_ip_event_handler+0x3f4>
   1fe9a:	683b      	ldr	r3, [r7, #0]
   1fe9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1fea0:	603b      	str	r3, [r7, #0]
   1fea2:	683b      	ldr	r3, [r7, #0]
   1fea4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1fea8:	603b      	str	r3, [r7, #0]
   1feaa:	683b      	ldr	r3, [r7, #0]
   1feac:	00da      	lsls	r2, r3, #3
   1feae:	f53f aec7 	bmi.w	1fc40 <rpc_ip_event_handler+0xc0>
   1feb2:	4b2c      	ldr	r3, [pc, #176]	; (1ff64 <rpc_ip_event_handler+0x3e4>)
   1feb4:	2001      	movs	r0, #1
   1feb6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   1feba:	e6c2      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1febc:	683b      	ldr	r3, [r7, #0]
   1febe:	b29b      	uxth	r3, r3
   1fec0:	2b06      	cmp	r3, #6
   1fec2:	f47f aebd 	bne.w	1fc40 <rpc_ip_event_handler+0xc0>
   1fec6:	6968      	ldr	r0, [r5, #20]
   1fec8:	2800      	cmp	r0, #0
   1feca:	f47f af0c 	bne.w	1fce6 <rpc_ip_event_handler+0x166>
   1fece:	683b      	ldr	r3, [r7, #0]
   1fed0:	0c1b      	lsrs	r3, r3, #16
   1fed2:	041b      	lsls	r3, r3, #16
   1fed4:	f043 0307 	orr.w	r3, r3, #7
   1fed8:	603b      	str	r3, [r7, #0]
   1feda:	e6b2      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1fedc:	683b      	ldr	r3, [r7, #0]
   1fede:	b29b      	uxth	r3, r3
   1fee0:	2b08      	cmp	r3, #8
   1fee2:	f47f aead 	bne.w	1fc40 <rpc_ip_event_handler+0xc0>
   1fee6:	696b      	ldr	r3, [r5, #20]
   1fee8:	2b00      	cmp	r3, #0
   1feea:	f47f aee8 	bne.w	1fcbe <rpc_ip_event_handler+0x13e>
   1feee:	4b1d      	ldr	r3, [pc, #116]	; (1ff64 <rpc_ip_event_handler+0x3e4>)
   1fef0:	2001      	movs	r0, #1
   1fef2:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
   1fef6:	683b      	ldr	r3, [r7, #0]
   1fef8:	0c1b      	lsrs	r3, r3, #16
   1fefa:	041b      	lsls	r3, r3, #16
   1fefc:	f043 0309 	orr.w	r3, r3, #9
   1ff00:	603b      	str	r3, [r7, #0]
   1ff02:	e69e      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1ff04:	683b      	ldr	r3, [r7, #0]
   1ff06:	025b      	lsls	r3, r3, #9
   1ff08:	f57f ae9a 	bpl.w	1fc40 <rpc_ip_event_handler+0xc0>
   1ff0c:	6968      	ldr	r0, [r5, #20]
   1ff0e:	2800      	cmp	r0, #0
   1ff10:	f47f aee9 	bne.w	1fce6 <rpc_ip_event_handler+0x166>
   1ff14:	683b      	ldr	r3, [r7, #0]
   1ff16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1ff1a:	603b      	str	r3, [r7, #0]
   1ff1c:	e691      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1ff1e:	f7f4 fcc5 	bl	148ac <nrf_free>
   1ff22:	200c      	movs	r0, #12
   1ff24:	2302      	movs	r3, #2
   1ff26:	490b      	ldr	r1, [pc, #44]	; (1ff54 <rpc_ip_event_handler+0x3d4>)
   1ff28:	4a0d      	ldr	r2, [pc, #52]	; (1ff60 <rpc_ip_event_handler+0x3e0>)
   1ff2a:	6008      	str	r0, [r1, #0]
   1ff2c:	682f      	ldr	r7, [r5, #0]
   1ff2e:	9902      	ldr	r1, [sp, #8]
   1ff30:	6011      	str	r1, [r2, #0]
   1ff32:	f8c9 3000 	str.w	r3, [r9]
   1ff36:	2f00      	cmp	r7, #0
   1ff38:	f47f ae7f 	bne.w	1fc3a <rpc_ip_event_handler+0xba>
   1ff3c:	e680      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   1ff3e:	220c      	movs	r2, #12
   1ff40:	4b04      	ldr	r3, [pc, #16]	; (1ff54 <rpc_ip_event_handler+0x3d4>)
   1ff42:	601a      	str	r2, [r3, #0]
   1ff44:	e76f      	b.n	1fe26 <rpc_ip_event_handler+0x2a6>
   1ff46:	6828      	ldr	r0, [r5, #0]
   1ff48:	f7fb fca4 	bl	1b894 <rpc_ip_client_data_free>
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	e678      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1ff50:	0002a4dc 	.word	0x0002a4dc
   1ff54:	20021994 	.word	0x20021994
   1ff58:	200219a0 	.word	0x200219a0
   1ff5c:	2002225a 	.word	0x2002225a
   1ff60:	2002199c 	.word	0x2002199c
   1ff64:	200219a4 	.word	0x200219a4
   1ff68:	20021998 	.word	0x20021998
   1ff6c:	20021990 	.word	0x20021990
   1ff70:	2002198c 	.word	0x2002198c
   1ff74:	2b10      	cmp	r3, #16
   1ff76:	bf8e      	itee	hi
   1ff78:	232d      	movhi	r3, #45	; 0x2d
   1ff7a:	4a3e      	ldrls	r2, [pc, #248]	; (20074 <__kernel_ram_size+0x74>)
   1ff7c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1ff80:	607b      	str	r3, [r7, #4]
   1ff82:	683b      	ldr	r3, [r7, #0]
   1ff84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1ff88:	603b      	str	r3, [r7, #0]
   1ff8a:	696b      	ldr	r3, [r5, #20]
   1ff8c:	2b6b      	cmp	r3, #107	; 0x6b
   1ff8e:	683b      	ldr	r3, [r7, #0]
   1ff90:	d040      	beq.n	20014 <__kernel_ram_size+0x14>
   1ff92:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1ff96:	2000      	movs	r0, #0
   1ff98:	603b      	str	r3, [r7, #0]
   1ff9a:	e652      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1ff9c:	683b      	ldr	r3, [r7, #0]
   1ff9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1ffa2:	603b      	str	r3, [r7, #0]
   1ffa4:	683b      	ldr	r3, [r7, #0]
   1ffa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1ffaa:	603b      	str	r3, [r7, #0]
   1ffac:	683b      	ldr	r3, [r7, #0]
   1ffae:	0c1b      	lsrs	r3, r3, #16
   1ffb0:	041b      	lsls	r3, r3, #16
   1ffb2:	f043 0305 	orr.w	r3, r3, #5
   1ffb6:	603b      	str	r3, [r7, #0]
   1ffb8:	e643      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   1ffba:	2302      	movs	r3, #2
   1ffbc:	2610      	movs	r6, #16
   1ffbe:	6043      	str	r3, [r0, #4]
   1ffc0:	7006      	strb	r6, [r0, #0]
   1ffc2:	8a2b      	ldrh	r3, [r5, #16]
   1ffc4:	f105 0114 	add.w	r1, r5, #20
   1ffc8:	8103      	strh	r3, [r0, #8]
   1ffca:	300c      	adds	r0, #12
   1ffcc:	f005 ff4b 	bl	25e66 <memcpy>
   1ffd0:	686b      	ldr	r3, [r5, #4]
   1ffd2:	682a      	ldr	r2, [r5, #0]
   1ffd4:	e9cd 4606 	strd	r4, r6, [sp, #24]
   1ffd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ffdc:	69b8      	ldr	r0, [r7, #24]
   1ffde:	a904      	add	r1, sp, #16
   1ffe0:	6803      	ldr	r3, [r0, #0]
   1ffe2:	685b      	ldr	r3, [r3, #4]
   1ffe4:	4798      	blx	r3
   1ffe6:	3001      	adds	r0, #1
   1ffe8:	f47f ae1a 	bne.w	1fc20 <rpc_ip_event_handler+0xa0>
   1ffec:	4620      	mov	r0, r4
   1ffee:	f7f4 fc5d 	bl	148ac <nrf_free>
   1fff2:	6828      	ldr	r0, [r5, #0]
   1fff4:	f7fb fc4e 	bl	1b894 <rpc_ip_client_data_free>
   1fff8:	e622      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   1fffa:	2302      	movs	r3, #2
   1fffc:	603b      	str	r3, [r7, #0]
   1fffe:	69ab      	ldr	r3, [r5, #24]
   20000:	617b      	str	r3, [r7, #20]
   20002:	e61e      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   20004:	683b      	ldr	r3, [r7, #0]
   20006:	2000      	movs	r0, #0
   20008:	0c1b      	lsrs	r3, r3, #16
   2000a:	041b      	lsls	r3, r3, #16
   2000c:	f043 0304 	orr.w	r3, r3, #4
   20010:	603b      	str	r3, [r7, #0]
   20012:	e616      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   20014:	f013 6300 	ands.w	r3, r3, #134217728	; 0x8000000
   20018:	d019      	beq.n	2004e <__kernel_ram_size+0x4e>
   2001a:	230c      	movs	r3, #12
   2001c:	2000      	movs	r0, #0
   2001e:	607b      	str	r3, [r7, #4]
   20020:	e60f      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   20022:	8a6b      	ldrh	r3, [r5, #18]
   20024:	2b00      	cmp	r3, #0
   20026:	f43f adec 	beq.w	1fc02 <rpc_ip_event_handler+0x82>
   2002a:	2024      	movs	r0, #36	; 0x24
   2002c:	f7f4 fc20 	bl	14870 <nrf_malloc>
   20030:	4604      	mov	r4, r0
   20032:	2800      	cmp	r0, #0
   20034:	d0dd      	beq.n	1fff2 <rpc_ip_event_handler+0x472>
   20036:	8a6a      	ldrh	r2, [r5, #18]
   20038:	2a10      	cmp	r2, #16
   2003a:	d00e      	beq.n	2005a <__kernel_ram_size+0x5a>
   2003c:	2a04      	cmp	r2, #4
   2003e:	d0bc      	beq.n	1ffba <rpc_ip_event_handler+0x43a>
   20040:	6828      	ldr	r0, [r5, #0]
   20042:	f7fb fc27 	bl	1b894 <rpc_ip_client_data_free>
   20046:	4620      	mov	r0, r4
   20048:	f7f4 fc30 	bl	148ac <nrf_free>
   2004c:	e5f8      	b.n	1fc40 <rpc_ip_event_handler+0xc0>
   2004e:	683a      	ldr	r2, [r7, #0]
   20050:	4618      	mov	r0, r3
   20052:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   20056:	603a      	str	r2, [r7, #0]
   20058:	e5f3      	b.n	1fc42 <rpc_ip_event_handler+0xc2>
   2005a:	230a      	movs	r3, #10
   2005c:	2624      	movs	r6, #36	; 0x24
   2005e:	6043      	str	r3, [r0, #4]
   20060:	7006      	strb	r6, [r0, #0]
   20062:	8a2b      	ldrh	r3, [r5, #16]
   20064:	f105 0114 	add.w	r1, r5, #20
   20068:	8103      	strh	r3, [r0, #8]
   2006a:	3010      	adds	r0, #16
   2006c:	f005 fefb 	bl	25e66 <memcpy>
   20070:	e7ae      	b.n	1ffd0 <rpc_ip_event_handler+0x450>
   20072:	bf00      	nop
   20074:	0002a4dc 	.word	0x0002a4dc

00020078 <interface_init>:
   20078:	b508      	push	{r3, lr}
   2007a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2007e:	2100      	movs	r1, #0
   20080:	4802      	ldr	r0, [pc, #8]	; (2008c <interface_init+0x14>)
   20082:	f005 ff1d 	bl	25ec0 <memset>
   20086:	2000      	movs	r0, #0
   20088:	bd08      	pop	{r3, pc}
   2008a:	bf00      	nop
   2008c:	20024048 	.word	0x20024048

00020090 <interface_socket_allocate>:
   20090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20092:	4b28      	ldr	r3, [pc, #160]	; (20134 <interface_socket_allocate+0xa4>)
   20094:	4606      	mov	r6, r0
   20096:	681d      	ldr	r5, [r3, #0]
   20098:	4608      	mov	r0, r1
   2009a:	b1e5      	cbz	r5, 200d6 <interface_socket_allocate+0x46>
   2009c:	6a1c      	ldr	r4, [r3, #32]
   2009e:	2c00      	cmp	r4, #0
   200a0:	d03b      	beq.n	2011a <interface_socket_allocate+0x8a>
   200a2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   200a4:	2c00      	cmp	r4, #0
   200a6:	d03a      	beq.n	2011e <interface_socket_allocate+0x8e>
   200a8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   200aa:	2c00      	cmp	r4, #0
   200ac:	d039      	beq.n	20122 <interface_socket_allocate+0x92>
   200ae:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
   200b2:	b179      	cbz	r1, 200d4 <interface_socket_allocate+0x44>
   200b4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   200b8:	b3a9      	cbz	r1, 20126 <interface_socket_allocate+0x96>
   200ba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
   200be:	b3a1      	cbz	r1, 2012a <interface_socket_allocate+0x9a>
   200c0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
   200c4:	b399      	cbz	r1, 2012e <interface_socket_allocate+0x9e>
   200c6:	f04f 35ff 	mov.w	r5, #4294967295
   200ca:	200c      	movs	r0, #12
   200cc:	f006 fe1e 	bl	26d0c <bsd_os_errno_set>
   200d0:	4628      	mov	r0, r5
   200d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   200d4:	2504      	movs	r5, #4
   200d6:	f04f 0c01 	mov.w	ip, #1
   200da:	f04f 37ff 	mov.w	r7, #4294967295
   200de:	016c      	lsls	r4, r5, #5
   200e0:	f843 c004 	str.w	ip, [r3, r4]
   200e4:	441c      	add	r4, r3
   200e6:	4611      	mov	r1, r2
   200e8:	6167      	str	r7, [r4, #20]
   200ea:	4622      	mov	r2, r4
   200ec:	f7fb f89a 	bl	1b224 <packet_handler_create>
   200f0:	4603      	mov	r3, r0
   200f2:	61a0      	str	r0, [r4, #24]
   200f4:	b158      	cbz	r0, 2010e <interface_socket_allocate+0x7e>
   200f6:	681b      	ldr	r3, [r3, #0]
   200f8:	681b      	ldr	r3, [r3, #0]
   200fa:	4798      	blx	r3
   200fc:	b910      	cbnz	r0, 20104 <interface_socket_allocate+0x74>
   200fe:	6034      	str	r4, [r6, #0]
   20100:	4628      	mov	r0, r5
   20102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20104:	69a0      	ldr	r0, [r4, #24]
   20106:	f7fb f8ab 	bl	1b260 <packet_handler_delete>
   2010a:	2300      	movs	r3, #0
   2010c:	61a3      	str	r3, [r4, #24]
   2010e:	4620      	mov	r0, r4
   20110:	2220      	movs	r2, #32
   20112:	2100      	movs	r1, #0
   20114:	f005 fed4 	bl	25ec0 <memset>
   20118:	e7d5      	b.n	200c6 <interface_socket_allocate+0x36>
   2011a:	2501      	movs	r5, #1
   2011c:	e7db      	b.n	200d6 <interface_socket_allocate+0x46>
   2011e:	2502      	movs	r5, #2
   20120:	e7d9      	b.n	200d6 <interface_socket_allocate+0x46>
   20122:	2503      	movs	r5, #3
   20124:	e7d7      	b.n	200d6 <interface_socket_allocate+0x46>
   20126:	2505      	movs	r5, #5
   20128:	e7d5      	b.n	200d6 <interface_socket_allocate+0x46>
   2012a:	2506      	movs	r5, #6
   2012c:	e7d3      	b.n	200d6 <interface_socket_allocate+0x46>
   2012e:	2507      	movs	r5, #7
   20130:	e7d1      	b.n	200d6 <interface_socket_allocate+0x46>
   20132:	bf00      	nop
   20134:	20024048 	.word	0x20024048

00020138 <interface_socket_free>:
   20138:	2807      	cmp	r0, #7
   2013a:	d900      	bls.n	2013e <interface_socket_free+0x6>
   2013c:	4770      	bx	lr
   2013e:	b510      	push	{r4, lr}
   20140:	4c06      	ldr	r4, [pc, #24]	; (2015c <interface_socket_free+0x24>)
   20142:	eb04 1440 	add.w	r4, r4, r0, lsl #5
   20146:	69a0      	ldr	r0, [r4, #24]
   20148:	b108      	cbz	r0, 2014e <interface_socket_free+0x16>
   2014a:	f7fb f889 	bl	1b260 <packet_handler_delete>
   2014e:	4620      	mov	r0, r4
   20150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20154:	2220      	movs	r2, #32
   20156:	2100      	movs	r1, #0
   20158:	f005 beb2 	b.w	25ec0 <memset>
   2015c:	20024048 	.word	0x20024048

00020160 <interface_socket_packet_handler_update>:
   20160:	2807      	cmp	r0, #7
   20162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20166:	d818      	bhi.n	2019a <interface_socket_packet_handler_update+0x3a>
   20168:	4d13      	ldr	r5, [pc, #76]	; (201b8 <interface_socket_packet_handler_update+0x58>)
   2016a:	0144      	lsls	r4, r0, #5
   2016c:	592b      	ldr	r3, [r5, r4]
   2016e:	192f      	adds	r7, r5, r4
   20170:	b19b      	cbz	r3, 2019a <interface_socket_packet_handler_update+0x3a>
   20172:	4608      	mov	r0, r1
   20174:	4611      	mov	r1, r2
   20176:	463a      	mov	r2, r7
   20178:	f8d7 8018 	ldr.w	r8, [r7, #24]
   2017c:	f7fb f852 	bl	1b224 <packet_handler_create>
   20180:	61b8      	str	r0, [r7, #24]
   20182:	b1b8      	cbz	r0, 201b4 <interface_socket_packet_handler_update+0x54>
   20184:	6803      	ldr	r3, [r0, #0]
   20186:	681b      	ldr	r3, [r3, #0]
   20188:	4798      	blx	r3
   2018a:	4606      	mov	r6, r0
   2018c:	b948      	cbnz	r0, 201a2 <interface_socket_packet_handler_update+0x42>
   2018e:	4640      	mov	r0, r8
   20190:	f7fb f866 	bl	1b260 <packet_handler_delete>
   20194:	4630      	mov	r0, r6
   20196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2019a:	2605      	movs	r6, #5
   2019c:	4630      	mov	r0, r6
   2019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201a2:	69b8      	ldr	r0, [r7, #24]
   201a4:	f7fb f85c 	bl	1b260 <packet_handler_delete>
   201a8:	1928      	adds	r0, r5, r4
   201aa:	f8c0 8018 	str.w	r8, [r0, #24]
   201ae:	4630      	mov	r0, r6
   201b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201b4:	2604      	movs	r6, #4
   201b6:	e7f7      	b.n	201a8 <interface_socket_packet_handler_update+0x48>
   201b8:	20024048 	.word	0x20024048

000201bc <interface_socket_wait>:
   201bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   201be:	4e12      	ldr	r6, [pc, #72]	; (20208 <interface_socket_wait+0x4c>)
   201c0:	0140      	lsls	r0, r0, #5
   201c2:	5834      	ldr	r4, [r6, r0]
   201c4:	b083      	sub	sp, #12
   201c6:	4014      	ands	r4, r2
   201c8:	428c      	cmp	r4, r1
   201ca:	9301      	str	r3, [sp, #4]
   201cc:	eb06 0700 	add.w	r7, r6, r0
   201d0:	d013      	beq.n	201fa <interface_socket_wait+0x3e>
   201d2:	687b      	ldr	r3, [r7, #4]
   201d4:	b98b      	cbnz	r3, 201fa <interface_socket_wait+0x3e>
   201d6:	5833      	ldr	r3, [r6, r0]
   201d8:	00db      	lsls	r3, r3, #3
   201da:	d411      	bmi.n	20200 <interface_socket_wait+0x44>
   201dc:	460d      	mov	r5, r1
   201de:	4614      	mov	r4, r2
   201e0:	463e      	mov	r6, r7
   201e2:	e006      	b.n	201f2 <interface_socket_wait+0x36>
   201e4:	6873      	ldr	r3, [r6, #4]
   201e6:	b943      	cbnz	r3, 201fa <interface_socket_wait+0x3e>
   201e8:	a901      	add	r1, sp, #4
   201ea:	4638      	mov	r0, r7
   201ec:	f7f3 fa86 	bl	136fc <bsd_os_timedwait>
   201f0:	b920      	cbnz	r0, 201fc <interface_socket_wait+0x40>
   201f2:	6833      	ldr	r3, [r6, #0]
   201f4:	4023      	ands	r3, r4
   201f6:	42ab      	cmp	r3, r5
   201f8:	d1f4      	bne.n	201e4 <interface_socket_wait+0x28>
   201fa:	2000      	movs	r0, #0
   201fc:	b003      	add	sp, #12
   201fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20200:	2073      	movs	r0, #115	; 0x73
   20202:	b003      	add	sp, #12
   20204:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20206:	bf00      	nop
   20208:	20024048 	.word	0x20024048

0002020c <interface_from_internal_id_search>:
   2020c:	4b22      	ldr	r3, [pc, #136]	; (20298 <interface_from_internal_id_search+0x8c>)
   2020e:	681a      	ldr	r2, [r3, #0]
   20210:	b112      	cbz	r2, 20218 <interface_from_internal_id_search+0xc>
   20212:	695a      	ldr	r2, [r3, #20]
   20214:	4282      	cmp	r2, r0
   20216:	d031      	beq.n	2027c <interface_from_internal_id_search+0x70>
   20218:	6a1a      	ldr	r2, [r3, #32]
   2021a:	b112      	cbz	r2, 20222 <interface_from_internal_id_search+0x16>
   2021c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2021e:	4282      	cmp	r2, r0
   20220:	d02e      	beq.n	20280 <interface_from_internal_id_search+0x74>
   20222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20224:	b112      	cbz	r2, 2022c <interface_from_internal_id_search+0x20>
   20226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   20228:	4282      	cmp	r2, r0
   2022a:	d02b      	beq.n	20284 <interface_from_internal_id_search+0x78>
   2022c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2022e:	b112      	cbz	r2, 20236 <interface_from_internal_id_search+0x2a>
   20230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   20232:	4282      	cmp	r2, r0
   20234:	d028      	beq.n	20288 <interface_from_internal_id_search+0x7c>
   20236:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   2023a:	b11a      	cbz	r2, 20244 <interface_from_internal_id_search+0x38>
   2023c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   20240:	4282      	cmp	r2, r0
   20242:	d023      	beq.n	2028c <interface_from_internal_id_search+0x80>
   20244:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   20248:	b11a      	cbz	r2, 20252 <interface_from_internal_id_search+0x46>
   2024a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2024e:	4282      	cmp	r2, r0
   20250:	d01e      	beq.n	20290 <interface_from_internal_id_search+0x84>
   20252:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   20256:	b11a      	cbz	r2, 20260 <interface_from_internal_id_search+0x54>
   20258:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   2025c:	4282      	cmp	r2, r0
   2025e:	d019      	beq.n	20294 <interface_from_internal_id_search+0x88>
   20260:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   20264:	b13a      	cbz	r2, 20276 <interface_from_internal_id_search+0x6a>
   20266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   2026a:	4283      	cmp	r3, r0
   2026c:	bf14      	ite	ne
   2026e:	f04f 30ff 	movne.w	r0, #4294967295
   20272:	2007      	moveq	r0, #7
   20274:	4770      	bx	lr
   20276:	f04f 30ff 	mov.w	r0, #4294967295
   2027a:	4770      	bx	lr
   2027c:	2000      	movs	r0, #0
   2027e:	4770      	bx	lr
   20280:	2001      	movs	r0, #1
   20282:	4770      	bx	lr
   20284:	2002      	movs	r0, #2
   20286:	4770      	bx	lr
   20288:	2003      	movs	r0, #3
   2028a:	4770      	bx	lr
   2028c:	2004      	movs	r0, #4
   2028e:	4770      	bx	lr
   20290:	2005      	movs	r0, #5
   20292:	4770      	bx	lr
   20294:	2006      	movs	r0, #6
   20296:	4770      	bx	lr
   20298:	20024048 	.word	0x20024048

0002029c <interface_socket_from_handle_get>:
   2029c:	2807      	cmp	r0, #7
   2029e:	d807      	bhi.n	202b0 <interface_socket_from_handle_get+0x14>
   202a0:	4b04      	ldr	r3, [pc, #16]	; (202b4 <interface_socket_from_handle_get+0x18>)
   202a2:	0140      	lsls	r0, r0, #5
   202a4:	581a      	ldr	r2, [r3, r0]
   202a6:	4418      	add	r0, r3
   202a8:	2a00      	cmp	r2, #0
   202aa:	bf08      	it	eq
   202ac:	2000      	moveq	r0, #0
   202ae:	4770      	bx	lr
   202b0:	2000      	movs	r0, #0
   202b2:	4770      	bx	lr
   202b4:	20024048 	.word	0x20024048

000202b8 <interface_socket_event_get>:
   202b8:	b119      	cbz	r1, 202c2 <interface_socket_event_get+0xa>
   202ba:	2807      	cmp	r0, #7
   202bc:	d902      	bls.n	202c4 <interface_socket_event_get+0xc>
   202be:	2310      	movs	r3, #16
   202c0:	600b      	str	r3, [r1, #0]
   202c2:	4770      	bx	lr
   202c4:	4b07      	ldr	r3, [pc, #28]	; (202e4 <interface_socket_event_get+0x2c>)
   202c6:	0140      	lsls	r0, r0, #5
   202c8:	581a      	ldr	r2, [r3, r0]
   202ca:	2a00      	cmp	r2, #0
   202cc:	d0f7      	beq.n	202be <interface_socket_event_get+0x6>
   202ce:	581b      	ldr	r3, [r3, r0]
   202d0:	0c1b      	lsrs	r3, r3, #16
   202d2:	f003 020a 	and.w	r2, r3, #10
   202d6:	2a0a      	cmp	r2, #10
   202d8:	bf14      	ite	ne
   202da:	f003 030f 	andne.w	r3, r3, #15
   202de:	f003 030d 	andeq.w	r3, r3, #13
   202e2:	e7ed      	b.n	202c0 <interface_socket_event_get+0x8>
   202e4:	20024048 	.word	0x20024048

000202e8 <interface_socket_getopt>:
   202e8:	b570      	push	{r4, r5, r6, lr}
   202ea:	2807      	cmp	r0, #7
   202ec:	9d04      	ldr	r5, [sp, #16]
   202ee:	d81f      	bhi.n	20330 <interface_socket_getopt+0x48>
   202f0:	4c12      	ldr	r4, [pc, #72]	; (2033c <interface_socket_getopt+0x54>)
   202f2:	0140      	lsls	r0, r0, #5
   202f4:	5826      	ldr	r6, [r4, r0]
   202f6:	4404      	add	r4, r0
   202f8:	b1d6      	cbz	r6, 20330 <interface_socket_getopt+0x48>
   202fa:	2901      	cmp	r1, #1
   202fc:	d112      	bne.n	20324 <interface_socket_getopt+0x3c>
   202fe:	2a04      	cmp	r2, #4
   20300:	d110      	bne.n	20324 <interface_socket_getopt+0x3c>
   20302:	b14b      	cbz	r3, 20318 <interface_socket_getopt+0x30>
   20304:	b145      	cbz	r5, 20318 <interface_socket_getopt+0x30>
   20306:	682a      	ldr	r2, [r5, #0]
   20308:	2a04      	cmp	r2, #4
   2030a:	d105      	bne.n	20318 <interface_socket_getopt+0x30>
   2030c:	2200      	movs	r2, #0
   2030e:	6861      	ldr	r1, [r4, #4]
   20310:	4610      	mov	r0, r2
   20312:	6019      	str	r1, [r3, #0]
   20314:	6062      	str	r2, [r4, #4]
   20316:	bd70      	pop	{r4, r5, r6, pc}
   20318:	2016      	movs	r0, #22
   2031a:	f006 fcf7 	bl	26d0c <bsd_os_errno_set>
   2031e:	f04f 30ff 	mov.w	r0, #4294967295
   20322:	bd70      	pop	{r4, r5, r6, pc}
   20324:	202a      	movs	r0, #42	; 0x2a
   20326:	f006 fcf1 	bl	26d0c <bsd_os_errno_set>
   2032a:	f04f 30ff 	mov.w	r0, #4294967295
   2032e:	bd70      	pop	{r4, r5, r6, pc}
   20330:	2009      	movs	r0, #9
   20332:	f006 fceb 	bl	26d0c <bsd_os_errno_set>
   20336:	f04f 30ff 	mov.w	r0, #4294967295
   2033a:	bd70      	pop	{r4, r5, r6, pc}
   2033c:	20024048 	.word	0x20024048

00020340 <interface_socket_fcntl>:
   20340:	2807      	cmp	r0, #7
   20342:	b510      	push	{r4, lr}
   20344:	d816      	bhi.n	20374 <interface_socket_fcntl+0x34>
   20346:	4c11      	ldr	r4, [pc, #68]	; (2038c <interface_socket_fcntl+0x4c>)
   20348:	0143      	lsls	r3, r0, #5
   2034a:	58e0      	ldr	r0, [r4, r3]
   2034c:	b190      	cbz	r0, 20374 <interface_socket_fcntl+0x34>
   2034e:	2901      	cmp	r1, #1
   20350:	d005      	beq.n	2035e <interface_socket_fcntl+0x1e>
   20352:	2902      	cmp	r1, #2
   20354:	d114      	bne.n	20380 <interface_socket_fcntl+0x40>
   20356:	58e0      	ldr	r0, [r4, r3]
   20358:	f3c0 7000 	ubfx	r0, r0, #28, #1
   2035c:	bd10      	pop	{r4, pc}
   2035e:	f012 0001 	ands.w	r0, r2, #1
   20362:	58e2      	ldr	r2, [r4, r3]
   20364:	bf1a      	itte	ne
   20366:	2000      	movne	r0, #0
   20368:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   2036c:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   20370:	50e2      	str	r2, [r4, r3]
   20372:	bd10      	pop	{r4, pc}
   20374:	2009      	movs	r0, #9
   20376:	f006 fcc9 	bl	26d0c <bsd_os_errno_set>
   2037a:	f04f 30ff 	mov.w	r0, #4294967295
   2037e:	bd10      	pop	{r4, pc}
   20380:	2016      	movs	r0, #22
   20382:	f006 fcc3 	bl	26d0c <bsd_os_errno_set>
   20386:	f04f 30ff 	mov.w	r0, #4294967295
   2038a:	bd10      	pop	{r4, pc}
   2038c:	20024048 	.word	0x20024048

00020390 <bsd_os_application_irq_handler>:
   20390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20394:	4c2e      	ldr	r4, [pc, #184]	; (20450 <bsd_os_application_irq_handler+0xc0>)
   20396:	f7f3 fa4b 	bl	13830 <bsd_os_application_irq_clear>
   2039a:	2703      	movs	r7, #3
   2039c:	4d2d      	ldr	r5, [pc, #180]	; (20454 <bsd_os_application_irq_handler+0xc4>)
   2039e:	4e2e      	ldr	r6, [pc, #184]	; (20458 <bsd_os_application_irq_handler+0xc8>)
   203a0:	f104 0880 	add.w	r8, r4, #128	; 0x80
   203a4:	e002      	b.n	203ac <bsd_os_application_irq_handler+0x1c>
   203a6:	3408      	adds	r4, #8
   203a8:	4544      	cmp	r4, r8
   203aa:	d03b      	beq.n	20424 <bsd_os_application_irq_handler+0x94>
   203ac:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   203b0:	2b02      	cmp	r3, #2
   203b2:	d1f8      	bne.n	203a6 <bsd_os_application_irq_handler+0x16>
   203b4:	6820      	ldr	r0, [r4, #0]
   203b6:	8829      	ldrh	r1, [r5, #0]
   203b8:	6802      	ldr	r2, [r0, #0]
   203ba:	b292      	uxth	r2, r2
   203bc:	4291      	cmp	r1, r2
   203be:	d033      	beq.n	20428 <bsd_os_application_irq_handler+0x98>
   203c0:	8a29      	ldrh	r1, [r5, #16]
   203c2:	4291      	cmp	r1, r2
   203c4:	d032      	beq.n	2042c <bsd_os_application_irq_handler+0x9c>
   203c6:	8c29      	ldrh	r1, [r5, #32]
   203c8:	4291      	cmp	r1, r2
   203ca:	d01c      	beq.n	20406 <bsd_os_application_irq_handler+0x76>
   203cc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   203ce:	4293      	cmp	r3, r2
   203d0:	d02e      	beq.n	20430 <bsd_os_application_irq_handler+0xa0>
   203d2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   203d6:	4293      	cmp	r3, r2
   203d8:	d02f      	beq.n	2043a <bsd_os_application_irq_handler+0xaa>
   203da:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
   203de:	4293      	cmp	r3, r2
   203e0:	d02d      	beq.n	2043e <bsd_os_application_irq_handler+0xae>
   203e2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
   203e6:	4293      	cmp	r3, r2
   203e8:	d02b      	beq.n	20442 <bsd_os_application_irq_handler+0xb2>
   203ea:	f8b5 3070 	ldrh.w	r3, [r5, #112]	; 0x70
   203ee:	4293      	cmp	r3, r2
   203f0:	d029      	beq.n	20446 <bsd_os_application_irq_handler+0xb6>
   203f2:	f8b5 3080 	ldrh.w	r3, [r5, #128]	; 0x80
   203f6:	4293      	cmp	r3, r2
   203f8:	d027      	beq.n	2044a <bsd_os_application_irq_handler+0xba>
   203fa:	f8b5 3090 	ldrh.w	r3, [r5, #144]	; 0x90
   203fe:	4293      	cmp	r3, r2
   20400:	bf08      	it	eq
   20402:	2309      	moveq	r3, #9
   20404:	d1cf      	bne.n	203a6 <bsd_os_application_irq_handler+0x16>
   20406:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2040a:	685a      	ldr	r2, [r3, #4]
   2040c:	68d9      	ldr	r1, [r3, #12]
   2040e:	4790      	blx	r2
   20410:	b980      	cbnz	r0, 20434 <bsd_os_application_irq_handler+0xa4>
   20412:	2201      	movs	r2, #1
   20414:	6820      	ldr	r0, [r4, #0]
   20416:	f804 2c04 	strb.w	r2, [r4, #-4]
   2041a:	68f3      	ldr	r3, [r6, #12]
   2041c:	3408      	adds	r4, #8
   2041e:	4798      	blx	r3
   20420:	4544      	cmp	r4, r8
   20422:	d1c3      	bne.n	203ac <bsd_os_application_irq_handler+0x1c>
   20424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20428:	2300      	movs	r3, #0
   2042a:	e7ec      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   2042c:	2301      	movs	r3, #1
   2042e:	e7ea      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   20430:	2303      	movs	r3, #3
   20432:	e7e8      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   20434:	f804 7c04 	strb.w	r7, [r4, #-4]
   20438:	e7b5      	b.n	203a6 <bsd_os_application_irq_handler+0x16>
   2043a:	2304      	movs	r3, #4
   2043c:	e7e3      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   2043e:	2305      	movs	r3, #5
   20440:	e7e1      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   20442:	2306      	movs	r3, #6
   20444:	e7df      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   20446:	2307      	movs	r3, #7
   20448:	e7dd      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   2044a:	2308      	movs	r3, #8
   2044c:	e7db      	b.n	20406 <bsd_os_application_irq_handler+0x76>
   2044e:	bf00      	nop
   20450:	20021b00 	.word	0x20021b00
   20454:	200219c4 	.word	0x200219c4
   20458:	20021a64 	.word	0x20021a64

0002045c <rpc_framework_init>:
   2045c:	b508      	push	{r3, lr}
   2045e:	22a0      	movs	r2, #160	; 0xa0
   20460:	2100      	movs	r1, #0
   20462:	4802      	ldr	r0, [pc, #8]	; (2046c <rpc_framework_init+0x10>)
   20464:	f005 fd2c 	bl	25ec0 <memset>
   20468:	2000      	movs	r0, #0
   2046a:	bd08      	pop	{r3, pc}
   2046c:	200219c4 	.word	0x200219c4

00020470 <rpc_client_register>:
   20470:	8803      	ldrh	r3, [r0, #0]
   20472:	2b00      	cmp	r3, #0
   20474:	d045      	beq.n	20502 <rpc_client_register+0x92>
   20476:	6842      	ldr	r2, [r0, #4]
   20478:	4601      	mov	r1, r0
   2047a:	2a00      	cmp	r2, #0
   2047c:	d050      	beq.n	20520 <rpc_client_register+0xb0>
   2047e:	4a30      	ldr	r2, [pc, #192]	; (20540 <rpc_client_register+0xd0>)
   20480:	8810      	ldrh	r0, [r2, #0]
   20482:	4283      	cmp	r3, r0
   20484:	d03d      	beq.n	20502 <rpc_client_register+0x92>
   20486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2048a:	8a14      	ldrh	r4, [r2, #16]
   2048c:	42a3      	cmp	r3, r4
   2048e:	d035      	beq.n	204fc <rpc_client_register+0x8c>
   20490:	8c15      	ldrh	r5, [r2, #32]
   20492:	42ab      	cmp	r3, r5
   20494:	d032      	beq.n	204fc <rpc_client_register+0x8c>
   20496:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   20498:	42b3      	cmp	r3, r6
   2049a:	d02f      	beq.n	204fc <rpc_client_register+0x8c>
   2049c:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   204a0:	42bb      	cmp	r3, r7
   204a2:	d02b      	beq.n	204fc <rpc_client_register+0x8c>
   204a4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   204a8:	4563      	cmp	r3, ip
   204aa:	d027      	beq.n	204fc <rpc_client_register+0x8c>
   204ac:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   204b0:	4573      	cmp	r3, lr
   204b2:	d023      	beq.n	204fc <rpc_client_register+0x8c>
   204b4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   204b8:	4543      	cmp	r3, r8
   204ba:	d01f      	beq.n	204fc <rpc_client_register+0x8c>
   204bc:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   204c0:	454b      	cmp	r3, r9
   204c2:	d01b      	beq.n	204fc <rpc_client_register+0x8c>
   204c4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   204c8:	4553      	cmp	r3, sl
   204ca:	d017      	beq.n	204fc <rpc_client_register+0x8c>
   204cc:	b1e0      	cbz	r0, 20508 <rpc_client_register+0x98>
   204ce:	b35c      	cbz	r4, 20528 <rpc_client_register+0xb8>
   204d0:	b365      	cbz	r5, 2052c <rpc_client_register+0xbc>
   204d2:	b36e      	cbz	r6, 20530 <rpc_client_register+0xc0>
   204d4:	b377      	cbz	r7, 20534 <rpc_client_register+0xc4>
   204d6:	f1bc 0f00 	cmp.w	ip, #0
   204da:	d02d      	beq.n	20538 <rpc_client_register+0xc8>
   204dc:	f1be 0f00 	cmp.w	lr, #0
   204e0:	d020      	beq.n	20524 <rpc_client_register+0xb4>
   204e2:	f1b8 0f00 	cmp.w	r8, #0
   204e6:	d029      	beq.n	2053c <rpc_client_register+0xcc>
   204e8:	f1b9 0f00 	cmp.w	r9, #0
   204ec:	d00b      	beq.n	20506 <rpc_client_register+0x96>
   204ee:	2009      	movs	r0, #9
   204f0:	f1ba 0f00 	cmp.w	sl, #0
   204f4:	d008      	beq.n	20508 <rpc_client_register+0x98>
   204f6:	2004      	movs	r0, #4
   204f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   204fc:	2007      	movs	r0, #7
   204fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20502:	2007      	movs	r0, #7
   20504:	4770      	bx	lr
   20506:	2008      	movs	r0, #8
   20508:	0100      	lsls	r0, r0, #4
   2050a:	5213      	strh	r3, [r2, r0]
   2050c:	684b      	ldr	r3, [r1, #4]
   2050e:	4402      	add	r2, r0
   20510:	6053      	str	r3, [r2, #4]
   20512:	688b      	ldr	r3, [r1, #8]
   20514:	2000      	movs	r0, #0
   20516:	6093      	str	r3, [r2, #8]
   20518:	68cb      	ldr	r3, [r1, #12]
   2051a:	60d3      	str	r3, [r2, #12]
   2051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20520:	200e      	movs	r0, #14
   20522:	4770      	bx	lr
   20524:	2006      	movs	r0, #6
   20526:	e7ef      	b.n	20508 <rpc_client_register+0x98>
   20528:	2001      	movs	r0, #1
   2052a:	e7ed      	b.n	20508 <rpc_client_register+0x98>
   2052c:	2002      	movs	r0, #2
   2052e:	e7eb      	b.n	20508 <rpc_client_register+0x98>
   20530:	2003      	movs	r0, #3
   20532:	e7e9      	b.n	20508 <rpc_client_register+0x98>
   20534:	2004      	movs	r0, #4
   20536:	e7e7      	b.n	20508 <rpc_client_register+0x98>
   20538:	2005      	movs	r0, #5
   2053a:	e7e5      	b.n	20508 <rpc_client_register+0x98>
   2053c:	2007      	movs	r0, #7
   2053e:	e7e3      	b.n	20508 <rpc_client_register+0x98>
   20540:	200219c4 	.word	0x200219c4

00020544 <rpc_transport_input>:
   20544:	b538      	push	{r3, r4, r5, lr}
   20546:	4a86      	ldr	r2, [pc, #536]	; (20760 <rpc_transport_input+0x21c>)
   20548:	680b      	ldr	r3, [r1, #0]
   2054a:	8810      	ldrh	r0, [r2, #0]
   2054c:	b29b      	uxth	r3, r3
   2054e:	4298      	cmp	r0, r3
   20550:	d029      	beq.n	205a6 <rpc_transport_input+0x62>
   20552:	8a10      	ldrh	r0, [r2, #16]
   20554:	4298      	cmp	r0, r3
   20556:	d026      	beq.n	205a6 <rpc_transport_input+0x62>
   20558:	8c10      	ldrh	r0, [r2, #32]
   2055a:	4298      	cmp	r0, r3
   2055c:	d023      	beq.n	205a6 <rpc_transport_input+0x62>
   2055e:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   20560:	4298      	cmp	r0, r3
   20562:	d020      	beq.n	205a6 <rpc_transport_input+0x62>
   20564:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   20568:	4298      	cmp	r0, r3
   2056a:	d01c      	beq.n	205a6 <rpc_transport_input+0x62>
   2056c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   20570:	4298      	cmp	r0, r3
   20572:	d018      	beq.n	205a6 <rpc_transport_input+0x62>
   20574:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   20578:	4298      	cmp	r0, r3
   2057a:	d014      	beq.n	205a6 <rpc_transport_input+0x62>
   2057c:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   20580:	4298      	cmp	r0, r3
   20582:	d010      	beq.n	205a6 <rpc_transport_input+0x62>
   20584:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   20588:	4298      	cmp	r0, r3
   2058a:	d00c      	beq.n	205a6 <rpc_transport_input+0x62>
   2058c:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   20590:	429a      	cmp	r2, r3
   20592:	d008      	beq.n	205a6 <rpc_transport_input+0x62>
   20594:	6888      	ldr	r0, [r1, #8]
   20596:	2800      	cmp	r0, #0
   20598:	f000 80a9 	beq.w	206ee <rpc_transport_input+0x1aa>
   2059c:	4b71      	ldr	r3, [pc, #452]	; (20764 <rpc_transport_input+0x220>)
   2059e:	691b      	ldr	r3, [r3, #16]
   205a0:	4798      	blx	r3
   205a2:	2000      	movs	r0, #0
   205a4:	bd38      	pop	{r3, r4, r5, pc}
   205a6:	6888      	ldr	r0, [r1, #8]
   205a8:	2800      	cmp	r0, #0
   205aa:	f000 8091 	beq.w	206d0 <rpc_transport_input+0x18c>
   205ae:	4a6e      	ldr	r2, [pc, #440]	; (20768 <rpc_transport_input+0x224>)
   205b0:	6815      	ldr	r5, [r2, #0]
   205b2:	2d00      	cmp	r5, #0
   205b4:	d03b      	beq.n	2062e <rpc_transport_input+0xea>
   205b6:	6894      	ldr	r4, [r2, #8]
   205b8:	2c00      	cmp	r4, #0
   205ba:	f000 809a 	beq.w	206f2 <rpc_transport_input+0x1ae>
   205be:	6914      	ldr	r4, [r2, #16]
   205c0:	2c00      	cmp	r4, #0
   205c2:	f000 8098 	beq.w	206f6 <rpc_transport_input+0x1b2>
   205c6:	6994      	ldr	r4, [r2, #24]
   205c8:	2c00      	cmp	r4, #0
   205ca:	f000 8096 	beq.w	206fa <rpc_transport_input+0x1b6>
   205ce:	6a14      	ldr	r4, [r2, #32]
   205d0:	2c00      	cmp	r4, #0
   205d2:	f000 8094 	beq.w	206fe <rpc_transport_input+0x1ba>
   205d6:	6a94      	ldr	r4, [r2, #40]	; 0x28
   205d8:	2c00      	cmp	r4, #0
   205da:	f000 8086 	beq.w	206ea <rpc_transport_input+0x1a6>
   205de:	6b14      	ldr	r4, [r2, #48]	; 0x30
   205e0:	2c00      	cmp	r4, #0
   205e2:	f000 8090 	beq.w	20706 <rpc_transport_input+0x1c2>
   205e6:	6b94      	ldr	r4, [r2, #56]	; 0x38
   205e8:	2c00      	cmp	r4, #0
   205ea:	f000 8090 	beq.w	2070e <rpc_transport_input+0x1ca>
   205ee:	6c14      	ldr	r4, [r2, #64]	; 0x40
   205f0:	2c00      	cmp	r4, #0
   205f2:	f000 8090 	beq.w	20716 <rpc_transport_input+0x1d2>
   205f6:	6c94      	ldr	r4, [r2, #72]	; 0x48
   205f8:	2c00      	cmp	r4, #0
   205fa:	f000 8090 	beq.w	2071e <rpc_transport_input+0x1da>
   205fe:	6d14      	ldr	r4, [r2, #80]	; 0x50
   20600:	2c00      	cmp	r4, #0
   20602:	f000 8092 	beq.w	2072a <rpc_transport_input+0x1e6>
   20606:	6d94      	ldr	r4, [r2, #88]	; 0x58
   20608:	2c00      	cmp	r4, #0
   2060a:	f000 8090 	beq.w	2072e <rpc_transport_input+0x1ea>
   2060e:	6e14      	ldr	r4, [r2, #96]	; 0x60
   20610:	2c00      	cmp	r4, #0
   20612:	f000 8092 	beq.w	2073a <rpc_transport_input+0x1f6>
   20616:	6e94      	ldr	r4, [r2, #104]	; 0x68
   20618:	2c00      	cmp	r4, #0
   2061a:	f000 8090 	beq.w	2073e <rpc_transport_input+0x1fa>
   2061e:	6f14      	ldr	r4, [r2, #112]	; 0x70
   20620:	2c00      	cmp	r4, #0
   20622:	f000 808e 	beq.w	20742 <rpc_transport_input+0x1fe>
   20626:	6f94      	ldr	r4, [r2, #120]	; 0x78
   20628:	2c00      	cmp	r4, #0
   2062a:	d1b7      	bne.n	2059c <rpc_transport_input+0x58>
   2062c:	250f      	movs	r5, #15
   2062e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
   20632:	f842 0035 	str.w	r0, [r2, r5, lsl #3]
   20636:	80a3      	strh	r3, [r4, #4]
   20638:	4b4c      	ldr	r3, [pc, #304]	; (2076c <rpc_transport_input+0x228>)
   2063a:	781a      	ldrb	r2, [r3, #0]
   2063c:	2a01      	cmp	r2, #1
   2063e:	d060      	beq.n	20702 <rpc_transport_input+0x1be>
   20640:	7a1a      	ldrb	r2, [r3, #8]
   20642:	2a01      	cmp	r2, #1
   20644:	d047      	beq.n	206d6 <rpc_transport_input+0x192>
   20646:	7c1a      	ldrb	r2, [r3, #16]
   20648:	2a01      	cmp	r2, #1
   2064a:	d05e      	beq.n	2070a <rpc_transport_input+0x1c6>
   2064c:	7e1a      	ldrb	r2, [r3, #24]
   2064e:	2a01      	cmp	r2, #1
   20650:	d05f      	beq.n	20712 <rpc_transport_input+0x1ce>
   20652:	f893 2020 	ldrb.w	r2, [r3, #32]
   20656:	2a01      	cmp	r2, #1
   20658:	d05f      	beq.n	2071a <rpc_transport_input+0x1d6>
   2065a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2065e:	2a01      	cmp	r2, #1
   20660:	d05f      	beq.n	20722 <rpc_transport_input+0x1de>
   20662:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   20666:	2a01      	cmp	r2, #1
   20668:	d05d      	beq.n	20726 <rpc_transport_input+0x1e2>
   2066a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2066e:	2a01      	cmp	r2, #1
   20670:	d05f      	beq.n	20732 <rpc_transport_input+0x1ee>
   20672:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   20676:	2a01      	cmp	r2, #1
   20678:	d05d      	beq.n	20736 <rpc_transport_input+0x1f2>
   2067a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2067e:	2a01      	cmp	r2, #1
   20680:	d061      	beq.n	20746 <rpc_transport_input+0x202>
   20682:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   20686:	2a01      	cmp	r2, #1
   20688:	d05f      	beq.n	2074a <rpc_transport_input+0x206>
   2068a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   2068e:	2a01      	cmp	r2, #1
   20690:	d05d      	beq.n	2074e <rpc_transport_input+0x20a>
   20692:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   20696:	2a01      	cmp	r2, #1
   20698:	d05b      	beq.n	20752 <rpc_transport_input+0x20e>
   2069a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   2069e:	2a01      	cmp	r2, #1
   206a0:	d059      	beq.n	20756 <rpc_transport_input+0x212>
   206a2:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   206a6:	2a01      	cmp	r2, #1
   206a8:	d057      	beq.n	2075a <rpc_transport_input+0x216>
   206aa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   206ae:	2a01      	cmp	r2, #1
   206b0:	d010      	beq.n	206d4 <rpc_transport_input+0x190>
   206b2:	2d10      	cmp	r5, #16
   206b4:	d01b      	beq.n	206ee <rpc_transport_input+0x1aa>
   206b6:	2400      	movs	r4, #0
   206b8:	4b2b      	ldr	r3, [pc, #172]	; (20768 <rpc_transport_input+0x224>)
   206ba:	4a2a      	ldr	r2, [pc, #168]	; (20764 <rpc_transport_input+0x220>)
   206bc:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
   206c0:	f843 4035 	str.w	r4, [r3, r5, lsl #3]
   206c4:	8084      	strh	r4, [r0, #4]
   206c6:	6888      	ldr	r0, [r1, #8]
   206c8:	6913      	ldr	r3, [r2, #16]
   206ca:	4798      	blx	r3
   206cc:	4620      	mov	r0, r4
   206ce:	bd38      	pop	{r3, r4, r5, pc}
   206d0:	2510      	movs	r5, #16
   206d2:	e7b1      	b.n	20638 <rpc_transport_input+0xf4>
   206d4:	220f      	movs	r2, #15
   206d6:	2402      	movs	r4, #2
   206d8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   206dc:	6041      	str	r1, [r0, #4]
   206de:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   206e2:	f7f3 f89d 	bl	13820 <bsd_os_application_irq_set>
   206e6:	2001      	movs	r0, #1
   206e8:	bd38      	pop	{r3, r4, r5, pc}
   206ea:	2505      	movs	r5, #5
   206ec:	e79f      	b.n	2062e <rpc_transport_input+0xea>
   206ee:	2000      	movs	r0, #0
   206f0:	bd38      	pop	{r3, r4, r5, pc}
   206f2:	2501      	movs	r5, #1
   206f4:	e79b      	b.n	2062e <rpc_transport_input+0xea>
   206f6:	2502      	movs	r5, #2
   206f8:	e799      	b.n	2062e <rpc_transport_input+0xea>
   206fa:	2503      	movs	r5, #3
   206fc:	e797      	b.n	2062e <rpc_transport_input+0xea>
   206fe:	2504      	movs	r5, #4
   20700:	e795      	b.n	2062e <rpc_transport_input+0xea>
   20702:	2200      	movs	r2, #0
   20704:	e7e7      	b.n	206d6 <rpc_transport_input+0x192>
   20706:	2506      	movs	r5, #6
   20708:	e791      	b.n	2062e <rpc_transport_input+0xea>
   2070a:	2202      	movs	r2, #2
   2070c:	e7e3      	b.n	206d6 <rpc_transport_input+0x192>
   2070e:	2507      	movs	r5, #7
   20710:	e78d      	b.n	2062e <rpc_transport_input+0xea>
   20712:	2203      	movs	r2, #3
   20714:	e7df      	b.n	206d6 <rpc_transport_input+0x192>
   20716:	2508      	movs	r5, #8
   20718:	e789      	b.n	2062e <rpc_transport_input+0xea>
   2071a:	2204      	movs	r2, #4
   2071c:	e7db      	b.n	206d6 <rpc_transport_input+0x192>
   2071e:	2509      	movs	r5, #9
   20720:	e785      	b.n	2062e <rpc_transport_input+0xea>
   20722:	2205      	movs	r2, #5
   20724:	e7d7      	b.n	206d6 <rpc_transport_input+0x192>
   20726:	2206      	movs	r2, #6
   20728:	e7d5      	b.n	206d6 <rpc_transport_input+0x192>
   2072a:	250a      	movs	r5, #10
   2072c:	e77f      	b.n	2062e <rpc_transport_input+0xea>
   2072e:	250b      	movs	r5, #11
   20730:	e77d      	b.n	2062e <rpc_transport_input+0xea>
   20732:	2207      	movs	r2, #7
   20734:	e7cf      	b.n	206d6 <rpc_transport_input+0x192>
   20736:	2208      	movs	r2, #8
   20738:	e7cd      	b.n	206d6 <rpc_transport_input+0x192>
   2073a:	250c      	movs	r5, #12
   2073c:	e777      	b.n	2062e <rpc_transport_input+0xea>
   2073e:	250d      	movs	r5, #13
   20740:	e775      	b.n	2062e <rpc_transport_input+0xea>
   20742:	250e      	movs	r5, #14
   20744:	e773      	b.n	2062e <rpc_transport_input+0xea>
   20746:	2209      	movs	r2, #9
   20748:	e7c5      	b.n	206d6 <rpc_transport_input+0x192>
   2074a:	220a      	movs	r2, #10
   2074c:	e7c3      	b.n	206d6 <rpc_transport_input+0x192>
   2074e:	220b      	movs	r2, #11
   20750:	e7c1      	b.n	206d6 <rpc_transport_input+0x192>
   20752:	220c      	movs	r2, #12
   20754:	e7bf      	b.n	206d6 <rpc_transport_input+0x192>
   20756:	220d      	movs	r2, #13
   20758:	e7bd      	b.n	206d6 <rpc_transport_input+0x192>
   2075a:	220e      	movs	r2, #14
   2075c:	e7bb      	b.n	206d6 <rpc_transport_input+0x192>
   2075e:	bf00      	nop
   20760:	200219c4 	.word	0x200219c4
   20764:	20021a64 	.word	0x20021a64
   20768:	20021a7c 	.word	0x20021a7c
   2076c:	20021afc 	.word	0x20021afc

00020770 <rpc_transport_register>:
   20770:	b4f0      	push	{r4, r5, r6, r7}
   20772:	2900      	cmp	r1, #0
   20774:	d052      	beq.n	2081c <rpc_transport_register+0xac>
   20776:	2800      	cmp	r0, #0
   20778:	d050      	beq.n	2081c <rpc_transport_register+0xac>
   2077a:	6883      	ldr	r3, [r0, #8]
   2077c:	2b00      	cmp	r3, #0
   2077e:	d04d      	beq.n	2081c <rpc_transport_register+0xac>
   20780:	6903      	ldr	r3, [r0, #16]
   20782:	2b00      	cmp	r3, #0
   20784:	d04a      	beq.n	2081c <rpc_transport_register+0xac>
   20786:	6843      	ldr	r3, [r0, #4]
   20788:	2b00      	cmp	r3, #0
   2078a:	d047      	beq.n	2081c <rpc_transport_register+0xac>
   2078c:	68c3      	ldr	r3, [r0, #12]
   2078e:	2b00      	cmp	r3, #0
   20790:	d044      	beq.n	2081c <rpc_transport_register+0xac>
   20792:	6803      	ldr	r3, [r0, #0]
   20794:	2b00      	cmp	r3, #0
   20796:	d041      	beq.n	2081c <rpc_transport_register+0xac>
   20798:	6943      	ldr	r3, [r0, #20]
   2079a:	2b00      	cmp	r3, #0
   2079c:	d03e      	beq.n	2081c <rpc_transport_register+0xac>
   2079e:	2601      	movs	r6, #1
   207a0:	2500      	movs	r5, #0
   207a2:	4604      	mov	r4, r0
   207a4:	460f      	mov	r7, r1
   207a6:	4a1f      	ldr	r2, [pc, #124]	; (20824 <rpc_transport_register+0xb4>)
   207a8:	4b1f      	ldr	r3, [pc, #124]	; (20828 <rpc_transport_register+0xb8>)
   207aa:	f8df c080 	ldr.w	ip, [pc, #128]	; 2082c <rpc_transport_register+0xbc>
   207ae:	7416      	strb	r6, [r2, #16]
   207b0:	7616      	strb	r6, [r2, #24]
   207b2:	f882 6020 	strb.w	r6, [r2, #32]
   207b6:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   207ba:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   207be:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   207c2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   207c6:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   207ca:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   207ce:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   207d2:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   207d6:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   207da:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   207de:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   207e2:	611d      	str	r5, [r3, #16]
   207e4:	619d      	str	r5, [r3, #24]
   207e6:	621d      	str	r5, [r3, #32]
   207e8:	629d      	str	r5, [r3, #40]	; 0x28
   207ea:	631d      	str	r5, [r3, #48]	; 0x30
   207ec:	639d      	str	r5, [r3, #56]	; 0x38
   207ee:	641d      	str	r5, [r3, #64]	; 0x40
   207f0:	649d      	str	r5, [r3, #72]	; 0x48
   207f2:	651d      	str	r5, [r3, #80]	; 0x50
   207f4:	659d      	str	r5, [r3, #88]	; 0x58
   207f6:	661d      	str	r5, [r3, #96]	; 0x60
   207f8:	669d      	str	r5, [r3, #104]	; 0x68
   207fa:	671d      	str	r5, [r3, #112]	; 0x70
   207fc:	679d      	str	r5, [r3, #120]	; 0x78
   207fe:	7016      	strb	r6, [r2, #0]
   20800:	7216      	strb	r6, [r2, #8]
   20802:	601d      	str	r5, [r3, #0]
   20804:	609d      	str	r5, [r3, #8]
   20806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2080c:	e894 0003 	ldmia.w	r4, {r0, r1}
   20810:	e88c 0003 	stmia.w	ip, {r0, r1}
   20814:	603e      	str	r6, [r7, #0]
   20816:	4628      	mov	r0, r5
   20818:	bcf0      	pop	{r4, r5, r6, r7}
   2081a:	4770      	bx	lr
   2081c:	250e      	movs	r5, #14
   2081e:	4628      	mov	r0, r5
   20820:	bcf0      	pop	{r4, r5, r6, r7}
   20822:	4770      	bx	lr
   20824:	20021afc 	.word	0x20021afc
   20828:	20021a7c 	.word	0x20021a7c
   2082c:	20021a64 	.word	0x20021a64

00020830 <rpc_transport_unregister>:
   20830:	2800      	cmp	r0, #0
   20832:	d03a      	beq.n	208aa <rpc_transport_unregister+0x7a>
   20834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20838:	4680      	mov	r8, r0
   2083a:	4c1d      	ldr	r4, [pc, #116]	; (208b0 <rpc_transport_unregister+0x80>)
   2083c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   20840:	68a3      	ldr	r3, [r4, #8]
   20842:	3410      	adds	r4, #16
   20844:	b103      	cbz	r3, 20848 <rpc_transport_unregister+0x18>
   20846:	4798      	blx	r3
   20848:	42ac      	cmp	r4, r5
   2084a:	d1f9      	bne.n	20840 <rpc_transport_unregister+0x10>
   2084c:	f04f 0901 	mov.w	r9, #1
   20850:	2600      	movs	r6, #0
   20852:	4c18      	ldr	r4, [pc, #96]	; (208b4 <rpc_transport_unregister+0x84>)
   20854:	4d18      	ldr	r5, [pc, #96]	; (208b8 <rpc_transport_unregister+0x88>)
   20856:	f8df a064 	ldr.w	sl, [pc, #100]	; 208bc <rpc_transport_unregister+0x8c>
   2085a:	f104 0780 	add.w	r7, r4, #128	; 0x80
   2085e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   20862:	2b01      	cmp	r3, #1
   20864:	d005      	beq.n	20872 <rpc_transport_unregister+0x42>
   20866:	f8da 300c 	ldr.w	r3, [sl, #12]
   2086a:	6820      	ldr	r0, [r4, #0]
   2086c:	4798      	blx	r3
   2086e:	f804 9c04 	strb.w	r9, [r4, #-4]
   20872:	f855 0c04 	ldr.w	r0, [r5, #-4]
   20876:	3408      	adds	r4, #8
   20878:	b128      	cbz	r0, 20886 <rpc_transport_unregister+0x56>
   2087a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2087e:	4798      	blx	r3
   20880:	802e      	strh	r6, [r5, #0]
   20882:	f845 6c04 	str.w	r6, [r5, #-4]
   20886:	42bc      	cmp	r4, r7
   20888:	f105 0508 	add.w	r5, r5, #8
   2088c:	d1e7      	bne.n	2085e <rpc_transport_unregister+0x2e>
   2088e:	f8d8 0000 	ldr.w	r0, [r8]
   20892:	2218      	movs	r2, #24
   20894:	3801      	subs	r0, #1
   20896:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2089a:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   2089e:	2100      	movs	r1, #0
   208a0:	f005 fb0e 	bl	25ec0 <memset>
   208a4:	2000      	movs	r0, #0
   208a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   208aa:	200e      	movs	r0, #14
   208ac:	4770      	bx	lr
   208ae:	bf00      	nop
   208b0:	200219c4 	.word	0x200219c4
   208b4:	20021b00 	.word	0x20021b00
   208b8:	20021a80 	.word	0x20021a80
   208bc:	20021a64 	.word	0x20021a64

000208c0 <rpc_message_send>:
   208c0:	b168      	cbz	r0, 208de <rpc_message_send+0x1e>
   208c2:	b171      	cbz	r1, 208e2 <rpc_message_send+0x22>
   208c4:	4a09      	ldr	r2, [pc, #36]	; (208ec <rpc_message_send+0x2c>)
   208c6:	6853      	ldr	r3, [r2, #4]
   208c8:	b16b      	cbz	r3, 208e6 <rpc_message_send+0x26>
   208ca:	684b      	ldr	r3, [r1, #4]
   208cc:	8008      	strh	r0, [r1, #0]
   208ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   208d2:	f043 0302 	orr.w	r3, r3, #2
   208d6:	6812      	ldr	r2, [r2, #0]
   208d8:	604b      	str	r3, [r1, #4]
   208da:	4608      	mov	r0, r1
   208dc:	4710      	bx	r2
   208de:	2007      	movs	r0, #7
   208e0:	4770      	bx	lr
   208e2:	200e      	movs	r0, #14
   208e4:	4770      	bx	lr
   208e6:	2008      	movs	r0, #8
   208e8:	4770      	bx	lr
   208ea:	bf00      	nop
   208ec:	20021a64 	.word	0x20021a64

000208f0 <rpc_message_alloc>:
   208f0:	b35a      	cbz	r2, 2094a <rpc_message_alloc+0x5a>
   208f2:	b1e8      	cbz	r0, 20930 <rpc_message_alloc+0x40>
   208f4:	2300      	movs	r3, #0
   208f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208fa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 20954 <rpc_message_alloc+0x64>
   208fe:	6013      	str	r3, [r2, #0]
   20900:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20904:	b31b      	cbz	r3, 2094e <rpc_message_alloc+0x5e>
   20906:	4616      	mov	r6, r2
   20908:	460c      	mov	r4, r1
   2090a:	4605      	mov	r5, r0
   2090c:	4798      	blx	r3
   2090e:	4607      	mov	r7, r0
   20910:	b1c8      	cbz	r0, 20946 <rpc_message_alloc+0x56>
   20912:	60c4      	str	r4, [r0, #12]
   20914:	b174      	cbz	r4, 20934 <rpc_message_alloc+0x44>
   20916:	4620      	mov	r0, r4
   20918:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2091c:	4798      	blx	r3
   2091e:	60b8      	str	r0, [r7, #8]
   20920:	b960      	cbnz	r0, 2093c <rpc_message_alloc+0x4c>
   20922:	4638      	mov	r0, r7
   20924:	f8d8 300c 	ldr.w	r3, [r8, #12]
   20928:	4798      	blx	r3
   2092a:	2004      	movs	r0, #4
   2092c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20930:	2007      	movs	r0, #7
   20932:	4770      	bx	lr
   20934:	7204      	strb	r4, [r0, #8]
   20936:	7244      	strb	r4, [r0, #9]
   20938:	7284      	strb	r4, [r0, #10]
   2093a:	72c4      	strb	r4, [r0, #11]
   2093c:	803d      	strh	r5, [r7, #0]
   2093e:	6037      	str	r7, [r6, #0]
   20940:	2000      	movs	r0, #0
   20942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20946:	2004      	movs	r0, #4
   20948:	e7f0      	b.n	2092c <rpc_message_alloc+0x3c>
   2094a:	200e      	movs	r0, #14
   2094c:	4770      	bx	lr
   2094e:	2008      	movs	r0, #8
   20950:	e7ec      	b.n	2092c <rpc_message_alloc+0x3c>
   20952:	bf00      	nop
   20954:	20021a64 	.word	0x20021a64

00020958 <rpc_message_free>:
   20958:	2800      	cmp	r0, #0
   2095a:	d03d      	beq.n	209d8 <rpc_message_free+0x80>
   2095c:	2900      	cmp	r1, #0
   2095e:	f000 8091 	beq.w	20a84 <rpc_message_free+0x12c>
   20962:	b538      	push	{r3, r4, r5, lr}
   20964:	4c52      	ldr	r4, [pc, #328]	; (20ab0 <rpc_message_free+0x158>)
   20966:	6863      	ldr	r3, [r4, #4]
   20968:	2b00      	cmp	r3, #0
   2096a:	d037      	beq.n	209dc <rpc_message_free+0x84>
   2096c:	4a51      	ldr	r2, [pc, #324]	; (20ab4 <rpc_message_free+0x15c>)
   2096e:	4608      	mov	r0, r1
   20970:	6853      	ldr	r3, [r2, #4]
   20972:	4299      	cmp	r1, r3
   20974:	d034      	beq.n	209e0 <rpc_message_free+0x88>
   20976:	68d3      	ldr	r3, [r2, #12]
   20978:	4298      	cmp	r0, r3
   2097a:	d03d      	beq.n	209f8 <rpc_message_free+0xa0>
   2097c:	6953      	ldr	r3, [r2, #20]
   2097e:	4298      	cmp	r0, r3
   20980:	d03f      	beq.n	20a02 <rpc_message_free+0xaa>
   20982:	69d3      	ldr	r3, [r2, #28]
   20984:	4298      	cmp	r0, r3
   20986:	d041      	beq.n	20a0c <rpc_message_free+0xb4>
   20988:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2098a:	4298      	cmp	r0, r3
   2098c:	d044      	beq.n	20a18 <rpc_message_free+0xc0>
   2098e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20990:	4298      	cmp	r0, r3
   20992:	d047      	beq.n	20a24 <rpc_message_free+0xcc>
   20994:	6b53      	ldr	r3, [r2, #52]	; 0x34
   20996:	4298      	cmp	r0, r3
   20998:	d04a      	beq.n	20a30 <rpc_message_free+0xd8>
   2099a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   2099c:	4298      	cmp	r0, r3
   2099e:	d04d      	beq.n	20a3c <rpc_message_free+0xe4>
   209a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
   209a2:	4298      	cmp	r0, r3
   209a4:	d050      	beq.n	20a48 <rpc_message_free+0xf0>
   209a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   209a8:	4298      	cmp	r0, r3
   209aa:	d053      	beq.n	20a54 <rpc_message_free+0xfc>
   209ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
   209ae:	4298      	cmp	r0, r3
   209b0:	d056      	beq.n	20a60 <rpc_message_free+0x108>
   209b2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   209b4:	4298      	cmp	r0, r3
   209b6:	d059      	beq.n	20a6c <rpc_message_free+0x114>
   209b8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   209ba:	4298      	cmp	r0, r3
   209bc:	d05c      	beq.n	20a78 <rpc_message_free+0x120>
   209be:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   209c0:	4298      	cmp	r0, r3
   209c2:	d061      	beq.n	20a88 <rpc_message_free+0x130>
   209c4:	6f53      	ldr	r3, [r2, #116]	; 0x74
   209c6:	4298      	cmp	r0, r3
   209c8:	d064      	beq.n	20a94 <rpc_message_free+0x13c>
   209ca:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   209cc:	4283      	cmp	r3, r0
   209ce:	d067      	beq.n	20aa0 <rpc_message_free+0x148>
   209d0:	68e3      	ldr	r3, [r4, #12]
   209d2:	4798      	blx	r3
   209d4:	2000      	movs	r0, #0
   209d6:	bd38      	pop	{r3, r4, r5, pc}
   209d8:	2007      	movs	r0, #7
   209da:	4770      	bx	lr
   209dc:	2008      	movs	r0, #8
   209de:	bd38      	pop	{r3, r4, r5, pc}
   209e0:	7811      	ldrb	r1, [r2, #0]
   209e2:	2903      	cmp	r1, #3
   209e4:	d1c7      	bne.n	20976 <rpc_message_free+0x1e>
   209e6:	2100      	movs	r1, #0
   209e8:	2501      	movs	r5, #1
   209ea:	4618      	mov	r0, r3
   209ec:	68e4      	ldr	r4, [r4, #12]
   209ee:	f802 5031 	strb.w	r5, [r2, r1, lsl #3]
   209f2:	47a0      	blx	r4
   209f4:	2000      	movs	r0, #0
   209f6:	bd38      	pop	{r3, r4, r5, pc}
   209f8:	7a11      	ldrb	r1, [r2, #8]
   209fa:	2903      	cmp	r1, #3
   209fc:	d1be      	bne.n	2097c <rpc_message_free+0x24>
   209fe:	2101      	movs	r1, #1
   20a00:	e7f2      	b.n	209e8 <rpc_message_free+0x90>
   20a02:	7c11      	ldrb	r1, [r2, #16]
   20a04:	2903      	cmp	r1, #3
   20a06:	d1bc      	bne.n	20982 <rpc_message_free+0x2a>
   20a08:	2102      	movs	r1, #2
   20a0a:	e7ed      	b.n	209e8 <rpc_message_free+0x90>
   20a0c:	7e11      	ldrb	r1, [r2, #24]
   20a0e:	2903      	cmp	r1, #3
   20a10:	d0ea      	beq.n	209e8 <rpc_message_free+0x90>
   20a12:	6a53      	ldr	r3, [r2, #36]	; 0x24
   20a14:	4298      	cmp	r0, r3
   20a16:	d1ba      	bne.n	2098e <rpc_message_free+0x36>
   20a18:	f892 1020 	ldrb.w	r1, [r2, #32]
   20a1c:	2903      	cmp	r1, #3
   20a1e:	d1b6      	bne.n	2098e <rpc_message_free+0x36>
   20a20:	2104      	movs	r1, #4
   20a22:	e7e1      	b.n	209e8 <rpc_message_free+0x90>
   20a24:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   20a28:	2903      	cmp	r1, #3
   20a2a:	d1b3      	bne.n	20994 <rpc_message_free+0x3c>
   20a2c:	2105      	movs	r1, #5
   20a2e:	e7db      	b.n	209e8 <rpc_message_free+0x90>
   20a30:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   20a34:	2903      	cmp	r1, #3
   20a36:	d1b0      	bne.n	2099a <rpc_message_free+0x42>
   20a38:	2106      	movs	r1, #6
   20a3a:	e7d5      	b.n	209e8 <rpc_message_free+0x90>
   20a3c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   20a40:	2903      	cmp	r1, #3
   20a42:	d1ad      	bne.n	209a0 <rpc_message_free+0x48>
   20a44:	2107      	movs	r1, #7
   20a46:	e7cf      	b.n	209e8 <rpc_message_free+0x90>
   20a48:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
   20a4c:	2903      	cmp	r1, #3
   20a4e:	d1aa      	bne.n	209a6 <rpc_message_free+0x4e>
   20a50:	2108      	movs	r1, #8
   20a52:	e7c9      	b.n	209e8 <rpc_message_free+0x90>
   20a54:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
   20a58:	2903      	cmp	r1, #3
   20a5a:	d1a7      	bne.n	209ac <rpc_message_free+0x54>
   20a5c:	2109      	movs	r1, #9
   20a5e:	e7c3      	b.n	209e8 <rpc_message_free+0x90>
   20a60:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   20a64:	2903      	cmp	r1, #3
   20a66:	d1a4      	bne.n	209b2 <rpc_message_free+0x5a>
   20a68:	210a      	movs	r1, #10
   20a6a:	e7bd      	b.n	209e8 <rpc_message_free+0x90>
   20a6c:	f892 1058 	ldrb.w	r1, [r2, #88]	; 0x58
   20a70:	2903      	cmp	r1, #3
   20a72:	d1a1      	bne.n	209b8 <rpc_message_free+0x60>
   20a74:	210b      	movs	r1, #11
   20a76:	e7b7      	b.n	209e8 <rpc_message_free+0x90>
   20a78:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
   20a7c:	2903      	cmp	r1, #3
   20a7e:	d19e      	bne.n	209be <rpc_message_free+0x66>
   20a80:	210c      	movs	r1, #12
   20a82:	e7b1      	b.n	209e8 <rpc_message_free+0x90>
   20a84:	200e      	movs	r0, #14
   20a86:	4770      	bx	lr
   20a88:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
   20a8c:	2903      	cmp	r1, #3
   20a8e:	d199      	bne.n	209c4 <rpc_message_free+0x6c>
   20a90:	210d      	movs	r1, #13
   20a92:	e7a9      	b.n	209e8 <rpc_message_free+0x90>
   20a94:	f892 1070 	ldrb.w	r1, [r2, #112]	; 0x70
   20a98:	2903      	cmp	r1, #3
   20a9a:	d196      	bne.n	209ca <rpc_message_free+0x72>
   20a9c:	210e      	movs	r1, #14
   20a9e:	e7a3      	b.n	209e8 <rpc_message_free+0x90>
   20aa0:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   20aa4:	2b03      	cmp	r3, #3
   20aa6:	d193      	bne.n	209d0 <rpc_message_free+0x78>
   20aa8:	4603      	mov	r3, r0
   20aaa:	210f      	movs	r1, #15
   20aac:	e79c      	b.n	209e8 <rpc_message_free+0x90>
   20aae:	bf00      	nop
   20ab0:	20021a64 	.word	0x20021a64
   20ab4:	20021afc 	.word	0x20021afc

00020ab8 <rpc_message_data_free>:
   20ab8:	2800      	cmp	r0, #0
   20aba:	d03d      	beq.n	20b38 <rpc_message_data_free+0x80>
   20abc:	2900      	cmp	r1, #0
   20abe:	f000 808b 	beq.w	20bd8 <rpc_message_data_free+0x120>
   20ac2:	b538      	push	{r3, r4, r5, lr}
   20ac4:	4a4f      	ldr	r2, [pc, #316]	; (20c04 <rpc_message_data_free+0x14c>)
   20ac6:	6853      	ldr	r3, [r2, #4]
   20ac8:	2b00      	cmp	r3, #0
   20aca:	d037      	beq.n	20b3c <rpc_message_data_free+0x84>
   20acc:	4b4e      	ldr	r3, [pc, #312]	; (20c08 <rpc_message_data_free+0x150>)
   20ace:	681c      	ldr	r4, [r3, #0]
   20ad0:	42a1      	cmp	r1, r4
   20ad2:	d035      	beq.n	20b40 <rpc_message_data_free+0x88>
   20ad4:	689c      	ldr	r4, [r3, #8]
   20ad6:	42a1      	cmp	r1, r4
   20ad8:	d03d      	beq.n	20b56 <rpc_message_data_free+0x9e>
   20ada:	691c      	ldr	r4, [r3, #16]
   20adc:	42a1      	cmp	r1, r4
   20ade:	d03f      	beq.n	20b60 <rpc_message_data_free+0xa8>
   20ae0:	699c      	ldr	r4, [r3, #24]
   20ae2:	42a1      	cmp	r1, r4
   20ae4:	d041      	beq.n	20b6a <rpc_message_data_free+0xb2>
   20ae6:	6a1c      	ldr	r4, [r3, #32]
   20ae8:	42a1      	cmp	r1, r4
   20aea:	d043      	beq.n	20b74 <rpc_message_data_free+0xbc>
   20aec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   20aee:	42a1      	cmp	r1, r4
   20af0:	d045      	beq.n	20b7e <rpc_message_data_free+0xc6>
   20af2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   20af4:	42a1      	cmp	r1, r4
   20af6:	d047      	beq.n	20b88 <rpc_message_data_free+0xd0>
   20af8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   20afa:	42a1      	cmp	r1, r4
   20afc:	d049      	beq.n	20b92 <rpc_message_data_free+0xda>
   20afe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   20b00:	42a1      	cmp	r1, r4
   20b02:	d04b      	beq.n	20b9c <rpc_message_data_free+0xe4>
   20b04:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   20b06:	42a1      	cmp	r1, r4
   20b08:	d04e      	beq.n	20ba8 <rpc_message_data_free+0xf0>
   20b0a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   20b0c:	42a1      	cmp	r1, r4
   20b0e:	d051      	beq.n	20bb4 <rpc_message_data_free+0xfc>
   20b10:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   20b12:	42a1      	cmp	r1, r4
   20b14:	d054      	beq.n	20bc0 <rpc_message_data_free+0x108>
   20b16:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   20b18:	42a1      	cmp	r1, r4
   20b1a:	d057      	beq.n	20bcc <rpc_message_data_free+0x114>
   20b1c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   20b1e:	42a1      	cmp	r1, r4
   20b20:	d05c      	beq.n	20bdc <rpc_message_data_free+0x124>
   20b22:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   20b24:	42a1      	cmp	r1, r4
   20b26:	d05f      	beq.n	20be8 <rpc_message_data_free+0x130>
   20b28:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   20b2a:	428c      	cmp	r4, r1
   20b2c:	d062      	beq.n	20bf4 <rpc_message_data_free+0x13c>
   20b2e:	4608      	mov	r0, r1
   20b30:	6913      	ldr	r3, [r2, #16]
   20b32:	4798      	blx	r3
   20b34:	2000      	movs	r0, #0
   20b36:	bd38      	pop	{r3, r4, r5, pc}
   20b38:	2007      	movs	r0, #7
   20b3a:	4770      	bx	lr
   20b3c:	2008      	movs	r0, #8
   20b3e:	bd38      	pop	{r3, r4, r5, pc}
   20b40:	889c      	ldrh	r4, [r3, #4]
   20b42:	4284      	cmp	r4, r0
   20b44:	d1c6      	bne.n	20ad4 <rpc_message_data_free+0x1c>
   20b46:	2400      	movs	r4, #0
   20b48:	2000      	movs	r0, #0
   20b4a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   20b4e:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   20b52:	80a8      	strh	r0, [r5, #4]
   20b54:	e7eb      	b.n	20b2e <rpc_message_data_free+0x76>
   20b56:	899c      	ldrh	r4, [r3, #12]
   20b58:	4284      	cmp	r4, r0
   20b5a:	d1be      	bne.n	20ada <rpc_message_data_free+0x22>
   20b5c:	2401      	movs	r4, #1
   20b5e:	e7f3      	b.n	20b48 <rpc_message_data_free+0x90>
   20b60:	8a9c      	ldrh	r4, [r3, #20]
   20b62:	4284      	cmp	r4, r0
   20b64:	d1bc      	bne.n	20ae0 <rpc_message_data_free+0x28>
   20b66:	2402      	movs	r4, #2
   20b68:	e7ee      	b.n	20b48 <rpc_message_data_free+0x90>
   20b6a:	8b9c      	ldrh	r4, [r3, #28]
   20b6c:	4284      	cmp	r4, r0
   20b6e:	d1ba      	bne.n	20ae6 <rpc_message_data_free+0x2e>
   20b70:	2403      	movs	r4, #3
   20b72:	e7e9      	b.n	20b48 <rpc_message_data_free+0x90>
   20b74:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   20b76:	4284      	cmp	r4, r0
   20b78:	d1b8      	bne.n	20aec <rpc_message_data_free+0x34>
   20b7a:	2404      	movs	r4, #4
   20b7c:	e7e4      	b.n	20b48 <rpc_message_data_free+0x90>
   20b7e:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   20b80:	4284      	cmp	r4, r0
   20b82:	d1b6      	bne.n	20af2 <rpc_message_data_free+0x3a>
   20b84:	2405      	movs	r4, #5
   20b86:	e7df      	b.n	20b48 <rpc_message_data_free+0x90>
   20b88:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   20b8a:	4284      	cmp	r4, r0
   20b8c:	d1b4      	bne.n	20af8 <rpc_message_data_free+0x40>
   20b8e:	2406      	movs	r4, #6
   20b90:	e7da      	b.n	20b48 <rpc_message_data_free+0x90>
   20b92:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   20b94:	4284      	cmp	r4, r0
   20b96:	d1b2      	bne.n	20afe <rpc_message_data_free+0x46>
   20b98:	2407      	movs	r4, #7
   20b9a:	e7d5      	b.n	20b48 <rpc_message_data_free+0x90>
   20b9c:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   20ba0:	4284      	cmp	r4, r0
   20ba2:	d1af      	bne.n	20b04 <rpc_message_data_free+0x4c>
   20ba4:	2408      	movs	r4, #8
   20ba6:	e7cf      	b.n	20b48 <rpc_message_data_free+0x90>
   20ba8:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   20bac:	4284      	cmp	r4, r0
   20bae:	d1ac      	bne.n	20b0a <rpc_message_data_free+0x52>
   20bb0:	2409      	movs	r4, #9
   20bb2:	e7c9      	b.n	20b48 <rpc_message_data_free+0x90>
   20bb4:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   20bb8:	4284      	cmp	r4, r0
   20bba:	d1a9      	bne.n	20b10 <rpc_message_data_free+0x58>
   20bbc:	240a      	movs	r4, #10
   20bbe:	e7c3      	b.n	20b48 <rpc_message_data_free+0x90>
   20bc0:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   20bc4:	4284      	cmp	r4, r0
   20bc6:	d1a6      	bne.n	20b16 <rpc_message_data_free+0x5e>
   20bc8:	240b      	movs	r4, #11
   20bca:	e7bd      	b.n	20b48 <rpc_message_data_free+0x90>
   20bcc:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   20bd0:	4284      	cmp	r4, r0
   20bd2:	d1a3      	bne.n	20b1c <rpc_message_data_free+0x64>
   20bd4:	240c      	movs	r4, #12
   20bd6:	e7b7      	b.n	20b48 <rpc_message_data_free+0x90>
   20bd8:	200e      	movs	r0, #14
   20bda:	4770      	bx	lr
   20bdc:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   20be0:	4284      	cmp	r4, r0
   20be2:	d19e      	bne.n	20b22 <rpc_message_data_free+0x6a>
   20be4:	240d      	movs	r4, #13
   20be6:	e7af      	b.n	20b48 <rpc_message_data_free+0x90>
   20be8:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   20bec:	4284      	cmp	r4, r0
   20bee:	d19b      	bne.n	20b28 <rpc_message_data_free+0x70>
   20bf0:	240e      	movs	r4, #14
   20bf2:	e7a9      	b.n	20b48 <rpc_message_data_free+0x90>
   20bf4:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   20bf8:	4284      	cmp	r4, r0
   20bfa:	bf08      	it	eq
   20bfc:	240f      	moveq	r4, #15
   20bfe:	d196      	bne.n	20b2e <rpc_message_data_free+0x76>
   20c00:	e7a2      	b.n	20b48 <rpc_message_data_free+0x90>
   20c02:	bf00      	nop
   20c04:	20021a64 	.word	0x20021a64
   20c08:	20021a7c 	.word	0x20021a7c

00020c0c <packet_free_cb>:
   20c0c:	b510      	push	{r4, lr}
   20c0e:	4604      	mov	r4, r0
   20c10:	6800      	ldr	r0, [r0, #0]
   20c12:	f7fd ffa7 	bl	1eb64 <rpc_gnss_client_data_free>
   20c16:	68a0      	ldr	r0, [r4, #8]
   20c18:	b118      	cbz	r0, 20c22 <packet_free_cb+0x16>
   20c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20c1e:	f7f3 be45 	b.w	148ac <nrf_free>
   20c22:	bd10      	pop	{r4, pc}

00020c24 <rpc_gnss_event_handler>:
   20c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c26:	4b55      	ldr	r3, [pc, #340]	; (20d7c <rpc_gnss_event_handler+0x158>)
   20c28:	4605      	mov	r5, r0
   20c2a:	6800      	ldr	r0, [r0, #0]
   20c2c:	881b      	ldrh	r3, [r3, #0]
   20c2e:	6802      	ldr	r2, [r0, #0]
   20c30:	4e53      	ldr	r6, [pc, #332]	; (20d80 <rpc_gnss_event_handler+0x15c>)
   20c32:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   20c36:	b085      	sub	sp, #20
   20c38:	460c      	mov	r4, r1
   20c3a:	6030      	str	r0, [r6, #0]
   20c3c:	d02e      	beq.n	20c9c <rpc_gnss_event_handler+0x78>
   20c3e:	f244 0301 	movw	r3, #16385	; 0x4001
   20c42:	429c      	cmp	r4, r3
   20c44:	d003      	beq.n	20c4e <rpc_gnss_event_handler+0x2a>
   20c46:	f244 0302 	movw	r3, #16386	; 0x4002
   20c4a:	429c      	cmp	r4, r3
   20c4c:	d107      	bne.n	20c5e <rpc_gnss_event_handler+0x3a>
   20c4e:	4e4d      	ldr	r6, [pc, #308]	; (20d84 <rpc_gnss_event_handler+0x160>)
   20c50:	6833      	ldr	r3, [r6, #0]
   20c52:	075b      	lsls	r3, r3, #29
   20c54:	d406      	bmi.n	20c64 <rpc_gnss_event_handler+0x40>
   20c56:	6828      	ldr	r0, [r5, #0]
   20c58:	b108      	cbz	r0, 20c5e <rpc_gnss_event_handler+0x3a>
   20c5a:	f7fd ff83 	bl	1eb64 <rpc_gnss_client_data_free>
   20c5e:	2000      	movs	r0, #0
   20c60:	b005      	add	sp, #20
   20c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c64:	2002      	movs	r0, #2
   20c66:	f7f3 fe03 	bl	14870 <nrf_malloc>
   20c6a:	4607      	mov	r7, r0
   20c6c:	2800      	cmp	r0, #0
   20c6e:	d063      	beq.n	20d38 <rpc_gnss_event_handler+0x114>
   20c70:	2302      	movs	r3, #2
   20c72:	8004      	strh	r4, [r0, #0]
   20c74:	6829      	ldr	r1, [r5, #0]
   20c76:	686a      	ldr	r2, [r5, #4]
   20c78:	4843      	ldr	r0, [pc, #268]	; (20d88 <rpc_gnss_event_handler+0x164>)
   20c7a:	6800      	ldr	r0, [r0, #0]
   20c7c:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   20c80:	9303      	str	r3, [sp, #12]
   20c82:	6803      	ldr	r3, [r0, #0]
   20c84:	4669      	mov	r1, sp
   20c86:	685b      	ldr	r3, [r3, #4]
   20c88:	4798      	blx	r3
   20c8a:	3001      	adds	r0, #1
   20c8c:	d061      	beq.n	20d52 <rpc_gnss_event_handler+0x12e>
   20c8e:	2000      	movs	r0, #0
   20c90:	6833      	ldr	r3, [r6, #0]
   20c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   20c96:	6033      	str	r3, [r6, #0]
   20c98:	b005      	add	sp, #20
   20c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c9c:	4b39      	ldr	r3, [pc, #228]	; (20d84 <rpc_gnss_event_handler+0x160>)
   20c9e:	681a      	ldr	r2, [r3, #0]
   20ca0:	01d1      	lsls	r1, r2, #7
   20ca2:	d50f      	bpl.n	20cc4 <rpc_gnss_event_handler+0xa0>
   20ca4:	f242 0202 	movw	r2, #8194	; 0x2002
   20ca8:	4294      	cmp	r4, r2
   20caa:	d10b      	bne.n	20cc4 <rpc_gnss_event_handler+0xa0>
   20cac:	6842      	ldr	r2, [r0, #4]
   20cae:	b91a      	cbnz	r2, 20cb8 <rpc_gnss_event_handler+0x94>
   20cb0:	681a      	ldr	r2, [r3, #0]
   20cb2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   20cb6:	601a      	str	r2, [r3, #0]
   20cb8:	681a      	ldr	r2, [r3, #0]
   20cba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   20cbe:	601a      	str	r2, [r3, #0]
   20cc0:	681b      	ldr	r3, [r3, #0]
   20cc2:	e01d      	b.n	20d00 <rpc_gnss_event_handler+0xdc>
   20cc4:	681a      	ldr	r2, [r3, #0]
   20cc6:	0252      	lsls	r2, r2, #9
   20cc8:	d50e      	bpl.n	20ce8 <rpc_gnss_event_handler+0xc4>
   20cca:	f242 0203 	movw	r2, #8195	; 0x2003
   20cce:	4294      	cmp	r4, r2
   20cd0:	d10a      	bne.n	20ce8 <rpc_gnss_event_handler+0xc4>
   20cd2:	6842      	ldr	r2, [r0, #4]
   20cd4:	b91a      	cbnz	r2, 20cde <rpc_gnss_event_handler+0xba>
   20cd6:	681a      	ldr	r2, [r3, #0]
   20cd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   20cdc:	601a      	str	r2, [r3, #0]
   20cde:	681a      	ldr	r2, [r3, #0]
   20ce0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   20ce4:	601a      	str	r2, [r3, #0]
   20ce6:	e00b      	b.n	20d00 <rpc_gnss_event_handler+0xdc>
   20ce8:	f242 0201 	movw	r2, #8193	; 0x2001
   20cec:	4294      	cmp	r4, r2
   20cee:	d10a      	bne.n	20d06 <rpc_gnss_event_handler+0xe2>
   20cf0:	6842      	ldr	r2, [r0, #4]
   20cf2:	b92a      	cbnz	r2, 20d00 <rpc_gnss_event_handler+0xdc>
   20cf4:	681a      	ldr	r2, [r3, #0]
   20cf6:	0c12      	lsrs	r2, r2, #16
   20cf8:	0412      	lsls	r2, r2, #16
   20cfa:	f042 0202 	orr.w	r2, r2, #2
   20cfe:	601a      	str	r2, [r3, #0]
   20d00:	f7fd ff30 	bl	1eb64 <rpc_gnss_client_data_free>
   20d04:	e79b      	b.n	20c3e <rpc_gnss_event_handler+0x1a>
   20d06:	f242 0204 	movw	r2, #8196	; 0x2004
   20d0a:	4294      	cmp	r4, r2
   20d0c:	d1f8      	bne.n	20d00 <rpc_gnss_event_handler+0xdc>
   20d0e:	6842      	ldr	r2, [r0, #4]
   20d10:	bb42      	cbnz	r2, 20d64 <rpc_gnss_event_handler+0x140>
   20d12:	681a      	ldr	r2, [r3, #0]
   20d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   20d18:	601a      	str	r2, [r3, #0]
   20d1a:	681a      	ldr	r2, [r3, #0]
   20d1c:	b292      	uxth	r2, r2
   20d1e:	2a03      	cmp	r2, #3
   20d20:	681a      	ldr	r2, [r3, #0]
   20d22:	d024      	beq.n	20d6e <rpc_gnss_event_handler+0x14a>
   20d24:	b292      	uxth	r2, r2
   20d26:	2a04      	cmp	r2, #4
   20d28:	d1d9      	bne.n	20cde <rpc_gnss_event_handler+0xba>
   20d2a:	681a      	ldr	r2, [r3, #0]
   20d2c:	0c12      	lsrs	r2, r2, #16
   20d2e:	0412      	lsls	r2, r2, #16
   20d30:	f042 0202 	orr.w	r2, r2, #2
   20d34:	601a      	str	r2, [r3, #0]
   20d36:	e7d2      	b.n	20cde <rpc_gnss_event_handler+0xba>
   20d38:	2102      	movs	r1, #2
   20d3a:	686b      	ldr	r3, [r5, #4]
   20d3c:	682a      	ldr	r2, [r5, #0]
   20d3e:	4812      	ldr	r0, [pc, #72]	; (20d88 <rpc_gnss_event_handler+0x164>)
   20d40:	6800      	ldr	r0, [r0, #0]
   20d42:	e9cd 7102 	strd	r7, r1, [sp, #8]
   20d46:	e9cd 2300 	strd	r2, r3, [sp]
   20d4a:	6803      	ldr	r3, [r0, #0]
   20d4c:	4669      	mov	r1, sp
   20d4e:	685b      	ldr	r3, [r3, #4]
   20d50:	4798      	blx	r3
   20d52:	4638      	mov	r0, r7
   20d54:	f7f3 fdaa 	bl	148ac <nrf_free>
   20d58:	6828      	ldr	r0, [r5, #0]
   20d5a:	f7fd ff03 	bl	1eb64 <rpc_gnss_client_data_free>
   20d5e:	2000      	movs	r0, #0
   20d60:	b005      	add	sp, #20
   20d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d64:	681a      	ldr	r2, [r3, #0]
   20d66:	b292      	uxth	r2, r2
   20d68:	2a03      	cmp	r2, #3
   20d6a:	d1b8      	bne.n	20cde <rpc_gnss_event_handler+0xba>
   20d6c:	e7dd      	b.n	20d2a <rpc_gnss_event_handler+0x106>
   20d6e:	0c12      	lsrs	r2, r2, #16
   20d70:	0412      	lsls	r2, r2, #16
   20d72:	f042 0204 	orr.w	r2, r2, #4
   20d76:	601a      	str	r2, [r3, #0]
   20d78:	e7b1      	b.n	20cde <rpc_gnss_event_handler+0xba>
   20d7a:	bf00      	nop
   20d7c:	2002225c 	.word	0x2002225c
   20d80:	20021b80 	.word	0x20021b80
   20d84:	20021b7c 	.word	0x20021b7c
   20d88:	20021b84 	.word	0x20021b84

00020d8c <gnss_interface_read>:
   20d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d90:	4cd0      	ldr	r4, [pc, #832]	; (210d4 <gnss_interface_read+0x348>)
   20d92:	b0b7      	sub	sp, #220	; 0xdc
   20d94:	42a0      	cmp	r0, r4
   20d96:	f040 81d1 	bne.w	2113c <gnss_interface_read+0x3b0>
   20d9a:	460e      	mov	r6, r1
   20d9c:	2900      	cmp	r1, #0
   20d9e:	f000 81c7 	beq.w	21130 <gnss_interface_read+0x3a4>
   20da2:	2ad7      	cmp	r2, #215	; 0xd7
   20da4:	f240 81c4 	bls.w	21130 <gnss_interface_read+0x3a4>
   20da8:	4dcb      	ldr	r5, [pc, #812]	; (210d8 <gnss_interface_read+0x34c>)
   20daa:	4699      	mov	r9, r3
   20dac:	682b      	ldr	r3, [r5, #0]
   20dae:	b29b      	uxth	r3, r3
   20db0:	2b04      	cmp	r3, #4
   20db2:	f040 81c9 	bne.w	21148 <gnss_interface_read+0x3bc>
   20db6:	2102      	movs	r1, #2
   20db8:	f04f 0cb6 	mov.w	ip, #182	; 0xb6
   20dbc:	4607      	mov	r7, r0
   20dbe:	2400      	movs	r4, #0
   20dc0:	682b      	ldr	r3, [r5, #0]
   20dc2:	f10d 020e 	add.w	r2, sp, #14
   20dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   20dca:	602b      	str	r3, [r5, #0]
   20dcc:	f8df a30c 	ldr.w	sl, [pc, #780]	; 210dc <gnss_interface_read+0x350>
   20dd0:	ab08      	add	r3, sp, #32
   20dd2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 210e0 <gnss_interface_read+0x354>
   20dd6:	f8cd c014 	str.w	ip, [sp, #20]
   20dda:	9107      	str	r1, [sp, #28]
   20ddc:	9304      	str	r3, [sp, #16]
   20dde:	9206      	str	r2, [sp, #24]
   20de0:	ea09 0b01 	and.w	fp, r9, r1
   20de4:	f8da 0000 	ldr.w	r0, [sl]
   20de8:	464a      	mov	r2, r9
   20dea:	6803      	ldr	r3, [r0, #0]
   20dec:	a904      	add	r1, sp, #16
   20dee:	689b      	ldr	r3, [r3, #8]
   20df0:	4798      	blx	r3
   20df2:	2800      	cmp	r0, #0
   20df4:	da12      	bge.n	20e1c <gnss_interface_read+0x90>
   20df6:	f1bb 0f00 	cmp.w	fp, #0
   20dfa:	f040 8173 	bne.w	210e4 <gnss_interface_read+0x358>
   20dfe:	682b      	ldr	r3, [r5, #0]
   20e00:	03d8      	lsls	r0, r3, #15
   20e02:	d4ef      	bmi.n	20de4 <gnss_interface_read+0x58>
   20e04:	b10c      	cbz	r4, 20e0a <gnss_interface_read+0x7e>
   20e06:	e7ed      	b.n	20de4 <gnss_interface_read+0x58>
   20e08:	b930      	cbnz	r0, 20e18 <gnss_interface_read+0x8c>
   20e0a:	4641      	mov	r1, r8
   20e0c:	4638      	mov	r0, r7
   20e0e:	f7f2 fc75 	bl	136fc <bsd_os_timedwait>
   20e12:	682b      	ldr	r3, [r5, #0]
   20e14:	03d9      	lsls	r1, r3, #15
   20e16:	d5f7      	bpl.n	20e08 <gnss_interface_read+0x7c>
   20e18:	4604      	mov	r4, r0
   20e1a:	e7e3      	b.n	20de4 <gnss_interface_read+0x58>
   20e1c:	4603      	mov	r3, r0
   20e1e:	f244 0102 	movw	r1, #16386	; 0x4002
   20e22:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   20e26:	428a      	cmp	r2, r1
   20e28:	f000 8172 	beq.w	21110 <gnss_interface_read+0x384>
   20e2c:	f244 0101 	movw	r1, #16385	; 0x4001
   20e30:	428a      	cmp	r2, r1
   20e32:	f040 817d 	bne.w	21130 <gnss_interface_read+0x3a4>
   20e36:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
   20e3a:	2201      	movs	r2, #1
   20e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   20e3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   20e40:	e9c6 0104 	strd	r0, r1, [r6, #16]
   20e44:	e9c6 7802 	strd	r7, r8, [r6, #8]
   20e48:	980d      	ldr	r0, [sp, #52]	; 0x34
   20e4a:	990e      	ldr	r1, [sp, #56]	; 0x38
   20e4c:	7032      	strb	r2, [r6, #0]
   20e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20e50:	61b0      	str	r0, [r6, #24]
   20e52:	9810      	ldr	r0, [sp, #64]	; 0x40
   20e54:	61f1      	str	r1, [r6, #28]
   20e56:	6232      	str	r2, [r6, #32]
   20e58:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
   20e5c:	f8dd 204d 	ldr.w	r2, [sp, #77]	; 0x4d
   20e60:	6270      	str	r0, [r6, #36]	; 0x24
   20e62:	f8dd 0051 	ldr.w	r0, [sp, #81]	; 0x51
   20e66:	f886 1044 	strb.w	r1, [r6, #68]	; 0x44
   20e6a:	f8dd 1055 	ldr.w	r1, [sp, #85]	; 0x55
   20e6e:	6372      	str	r2, [r6, #52]	; 0x34
   20e70:	f8dd 2059 	ldr.w	r2, [sp, #89]	; 0x59
   20e74:	63b0      	str	r0, [r6, #56]	; 0x38
   20e76:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
   20e7a:	63f1      	str	r1, [r6, #60]	; 0x3c
   20e7c:	6432      	str	r2, [r6, #64]	; 0x40
   20e7e:	f8dd 1046 	ldr.w	r1, [sp, #70]	; 0x46
   20e82:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   20e86:	8530      	strh	r0, [r6, #40]	; 0x28
   20e88:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
   20e8c:	f8c6 102a 	str.w	r1, [r6, #42]	; 0x2a
   20e90:	f89d 404b 	ldrb.w	r4, [sp, #75]	; 0x4b
   20e94:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   20e98:	9a18      	ldr	r2, [sp, #96]	; 0x60
   20e9a:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
   20e9e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
   20ea2:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
   20ea6:	f3c2 200f 	ubfx	r0, r2, #8, #16
   20eaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   20eac:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   20eb0:	8634      	strh	r4, [r6, #48]	; 0x30
   20eb2:	f8a6 004a 	strh.w	r0, [r6, #74]	; 0x4a
   20eb6:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
   20eba:	f3c2 220f 	ubfx	r2, r2, #8, #16
   20ebe:	f8a6 1056 	strh.w	r1, [r6, #86]	; 0x56
   20ec2:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   20ec6:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
   20eca:	f8dd 2063 	ldr.w	r2, [sp, #99]	; 0x63
   20ece:	f8a6 0046 	strh.w	r0, [r6, #70]	; 0x46
   20ed2:	f886 1048 	strb.w	r1, [r6, #72]	; 0x48
   20ed6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
   20eda:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
   20ede:	64f2      	str	r2, [r6, #76]	; 0x4c
   20ee0:	f89d 206a 	ldrb.w	r2, [sp, #106]	; 0x6a
   20ee4:	f886 0050 	strb.w	r0, [r6, #80]	; 0x50
   20ee8:	f8a6 1052 	strh.w	r1, [r6, #82]	; 0x52
   20eec:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
   20ef0:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
   20ef4:	f8dd 006d 	ldr.w	r0, [sp, #109]	; 0x6d
   20ef8:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
   20efc:	65b0      	str	r0, [r6, #88]	; 0x58
   20efe:	f886 105c 	strb.w	r1, [r6, #92]	; 0x5c
   20f02:	f89d 0074 	ldrb.w	r0, [sp, #116]	; 0x74
   20f06:	f8dd 1077 	ldr.w	r1, [sp, #119]	; 0x77
   20f0a:	f8a6 205e 	strh.w	r2, [r6, #94]	; 0x5e
   20f0e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
   20f12:	f886 0060 	strb.w	r0, [r6, #96]	; 0x60
   20f16:	6671      	str	r1, [r6, #100]	; 0x64
   20f18:	f886 2068 	strb.w	r2, [r6, #104]	; 0x68
   20f1c:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
   20f20:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
   20f24:	9922      	ldr	r1, [sp, #136]	; 0x88
   20f26:	f89d 4094 	ldrb.w	r4, [sp, #148]	; 0x94
   20f2a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   20f2e:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   20f32:	f3c1 210f 	ubfx	r1, r1, #8, #16
   20f36:	f8a6 006e 	strh.w	r0, [r6, #110]	; 0x6e
   20f3a:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
   20f3e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   20f42:	f8a6 107a 	strh.w	r1, [r6, #122]	; 0x7a
   20f46:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
   20f4a:	f8a6 2086 	strh.w	r2, [r6, #134]	; 0x86
   20f4e:	f8dd 2081 	ldr.w	r2, [sp, #129]	; 0x81
   20f52:	f8a6 006a 	strh.w	r0, [r6, #106]	; 0x6a
   20f56:	f886 106c 	strb.w	r1, [r6, #108]	; 0x6c
   20f5a:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
   20f5e:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
   20f62:	6732      	str	r2, [r6, #112]	; 0x70
   20f64:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
   20f68:	f886 0074 	strb.w	r0, [r6, #116]	; 0x74
   20f6c:	f8a6 1076 	strh.w	r1, [r6, #118]	; 0x76
   20f70:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
   20f74:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
   20f78:	f8dd 008b 	ldr.w	r0, [sp, #139]	; 0x8b
   20f7c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
   20f80:	67f0      	str	r0, [r6, #124]	; 0x7c
   20f82:	f886 1080 	strb.w	r1, [r6, #128]	; 0x80
   20f86:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   20f8a:	f8dd 1095 	ldr.w	r1, [sp, #149]	; 0x95
   20f8e:	f8a6 2082 	strh.w	r2, [r6, #130]	; 0x82
   20f92:	f89d 2099 	ldrb.w	r2, [sp, #153]	; 0x99
   20f96:	f886 0084 	strb.w	r0, [r6, #132]	; 0x84
   20f9a:	f8c6 1088 	str.w	r1, [r6, #136]	; 0x88
   20f9e:	f886 208c 	strb.w	r2, [r6, #140]	; 0x8c
   20fa2:	f8bd 409a 	ldrh.w	r4, [sp, #154]	; 0x9a
   20fa6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   20fa8:	f89d 70a8 	ldrb.w	r7, [sp, #168]	; 0xa8
   20fac:	f89d 10a7 	ldrb.w	r1, [sp, #167]	; 0xa7
   20fb0:	f3c2 200f 	ubfx	r0, r2, #8, #16
   20fb4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   20fb6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   20fba:	f8a6 0092 	strh.w	r0, [r6, #146]	; 0x92
   20fbe:	f89d 009c 	ldrb.w	r0, [sp, #156]	; 0x9c
   20fc2:	f8a6 109e 	strh.w	r1, [r6, #158]	; 0x9e
   20fc6:	f3c2 220f 	ubfx	r2, r2, #8, #16
   20fca:	f8dd 109f 	ldr.w	r1, [sp, #159]	; 0x9f
   20fce:	f8a6 408e 	strh.w	r4, [r6, #142]	; 0x8e
   20fd2:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
   20fd6:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
   20fda:	f89d 20a3 	ldrb.w	r2, [sp, #163]	; 0xa3
   20fde:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
   20fe2:	f8c6 1094 	str.w	r1, [r6, #148]	; 0x94
   20fe6:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
   20fea:	f886 2098 	strb.w	r2, [r6, #152]	; 0x98
   20fee:	f8dd 20a9 	ldr.w	r2, [sp, #169]	; 0xa9
   20ff2:	f8a6 009a 	strh.w	r0, [r6, #154]	; 0x9a
   20ff6:	f886 109c 	strb.w	r1, [r6, #156]	; 0x9c
   20ffa:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
   20ffe:	f89d 00ad 	ldrb.w	r0, [sp, #173]	; 0xad
   21002:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
   21006:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
   2100a:	f886 00a4 	strb.w	r0, [r6, #164]	; 0xa4
   2100e:	f8a6 10a6 	strh.w	r1, [r6, #166]	; 0xa6
   21012:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
   21016:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
   2101a:	f8dd 00b3 	ldr.w	r0, [sp, #179]	; 0xb3
   2101e:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   21022:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
   21026:	f886 10b0 	strb.w	r1, [r6, #176]	; 0xb0
   2102a:	f8a6 20b2 	strh.w	r2, [r6, #178]	; 0xb2
   2102e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
   21032:	f89d 00bb 	ldrb.w	r0, [sp, #187]	; 0xbb
   21036:	f89d 40d0 	ldrb.w	r4, [sp, #208]	; 0xd0
   2103a:	9931      	ldr	r1, [sp, #196]	; 0xc4
   2103c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   21040:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
   21044:	f89d 70ba 	ldrb.w	r7, [sp, #186]	; 0xba
   21048:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2104c:	f3c1 210f 	ubfx	r1, r1, #8, #16
   21050:	f8a6 00b6 	strh.w	r0, [r6, #182]	; 0xb6
   21054:	f8a6 20ce 	strh.w	r2, [r6, #206]	; 0xce
   21058:	f8a6 10c2 	strh.w	r1, [r6, #194]	; 0xc2
   2105c:	f886 70b4 	strb.w	r7, [r6, #180]	; 0xb4
   21060:	f8bd 10c2 	ldrh.w	r1, [sp, #194]	; 0xc2
   21064:	f89d 00c1 	ldrb.w	r0, [sp, #193]	; 0xc1
   21068:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
   2106c:	f8dd 40bd 	ldr.w	r4, [sp, #189]	; 0xbd
   21070:	f886 00bc 	strb.w	r0, [r6, #188]	; 0xbc
   21074:	f8a6 10be 	strh.w	r1, [r6, #190]	; 0xbe
   21078:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
   2107c:	f886 20c0 	strb.w	r2, [r6, #192]	; 0xc0
   21080:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
   21084:	f8dd 00c7 	ldr.w	r0, [sp, #199]	; 0xc7
   21088:	f89d 10cb 	ldrb.w	r1, [sp, #203]	; 0xcb
   2108c:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
   21090:	f886 10c8 	strb.w	r1, [r6, #200]	; 0xc8
   21094:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   21098:	f8dd 10d1 	ldr.w	r1, [sp, #209]	; 0xd1
   2109c:	f8a6 20ca 	strh.w	r2, [r6, #202]	; 0xca
   210a0:	f89d 20d5 	ldrb.w	r2, [sp, #213]	; 0xd5
   210a4:	f886 00cc 	strb.w	r0, [r6, #204]	; 0xcc
   210a8:	f8c6 10d0 	str.w	r1, [r6, #208]	; 0xd0
   210ac:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
   210b0:	f8da 0000 	ldr.w	r0, [sl]
   210b4:	9301      	str	r3, [sp, #4]
   210b6:	6802      	ldr	r2, [r0, #0]
   210b8:	68d2      	ldr	r2, [r2, #12]
   210ba:	4790      	blx	r2
   210bc:	2800      	cmp	r0, #0
   210be:	9b01      	ldr	r3, [sp, #4]
   210c0:	dd03      	ble.n	210ca <gnss_interface_read+0x33e>
   210c2:	682a      	ldr	r2, [r5, #0]
   210c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   210c8:	602a      	str	r2, [r5, #0]
   210ca:	4618      	mov	r0, r3
   210cc:	b037      	add	sp, #220	; 0xdc
   210ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210d2:	bf00      	nop
   210d4:	49765443 	.word	0x49765443
   210d8:	20021b7c 	.word	0x20021b7c
   210dc:	20021b84 	.word	0x20021b84
   210e0:	20028344 	.word	0x20028344
   210e4:	1c42      	adds	r2, r0, #1
   210e6:	4603      	mov	r3, r0
   210e8:	f47f ae99 	bne.w	20e1e <gnss_interface_read+0x92>
   210ec:	9001      	str	r0, [sp, #4]
   210ee:	b93c      	cbnz	r4, 21100 <gnss_interface_read+0x374>
   210f0:	2023      	movs	r0, #35	; 0x23
   210f2:	f005 fe0b 	bl	26d0c <bsd_os_errno_set>
   210f6:	9b01      	ldr	r3, [sp, #4]
   210f8:	4618      	mov	r0, r3
   210fa:	b037      	add	sp, #220	; 0xdc
   210fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21100:	4620      	mov	r0, r4
   21102:	f005 fe03 	bl	26d0c <bsd_os_errno_set>
   21106:	9b01      	ldr	r3, [sp, #4]
   21108:	4618      	mov	r0, r3
   2110a:	b037      	add	sp, #220	; 0xdc
   2110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21110:	a808      	add	r0, sp, #32
   21112:	f004 fe3d 	bl	25d90 <strlen>
   21116:	2202      	movs	r2, #2
   21118:	3001      	adds	r0, #1
   2111a:	b284      	uxth	r4, r0
   2111c:	f806 2b08 	strb.w	r2, [r6], #8
   21120:	a908      	add	r1, sp, #32
   21122:	4630      	mov	r0, r6
   21124:	4622      	mov	r2, r4
   21126:	f004 fe9e 	bl	25e66 <memcpy>
   2112a:	f104 0308 	add.w	r3, r4, #8
   2112e:	e7bf      	b.n	210b0 <gnss_interface_read+0x324>
   21130:	2016      	movs	r0, #22
   21132:	f005 fdeb 	bl	26d0c <bsd_os_errno_set>
   21136:	f04f 33ff 	mov.w	r3, #4294967295
   2113a:	e7c6      	b.n	210ca <gnss_interface_read+0x33e>
   2113c:	2009      	movs	r0, #9
   2113e:	f005 fde5 	bl	26d0c <bsd_os_errno_set>
   21142:	f04f 33ff 	mov.w	r3, #4294967295
   21146:	e7c0      	b.n	210ca <gnss_interface_read+0x33e>
   21148:	2039      	movs	r0, #57	; 0x39
   2114a:	f005 fddf 	bl	26d0c <bsd_os_errno_set>
   2114e:	f04f 33ff 	mov.w	r3, #4294967295
   21152:	e7ba      	b.n	210ca <gnss_interface_read+0x33e>

00021154 <gnss_interface_setopt>:
   21154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21158:	f241 0402 	movw	r4, #4098	; 0x1002
   2115c:	4222      	tst	r2, r4
   2115e:	b086      	sub	sp, #24
   21160:	4d94      	ldr	r5, [pc, #592]	; (213b4 <gnss_interface_setopt+0x260>)
   21162:	d004      	beq.n	2116e <gnss_interface_setopt+0x1a>
   21164:	682c      	ldr	r4, [r5, #0]
   21166:	b2a4      	uxth	r4, r4
   21168:	2c02      	cmp	r4, #2
   2116a:	f040 80f6 	bne.w	2135a <gnss_interface_setopt+0x206>
   2116e:	682c      	ldr	r4, [r5, #0]
   21170:	0264      	lsls	r4, r4, #9
   21172:	f100 8119 	bmi.w	213a8 <gnss_interface_setopt+0x254>
   21176:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2117a:	f040 8109 	bne.w	21390 <gnss_interface_setopt+0x23c>
   2117e:	498e      	ldr	r1, [pc, #568]	; (213b8 <gnss_interface_setopt+0x264>)
   21180:	4288      	cmp	r0, r1
   21182:	f040 810b 	bne.w	2139c <gnss_interface_setopt+0x248>
   21186:	3a01      	subs	r2, #1
   21188:	2a07      	cmp	r2, #7
   2118a:	f200 80de 	bhi.w	2134a <gnss_interface_setopt+0x1f6>
   2118e:	e8df f002 	tbb	[pc, r2]
   21192:	c077      	.short	0xc077
   21194:	9a8f83cc 	.word	0x9a8f83cc
   21198:	04a6      	.short	0x04a6
   2119a:	682b      	ldr	r3, [r5, #0]
   2119c:	b29b      	uxth	r3, r3
   2119e:	2b04      	cmp	r3, #4
   211a0:	f040 80db 	bne.w	2135a <gnss_interface_setopt+0x206>
   211a4:	f241 0604 	movw	r6, #4100	; 0x1004
   211a8:	2300      	movs	r3, #0
   211aa:	4637      	mov	r7, r6
   211ac:	f88d 3008 	strb.w	r3, [sp, #8]
   211b0:	f88d 3009 	strb.w	r3, [sp, #9]
   211b4:	f88d 300a 	strb.w	r3, [sp, #10]
   211b8:	f88d 300b 	strb.w	r3, [sp, #11]
   211bc:	f88d 300c 	strb.w	r3, [sp, #12]
   211c0:	682b      	ldr	r3, [r5, #0]
   211c2:	2111      	movs	r1, #17
   211c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   211c8:	4668      	mov	r0, sp
   211ca:	602b      	str	r3, [r5, #0]
   211cc:	f7fd fc98 	bl	1eb00 <rpc_gnss_client_request_alloc>
   211d0:	4604      	mov	r4, r0
   211d2:	9800      	ldr	r0, [sp, #0]
   211d4:	2c00      	cmp	r4, #0
   211d6:	f040 80c6 	bne.w	21366 <gnss_interface_setopt+0x212>
   211da:	2800      	cmp	r0, #0
   211dc:	f000 80c3 	beq.w	21366 <gnss_interface_setopt+0x212>
   211e0:	2211      	movs	r2, #17
   211e2:	f04f 0876 	mov.w	r8, #118	; 0x76
   211e6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   211ea:	f04f 0a43 	mov.w	sl, #67	; 0x43
   211ee:	f04f 0954 	mov.w	r9, #84	; 0x54
   211f2:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 213c0 <gnss_interface_setopt+0x26c>
   211f6:	a906      	add	r1, sp, #24
   211f8:	f8bc 3000 	ldrh.w	r3, [ip]
   211fc:	f880 800e 	strb.w	r8, [r0, #14]
   21200:	3301      	adds	r3, #1
   21202:	b29b      	uxth	r3, r3
   21204:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   21208:	f841 6d14 	str.w	r6, [r1, #-20]!
   2120c:	7144      	strb	r4, [r0, #5]
   2120e:	7184      	strb	r4, [r0, #6]
   21210:	71c4      	strb	r4, [r0, #7]
   21212:	7204      	strb	r4, [r0, #8]
   21214:	7244      	strb	r4, [r0, #9]
   21216:	7284      	strb	r4, [r0, #10]
   21218:	72c4      	strb	r4, [r0, #11]
   2121a:	7102      	strb	r2, [r0, #4]
   2121c:	f880 a00c 	strb.w	sl, [r0, #12]
   21220:	f880 900d 	strb.w	r9, [r0, #13]
   21224:	f880 e00f 	strb.w	lr, [r0, #15]
   21228:	f8df 8198 	ldr.w	r8, [pc, #408]	; 213c4 <gnss_interface_setopt+0x270>
   2122c:	6800      	ldr	r0, [r0, #0]
   2122e:	f8ac 3000 	strh.w	r3, [ip]
   21232:	f004 fe18 	bl	25e66 <memcpy>
   21236:	4639      	mov	r1, r7
   21238:	9800      	ldr	r0, [sp, #0]
   2123a:	f8c8 4000 	str.w	r4, [r8]
   2123e:	f7fd fc73 	bl	1eb28 <rpc_gnss_client_request_send>
   21242:	2800      	cmp	r0, #0
   21244:	f040 809a 	bne.w	2137c <gnss_interface_setopt+0x228>
   21248:	4f5c      	ldr	r7, [pc, #368]	; (213bc <gnss_interface_setopt+0x268>)
   2124a:	4e5b      	ldr	r6, [pc, #364]	; (213b8 <gnss_interface_setopt+0x264>)
   2124c:	4639      	mov	r1, r7
   2124e:	4630      	mov	r0, r6
   21250:	f7f2 fa54 	bl	136fc <bsd_os_timedwait>
   21254:	682c      	ldr	r4, [r5, #0]
   21256:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   2125a:	d1f7      	bne.n	2124c <gnss_interface_setopt+0xf8>
   2125c:	f8d8 0000 	ldr.w	r0, [r8]
   21260:	b118      	cbz	r0, 2126a <gnss_interface_setopt+0x116>
   21262:	f7fd fc7f 	bl	1eb64 <rpc_gnss_client_data_free>
   21266:	f8c8 4000 	str.w	r4, [r8]
   2126a:	682b      	ldr	r3, [r5, #0]
   2126c:	021b      	lsls	r3, r3, #8
   2126e:	d566      	bpl.n	2133e <gnss_interface_setopt+0x1ea>
   21270:	2000      	movs	r0, #0
   21272:	682b      	ldr	r3, [r5, #0]
   21274:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   21278:	602b      	str	r3, [r5, #0]
   2127a:	b006      	add	sp, #24
   2127c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21282:	2a02      	cmp	r2, #2
   21284:	d161      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   21286:	2208      	movs	r2, #8
   21288:	f241 0603 	movw	r6, #4099	; 0x1003
   2128c:	881b      	ldrh	r3, [r3, #0]
   2128e:	9202      	str	r2, [sp, #8]
   21290:	f8ad 300f 	strh.w	r3, [sp, #15]
   21294:	4637      	mov	r7, r6
   21296:	e793      	b.n	211c0 <gnss_interface_setopt+0x6c>
   21298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2129a:	2a02      	cmp	r2, #2
   2129c:	d155      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   2129e:	2220      	movs	r2, #32
   212a0:	f241 0603 	movw	r6, #4099	; 0x1003
   212a4:	881b      	ldrh	r3, [r3, #0]
   212a6:	9202      	str	r2, [sp, #8]
   212a8:	f8ad 3013 	strh.w	r3, [sp, #19]
   212ac:	4637      	mov	r7, r6
   212ae:	e787      	b.n	211c0 <gnss_interface_setopt+0x6c>
   212b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   212b2:	2a01      	cmp	r2, #1
   212b4:	d149      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   212b6:	f241 0603 	movw	r6, #4099	; 0x1003
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	9202      	str	r2, [sp, #8]
   212be:	f88d 300c 	strb.w	r3, [sp, #12]
   212c2:	4637      	mov	r7, r6
   212c4:	e77c      	b.n	211c0 <gnss_interface_setopt+0x6c>
   212c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   212c8:	2a01      	cmp	r2, #1
   212ca:	d13e      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   212cc:	2202      	movs	r2, #2
   212ce:	f241 0603 	movw	r6, #4099	; 0x1003
   212d2:	781b      	ldrb	r3, [r3, #0]
   212d4:	9202      	str	r2, [sp, #8]
   212d6:	f88d 300d 	strb.w	r3, [sp, #13]
   212da:	4637      	mov	r7, r6
   212dc:	e770      	b.n	211c0 <gnss_interface_setopt+0x6c>
   212de:	682b      	ldr	r3, [r5, #0]
   212e0:	b29b      	uxth	r3, r3
   212e2:	2b02      	cmp	r3, #2
   212e4:	d139      	bne.n	2135a <gnss_interface_setopt+0x206>
   212e6:	2200      	movs	r2, #0
   212e8:	2101      	movs	r1, #1
   212ea:	f241 0604 	movw	r6, #4100	; 0x1004
   212ee:	682b      	ldr	r3, [r5, #0]
   212f0:	f88d 1008 	strb.w	r1, [sp, #8]
   212f4:	0c1b      	lsrs	r3, r3, #16
   212f6:	041b      	lsls	r3, r3, #16
   212f8:	f043 0303 	orr.w	r3, r3, #3
   212fc:	602b      	str	r3, [r5, #0]
   212fe:	f88d 2009 	strb.w	r2, [sp, #9]
   21302:	f88d 200a 	strb.w	r2, [sp, #10]
   21306:	f88d 200b 	strb.w	r2, [sp, #11]
   2130a:	f88d 200c 	strb.w	r2, [sp, #12]
   2130e:	4637      	mov	r7, r6
   21310:	e756      	b.n	211c0 <gnss_interface_setopt+0x6c>
   21312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21314:	2a02      	cmp	r2, #2
   21316:	d118      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   21318:	2210      	movs	r2, #16
   2131a:	f241 0603 	movw	r6, #4099	; 0x1003
   2131e:	881b      	ldrh	r3, [r3, #0]
   21320:	9202      	str	r2, [sp, #8]
   21322:	f8ad 3011 	strh.w	r3, [sp, #17]
   21326:	4637      	mov	r7, r6
   21328:	e74a      	b.n	211c0 <gnss_interface_setopt+0x6c>
   2132a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2132c:	2a01      	cmp	r2, #1
   2132e:	d10c      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   21330:	781b      	ldrb	r3, [r3, #0]
   21332:	2b01      	cmp	r3, #1
   21334:	d109      	bne.n	2134a <gnss_interface_setopt+0x1f6>
   21336:	f241 0603 	movw	r6, #4099	; 0x1003
   2133a:	4637      	mov	r7, r6
   2133c:	e740      	b.n	211c0 <gnss_interface_setopt+0x6c>
   2133e:	200e      	movs	r0, #14
   21340:	f005 fce4 	bl	26d0c <bsd_os_errno_set>
   21344:	f04f 30ff 	mov.w	r0, #4294967295
   21348:	e793      	b.n	21272 <gnss_interface_setopt+0x11e>
   2134a:	2016      	movs	r0, #22
   2134c:	f005 fcde 	bl	26d0c <bsd_os_errno_set>
   21350:	f04f 30ff 	mov.w	r0, #4294967295
   21354:	b006      	add	sp, #24
   21356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2135a:	200e      	movs	r0, #14
   2135c:	f005 fcd6 	bl	26d0c <bsd_os_errno_set>
   21360:	f04f 30ff 	mov.w	r0, #4294967295
   21364:	e789      	b.n	2127a <gnss_interface_setopt+0x126>
   21366:	6803      	ldr	r3, [r0, #0]
   21368:	b11b      	cbz	r3, 21372 <gnss_interface_setopt+0x21e>
   2136a:	4618      	mov	r0, r3
   2136c:	f7fd fbfa 	bl	1eb64 <rpc_gnss_client_data_free>
   21370:	9800      	ldr	r0, [sp, #0]
   21372:	f7fd fbef 	bl	1eb54 <rpc_gnss_client_message_free>
   21376:	2023      	movs	r0, #35	; 0x23
   21378:	f005 fcc8 	bl	26d0c <bsd_os_errno_set>
   2137c:	682b      	ldr	r3, [r5, #0]
   2137e:	200e      	movs	r0, #14
   21380:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   21384:	602b      	str	r3, [r5, #0]
   21386:	f005 fcc1 	bl	26d0c <bsd_os_errno_set>
   2138a:	f04f 30ff 	mov.w	r0, #4294967295
   2138e:	e774      	b.n	2127a <gnss_interface_setopt+0x126>
   21390:	202a      	movs	r0, #42	; 0x2a
   21392:	f005 fcbb 	bl	26d0c <bsd_os_errno_set>
   21396:	f04f 30ff 	mov.w	r0, #4294967295
   2139a:	e76e      	b.n	2127a <gnss_interface_setopt+0x126>
   2139c:	2009      	movs	r0, #9
   2139e:	f005 fcb5 	bl	26d0c <bsd_os_errno_set>
   213a2:	f04f 30ff 	mov.w	r0, #4294967295
   213a6:	e768      	b.n	2127a <gnss_interface_setopt+0x126>
   213a8:	2073      	movs	r0, #115	; 0x73
   213aa:	f005 fcaf 	bl	26d0c <bsd_os_errno_set>
   213ae:	f04f 30ff 	mov.w	r0, #4294967295
   213b2:	e762      	b.n	2127a <gnss_interface_setopt+0x126>
   213b4:	20021b7c 	.word	0x20021b7c
   213b8:	49765443 	.word	0x49765443
   213bc:	20028344 	.word	0x20028344
   213c0:	2002225c 	.word	0x2002225c
   213c4:	20021b80 	.word	0x20021b80

000213c8 <gnss_interface_getopt>:
   213c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213cc:	4c81      	ldr	r4, [pc, #516]	; (215d4 <gnss_interface_getopt+0x20c>)
   213ce:	b087      	sub	sp, #28
   213d0:	6825      	ldr	r5, [r4, #0]
   213d2:	4698      	mov	r8, r3
   213d4:	b2ad      	uxth	r5, r5
   213d6:	2d02      	cmp	r5, #2
   213d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   213da:	f040 80dc 	bne.w	21596 <gnss_interface_getopt+0x1ce>
   213de:	6825      	ldr	r5, [r4, #0]
   213e0:	03ee      	lsls	r6, r5, #15
   213e2:	f100 80f0 	bmi.w	215c6 <gnss_interface_getopt+0x1fe>
   213e6:	6825      	ldr	r5, [r4, #0]
   213e8:	01ed      	lsls	r5, r5, #7
   213ea:	f100 80e6 	bmi.w	215ba <gnss_interface_getopt+0x1f2>
   213ee:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   213f2:	f040 80d6 	bne.w	215a2 <gnss_interface_getopt+0x1da>
   213f6:	4978      	ldr	r1, [pc, #480]	; (215d8 <gnss_interface_getopt+0x210>)
   213f8:	4288      	cmp	r0, r1
   213fa:	f040 80d8 	bne.w	215ae <gnss_interface_getopt+0x1e6>
   213fe:	f1b8 0f00 	cmp.w	r8, #0
   21402:	d00b      	beq.n	2141c <gnss_interface_getopt+0x54>
   21404:	b153      	cbz	r3, 2141c <gnss_interface_getopt+0x54>
   21406:	1e57      	subs	r7, r2, #1
   21408:	2f05      	cmp	r7, #5
   2140a:	d807      	bhi.n	2141c <gnss_interface_getopt+0x54>
   2140c:	e8df f007 	tbb	[pc, r7]
   21410:	0f030f0f 	.word	0x0f030f0f
   21414:	0303      	.short	0x0303
   21416:	681b      	ldr	r3, [r3, #0]
   21418:	2b01      	cmp	r3, #1
   2141a:	d00b      	beq.n	21434 <gnss_interface_getopt+0x6c>
   2141c:	2016      	movs	r0, #22
   2141e:	f005 fc75 	bl	26d0c <bsd_os_errno_set>
   21422:	f04f 35ff 	mov.w	r5, #4294967295
   21426:	4628      	mov	r0, r5
   21428:	b007      	add	sp, #28
   2142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2142e:	681b      	ldr	r3, [r3, #0]
   21430:	2b02      	cmp	r3, #2
   21432:	d1f3      	bne.n	2141c <gnss_interface_getopt+0x54>
   21434:	6823      	ldr	r3, [r4, #0]
   21436:	2211      	movs	r2, #17
   21438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2143c:	2100      	movs	r1, #0
   2143e:	a801      	add	r0, sp, #4
   21440:	6023      	str	r3, [r4, #0]
   21442:	f004 fd3d 	bl	25ec0 <memset>
   21446:	2111      	movs	r1, #17
   21448:	4668      	mov	r0, sp
   2144a:	f7fd fb59 	bl	1eb00 <rpc_gnss_client_request_alloc>
   2144e:	4605      	mov	r5, r0
   21450:	9800      	ldr	r0, [sp, #0]
   21452:	2d00      	cmp	r5, #0
   21454:	f040 808a 	bne.w	2156c <gnss_interface_getopt+0x1a4>
   21458:	2800      	cmp	r0, #0
   2145a:	f000 8087 	beq.w	2156c <gnss_interface_getopt+0x1a4>
   2145e:	f241 0602 	movw	r6, #4098	; 0x1002
   21462:	f04f 0e49 	mov.w	lr, #73	; 0x49
   21466:	2211      	movs	r2, #17
   21468:	f04f 0976 	mov.w	r9, #118	; 0x76
   2146c:	f04f 0b43 	mov.w	fp, #67	; 0x43
   21470:	f04f 0a54 	mov.w	sl, #84	; 0x54
   21474:	f8df c168 	ldr.w	ip, [pc, #360]	; 215e0 <gnss_interface_getopt+0x218>
   21478:	f880 e00f 	strb.w	lr, [r0, #15]
   2147c:	f8bc 3000 	ldrh.w	r3, [ip]
   21480:	f880 900e 	strb.w	r9, [r0, #14]
   21484:	3301      	adds	r3, #1
   21486:	b29b      	uxth	r3, r3
   21488:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   2148c:	f8cd e004 	str.w	lr, [sp, #4]
   21490:	7145      	strb	r5, [r0, #5]
   21492:	7185      	strb	r5, [r0, #6]
   21494:	71c5      	strb	r5, [r0, #7]
   21496:	7205      	strb	r5, [r0, #8]
   21498:	7245      	strb	r5, [r0, #9]
   2149a:	7285      	strb	r5, [r0, #10]
   2149c:	72c5      	strb	r5, [r0, #11]
   2149e:	a901      	add	r1, sp, #4
   214a0:	7102      	strb	r2, [r0, #4]
   214a2:	f880 b00c 	strb.w	fp, [r0, #12]
   214a6:	f880 a00d 	strb.w	sl, [r0, #13]
   214aa:	f8df 9138 	ldr.w	r9, [pc, #312]	; 215e4 <gnss_interface_getopt+0x21c>
   214ae:	6800      	ldr	r0, [r0, #0]
   214b0:	f8ac 3000 	strh.w	r3, [ip]
   214b4:	f004 fcd7 	bl	25e66 <memcpy>
   214b8:	4631      	mov	r1, r6
   214ba:	9800      	ldr	r0, [sp, #0]
   214bc:	f8c9 5000 	str.w	r5, [r9]
   214c0:	f7fd fb32 	bl	1eb28 <rpc_gnss_client_request_send>
   214c4:	2800      	cmp	r0, #0
   214c6:	d15c      	bne.n	21582 <gnss_interface_getopt+0x1ba>
   214c8:	4e44      	ldr	r6, [pc, #272]	; (215dc <gnss_interface_getopt+0x214>)
   214ca:	4d43      	ldr	r5, [pc, #268]	; (215d8 <gnss_interface_getopt+0x210>)
   214cc:	4631      	mov	r1, r6
   214ce:	4628      	mov	r0, r5
   214d0:	f7f2 f914 	bl	136fc <bsd_os_timedwait>
   214d4:	6823      	ldr	r3, [r4, #0]
   214d6:	01db      	lsls	r3, r3, #7
   214d8:	d4f8      	bmi.n	214cc <gnss_interface_getopt+0x104>
   214da:	f8d9 0000 	ldr.w	r0, [r9]
   214de:	b1d8      	cbz	r0, 21518 <gnss_interface_getopt+0x150>
   214e0:	6825      	ldr	r5, [r4, #0]
   214e2:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   214e6:	d00f      	beq.n	21508 <gnss_interface_getopt+0x140>
   214e8:	2f05      	cmp	r7, #5
   214ea:	d837      	bhi.n	2155c <gnss_interface_getopt+0x194>
   214ec:	e8df f007 	tbb	[pc, r7]
   214f0:	2b26201a 	.word	0x2b26201a
   214f4:	0331      	.short	0x0331
   214f6:	2500      	movs	r5, #0
   214f8:	7b43      	ldrb	r3, [r0, #13]
   214fa:	f888 3000 	strb.w	r3, [r8]
   214fe:	f7fd fb31 	bl	1eb64 <rpc_gnss_client_data_free>
   21502:	2300      	movs	r3, #0
   21504:	f8c9 3000 	str.w	r3, [r9]
   21508:	6823      	ldr	r3, [r4, #0]
   2150a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2150e:	6023      	str	r3, [r4, #0]
   21510:	4628      	mov	r0, r5
   21512:	b007      	add	sp, #28
   21514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21518:	6823      	ldr	r3, [r4, #0]
   2151a:	4605      	mov	r5, r0
   2151c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   21520:	6023      	str	r3, [r4, #0]
   21522:	e7f5      	b.n	21510 <gnss_interface_getopt+0x148>
   21524:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   21528:	2500      	movs	r5, #0
   2152a:	f8a8 3000 	strh.w	r3, [r8]
   2152e:	e7e6      	b.n	214fe <gnss_interface_getopt+0x136>
   21530:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   21534:	2500      	movs	r5, #0
   21536:	f8a8 3000 	strh.w	r3, [r8]
   2153a:	e7e0      	b.n	214fe <gnss_interface_getopt+0x136>
   2153c:	7b83      	ldrb	r3, [r0, #14]
   2153e:	2500      	movs	r5, #0
   21540:	f888 3000 	strb.w	r3, [r8]
   21544:	e7db      	b.n	214fe <gnss_interface_getopt+0x136>
   21546:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   2154a:	2500      	movs	r5, #0
   2154c:	f8a8 3000 	strh.w	r3, [r8]
   21550:	e7d5      	b.n	214fe <gnss_interface_getopt+0x136>
   21552:	7b03      	ldrb	r3, [r0, #12]
   21554:	2500      	movs	r5, #0
   21556:	f888 3000 	strb.w	r3, [r8]
   2155a:	e7d0      	b.n	214fe <gnss_interface_getopt+0x136>
   2155c:	2016      	movs	r0, #22
   2155e:	f005 fbd5 	bl	26d0c <bsd_os_errno_set>
   21562:	f04f 35ff 	mov.w	r5, #4294967295
   21566:	f8d9 0000 	ldr.w	r0, [r9]
   2156a:	e7c8      	b.n	214fe <gnss_interface_getopt+0x136>
   2156c:	6803      	ldr	r3, [r0, #0]
   2156e:	b11b      	cbz	r3, 21578 <gnss_interface_getopt+0x1b0>
   21570:	4618      	mov	r0, r3
   21572:	f7fd faf7 	bl	1eb64 <rpc_gnss_client_data_free>
   21576:	9800      	ldr	r0, [sp, #0]
   21578:	f7fd faec 	bl	1eb54 <rpc_gnss_client_message_free>
   2157c:	2023      	movs	r0, #35	; 0x23
   2157e:	f005 fbc5 	bl	26d0c <bsd_os_errno_set>
   21582:	6823      	ldr	r3, [r4, #0]
   21584:	200e      	movs	r0, #14
   21586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2158a:	6023      	str	r3, [r4, #0]
   2158c:	f04f 35ff 	mov.w	r5, #4294967295
   21590:	f005 fbbc 	bl	26d0c <bsd_os_errno_set>
   21594:	e747      	b.n	21426 <gnss_interface_getopt+0x5e>
   21596:	200e      	movs	r0, #14
   21598:	f005 fbb8 	bl	26d0c <bsd_os_errno_set>
   2159c:	f04f 35ff 	mov.w	r5, #4294967295
   215a0:	e741      	b.n	21426 <gnss_interface_getopt+0x5e>
   215a2:	202a      	movs	r0, #42	; 0x2a
   215a4:	f005 fbb2 	bl	26d0c <bsd_os_errno_set>
   215a8:	f04f 35ff 	mov.w	r5, #4294967295
   215ac:	e73b      	b.n	21426 <gnss_interface_getopt+0x5e>
   215ae:	2009      	movs	r0, #9
   215b0:	f005 fbac 	bl	26d0c <bsd_os_errno_set>
   215b4:	f04f 35ff 	mov.w	r5, #4294967295
   215b8:	e735      	b.n	21426 <gnss_interface_getopt+0x5e>
   215ba:	2073      	movs	r0, #115	; 0x73
   215bc:	f005 fba6 	bl	26d0c <bsd_os_errno_set>
   215c0:	f04f 35ff 	mov.w	r5, #4294967295
   215c4:	e72f      	b.n	21426 <gnss_interface_getopt+0x5e>
   215c6:	2005      	movs	r0, #5
   215c8:	f005 fba0 	bl	26d0c <bsd_os_errno_set>
   215cc:	f04f 35ff 	mov.w	r5, #4294967295
   215d0:	e729      	b.n	21426 <gnss_interface_getopt+0x5e>
   215d2:	bf00      	nop
   215d4:	20021b7c 	.word	0x20021b7c
   215d8:	49765443 	.word	0x49765443
   215dc:	20028344 	.word	0x20028344
   215e0:	2002225c 	.word	0x2002225c
   215e4:	20021b80 	.word	0x20021b80

000215e8 <gnss_interface_init>:
   215e8:	2100      	movs	r1, #0
   215ea:	b538      	push	{r3, r4, r5, lr}
   215ec:	4c09      	ldr	r4, [pc, #36]	; (21614 <gnss_interface_init+0x2c>)
   215ee:	4d0a      	ldr	r5, [pc, #40]	; (21618 <gnss_interface_init+0x30>)
   215f0:	6822      	ldr	r2, [r4, #0]
   215f2:	480a      	ldr	r0, [pc, #40]	; (2161c <gnss_interface_init+0x34>)
   215f4:	4b0a      	ldr	r3, [pc, #40]	; (21620 <gnss_interface_init+0x38>)
   215f6:	402a      	ands	r2, r5
   215f8:	6022      	str	r2, [r4, #0]
   215fa:	8001      	strh	r1, [r0, #0]
   215fc:	6019      	str	r1, [r3, #0]
   215fe:	f7fd fa79 	bl	1eaf4 <rpc_gnss_client_init>
   21602:	b928      	cbnz	r0, 21610 <gnss_interface_init+0x28>
   21604:	6823      	ldr	r3, [r4, #0]
   21606:	402b      	ands	r3, r5
   21608:	f043 0301 	orr.w	r3, r3, #1
   2160c:	6023      	str	r3, [r4, #0]
   2160e:	bd38      	pop	{r3, r4, r5, pc}
   21610:	2003      	movs	r0, #3
   21612:	bd38      	pop	{r3, r4, r5, pc}
   21614:	20021b7c 	.word	0x20021b7c
   21618:	ffff0000 	.word	0xffff0000
   2161c:	2002225c 	.word	0x2002225c
   21620:	20021b80 	.word	0x20021b80

00021624 <gnss_interface_open>:
   21624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21628:	2801      	cmp	r0, #1
   2162a:	b087      	sub	sp, #28
   2162c:	d15f      	bne.n	216ee <gnss_interface_open+0xca>
   2162e:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   21632:	d15c      	bne.n	216ee <gnss_interface_open+0xca>
   21634:	2902      	cmp	r1, #2
   21636:	d15a      	bne.n	216ee <gnss_interface_open+0xca>
   21638:	4c3b      	ldr	r4, [pc, #236]	; (21728 <gnss_interface_open+0x104>)
   2163a:	6823      	ldr	r3, [r4, #0]
   2163c:	b29b      	uxth	r3, r3
   2163e:	2b01      	cmp	r3, #1
   21640:	d15b      	bne.n	216fa <gnss_interface_open+0xd6>
   21642:	2111      	movs	r1, #17
   21644:	4668      	mov	r0, sp
   21646:	f7fd fa5b 	bl	1eb00 <rpc_gnss_client_request_alloc>
   2164a:	4605      	mov	r5, r0
   2164c:	9800      	ldr	r0, [sp, #0]
   2164e:	2d00      	cmp	r5, #0
   21650:	d159      	bne.n	21706 <gnss_interface_open+0xe2>
   21652:	2800      	cmp	r0, #0
   21654:	d057      	beq.n	21706 <gnss_interface_open+0xe2>
   21656:	f241 0601 	movw	r6, #4097	; 0x1001
   2165a:	f04f 0c49 	mov.w	ip, #73	; 0x49
   2165e:	2211      	movs	r2, #17
   21660:	f04f 0e76 	mov.w	lr, #118	; 0x76
   21664:	f04f 0943 	mov.w	r9, #67	; 0x43
   21668:	f04f 0854 	mov.w	r8, #84	; 0x54
   2166c:	4f2f      	ldr	r7, [pc, #188]	; (2172c <gnss_interface_open+0x108>)
   2166e:	a906      	add	r1, sp, #24
   21670:	883b      	ldrh	r3, [r7, #0]
   21672:	f880 c00f 	strb.w	ip, [r0, #15]
   21676:	3301      	adds	r3, #1
   21678:	b29b      	uxth	r3, r3
   2167a:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   2167e:	f841 cd14 	str.w	ip, [r1, #-20]!
   21682:	7145      	strb	r5, [r0, #5]
   21684:	7185      	strb	r5, [r0, #6]
   21686:	71c5      	strb	r5, [r0, #7]
   21688:	7205      	strb	r5, [r0, #8]
   2168a:	7245      	strb	r5, [r0, #9]
   2168c:	7285      	strb	r5, [r0, #10]
   2168e:	72c5      	strb	r5, [r0, #11]
   21690:	7102      	strb	r2, [r0, #4]
   21692:	f880 900c 	strb.w	r9, [r0, #12]
   21696:	f880 800d 	strb.w	r8, [r0, #13]
   2169a:	f880 e00e 	strb.w	lr, [r0, #14]
   2169e:	6800      	ldr	r0, [r0, #0]
   216a0:	803b      	strh	r3, [r7, #0]
   216a2:	f004 fbe0 	bl	25e66 <memcpy>
   216a6:	4b22      	ldr	r3, [pc, #136]	; (21730 <gnss_interface_open+0x10c>)
   216a8:	4631      	mov	r1, r6
   216aa:	9800      	ldr	r0, [sp, #0]
   216ac:	601d      	str	r5, [r3, #0]
   216ae:	f7fd fa3b 	bl	1eb28 <rpc_gnss_client_request_send>
   216b2:	2800      	cmp	r0, #0
   216b4:	d132      	bne.n	2171c <gnss_interface_open+0xf8>
   216b6:	4e1f      	ldr	r6, [pc, #124]	; (21734 <gnss_interface_open+0x110>)
   216b8:	4d1f      	ldr	r5, [pc, #124]	; (21738 <gnss_interface_open+0x114>)
   216ba:	4631      	mov	r1, r6
   216bc:	4628      	mov	r0, r5
   216be:	f7f2 f81d 	bl	136fc <bsd_os_timedwait>
   216c2:	6823      	ldr	r3, [r4, #0]
   216c4:	b29b      	uxth	r3, r3
   216c6:	2b01      	cmp	r3, #1
   216c8:	d0f7      	beq.n	216ba <gnss_interface_open+0x96>
   216ca:	6820      	ldr	r0, [r4, #0]
   216cc:	b280      	uxth	r0, r0
   216ce:	2802      	cmp	r0, #2
   216d0:	d113      	bne.n	216fa <gnss_interface_open+0xd6>
   216d2:	2200      	movs	r2, #0
   216d4:	4919      	ldr	r1, [pc, #100]	; (2173c <gnss_interface_open+0x118>)
   216d6:	f7f9 fda5 	bl	1b224 <packet_handler_create>
   216da:	4a19      	ldr	r2, [pc, #100]	; (21740 <gnss_interface_open+0x11c>)
   216dc:	6010      	str	r0, [r2, #0]
   216de:	b160      	cbz	r0, 216fa <gnss_interface_open+0xd6>
   216e0:	6803      	ldr	r3, [r0, #0]
   216e2:	681b      	ldr	r3, [r3, #0]
   216e4:	4798      	blx	r3
   216e6:	4814      	ldr	r0, [pc, #80]	; (21738 <gnss_interface_open+0x114>)
   216e8:	b007      	add	sp, #28
   216ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   216ee:	2016      	movs	r0, #22
   216f0:	f005 fb0c 	bl	26d0c <bsd_os_errno_set>
   216f4:	f04f 30ff 	mov.w	r0, #4294967295
   216f8:	e7f6      	b.n	216e8 <gnss_interface_open+0xc4>
   216fa:	200e      	movs	r0, #14
   216fc:	f005 fb06 	bl	26d0c <bsd_os_errno_set>
   21700:	f04f 30ff 	mov.w	r0, #4294967295
   21704:	e7f0      	b.n	216e8 <gnss_interface_open+0xc4>
   21706:	6803      	ldr	r3, [r0, #0]
   21708:	b11b      	cbz	r3, 21712 <gnss_interface_open+0xee>
   2170a:	4618      	mov	r0, r3
   2170c:	f7fd fa2a 	bl	1eb64 <rpc_gnss_client_data_free>
   21710:	9800      	ldr	r0, [sp, #0]
   21712:	f7fd fa1f 	bl	1eb54 <rpc_gnss_client_message_free>
   21716:	2023      	movs	r0, #35	; 0x23
   21718:	f005 faf8 	bl	26d0c <bsd_os_errno_set>
   2171c:	200d      	movs	r0, #13
   2171e:	f005 faf5 	bl	26d0c <bsd_os_errno_set>
   21722:	f04f 30ff 	mov.w	r0, #4294967295
   21726:	e7df      	b.n	216e8 <gnss_interface_open+0xc4>
   21728:	20021b7c 	.word	0x20021b7c
   2172c:	2002225c 	.word	0x2002225c
   21730:	20021b80 	.word	0x20021b80
   21734:	20028344 	.word	0x20028344
   21738:	49765443 	.word	0x49765443
   2173c:	00020c0d 	.word	0x00020c0d
   21740:	20021b84 	.word	0x20021b84

00021744 <gnss_interface_close>:
   21744:	b530      	push	{r4, r5, lr}
   21746:	4b13      	ldr	r3, [pc, #76]	; (21794 <gnss_interface_close+0x50>)
   21748:	b083      	sub	sp, #12
   2174a:	4298      	cmp	r0, r3
   2174c:	d11c      	bne.n	21788 <gnss_interface_close+0x44>
   2174e:	4c12      	ldr	r4, [pc, #72]	; (21798 <gnss_interface_close+0x54>)
   21750:	6823      	ldr	r3, [r4, #0]
   21752:	b29b      	uxth	r3, r3
   21754:	2b04      	cmp	r3, #4
   21756:	d00f      	beq.n	21778 <gnss_interface_close+0x34>
   21758:	4d10      	ldr	r5, [pc, #64]	; (2179c <gnss_interface_close+0x58>)
   2175a:	6828      	ldr	r0, [r5, #0]
   2175c:	b118      	cbz	r0, 21766 <gnss_interface_close+0x22>
   2175e:	f7f9 fd7f 	bl	1b260 <packet_handler_delete>
   21762:	2300      	movs	r3, #0
   21764:	602b      	str	r3, [r5, #0]
   21766:	2000      	movs	r0, #0
   21768:	6823      	ldr	r3, [r4, #0]
   2176a:	0c1b      	lsrs	r3, r3, #16
   2176c:	041b      	lsls	r3, r3, #16
   2176e:	f043 0301 	orr.w	r3, r3, #1
   21772:	6023      	str	r3, [r4, #0]
   21774:	b003      	add	sp, #12
   21776:	bd30      	pop	{r4, r5, pc}
   21778:	2300      	movs	r3, #0
   2177a:	2208      	movs	r2, #8
   2177c:	9300      	str	r3, [sp, #0]
   2177e:	f44f 7101 	mov.w	r1, #516	; 0x204
   21782:	f000 f9d9 	bl	21b38 <nrf_setsockopt>
   21786:	e7e7      	b.n	21758 <gnss_interface_close+0x14>
   21788:	2009      	movs	r0, #9
   2178a:	f005 fabf 	bl	26d0c <bsd_os_errno_set>
   2178e:	f04f 30ff 	mov.w	r0, #4294967295
   21792:	e7ef      	b.n	21774 <gnss_interface_close+0x30>
   21794:	49765443 	.word	0x49765443
   21798:	20021b7c 	.word	0x20021b7c
   2179c:	20021b84 	.word	0x20021b84

000217a0 <authenticated_atcmd_init>:
   217a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   217a2:	4c3b      	ldr	r4, [pc, #236]	; (21890 <authenticated_atcmd_init+0xf0>)
   217a4:	b0c7      	sub	sp, #284	; 0x11c
   217a6:	6826      	ldr	r6, [r4, #0]
   217a8:	bb16      	cbnz	r6, 217f0 <authenticated_atcmd_init+0x50>
   217aa:	2701      	movs	r7, #1
   217ac:	4839      	ldr	r0, [pc, #228]	; (21894 <authenticated_atcmd_init+0xf4>)
   217ae:	6027      	str	r7, [r4, #0]
   217b0:	f004 faee 	bl	25d90 <strlen>
   217b4:	4605      	mov	r5, r0
   217b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
   217ba:	4631      	mov	r1, r6
   217bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   217c0:	a806      	add	r0, sp, #24
   217c2:	9302      	str	r3, [sp, #8]
   217c4:	f004 fb7c 	bl	25ec0 <memset>
   217c8:	462a      	mov	r2, r5
   217ca:	4932      	ldr	r1, [pc, #200]	; (21894 <authenticated_atcmd_init+0xf4>)
   217cc:	a806      	add	r0, sp, #24
   217ce:	f004 fb4a 	bl	25e66 <memcpy>
   217d2:	aa06      	add	r2, sp, #24
   217d4:	9700      	str	r7, [sp, #0]
   217d6:	ab02      	add	r3, sp, #8
   217d8:	442a      	add	r2, r5
   217da:	2120      	movs	r1, #32
   217dc:	482e      	ldr	r0, [pc, #184]	; (21898 <authenticated_atcmd_init+0xf8>)
   217de:	f7f9 f9f9 	bl	1abd4 <es256_key_generate>
   217e2:	4606      	mov	r6, r0
   217e4:	b138      	cbz	r0, 217f6 <authenticated_atcmd_init+0x56>
   217e6:	2300      	movs	r3, #0
   217e8:	2023      	movs	r0, #35	; 0x23
   217ea:	6023      	str	r3, [r4, #0]
   217ec:	b047      	add	sp, #284	; 0x11c
   217ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217f0:	200e      	movs	r0, #14
   217f2:	b047      	add	sp, #284	; 0x11c
   217f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217f6:	2022      	movs	r0, #34	; 0x22
   217f8:	9b02      	ldr	r3, [sp, #8]
   217fa:	6027      	str	r7, [r4, #0]
   217fc:	441d      	add	r5, r3
   217fe:	af06      	add	r7, sp, #24
   21800:	ab06      	add	r3, sp, #24
   21802:	5578      	strb	r0, [r7, r5]
   21804:	442b      	add	r3, r5
   21806:	f240 2201 	movw	r2, #513	; 0x201
   2180a:	2102      	movs	r1, #2
   2180c:	2066      	movs	r0, #102	; 0x66
   2180e:	705e      	strb	r6, [r3, #1]
   21810:	f7f9 fe98 	bl	1b544 <at_interface_open>
   21814:	1e07      	subs	r7, r0, #0
   21816:	dbe6      	blt.n	217e6 <authenticated_atcmd_init+0x46>
   21818:	4820      	ldr	r0, [pc, #128]	; (2189c <authenticated_atcmd_init+0xfc>)
   2181a:	f004 fab9 	bl	25d90 <strlen>
   2181e:	4633      	mov	r3, r6
   21820:	4602      	mov	r2, r0
   21822:	491e      	ldr	r1, [pc, #120]	; (2189c <authenticated_atcmd_init+0xfc>)
   21824:	e9cd 6600 	strd	r6, r6, [sp]
   21828:	4638      	mov	r0, r7
   2182a:	f7f9 fe3b 	bl	1b4a4 <at_interface_write>
   2182e:	3502      	adds	r5, #2
   21830:	a903      	add	r1, sp, #12
   21832:	4633      	mov	r3, r6
   21834:	220a      	movs	r2, #10
   21836:	e9cd 6600 	strd	r6, r6, [sp]
   2183a:	4638      	mov	r0, r7
   2183c:	f7f9 ff14 	bl	1b668 <at_interface_read>
   21840:	e9cd 6600 	strd	r6, r6, [sp]
   21844:	a906      	add	r1, sp, #24
   21846:	462a      	mov	r2, r5
   21848:	4633      	mov	r3, r6
   2184a:	4638      	mov	r0, r7
   2184c:	f7f9 fe2a 	bl	1b4a4 <at_interface_write>
   21850:	42a8      	cmp	r0, r5
   21852:	d003      	beq.n	2185c <authenticated_atcmd_init+0xbc>
   21854:	4638      	mov	r0, r7
   21856:	f7f9 febf 	bl	1b5d8 <at_interface_close>
   2185a:	e7c4      	b.n	217e6 <authenticated_atcmd_init+0x46>
   2185c:	e9cd 6600 	strd	r6, r6, [sp]
   21860:	4633      	mov	r3, r6
   21862:	220a      	movs	r2, #10
   21864:	a903      	add	r1, sp, #12
   21866:	4638      	mov	r0, r7
   21868:	f7f9 fefe 	bl	1b668 <at_interface_read>
   2186c:	2801      	cmp	r0, #1
   2186e:	ddf1      	ble.n	21854 <authenticated_atcmd_init+0xb4>
   21870:	a803      	add	r0, sp, #12
   21872:	2202      	movs	r2, #2
   21874:	490a      	ldr	r1, [pc, #40]	; (218a0 <authenticated_atcmd_init+0x100>)
   21876:	f004 faa0 	bl	25dba <strncmp>
   2187a:	4605      	mov	r5, r0
   2187c:	2800      	cmp	r0, #0
   2187e:	d1e9      	bne.n	21854 <authenticated_atcmd_init+0xb4>
   21880:	2302      	movs	r3, #2
   21882:	4638      	mov	r0, r7
   21884:	6023      	str	r3, [r4, #0]
   21886:	f7f9 fea7 	bl	1b5d8 <at_interface_close>
   2188a:	4628      	mov	r0, r5
   2188c:	e7ae      	b.n	217ec <authenticated_atcmd_init+0x4c>
   2188e:	bf00      	nop
   21890:	20021b88 	.word	0x20021b88
   21894:	0002a520 	.word	0x0002a520
   21898:	20024148 	.word	0x20024148
   2189c:	0002a530 	.word	0x0002a530
   218a0:	0002a430 	.word	0x0002a430

000218a4 <at_client_evt_handler>:
   218a4:	b120      	cbz	r0, 218b0 <at_client_evt_handler+0xc>
   218a6:	f850 1b08 	ldr.w	r1, [r0], #8
   218aa:	0c09      	lsrs	r1, r1, #16
   218ac:	f7f9 bf62 	b.w	1b774 <rpc_at_event_handler>
   218b0:	4770      	bx	lr
   218b2:	bf00      	nop

000218b4 <rpc_at_client_init>:
   218b4:	4801      	ldr	r0, [pc, #4]	; (218bc <rpc_at_client_init+0x8>)
   218b6:	f7fe bddb 	b.w	20470 <rpc_client_register>
   218ba:	bf00      	nop
   218bc:	0002a540 	.word	0x0002a540

000218c0 <rpc_at_client_request_alloc>:
   218c0:	b180      	cbz	r0, 218e4 <rpc_at_client_request_alloc+0x24>
   218c2:	2300      	movs	r3, #0
   218c4:	b510      	push	{r4, lr}
   218c6:	b082      	sub	sp, #8
   218c8:	aa02      	add	r2, sp, #8
   218ca:	4604      	mov	r4, r0
   218cc:	f842 3d04 	str.w	r3, [r2, #-4]!
   218d0:	2003      	movs	r0, #3
   218d2:	f7ff f80d 	bl	208f0 <rpc_message_alloc>
   218d6:	b918      	cbnz	r0, 218e0 <rpc_at_client_request_alloc+0x20>
   218d8:	9b01      	ldr	r3, [sp, #4]
   218da:	b10b      	cbz	r3, 218e0 <rpc_at_client_request_alloc+0x20>
   218dc:	3308      	adds	r3, #8
   218de:	6023      	str	r3, [r4, #0]
   218e0:	b002      	add	sp, #8
   218e2:	bd10      	pop	{r4, pc}
   218e4:	200e      	movs	r0, #14
   218e6:	4770      	bx	lr

000218e8 <rpc_at_client_request_send>:
   218e8:	b150      	cbz	r0, 21900 <rpc_at_client_request_send+0x18>
   218ea:	4603      	mov	r3, r0
   218ec:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   218f0:	2003      	movs	r0, #3
   218f2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   218f6:	f843 1d08 	str.w	r1, [r3, #-8]!
   218fa:	4619      	mov	r1, r3
   218fc:	f7fe bfe0 	b.w	208c0 <rpc_message_send>
   21900:	200e      	movs	r0, #14
   21902:	4770      	bx	lr

00021904 <rpc_at_client_message_free>:
   21904:	b120      	cbz	r0, 21910 <rpc_at_client_message_free+0xc>
   21906:	f1a0 0108 	sub.w	r1, r0, #8
   2190a:	2003      	movs	r0, #3
   2190c:	f7ff b824 	b.w	20958 <rpc_message_free>
   21910:	200e      	movs	r0, #14
   21912:	4770      	bx	lr

00021914 <rpc_at_client_data_free>:
   21914:	b118      	cbz	r0, 2191e <rpc_at_client_data_free+0xa>
   21916:	4601      	mov	r1, r0
   21918:	2003      	movs	r0, #3
   2191a:	f7ff b8cd 	b.w	20ab8 <rpc_message_data_free>
   2191e:	200e      	movs	r0, #14
   21920:	4770      	bx	lr
   21922:	bf00      	nop

00021924 <linked_list_init>:
   21924:	b128      	cbz	r0, 21932 <linked_list_init+0xe>
   21926:	2300      	movs	r3, #0
   21928:	6003      	str	r3, [r0, #0]
   2192a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2192e:	4618      	mov	r0, r3
   21930:	4770      	bx	lr
   21932:	2007      	movs	r0, #7
   21934:	4770      	bx	lr
   21936:	bf00      	nop

00021938 <linked_list_push>:
   21938:	6802      	ldr	r2, [r0, #0]
   2193a:	4603      	mov	r3, r0
   2193c:	3201      	adds	r2, #1
   2193e:	d00e      	beq.n	2195e <linked_list_push+0x26>
   21940:	2200      	movs	r2, #0
   21942:	600a      	str	r2, [r1, #0]
   21944:	6802      	ldr	r2, [r0, #0]
   21946:	b13a      	cbz	r2, 21958 <linked_list_push+0x20>
   21948:	6882      	ldr	r2, [r0, #8]
   2194a:	6011      	str	r1, [r2, #0]
   2194c:	6081      	str	r1, [r0, #8]
   2194e:	681a      	ldr	r2, [r3, #0]
   21950:	2000      	movs	r0, #0
   21952:	3201      	adds	r2, #1
   21954:	601a      	str	r2, [r3, #0]
   21956:	4770      	bx	lr
   21958:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2195c:	e7f7      	b.n	2194e <linked_list_push+0x16>
   2195e:	2004      	movs	r0, #4
   21960:	4770      	bx	lr
   21962:	bf00      	nop

00021964 <linked_list_pop>:
   21964:	4603      	mov	r3, r0
   21966:	6800      	ldr	r0, [r0, #0]
   21968:	b128      	cbz	r0, 21976 <linked_list_pop+0x12>
   2196a:	6858      	ldr	r0, [r3, #4]
   2196c:	681a      	ldr	r2, [r3, #0]
   2196e:	6801      	ldr	r1, [r0, #0]
   21970:	3a01      	subs	r2, #1
   21972:	6059      	str	r1, [r3, #4]
   21974:	601a      	str	r2, [r3, #0]
   21976:	4770      	bx	lr

00021978 <linked_list_peek>:
   21978:	6803      	ldr	r3, [r0, #0]
   2197a:	b10b      	cbz	r3, 21980 <linked_list_peek+0x8>
   2197c:	6840      	ldr	r0, [r0, #4]
   2197e:	4770      	bx	lr
   21980:	4618      	mov	r0, r3
   21982:	4770      	bx	lr

00021984 <linked_list_size_get>:
   21984:	6800      	ldr	r0, [r0, #0]
   21986:	4770      	bx	lr

00021988 <linked_list_get_next>:
   21988:	6800      	ldr	r0, [r0, #0]
   2198a:	4770      	bx	lr

0002198c <nrf_socket>:
   2198c:	b570      	push	{r4, r5, r6, lr}
   2198e:	4604      	mov	r4, r0
   21990:	460d      	mov	r5, r1
   21992:	4616      	mov	r6, r2
   21994:	f7fa ff84 	bl	1c8a0 <bsd_platform_af_method_table_get>
   21998:	b130      	cbz	r0, 219a8 <nrf_socket+0x1c>
   2199a:	6803      	ldr	r3, [r0, #0]
   2199c:	4632      	mov	r2, r6
   2199e:	4629      	mov	r1, r5
   219a0:	4620      	mov	r0, r4
   219a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   219a6:	4718      	bx	r3
   219a8:	f04f 30ff 	mov.w	r0, #4294967295
   219ac:	bd70      	pop	{r4, r5, r6, pc}
   219ae:	bf00      	nop

000219b0 <nrf_close>:
   219b0:	b510      	push	{r4, lr}
   219b2:	4604      	mov	r4, r0
   219b4:	f7fa ffb6 	bl	1c924 <bsd_platform_fd_method_table_get>
   219b8:	b120      	cbz	r0, 219c4 <nrf_close+0x14>
   219ba:	6843      	ldr	r3, [r0, #4]
   219bc:	4620      	mov	r0, r4
   219be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   219c2:	4718      	bx	r3
   219c4:	f04f 30ff 	mov.w	r0, #4294967295
   219c8:	bd10      	pop	{r4, pc}
   219ca:	bf00      	nop

000219cc <nrf_sendto>:
   219cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219d0:	460d      	mov	r5, r1
   219d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   219d6:	4616      	mov	r6, r2
   219d8:	461f      	mov	r7, r3
   219da:	4604      	mov	r4, r0
   219dc:	f7fa ffa2 	bl	1c924 <bsd_platform_fd_method_table_get>
   219e0:	b158      	cbz	r0, 219fa <nrf_sendto+0x2e>
   219e2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   219e6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   219ea:	463b      	mov	r3, r7
   219ec:	4632      	mov	r2, r6
   219ee:	4629      	mov	r1, r5
   219f0:	4620      	mov	r0, r4
   219f2:	46f4      	mov	ip, lr
   219f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219f8:	4760      	bx	ip
   219fa:	f04f 30ff 	mov.w	r0, #4294967295
   219fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a02:	bf00      	nop

00021a04 <nrf_send>:
   21a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a08:	b082      	sub	sp, #8
   21a0a:	460e      	mov	r6, r1
   21a0c:	4617      	mov	r7, r2
   21a0e:	4698      	mov	r8, r3
   21a10:	4605      	mov	r5, r0
   21a12:	f7fa ff87 	bl	1c924 <bsd_platform_fd_method_table_get>
   21a16:	b160      	cbz	r0, 21a32 <nrf_send+0x2e>
   21a18:	4604      	mov	r4, r0
   21a1a:	2000      	movs	r0, #0
   21a1c:	e9cd 0000 	strd	r0, r0, [sp]
   21a20:	4643      	mov	r3, r8
   21a22:	463a      	mov	r2, r7
   21a24:	4631      	mov	r1, r6
   21a26:	4628      	mov	r0, r5
   21a28:	68a4      	ldr	r4, [r4, #8]
   21a2a:	47a0      	blx	r4
   21a2c:	b002      	add	sp, #8
   21a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a32:	f04f 30ff 	mov.w	r0, #4294967295
   21a36:	e7f9      	b.n	21a2c <nrf_send+0x28>

00021a38 <nrf_recvfrom>:
   21a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a3c:	460d      	mov	r5, r1
   21a3e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   21a42:	4616      	mov	r6, r2
   21a44:	461f      	mov	r7, r3
   21a46:	4604      	mov	r4, r0
   21a48:	f7fa ff6c 	bl	1c924 <bsd_platform_fd_method_table_get>
   21a4c:	b158      	cbz	r0, 21a66 <nrf_recvfrom+0x2e>
   21a4e:	e9cd 8908 	strd	r8, r9, [sp, #32]
   21a52:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   21a56:	463b      	mov	r3, r7
   21a58:	4632      	mov	r2, r6
   21a5a:	4629      	mov	r1, r5
   21a5c:	4620      	mov	r0, r4
   21a5e:	46f4      	mov	ip, lr
   21a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a64:	4760      	bx	ip
   21a66:	f04f 30ff 	mov.w	r0, #4294967295
   21a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a6e:	bf00      	nop

00021a70 <nrf_recv>:
   21a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a74:	b082      	sub	sp, #8
   21a76:	460e      	mov	r6, r1
   21a78:	4617      	mov	r7, r2
   21a7a:	4698      	mov	r8, r3
   21a7c:	4605      	mov	r5, r0
   21a7e:	f7fa ff51 	bl	1c924 <bsd_platform_fd_method_table_get>
   21a82:	b160      	cbz	r0, 21a9e <nrf_recv+0x2e>
   21a84:	4604      	mov	r4, r0
   21a86:	2000      	movs	r0, #0
   21a88:	e9cd 0000 	strd	r0, r0, [sp]
   21a8c:	4643      	mov	r3, r8
   21a8e:	463a      	mov	r2, r7
   21a90:	4631      	mov	r1, r6
   21a92:	4628      	mov	r0, r5
   21a94:	68e4      	ldr	r4, [r4, #12]
   21a96:	47a0      	blx	r4
   21a98:	b002      	add	sp, #8
   21a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a9e:	f04f 30ff 	mov.w	r0, #4294967295
   21aa2:	e7f9      	b.n	21a98 <nrf_recv+0x28>

00021aa4 <nrf_connect>:
   21aa4:	b570      	push	{r4, r5, r6, lr}
   21aa6:	460d      	mov	r5, r1
   21aa8:	4616      	mov	r6, r2
   21aaa:	4604      	mov	r4, r0
   21aac:	f7fa ff3a 	bl	1c924 <bsd_platform_fd_method_table_get>
   21ab0:	b130      	cbz	r0, 21ac0 <nrf_connect+0x1c>
   21ab2:	6943      	ldr	r3, [r0, #20]
   21ab4:	4632      	mov	r2, r6
   21ab6:	4629      	mov	r1, r5
   21ab8:	4620      	mov	r0, r4
   21aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21abe:	4718      	bx	r3
   21ac0:	f04f 30ff 	mov.w	r0, #4294967295
   21ac4:	bd70      	pop	{r4, r5, r6, pc}
   21ac6:	bf00      	nop

00021ac8 <nrf_listen>:
   21ac8:	b570      	push	{r4, r5, r6, lr}
   21aca:	460d      	mov	r5, r1
   21acc:	4604      	mov	r4, r0
   21ace:	f7fa ff29 	bl	1c924 <bsd_platform_fd_method_table_get>
   21ad2:	b128      	cbz	r0, 21ae0 <nrf_listen+0x18>
   21ad4:	6983      	ldr	r3, [r0, #24]
   21ad6:	4629      	mov	r1, r5
   21ad8:	4620      	mov	r0, r4
   21ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21ade:	4718      	bx	r3
   21ae0:	f04f 30ff 	mov.w	r0, #4294967295
   21ae4:	bd70      	pop	{r4, r5, r6, pc}
   21ae6:	bf00      	nop

00021ae8 <nrf_accept>:
   21ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21aec:	460d      	mov	r5, r1
   21aee:	4616      	mov	r6, r2
   21af0:	4604      	mov	r4, r0
   21af2:	f7fa ff17 	bl	1c924 <bsd_platform_fd_method_table_get>
   21af6:	b140      	cbz	r0, 21b0a <nrf_accept+0x22>
   21af8:	69c7      	ldr	r7, [r0, #28]
   21afa:	4632      	mov	r2, r6
   21afc:	4629      	mov	r1, r5
   21afe:	4620      	mov	r0, r4
   21b00:	46bc      	mov	ip, r7
   21b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21b06:	2300      	movs	r3, #0
   21b08:	4760      	bx	ip
   21b0a:	f04f 30ff 	mov.w	r0, #4294967295
   21b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b12:	bf00      	nop

00021b14 <nrf_bind>:
   21b14:	b570      	push	{r4, r5, r6, lr}
   21b16:	460d      	mov	r5, r1
   21b18:	4616      	mov	r6, r2
   21b1a:	4604      	mov	r4, r0
   21b1c:	f7fa ff02 	bl	1c924 <bsd_platform_fd_method_table_get>
   21b20:	b130      	cbz	r0, 21b30 <nrf_bind+0x1c>
   21b22:	6903      	ldr	r3, [r0, #16]
   21b24:	4632      	mov	r2, r6
   21b26:	4629      	mov	r1, r5
   21b28:	4620      	mov	r0, r4
   21b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21b2e:	4718      	bx	r3
   21b30:	f04f 30ff 	mov.w	r0, #4294967295
   21b34:	bd70      	pop	{r4, r5, r6, pc}
   21b36:	bf00      	nop

00021b38 <nrf_setsockopt>:
   21b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b3c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21b40:	460d      	mov	r5, r1
   21b42:	4616      	mov	r6, r2
   21b44:	461f      	mov	r7, r3
   21b46:	4604      	mov	r4, r0
   21b48:	f7fa feec 	bl	1c924 <bsd_platform_fd_method_table_get>
   21b4c:	b158      	cbz	r0, 21b66 <nrf_setsockopt+0x2e>
   21b4e:	f8cd 8018 	str.w	r8, [sp, #24]
   21b52:	f8d0 e020 	ldr.w	lr, [r0, #32]
   21b56:	463b      	mov	r3, r7
   21b58:	4632      	mov	r2, r6
   21b5a:	4629      	mov	r1, r5
   21b5c:	4620      	mov	r0, r4
   21b5e:	46f4      	mov	ip, lr
   21b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21b64:	4760      	bx	ip
   21b66:	f04f 30ff 	mov.w	r0, #4294967295
   21b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b6e:	bf00      	nop

00021b70 <nrf_getsockopt>:
   21b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b74:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21b78:	460d      	mov	r5, r1
   21b7a:	4616      	mov	r6, r2
   21b7c:	461f      	mov	r7, r3
   21b7e:	4604      	mov	r4, r0
   21b80:	f7fa fed0 	bl	1c924 <bsd_platform_fd_method_table_get>
   21b84:	b158      	cbz	r0, 21b9e <nrf_getsockopt+0x2e>
   21b86:	f8cd 8018 	str.w	r8, [sp, #24]
   21b8a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   21b8e:	463b      	mov	r3, r7
   21b90:	4632      	mov	r2, r6
   21b92:	4629      	mov	r1, r5
   21b94:	4620      	mov	r0, r4
   21b96:	46f4      	mov	ip, lr
   21b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21b9c:	4760      	bx	ip
   21b9e:	f04f 30ff 	mov.w	r0, #4294967295
   21ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ba6:	bf00      	nop

00021ba8 <nrf_getaddrinfo>:
   21ba8:	f7fa bf1a 	b.w	1c9e0 <bsd_platform_getaddrinfo>

00021bac <nrf_freeaddrinfo>:
   21bac:	f7fa bf1a 	b.w	1c9e4 <bsd_platform_freeaddrinfo>

00021bb0 <nrf_poll>:
   21bb0:	f7fa bf1a 	b.w	1c9e8 <bsd_platform_poll>

00021bb4 <nrf_fcntl>:
   21bb4:	f7fa bf72 	b.w	1ca9c <bsd_platform_fcntl>

00021bb8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   21bb8:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   21bba:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   21bbc:	4b08      	ldr	r3, [pc, #32]	; (21be0 <z_sys_device_do_config_level+0x28>)
   21bbe:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21bc2:	3001      	adds	r0, #1
   21bc4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21bc8:	42a5      	cmp	r5, r4
   21bca:	d800      	bhi.n	21bce <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   21bcc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   21bce:	6823      	ldr	r3, [r4, #0]
   21bd0:	4620      	mov	r0, r4
   21bd2:	685b      	ldr	r3, [r3, #4]
   21bd4:	4798      	blx	r3
		if (retval != 0) {
   21bd6:	b100      	cbz	r0, 21bda <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   21bd8:	6066      	str	r6, [r4, #4]
								info++) {
   21bda:	340c      	adds	r4, #12
   21bdc:	e7f4      	b.n	21bc8 <z_sys_device_do_config_level+0x10>
   21bde:	bf00      	nop
   21be0:	0002a550 	.word	0x0002a550

00021be4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21be4:	4b10      	ldr	r3, [pc, #64]	; (21c28 <z_impl_device_get_binding+0x44>)
{
   21be6:	b570      	push	{r4, r5, r6, lr}
   21be8:	4605      	mov	r5, r0
   21bea:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   21bec:	4c0f      	ldr	r4, [pc, #60]	; (21c2c <z_impl_device_get_binding+0x48>)
   21bee:	429c      	cmp	r4, r3
   21bf0:	d104      	bne.n	21bfc <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   21bf2:	4c0e      	ldr	r4, [pc, #56]	; (21c2c <z_impl_device_get_binding+0x48>)
   21bf4:	42b4      	cmp	r4, r6
   21bf6:	d109      	bne.n	21c0c <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   21bf8:	2400      	movs	r4, #0
   21bfa:	e012      	b.n	21c22 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   21bfc:	6862      	ldr	r2, [r4, #4]
   21bfe:	b11a      	cbz	r2, 21c08 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   21c00:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   21c02:	6812      	ldr	r2, [r2, #0]
   21c04:	42aa      	cmp	r2, r5
   21c06:	d00c      	beq.n	21c22 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c08:	340c      	adds	r4, #12
   21c0a:	e7f0      	b.n	21bee <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   21c0c:	6863      	ldr	r3, [r4, #4]
   21c0e:	b90b      	cbnz	r3, 21c14 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   21c10:	340c      	adds	r4, #12
   21c12:	e7ef      	b.n	21bf4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   21c14:	6823      	ldr	r3, [r4, #0]
   21c16:	4628      	mov	r0, r5
   21c18:	6819      	ldr	r1, [r3, #0]
   21c1a:	f004 f8c1 	bl	25da0 <strcmp>
   21c1e:	2800      	cmp	r0, #0
   21c20:	d1f6      	bne.n	21c10 <z_impl_device_get_binding+0x2c>
}
   21c22:	4620      	mov	r0, r4
   21c24:	bd70      	pop	{r4, r5, r6, pc}
   21c26:	bf00      	nop
   21c28:	2002bb30 	.word	0x2002bb30
   21c2c:	2002ba40 	.word	0x2002ba40

00021c30 <z_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   21c30:	4b01      	ldr	r3, [pc, #4]	; (21c38 <z_impl_z_errno+0x8>)
   21c32:	6898      	ldr	r0, [r3, #8]
}
   21c34:	3054      	adds	r0, #84	; 0x54
   21c36:	4770      	bx	lr
   21c38:	20022120 	.word	0x20022120

00021c3c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   21c3c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   21c3e:	4d0b      	ldr	r5, [pc, #44]	; (21c6c <idle+0x30>)
	__asm__ volatile(
   21c40:	f04f 0220 	mov.w	r2, #32
   21c44:	f3ef 8311 	mrs	r3, BASEPRI
   21c48:	f382 8811 	msr	BASEPRI, r2
   21c4c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   21c50:	f002 fad6 	bl	24200 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21c54:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   21c56:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   21c58:	2802      	cmp	r0, #2
   21c5a:	bfd8      	it	le
   21c5c:	4608      	movle	r0, r1
   21c5e:	f002 fb15 	bl	2428c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   21c62:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   21c64:	f7ef f950 	bl	10f08 <k_cpu_idle>
   21c68:	e7ea      	b.n	21c40 <idle+0x4>
   21c6a:	bf00      	nop
   21c6c:	20022120 	.word	0x20022120

00021c70 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21c70:	4802      	ldr	r0, [pc, #8]	; (21c7c <z_bss_zero+0xc>)
   21c72:	4a03      	ldr	r2, [pc, #12]	; (21c80 <z_bss_zero+0x10>)
   21c74:	2100      	movs	r1, #0
   21c76:	1a12      	subs	r2, r2, r0
   21c78:	f004 b922 	b.w	25ec0 <memset>
   21c7c:	20020000 	.word	0x20020000
   21c80:	20024168 	.word	0x20024168

00021c84 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   21c84:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   21c86:	4806      	ldr	r0, [pc, #24]	; (21ca0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   21c88:	4a06      	ldr	r2, [pc, #24]	; (21ca4 <z_data_copy+0x20>)
   21c8a:	4907      	ldr	r1, [pc, #28]	; (21ca8 <z_data_copy+0x24>)
   21c8c:	1a12      	subs	r2, r2, r0
   21c8e:	f004 f8ea 	bl	25e66 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   21c96:	4a05      	ldr	r2, [pc, #20]	; (21cac <z_data_copy+0x28>)
   21c98:	4905      	ldr	r1, [pc, #20]	; (21cb0 <z_data_copy+0x2c>)
   21c9a:	4806      	ldr	r0, [pc, #24]	; (21cb4 <z_data_copy+0x30>)
   21c9c:	f004 b8e3 	b.w	25e66 <memcpy>
   21ca0:	20028240 	.word	0x20028240
   21ca4:	2002bc60 	.word	0x2002bc60
   21ca8:	0002c830 	.word	0x0002c830
   21cac:	00000000 	.word	0x00000000
   21cb0:	0002c830 	.word	0x0002c830
   21cb4:	20020000 	.word	0x20020000

00021cb8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21cb8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21cba:	2002      	movs	r0, #2
   21cbc:	f7ff ff7c 	bl	21bb8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21cc0:	4807      	ldr	r0, [pc, #28]	; (21ce0 <bg_thread_main+0x28>)
   21cc2:	f003 ff3c 	bl	25b3e <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21cc6:	2003      	movs	r0, #3
   21cc8:	f7ff ff76 	bl	21bb8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   21ccc:	f002 f8de 	bl	23e8c <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21cd0:	f7ec fa94 	bl	e1fc <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   21cd4:	4a03      	ldr	r2, [pc, #12]	; (21ce4 <bg_thread_main+0x2c>)
   21cd6:	7b13      	ldrb	r3, [r2, #12]
   21cd8:	f023 0301 	bic.w	r3, r3, #1
   21cdc:	7313      	strb	r3, [r2, #12]
}
   21cde:	bd08      	pop	{r3, pc}
   21ce0:	0002c1d1 	.word	0x0002c1d1
   21ce4:	20021c3c 	.word	0x20021c3c

00021ce8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   21ce8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   21cea:	4b42      	ldr	r3, [pc, #264]	; (21df4 <z_cstart+0x10c>)
   21cec:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21cee:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21cf2:	2400      	movs	r4, #0
   21cf4:	23e0      	movs	r3, #224	; 0xe0
   21cf6:	4d40      	ldr	r5, [pc, #256]	; (21df8 <z_cstart+0x110>)

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   21cf8:	2701      	movs	r7, #1
   21cfa:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21cfe:	77ec      	strb	r4, [r5, #31]
   21d00:	762c      	strb	r4, [r5, #24]
   21d02:	766c      	strb	r4, [r5, #25]
   21d04:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   21d08:	4e3c      	ldr	r6, [pc, #240]	; (21dfc <z_cstart+0x114>)
   21d0a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21d0e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
   21d10:	f7ef faca 	bl	112a8 <z_FaultInit>
	z_CpuIdleInit();
   21d14:	f7ef f8f2 	bl	10efc <z_CpuIdleInit>
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21d18:	f04f 33ff 	mov.w	r3, #4294967295
   21d1c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   21d20:	ab06      	add	r3, sp, #24
   21d22:	4621      	mov	r1, r4
   21d24:	22b0      	movs	r2, #176	; 0xb0
   21d26:	4618      	mov	r0, r3
   21d28:	f004 f8ca 	bl	25ec0 <memset>
	_current = &dummy_thread;
   21d2c:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21d2e:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   21d30:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21d34:	f7ff ff40 	bl	21bb8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21d38:	4638      	mov	r0, r7
   21d3a:	f7ff ff3d 	bl	21bb8 <z_sys_device_do_config_level>
	_kernel.ready_q.cache = _main_thread;
   21d3e:	4d30      	ldr	r5, [pc, #192]	; (21e00 <z_cstart+0x118>)
	z_sched_init();
   21d40:	f001 fce8 	bl	23714 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   21d44:	4b2f      	ldr	r3, [pc, #188]	; (21e04 <z_cstart+0x11c>)
	_kernel.ready_q.cache = _main_thread;
   21d46:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   21d48:	e9cd 7304 	strd	r7, r3, [sp, #16]
   21d4c:	2307      	movs	r3, #7
   21d4e:	e9cd 4400 	strd	r4, r4, [sp]
   21d52:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21d5a:	4b2b      	ldr	r3, [pc, #172]	; (21e08 <z_cstart+0x120>)
   21d5c:	492b      	ldr	r1, [pc, #172]	; (21e0c <z_cstart+0x124>)
   21d5e:	4628      	mov	r0, r5
   21d60:	f001 ffa2 	bl	23ca8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21d64:	7b6b      	ldrb	r3, [r5, #13]
   21d66:	4634      	mov	r4, r6
   21d68:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21d6c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21d70:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   21d72:	d104      	bne.n	21d7e <z_cstart+0x96>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   21d74:	69ab      	ldr	r3, [r5, #24]
   21d76:	b913      	cbnz	r3, 21d7e <z_cstart+0x96>
		z_add_thread_to_ready_q(thread);
   21d78:	4628      	mov	r0, r5
   21d7a:	f001 f8c9 	bl	22f10 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   21d7e:	4b24      	ldr	r3, [pc, #144]	; (21e10 <z_cstart+0x128>)
   21d80:	2600      	movs	r6, #0
   21d82:	9305      	str	r3, [sp, #20]
   21d84:	2201      	movs	r2, #1
   21d86:	230f      	movs	r3, #15
   21d88:	4f22      	ldr	r7, [pc, #136]	; (21e14 <z_cstart+0x12c>)
   21d8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   21d8e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   21d92:	9600      	str	r6, [sp, #0]
   21d94:	4b20      	ldr	r3, [pc, #128]	; (21e18 <z_cstart+0x130>)
   21d96:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21d9a:	4920      	ldr	r1, [pc, #128]	; (21e1c <z_cstart+0x134>)
   21d9c:	4638      	mov	r0, r7
   21d9e:	f001 ff83 	bl	23ca8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21da2:	7b7b      	ldrb	r3, [r7, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   21da4:	60e7      	str	r7, [r4, #12]
   21da6:	f023 0304 	bic.w	r3, r3, #4
   21daa:	737b      	strb	r3, [r7, #13]
	list->head = (sys_dnode_t *)list;
   21dac:	4b1c      	ldr	r3, [pc, #112]	; (21e20 <z_cstart+0x138>)
	list->tail = (sys_dnode_t *)list;
   21dae:	e9c4 3306 	strd	r3, r3, [r4, #24]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   21db2:	eee1 6a10 	vmsr	fpscr, r6
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21db6:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21dba:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21dbe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   21dc2:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   21dc6:	f7ef fc0d 	bl	115e4 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   21dca:	480d      	ldr	r0, [pc, #52]	; (21e00 <z_cstart+0x118>)
	_current = main_thread;
   21dcc:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   21dce:	f003 fee7 	bl	25ba0 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   21dd2:	4b0d      	ldr	r3, [pc, #52]	; (21e08 <z_cstart+0x120>)
   21dd4:	4a13      	ldr	r2, [pc, #76]	; (21e24 <z_cstart+0x13c>)
   21dd6:	4618      	mov	r0, r3
   21dd8:	f382 8809 	msr	PSP, r2
   21ddc:	b663      	cpsie	if
   21dde:	f04f 0100 	mov.w	r1, #0
   21de2:	f381 8811 	msr	BASEPRI, r1
   21de6:	f3bf 8f6f 	isb	sy
   21dea:	2100      	movs	r1, #0
   21dec:	2200      	movs	r2, #0
   21dee:	2300      	movs	r3, #0
   21df0:	f003 fd14 	bl	2581c <z_thread_entry>
   21df4:	20026938 	.word	0x20026938
   21df8:	e000ed00 	.word	0xe000ed00
   21dfc:	20022120 	.word	0x20022120
   21e00:	20021c3c 	.word	0x20021c3c
   21e04:	0002c1fe 	.word	0x0002c1fe
   21e08:	00021cb9 	.word	0x00021cb9
   21e0c:	20024ff8 	.word	0x20024ff8
   21e10:	0002c203 	.word	0x0002c203
   21e14:	20021b8c 	.word	0x20021b8c
   21e18:	00021c3d 	.word	0x00021c3d
   21e1c:	20025ff8 	.word	0x20025ff8
   21e20:	20022138 	.word	0x20022138
   21e24:	20025ff8 	.word	0x20025ff8

00021e28 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   21e28:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   21e2a:	2400      	movs	r4, #0
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   21e2c:	4b0a      	ldr	r3, [pc, #40]	; (21e58 <init_mem_slab_module+0x30>)
   21e2e:	480b      	ldr	r0, [pc, #44]	; (21e5c <init_mem_slab_module+0x34>)
   21e30:	4283      	cmp	r3, r0
   21e32:	d301      	bcc.n	21e38 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   21e34:	2000      	movs	r0, #0
   21e36:	bd70      	pop	{r4, r5, r6, pc}
	for (j = 0U; j < slab->num_blocks; j++) {
   21e38:	2100      	movs	r1, #0
	p = slab->buffer;
   21e3a:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e3c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21e3e:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e40:	42a9      	cmp	r1, r5
   21e42:	d101      	bne.n	21e48 <init_mem_slab_module+0x20>
	     slab++) {
   21e44:	331c      	adds	r3, #28
   21e46:	e7f3      	b.n	21e30 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21e48:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21e4a:	3101      	adds	r1, #1
		*(char **)p = slab->free_list;
   21e4c:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   21e4e:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   21e50:	615a      	str	r2, [r3, #20]
		p += slab->block_size;
   21e52:	4432      	add	r2, r6
   21e54:	e7f4      	b.n	21e40 <init_mem_slab_module+0x18>
   21e56:	bf00      	nop
   21e58:	2002bb30 	.word	0x2002bb30
   21e5c:	2002bb68 	.word	0x2002bb68

00021e60 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   21e60:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   21e62:	4c07      	ldr	r4, [pc, #28]	; (21e80 <init_static_pools+0x20>)
   21e64:	4d07      	ldr	r5, [pc, #28]	; (21e84 <init_static_pools+0x24>)
   21e66:	42ac      	cmp	r4, r5
   21e68:	d301      	bcc.n	21e6e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   21e6a:	2000      	movs	r0, #0
   21e6c:	bd38      	pop	{r3, r4, r5, pc}
   21e6e:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   21e72:	4620      	mov	r0, r4
   21e74:	e9c4 3305 	strd	r3, r3, [r4, #20]
   21e78:	f003 fbbe 	bl	255f8 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   21e7c:	341c      	adds	r4, #28
   21e7e:	e7f2      	b.n	21e66 <init_static_pools+0x6>
   21e80:	2002bb68 	.word	0x2002bb68
   21e84:	2002bb84 	.word	0x2002bb84

00021e88 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   21e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e8c:	4606      	mov	r6, r0
   21e8e:	b085      	sub	sp, #20
   21e90:	460d      	mov	r5, r1
   21e92:	4617      	mov	r7, r2
   21e94:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21e96:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   21e9a:	2b0d      	cmp	r3, #13
   21e9c:	d805      	bhi.n	21eaa <k_mem_pool_alloc+0x22>
   21e9e:	2b00      	cmp	r3, #0
   21ea0:	d05d      	beq.n	21f5e <k_mem_pool_alloc+0xd6>
   21ea2:	4b38      	ldr	r3, [pc, #224]	; (21f84 <k_mem_pool_alloc+0xfc>)
   21ea4:	685b      	ldr	r3, [r3, #4]
   21ea6:	051a      	lsls	r2, r3, #20
   21ea8:	d459      	bmi.n	21f5e <k_mem_pool_alloc+0xd6>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
   21eaa:	2c00      	cmp	r4, #0
   21eac:	d14a      	bne.n	21f44 <k_mem_pool_alloc+0xbc>
	s64_t end = 0;
   21eae:	2200      	movs	r2, #0
	return pool - &_k_mem_pool_list_start[0];
   21eb0:	4b35      	ldr	r3, [pc, #212]	; (21f88 <k_mem_pool_alloc+0x100>)

	if (timeout > 0) {
		end = z_tick_get() + z_ms_to_ticks(timeout);
   21eb2:	4690      	mov	r8, r2
	return pool - &_k_mem_pool_list_start[0];
   21eb4:	1af3      	subs	r3, r6, r3
   21eb6:	4a35      	ldr	r2, [pc, #212]	; (21f8c <k_mem_pool_alloc+0x104>)
   21eb8:	109b      	asrs	r3, r3, #2
   21eba:	fb02 fa03 	mul.w	sl, r2, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   21ebe:	f106 0b14 	add.w	fp, r6, #20
		block->id.pool = pool_id(p);
   21ec2:	fa5f fa8a 	uxtb.w	sl, sl
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   21ec6:	9500      	str	r5, [sp, #0]
   21ec8:	ab03      	add	r3, sp, #12
   21eca:	aa02      	add	r2, sp, #8
   21ecc:	4639      	mov	r1, r7
   21ece:	4630      	mov	r0, r6
   21ed0:	f003 fbdd 	bl	2568e <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   21ed4:	f110 0f0b 	cmn.w	r0, #11
   21ed8:	d10b      	bne.n	21ef2 <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   21eda:	9500      	str	r5, [sp, #0]
   21edc:	ab03      	add	r3, sp, #12
   21ede:	aa02      	add	r2, sp, #8
   21ee0:	4639      	mov	r1, r7
   21ee2:	4630      	mov	r0, r6
   21ee4:	f003 fbd3 	bl	2568e <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   21ee8:	f110 0f0b 	cmn.w	r0, #11
   21eec:	bf08      	it	eq
   21eee:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   21ef2:	796b      	ldrb	r3, [r5, #5]
   21ef4:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   21ef6:	f885 a004 	strb.w	sl, [r5, #4]
		block->id.level = level_num;
   21efa:	f362 0303 	bfi	r3, r2, #0, #4
   21efe:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   21f00:	686b      	ldr	r3, [r5, #4]
   21f02:	9a03      	ldr	r2, [sp, #12]
   21f04:	f362 331f 	bfi	r3, r2, #12, #20
   21f08:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   21f0a:	b1c0      	cbz	r0, 21f3e <k_mem_pool_alloc+0xb6>
   21f0c:	b1bc      	cbz	r4, 21f3e <k_mem_pool_alloc+0xb6>
   21f0e:	f110 0f0c 	cmn.w	r0, #12
   21f12:	d114      	bne.n	21f3e <k_mem_pool_alloc+0xb6>
   21f14:	f04f 0320 	mov.w	r3, #32
   21f18:	f3ef 8011 	mrs	r0, BASEPRI
   21f1c:	f383 8811 	msr	BASEPRI, r3
   21f20:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   21f24:	4622      	mov	r2, r4
   21f26:	4659      	mov	r1, fp
   21f28:	f001 fa4c 	bl	233c4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   21f2c:	1c63      	adds	r3, r4, #1
   21f2e:	d0ca      	beq.n	21ec6 <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
   21f30:	f002 faa8 	bl	24484 <z_tick_get>

			if (timeout < 0) {
   21f34:	ebb8 0400 	subs.w	r4, r8, r0
   21f38:	d5c5      	bpl.n	21ec6 <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
   21f3a:	f06f 000a 	mvn.w	r0, #10
}
   21f3e:	b005      	add	sp, #20
   21f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
   21f44:	4912      	ldr	r1, [pc, #72]	; (21f90 <k_mem_pool_alloc+0x108>)
   21f46:	233a      	movs	r3, #58	; 0x3a
   21f48:	4a12      	ldr	r2, [pc, #72]	; (21f94 <k_mem_pool_alloc+0x10c>)
   21f4a:	4813      	ldr	r0, [pc, #76]	; (21f98 <k_mem_pool_alloc+0x110>)
   21f4c:	f003 fdf7 	bl	25b3e <printk>
   21f50:	4812      	ldr	r0, [pc, #72]	; (21f9c <k_mem_pool_alloc+0x114>)
   21f52:	f003 fdf4 	bl	25b3e <printk>
   21f56:	213a      	movs	r1, #58	; 0x3a
   21f58:	480e      	ldr	r0, [pc, #56]	; (21f94 <k_mem_pool_alloc+0x10c>)
   21f5a:	f003 fdfd 	bl	25b58 <assert_post_action>
	if (timeout > 0) {
   21f5e:	2c00      	cmp	r4, #0
   21f60:	dda5      	ble.n	21eae <k_mem_pool_alloc+0x26>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   21f62:	f002 fa8f 	bl	24484 <z_tick_get>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   21f66:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   21f6a:	2100      	movs	r1, #0
   21f6c:	4680      	mov	r8, r0
   21f6e:	480c      	ldr	r0, [pc, #48]	; (21fa0 <k_mem_pool_alloc+0x118>)
   21f70:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   21f74:	2300      	movs	r3, #0
   21f76:	fbcc 0104 	smlal	r0, r1, ip, r4
   21f7a:	f7ea f8e3 	bl	c144 <__aeabi_ldivmod>
   21f7e:	eb18 0200 	adds.w	r2, r8, r0
   21f82:	e795      	b.n	21eb0 <k_mem_pool_alloc+0x28>
   21f84:	e000ed00 	.word	0xe000ed00
   21f88:	2002bb68 	.word	0x2002bb68
   21f8c:	b6db6db7 	.word	0xb6db6db7
   21f90:	0002c22e 	.word	0x0002c22e
   21f94:	0002c208 	.word	0x0002c208
   21f98:	0002abaa 	.word	0x0002abaa
   21f9c:	0002b126 	.word	0x0002b126
   21fa0:	0003e7ff 	.word	0x0003e7ff

00021fa4 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   21fa4:	b570      	push	{r4, r5, r6, lr}
   21fa6:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   21fa8:	6802      	ldr	r2, [r0, #0]
   21faa:	7841      	ldrb	r1, [r0, #1]
   21fac:	4d23      	ldr	r5, [pc, #140]	; (2203c <k_mem_pool_free_id+0x98>)
   21fae:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   21fb2:	00a4      	lsls	r4, r4, #2
   21fb4:	0b12      	lsrs	r2, r2, #12
   21fb6:	f001 010f 	and.w	r1, r1, #15
   21fba:	1928      	adds	r0, r5, r4
   21fbc:	f7ed fcfc 	bl	f9b8 <z_sys_mem_pool_block_free>
   21fc0:	f04f 0320 	mov.w	r3, #32
   21fc4:	f3ef 8611 	mrs	r6, BASEPRI
   21fc8:	f383 8811 	msr	BASEPRI, r3
   21fcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   21fd0:	481b      	ldr	r0, [pc, #108]	; (22040 <k_mem_pool_free_id+0x9c>)
   21fd2:	f001 fe83 	bl	23cdc <z_spin_lock_valid>
   21fd6:	b960      	cbnz	r0, 21ff2 <k_mem_pool_free_id+0x4e>
   21fd8:	491a      	ldr	r1, [pc, #104]	; (22044 <k_mem_pool_free_id+0xa0>)
   21fda:	234e      	movs	r3, #78	; 0x4e
   21fdc:	4a1a      	ldr	r2, [pc, #104]	; (22048 <k_mem_pool_free_id+0xa4>)
   21fde:	481b      	ldr	r0, [pc, #108]	; (2204c <k_mem_pool_free_id+0xa8>)
   21fe0:	f003 fdad 	bl	25b3e <printk>
   21fe4:	481a      	ldr	r0, [pc, #104]	; (22050 <k_mem_pool_free_id+0xac>)
   21fe6:	f003 fdaa 	bl	25b3e <printk>
   21fea:	214e      	movs	r1, #78	; 0x4e
   21fec:	4816      	ldr	r0, [pc, #88]	; (22048 <k_mem_pool_free_id+0xa4>)
   21fee:	f003 fdb3 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ff2:	4813      	ldr	r0, [pc, #76]	; (22040 <k_mem_pool_free_id+0x9c>)
   21ff4:	f001 fe90 	bl	23d18 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   21ff8:	f104 0014 	add.w	r0, r4, #20
   21ffc:	4428      	add	r0, r5
   21ffe:	f005 fb53 	bl	276a8 <z_unpend_all>

	if (need_sched != 0) {
   22002:	b128      	cbz	r0, 22010 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   22004:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   22006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2200a:	480d      	ldr	r0, [pc, #52]	; (22040 <k_mem_pool_free_id+0x9c>)
   2200c:	f000 bd8c 	b.w	22b28 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22010:	480b      	ldr	r0, [pc, #44]	; (22040 <k_mem_pool_free_id+0x9c>)
   22012:	f001 fe71 	bl	23cf8 <z_spin_unlock_valid>
   22016:	b960      	cbnz	r0, 22032 <k_mem_pool_free_id+0x8e>
   22018:	490e      	ldr	r1, [pc, #56]	; (22054 <k_mem_pool_free_id+0xb0>)
   2201a:	2361      	movs	r3, #97	; 0x61
   2201c:	4a0a      	ldr	r2, [pc, #40]	; (22048 <k_mem_pool_free_id+0xa4>)
   2201e:	480b      	ldr	r0, [pc, #44]	; (2204c <k_mem_pool_free_id+0xa8>)
   22020:	f003 fd8d 	bl	25b3e <printk>
   22024:	480c      	ldr	r0, [pc, #48]	; (22058 <k_mem_pool_free_id+0xb4>)
   22026:	f003 fd8a 	bl	25b3e <printk>
   2202a:	2161      	movs	r1, #97	; 0x61
   2202c:	4806      	ldr	r0, [pc, #24]	; (22048 <k_mem_pool_free_id+0xa4>)
   2202e:	f003 fd93 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22032:	f386 8811 	msr	BASEPRI, r6
   22036:	f3bf 8f6f 	isb	sy
}
   2203a:	bd70      	pop	{r4, r5, r6, pc}
   2203c:	2002bb68 	.word	0x2002bb68
   22040:	20022118 	.word	0x20022118
   22044:	0002b68e 	.word	0x0002b68e
   22048:	0002b666 	.word	0x0002b666
   2204c:	0002abaa 	.word	0x0002abaa
   22050:	0002b6a3 	.word	0x0002b6a3
   22054:	0002b6b8 	.word	0x0002b6b8
   22058:	0002b6cf 	.word	0x0002b6cf

0002205c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2205c:	4601      	mov	r1, r0
   2205e:	4801      	ldr	r0, [pc, #4]	; (22064 <k_malloc+0x8>)
   22060:	f005 bab8 	b.w	275d4 <k_mem_pool_malloc>
   22064:	2002bb68 	.word	0x2002bb68

00022068 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   22068:	4b03      	ldr	r3, [pc, #12]	; (22078 <z_thread_malloc+0x10>)
{
   2206a:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   2206c:	689b      	ldr	r3, [r3, #8]
   2206e:	6e18      	ldr	r0, [r3, #96]	; 0x60
   22070:	b108      	cbz	r0, 22076 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   22072:	f005 baaf 	b.w	275d4 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   22076:	4770      	bx	lr
   22078:	20022120 	.word	0x20022120

0002207c <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *q, void *data, s32_t timeout)
{
   2207c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22080:	4604      	mov	r4, r0
   22082:	4688      	mov	r8, r1
   22084:	4615      	mov	r5, r2
   22086:	f3ef 8305 	mrs	r3, IPSR
   2208a:	2b0d      	cmp	r3, #13
   2208c:	d804      	bhi.n	22098 <z_impl_k_msgq_put+0x1c>
   2208e:	b18b      	cbz	r3, 220b4 <z_impl_k_msgq_put+0x38>
   22090:	4b42      	ldr	r3, [pc, #264]	; (2219c <z_impl_k_msgq_put+0x120>)
   22092:	685b      	ldr	r3, [r3, #4]
   22094:	051a      	lsls	r2, r3, #20
   22096:	d40d      	bmi.n	220b4 <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_is_in_isr() || timeout == K_NO_WAIT, "");
   22098:	b165      	cbz	r5, 220b4 <z_impl_k_msgq_put+0x38>
   2209a:	4941      	ldr	r1, [pc, #260]	; (221a0 <z_impl_k_msgq_put+0x124>)
   2209c:	2373      	movs	r3, #115	; 0x73
   2209e:	4a41      	ldr	r2, [pc, #260]	; (221a4 <z_impl_k_msgq_put+0x128>)
   220a0:	4841      	ldr	r0, [pc, #260]	; (221a8 <z_impl_k_msgq_put+0x12c>)
   220a2:	f003 fd4c 	bl	25b3e <printk>
   220a6:	4841      	ldr	r0, [pc, #260]	; (221ac <z_impl_k_msgq_put+0x130>)
   220a8:	f003 fd49 	bl	25b3e <printk>
   220ac:	2173      	movs	r1, #115	; 0x73
   220ae:	483d      	ldr	r0, [pc, #244]	; (221a4 <z_impl_k_msgq_put+0x128>)
   220b0:	f003 fd52 	bl	25b58 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&q->lock);
   220b4:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   220b8:	f04f 0320 	mov.w	r3, #32
   220bc:	f3ef 8711 	mrs	r7, BASEPRI
   220c0:	f383 8811 	msr	BASEPRI, r3
   220c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   220c8:	4630      	mov	r0, r6
   220ca:	f001 fe07 	bl	23cdc <z_spin_lock_valid>
   220ce:	b960      	cbnz	r0, 220ea <z_impl_k_msgq_put+0x6e>
   220d0:	4937      	ldr	r1, [pc, #220]	; (221b0 <z_impl_k_msgq_put+0x134>)
   220d2:	234e      	movs	r3, #78	; 0x4e
   220d4:	4a37      	ldr	r2, [pc, #220]	; (221b4 <z_impl_k_msgq_put+0x138>)
   220d6:	4834      	ldr	r0, [pc, #208]	; (221a8 <z_impl_k_msgq_put+0x12c>)
   220d8:	f003 fd31 	bl	25b3e <printk>
   220dc:	4836      	ldr	r0, [pc, #216]	; (221b8 <z_impl_k_msgq_put+0x13c>)
   220de:	f003 fd2e 	bl	25b3e <printk>
   220e2:	214e      	movs	r1, #78	; 0x4e
   220e4:	4833      	ldr	r0, [pc, #204]	; (221b4 <z_impl_k_msgq_put+0x138>)
   220e6:	f003 fd37 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   220ea:	4630      	mov	r0, r6
   220ec:	f001 fe14 	bl	23d18 <z_spin_lock_set_owner>
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs < q->max_msgs) {
   220f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   220f2:	6923      	ldr	r3, [r4, #16]
   220f4:	429a      	cmp	r2, r3
   220f6:	d241      	bcs.n	2217c <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&q->wait_q);
   220f8:	4620      	mov	r0, r4
   220fa:	f001 fa7f 	bl	235fc <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   220fe:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   22100:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   22102:	4641      	mov	r1, r8
		if (pending_thread != NULL) {
   22104:	b1a0      	cbz	r0, 22130 <z_impl_k_msgq_put+0xb4>
			(void)memcpy(pending_thread->base.swap_data, data,
   22106:	6940      	ldr	r0, [r0, #20]
   22108:	f003 fead 	bl	25e66 <memcpy>
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2210c:	2300      	movs	r3, #0
   2210e:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22110:	7b6b      	ldrb	r3, [r5, #13]
   22112:	06db      	lsls	r3, r3, #27
   22114:	d104      	bne.n	22120 <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   22116:	69ab      	ldr	r3, [r5, #24]
   22118:	b913      	cbnz	r3, 22120 <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   2211a:	4628      	mov	r0, r5
   2211c:	f000 fef8 	bl	22f10 <z_add_thread_to_ready_q>
			       q->msg_size);
			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&q->lock, key);
   22120:	4639      	mov	r1, r7
   22122:	4630      	mov	r0, r6
   22124:	f000 fd00 	bl	22b28 <z_reschedule>
			return 0;
   22128:	2400      	movs	r4, #0
	}

	k_spin_unlock(&q->lock, key);

	return result;
}
   2212a:	4620      	mov	r0, r4
   2212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(q->write_ptr, data, q->msg_size);
   22130:	6a20      	ldr	r0, [r4, #32]
   22132:	f003 fe98 	bl	25e66 <memcpy>
			q->write_ptr += q->msg_size;
   22136:	6a23      	ldr	r3, [r4, #32]
   22138:	68e2      	ldr	r2, [r4, #12]
   2213a:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   2213c:	69a2      	ldr	r2, [r4, #24]
			q->write_ptr += q->msg_size;
   2213e:	6223      	str	r3, [r4, #32]
			if (q->write_ptr == q->buffer_end) {
   22140:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   22142:	bf04      	itt	eq
   22144:	6963      	ldreq	r3, [r4, #20]
   22146:	6223      	streq	r3, [r4, #32]
			q->used_msgs++;
   22148:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2214a:	3301      	adds	r3, #1
   2214c:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   2214e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22150:	4630      	mov	r0, r6
   22152:	f001 fdd1 	bl	23cf8 <z_spin_unlock_valid>
   22156:	b960      	cbnz	r0, 22172 <z_impl_k_msgq_put+0xf6>
   22158:	4918      	ldr	r1, [pc, #96]	; (221bc <z_impl_k_msgq_put+0x140>)
   2215a:	2361      	movs	r3, #97	; 0x61
   2215c:	4a15      	ldr	r2, [pc, #84]	; (221b4 <z_impl_k_msgq_put+0x138>)
   2215e:	4812      	ldr	r0, [pc, #72]	; (221a8 <z_impl_k_msgq_put+0x12c>)
   22160:	f003 fced 	bl	25b3e <printk>
   22164:	4816      	ldr	r0, [pc, #88]	; (221c0 <z_impl_k_msgq_put+0x144>)
   22166:	f003 fcea 	bl	25b3e <printk>
   2216a:	2161      	movs	r1, #97	; 0x61
   2216c:	4811      	ldr	r0, [pc, #68]	; (221b4 <z_impl_k_msgq_put+0x138>)
   2216e:	f003 fcf3 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22172:	f387 8811 	msr	BASEPRI, r7
   22176:	f3bf 8f6f 	isb	sy
	return result;
   2217a:	e7d6      	b.n	2212a <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   2217c:	b15d      	cbz	r5, 22196 <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   2217e:	4b11      	ldr	r3, [pc, #68]	; (221c4 <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   22180:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   22182:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   22184:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   22186:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   2218a:	4630      	mov	r0, r6
   2218c:	462b      	mov	r3, r5
}
   2218e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   22192:	f001 b96f 	b.w	23474 <z_pend_curr>
		result = -ENOMSG;
   22196:	f06f 044f 	mvn.w	r4, #79	; 0x4f
   2219a:	e7d9      	b.n	22150 <z_impl_k_msgq_put+0xd4>
   2219c:	e000ed00 	.word	0xe000ed00
   221a0:	0002c299 	.word	0x0002c299
   221a4:	0002c24d 	.word	0x0002c24d
   221a8:	0002abaa 	.word	0x0002abaa
   221ac:	0002b126 	.word	0x0002b126
   221b0:	0002b68e 	.word	0x0002b68e
   221b4:	0002b666 	.word	0x0002b666
   221b8:	0002b6a3 	.word	0x0002b6a3
   221bc:	0002b6b8 	.word	0x0002b6b8
   221c0:	0002b6cf 	.word	0x0002b6cf
   221c4:	20022120 	.word	0x20022120

000221c8 <z_impl_k_msgq_get>:
	return 0;
}
#endif

int z_impl_k_msgq_get(struct k_msgq *q, void *data, s32_t timeout)
{
   221c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221cc:	4604      	mov	r4, r0
   221ce:	4688      	mov	r8, r1
   221d0:	4615      	mov	r5, r2
   221d2:	f3ef 8305 	mrs	r3, IPSR
   221d6:	2b0d      	cmp	r3, #13
   221d8:	d804      	bhi.n	221e4 <z_impl_k_msgq_get+0x1c>
   221da:	b18b      	cbz	r3, 22200 <z_impl_k_msgq_get+0x38>
   221dc:	4b48      	ldr	r3, [pc, #288]	; (22300 <z_impl_k_msgq_get+0x138>)
   221de:	685b      	ldr	r3, [r3, #4]
   221e0:	051a      	lsls	r2, r3, #20
   221e2:	d40d      	bmi.n	22200 <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_is_in_isr() || timeout == K_NO_WAIT, "");
   221e4:	b165      	cbz	r5, 22200 <z_impl_k_msgq_get+0x38>
   221e6:	4947      	ldr	r1, [pc, #284]	; (22304 <z_impl_k_msgq_get+0x13c>)
   221e8:	23be      	movs	r3, #190	; 0xbe
   221ea:	4a47      	ldr	r2, [pc, #284]	; (22308 <z_impl_k_msgq_get+0x140>)
   221ec:	4847      	ldr	r0, [pc, #284]	; (2230c <z_impl_k_msgq_get+0x144>)
   221ee:	f003 fca6 	bl	25b3e <printk>
   221f2:	4847      	ldr	r0, [pc, #284]	; (22310 <z_impl_k_msgq_get+0x148>)
   221f4:	f003 fca3 	bl	25b3e <printk>
   221f8:	21be      	movs	r1, #190	; 0xbe
   221fa:	4843      	ldr	r0, [pc, #268]	; (22308 <z_impl_k_msgq_get+0x140>)
   221fc:	f003 fcac 	bl	25b58 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&q->lock);
   22200:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   22204:	f04f 0320 	mov.w	r3, #32
   22208:	f3ef 8711 	mrs	r7, BASEPRI
   2220c:	f383 8811 	msr	BASEPRI, r3
   22210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22214:	4630      	mov	r0, r6
   22216:	f001 fd61 	bl	23cdc <z_spin_lock_valid>
   2221a:	b960      	cbnz	r0, 22236 <z_impl_k_msgq_get+0x6e>
   2221c:	493d      	ldr	r1, [pc, #244]	; (22314 <z_impl_k_msgq_get+0x14c>)
   2221e:	234e      	movs	r3, #78	; 0x4e
   22220:	4a3d      	ldr	r2, [pc, #244]	; (22318 <z_impl_k_msgq_get+0x150>)
   22222:	483a      	ldr	r0, [pc, #232]	; (2230c <z_impl_k_msgq_get+0x144>)
   22224:	f003 fc8b 	bl	25b3e <printk>
   22228:	483c      	ldr	r0, [pc, #240]	; (2231c <z_impl_k_msgq_get+0x154>)
   2222a:	f003 fc88 	bl	25b3e <printk>
   2222e:	214e      	movs	r1, #78	; 0x4e
   22230:	4839      	ldr	r0, [pc, #228]	; (22318 <z_impl_k_msgq_get+0x150>)
   22232:	f003 fc91 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22236:	4630      	mov	r0, r6
   22238:	f001 fd6e 	bl	23d18 <z_spin_lock_set_owner>
	struct k_thread *pending_thread;
	int result;

	if (q->used_msgs > 0) {
   2223c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2223e:	2b00      	cmp	r3, #0
   22240:	d039      	beq.n	222b6 <z_impl_k_msgq_get+0xee>
		/* take first available message from queue */
		(void)memcpy(data, q->read_ptr, q->msg_size);
   22242:	68e2      	ldr	r2, [r4, #12]
   22244:	69e1      	ldr	r1, [r4, #28]
   22246:	4640      	mov	r0, r8
   22248:	f003 fe0d 	bl	25e66 <memcpy>
		q->read_ptr += q->msg_size;
   2224c:	69e3      	ldr	r3, [r4, #28]
   2224e:	68e2      	ldr	r2, [r4, #12]
			q->read_ptr = q->buffer_start;
		}
		q->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&q->wait_q);
   22250:	4620      	mov	r0, r4
		q->read_ptr += q->msg_size;
   22252:	4413      	add	r3, r2
		if (q->read_ptr == q->buffer_end) {
   22254:	69a2      	ldr	r2, [r4, #24]
		q->read_ptr += q->msg_size;
   22256:	61e3      	str	r3, [r4, #28]
		if (q->read_ptr == q->buffer_end) {
   22258:	4293      	cmp	r3, r2
			q->read_ptr = q->buffer_start;
   2225a:	bf04      	itt	eq
   2225c:	6963      	ldreq	r3, [r4, #20]
   2225e:	61e3      	streq	r3, [r4, #28]
		q->used_msgs--;
   22260:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22262:	3b01      	subs	r3, #1
   22264:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&q->wait_q);
   22266:	f001 f9c9 	bl	235fc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2226a:	4605      	mov	r5, r0
   2226c:	2800      	cmp	r0, #0
   2226e:	d031      	beq.n	222d4 <z_impl_k_msgq_get+0x10c>
			/* add thread's message to queue */
			(void)memcpy(q->write_ptr, pending_thread->base.swap_data,
   22270:	68e2      	ldr	r2, [r4, #12]
   22272:	6941      	ldr	r1, [r0, #20]
   22274:	6a20      	ldr	r0, [r4, #32]
   22276:	f003 fdf6 	bl	25e66 <memcpy>
			       q->msg_size);
			q->write_ptr += q->msg_size;
   2227a:	6a23      	ldr	r3, [r4, #32]
   2227c:	68e2      	ldr	r2, [r4, #12]
   2227e:	4413      	add	r3, r2
			if (q->write_ptr == q->buffer_end) {
   22280:	69a2      	ldr	r2, [r4, #24]
			q->write_ptr += q->msg_size;
   22282:	6223      	str	r3, [r4, #32]
			if (q->write_ptr == q->buffer_end) {
   22284:	4293      	cmp	r3, r2
				q->write_ptr = q->buffer_start;
   22286:	bf04      	itt	eq
   22288:	6963      	ldreq	r3, [r4, #20]
   2228a:	6223      	streq	r3, [r4, #32]
			}
			q->used_msgs++;
   2228c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2228e:	3301      	adds	r3, #1
   22290:	6263      	str	r3, [r4, #36]	; 0x24
   22292:	2300      	movs	r3, #0
   22294:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22296:	7b6b      	ldrb	r3, [r5, #13]
   22298:	06db      	lsls	r3, r3, #27
   2229a:	d104      	bne.n	222a6 <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   2229c:	69ab      	ldr	r3, [r5, #24]
   2229e:	b913      	cbnz	r3, 222a6 <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   222a0:	4628      	mov	r0, r5
   222a2:	f000 fe35 	bl	22f10 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_set_thread_return_value(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&q->lock, key);
   222a6:	4639      	mov	r1, r7
   222a8:	4630      	mov	r0, r6
   222aa:	f000 fc3d 	bl	22b28 <z_reschedule>
			return 0;
   222ae:	2500      	movs	r5, #0
	}

	k_spin_unlock(&q->lock, key);

	return result;
}
   222b0:	4628      	mov	r0, r5
   222b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   222b6:	b15d      	cbz	r5, 222d0 <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   222b8:	4b19      	ldr	r3, [pc, #100]	; (22320 <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   222ba:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   222bc:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   222be:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   222c0:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   222c4:	4630      	mov	r0, r6
   222c6:	462b      	mov	r3, r5
}
   222c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&q->lock, key, &q->wait_q, timeout);
   222cc:	f001 b8d2 	b.w	23474 <z_pend_curr>
		result = -ENOMSG;
   222d0:	f06f 054f 	mvn.w	r5, #79	; 0x4f
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   222d4:	4630      	mov	r0, r6
   222d6:	f001 fd0f 	bl	23cf8 <z_spin_unlock_valid>
   222da:	b960      	cbnz	r0, 222f6 <z_impl_k_msgq_get+0x12e>
   222dc:	4911      	ldr	r1, [pc, #68]	; (22324 <z_impl_k_msgq_get+0x15c>)
   222de:	2361      	movs	r3, #97	; 0x61
   222e0:	4a0d      	ldr	r2, [pc, #52]	; (22318 <z_impl_k_msgq_get+0x150>)
   222e2:	480a      	ldr	r0, [pc, #40]	; (2230c <z_impl_k_msgq_get+0x144>)
   222e4:	f003 fc2b 	bl	25b3e <printk>
   222e8:	480f      	ldr	r0, [pc, #60]	; (22328 <z_impl_k_msgq_get+0x160>)
   222ea:	f003 fc28 	bl	25b3e <printk>
   222ee:	2161      	movs	r1, #97	; 0x61
   222f0:	4809      	ldr	r0, [pc, #36]	; (22318 <z_impl_k_msgq_get+0x150>)
   222f2:	f003 fc31 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   222f6:	f387 8811 	msr	BASEPRI, r7
   222fa:	f3bf 8f6f 	isb	sy
	return result;
   222fe:	e7d7      	b.n	222b0 <z_impl_k_msgq_get+0xe8>
   22300:	e000ed00 	.word	0xe000ed00
   22304:	0002c299 	.word	0x0002c299
   22308:	0002c24d 	.word	0x0002c24d
   2230c:	0002abaa 	.word	0x0002abaa
   22310:	0002b126 	.word	0x0002b126
   22314:	0002b68e 	.word	0x0002b68e
   22318:	0002b666 	.word	0x0002b666
   2231c:	0002b6a3 	.word	0x0002b6a3
   22320:	20022120 	.word	0x20022120
   22324:	0002b6b8 	.word	0x0002b6b8
   22328:	0002b6cf 	.word	0x0002b6cf

0002232c <z_sched_lock>:
		z_ready_thread(th);
	}
}

static inline void z_sched_lock(void)
{
   2232c:	b510      	push	{r4, lr}
   2232e:	f3ef 8305 	mrs	r3, IPSR
   22332:	2b0d      	cmp	r3, #13
   22334:	d804      	bhi.n	22340 <z_sched_lock+0x14>
   22336:	b193      	cbz	r3, 2235e <z_sched_lock+0x32>
   22338:	4b15      	ldr	r3, [pc, #84]	; (22390 <z_sched_lock+0x64>)
   2233a:	685b      	ldr	r3, [r3, #4]
   2233c:	051b      	lsls	r3, r3, #20
   2233e:	d40e      	bmi.n	2235e <z_sched_lock+0x32>
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
   22340:	4914      	ldr	r1, [pc, #80]	; (22394 <z_sched_lock+0x68>)
   22342:	f44f 7380 	mov.w	r3, #256	; 0x100
   22346:	4a14      	ldr	r2, [pc, #80]	; (22398 <z_sched_lock+0x6c>)
   22348:	4814      	ldr	r0, [pc, #80]	; (2239c <z_sched_lock+0x70>)
   2234a:	f003 fbf8 	bl	25b3e <printk>
   2234e:	4814      	ldr	r0, [pc, #80]	; (223a0 <z_sched_lock+0x74>)
   22350:	f003 fbf5 	bl	25b3e <printk>
   22354:	f44f 7180 	mov.w	r1, #256	; 0x100
   22358:	480f      	ldr	r0, [pc, #60]	; (22398 <z_sched_lock+0x6c>)
   2235a:	f003 fbfd 	bl	25b58 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2235e:	4c11      	ldr	r4, [pc, #68]	; (223a4 <z_sched_lock+0x78>)
   22360:	68a2      	ldr	r2, [r4, #8]
   22362:	7bd2      	ldrb	r2, [r2, #15]
   22364:	2a01      	cmp	r2, #1
   22366:	d10e      	bne.n	22386 <z_sched_lock+0x5a>
   22368:	490f      	ldr	r1, [pc, #60]	; (223a8 <z_sched_lock+0x7c>)
   2236a:	f240 1301 	movw	r3, #257	; 0x101
   2236e:	4a0a      	ldr	r2, [pc, #40]	; (22398 <z_sched_lock+0x6c>)
   22370:	480a      	ldr	r0, [pc, #40]	; (2239c <z_sched_lock+0x70>)
   22372:	f003 fbe4 	bl	25b3e <printk>
   22376:	480a      	ldr	r0, [pc, #40]	; (223a0 <z_sched_lock+0x74>)
   22378:	f003 fbe1 	bl	25b3e <printk>
   2237c:	f240 1101 	movw	r1, #257	; 0x101
   22380:	4805      	ldr	r0, [pc, #20]	; (22398 <z_sched_lock+0x6c>)
   22382:	f003 fbe9 	bl	25b58 <assert_post_action>

	--_current->base.sched_locked;
   22386:	68a2      	ldr	r2, [r4, #8]
   22388:	7bd3      	ldrb	r3, [r2, #15]
   2238a:	3b01      	subs	r3, #1
   2238c:	73d3      	strb	r3, [r2, #15]
	compiler_barrier();

	K_DEBUG("scheduler locked (%p:%d)\n",
		_current, _current->base.sched_locked);
#endif
}
   2238e:	bd10      	pop	{r4, pc}
   22390:	e000ed00 	.word	0xe000ed00
   22394:	0002c33e 	.word	0x0002c33e
   22398:	0002c311 	.word	0x0002c311
   2239c:	0002abaa 	.word	0x0002abaa
   223a0:	0002b126 	.word	0x0002b126
   223a4:	20022120 	.word	0x20022120
   223a8:	0002c34b 	.word	0x0002c34b

000223ac <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   223ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   223ae:	4604      	mov	r4, r0
   223b0:	460e      	mov	r6, r1
	int new_prio;
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();
   223b2:	f7ff ffbb 	bl	2232c <z_sched_lock>

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   223b6:	68e3      	ldr	r3, [r4, #12]
   223b8:	4a4e      	ldr	r2, [pc, #312]	; (224f4 <z_impl_k_mutex_lock+0x148>)
   223ba:	b14b      	cbz	r3, 223d0 <z_impl_k_mutex_lock+0x24>
   223bc:	68a1      	ldr	r1, [r4, #8]
   223be:	6890      	ldr	r0, [r2, #8]
   223c0:	4281      	cmp	r1, r0
   223c2:	d012      	beq.n	223ea <z_impl_k_mutex_lock+0x3e>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   223c4:	b99e      	cbnz	r6, 223ee <z_impl_k_mutex_lock+0x42>
		k_sched_unlock();
   223c6:	f000 fd21 	bl	22e0c <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   223ca:	f06f 050f 	mvn.w	r5, #15
   223ce:	e00a      	b.n	223e6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   223d0:	6891      	ldr	r1, [r2, #8]
   223d2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   223d6:	3301      	adds	r3, #1
   223d8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   223da:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   223dc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   223de:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   223e0:	f000 fd14 	bl	22e0c <k_sched_unlock>
		return 0;
   223e4:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   223e6:	4628      	mov	r0, r5
   223e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   223ea:	6921      	ldr	r1, [r4, #16]
   223ec:	e7f3      	b.n	223d6 <z_impl_k_mutex_lock+0x2a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   223ee:	f990 500e 	ldrsb.w	r5, [r0, #14]
   223f2:	f991 300e 	ldrsb.w	r3, [r1, #14]
   223f6:	429d      	cmp	r5, r3
   223f8:	bfa8      	it	ge
   223fa:	461d      	movge	r5, r3
   223fc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
	__asm__ volatile(
   22400:	f04f 0320 	mov.w	r3, #32
   22404:	f3ef 8711 	mrs	r7, BASEPRI
   22408:	f383 8811 	msr	BASEPRI, r3
   2240c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22410:	4839      	ldr	r0, [pc, #228]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   22412:	f001 fc63 	bl	23cdc <z_spin_lock_valid>
   22416:	b960      	cbnz	r0, 22432 <z_impl_k_mutex_lock+0x86>
   22418:	4938      	ldr	r1, [pc, #224]	; (224fc <z_impl_k_mutex_lock+0x150>)
   2241a:	234e      	movs	r3, #78	; 0x4e
   2241c:	4a38      	ldr	r2, [pc, #224]	; (22500 <z_impl_k_mutex_lock+0x154>)
   2241e:	4839      	ldr	r0, [pc, #228]	; (22504 <z_impl_k_mutex_lock+0x158>)
   22420:	f003 fb8d 	bl	25b3e <printk>
   22424:	4838      	ldr	r0, [pc, #224]	; (22508 <z_impl_k_mutex_lock+0x15c>)
   22426:	f003 fb8a 	bl	25b3e <printk>
   2242a:	214e      	movs	r1, #78	; 0x4e
   2242c:	4834      	ldr	r0, [pc, #208]	; (22500 <z_impl_k_mutex_lock+0x154>)
   2242e:	f003 fb93 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22432:	4831      	ldr	r0, [pc, #196]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   22434:	f001 fc70 	bl	23d18 <z_spin_lock_set_owner>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22438:	68a0      	ldr	r0, [r4, #8]
   2243a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2243e:	429d      	cmp	r5, r3
   22440:	da02      	bge.n	22448 <z_impl_k_mutex_lock+0x9c>
		z_thread_priority_set(mutex->owner, new_prio);
   22442:	4629      	mov	r1, r5
   22444:	f001 f844 	bl	234d0 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22448:	4633      	mov	r3, r6
   2244a:	4622      	mov	r2, r4
   2244c:	4639      	mov	r1, r7
   2244e:	482a      	ldr	r0, [pc, #168]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   22450:	f001 f810 	bl	23474 <z_pend_curr>
	if (got_mutex == 0) {
   22454:	4605      	mov	r5, r0
   22456:	b910      	cbnz	r0, 2245e <z_impl_k_mutex_lock+0xb2>
		k_sched_unlock();
   22458:	f000 fcd8 	bl	22e0c <k_sched_unlock>
		return 0;
   2245c:	e7c3      	b.n	223e6 <z_impl_k_mutex_lock+0x3a>
	return list->head == list;
   2245e:	6823      	ldr	r3, [r4, #0]
   22460:	6925      	ldr	r5, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22462:	429c      	cmp	r4, r3
   22464:	d007      	beq.n	22476 <z_impl_k_mutex_lock+0xca>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   22466:	b133      	cbz	r3, 22476 <z_impl_k_mutex_lock+0xca>
   22468:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2246c:	429d      	cmp	r5, r3
   2246e:	bfa8      	it	ge
   22470:	461d      	movge	r5, r3
   22472:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   22476:	f04f 0320 	mov.w	r3, #32
   2247a:	f3ef 8611 	mrs	r6, BASEPRI
   2247e:	f383 8811 	msr	BASEPRI, r3
   22482:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22486:	481c      	ldr	r0, [pc, #112]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   22488:	f001 fc28 	bl	23cdc <z_spin_lock_valid>
   2248c:	b960      	cbnz	r0, 224a8 <z_impl_k_mutex_lock+0xfc>
   2248e:	491b      	ldr	r1, [pc, #108]	; (224fc <z_impl_k_mutex_lock+0x150>)
   22490:	234e      	movs	r3, #78	; 0x4e
   22492:	4a1b      	ldr	r2, [pc, #108]	; (22500 <z_impl_k_mutex_lock+0x154>)
   22494:	481b      	ldr	r0, [pc, #108]	; (22504 <z_impl_k_mutex_lock+0x158>)
   22496:	f003 fb52 	bl	25b3e <printk>
   2249a:	481b      	ldr	r0, [pc, #108]	; (22508 <z_impl_k_mutex_lock+0x15c>)
   2249c:	f003 fb4f 	bl	25b3e <printk>
   224a0:	214e      	movs	r1, #78	; 0x4e
   224a2:	4817      	ldr	r0, [pc, #92]	; (22500 <z_impl_k_mutex_lock+0x154>)
   224a4:	f003 fb58 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   224a8:	4813      	ldr	r0, [pc, #76]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   224aa:	f001 fc35 	bl	23d18 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, new_prio);
   224ae:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   224b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   224b4:	429d      	cmp	r5, r3
   224b6:	d002      	beq.n	224be <z_impl_k_mutex_lock+0x112>
		z_thread_priority_set(mutex->owner, new_prio);
   224b8:	4629      	mov	r1, r5
   224ba:	f001 f809 	bl	234d0 <z_thread_priority_set>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   224be:	480e      	ldr	r0, [pc, #56]	; (224f8 <z_impl_k_mutex_lock+0x14c>)
   224c0:	f001 fc1a 	bl	23cf8 <z_spin_unlock_valid>
   224c4:	b960      	cbnz	r0, 224e0 <z_impl_k_mutex_lock+0x134>
   224c6:	4911      	ldr	r1, [pc, #68]	; (2250c <z_impl_k_mutex_lock+0x160>)
   224c8:	2361      	movs	r3, #97	; 0x61
   224ca:	4a0d      	ldr	r2, [pc, #52]	; (22500 <z_impl_k_mutex_lock+0x154>)
   224cc:	480d      	ldr	r0, [pc, #52]	; (22504 <z_impl_k_mutex_lock+0x158>)
   224ce:	f003 fb36 	bl	25b3e <printk>
   224d2:	480f      	ldr	r0, [pc, #60]	; (22510 <z_impl_k_mutex_lock+0x164>)
   224d4:	f003 fb33 	bl	25b3e <printk>
   224d8:	2161      	movs	r1, #97	; 0x61
   224da:	4809      	ldr	r0, [pc, #36]	; (22500 <z_impl_k_mutex_lock+0x154>)
   224dc:	f003 fb3c 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   224e0:	f386 8811 	msr	BASEPRI, r6
   224e4:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
   224e8:	f000 fc90 	bl	22e0c <k_sched_unlock>
	return -EAGAIN;
   224ec:	f06f 050a 	mvn.w	r5, #10
   224f0:	e779      	b.n	223e6 <z_impl_k_mutex_lock+0x3a>
   224f2:	bf00      	nop
   224f4:	20022120 	.word	0x20022120
   224f8:	2002211c 	.word	0x2002211c
   224fc:	0002b68e 	.word	0x0002b68e
   22500:	0002b666 	.word	0x0002b666
   22504:	0002abaa 	.word	0x0002abaa
   22508:	0002b6a3 	.word	0x0002b6a3
   2250c:	0002b6b8 	.word	0x0002b6b8
   22510:	0002b6cf 	.word	0x0002b6cf

00022514 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   22514:	68c3      	ldr	r3, [r0, #12]
{
   22516:	b570      	push	{r4, r5, r6, lr}
   22518:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   2251a:	b963      	cbnz	r3, 22536 <z_impl_k_mutex_unlock+0x22>
   2251c:	4946      	ldr	r1, [pc, #280]	; (22638 <z_impl_k_mutex_unlock+0x124>)
   2251e:	23d4      	movs	r3, #212	; 0xd4
   22520:	4a46      	ldr	r2, [pc, #280]	; (2263c <z_impl_k_mutex_unlock+0x128>)
   22522:	4847      	ldr	r0, [pc, #284]	; (22640 <z_impl_k_mutex_unlock+0x12c>)
   22524:	f003 fb0b 	bl	25b3e <printk>
   22528:	4846      	ldr	r0, [pc, #280]	; (22644 <z_impl_k_mutex_unlock+0x130>)
   2252a:	f003 fb08 	bl	25b3e <printk>
   2252e:	21d4      	movs	r1, #212	; 0xd4
   22530:	4842      	ldr	r0, [pc, #264]	; (2263c <z_impl_k_mutex_unlock+0x128>)
   22532:	f003 fb11 	bl	25b58 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   22536:	4b44      	ldr	r3, [pc, #272]	; (22648 <z_impl_k_mutex_unlock+0x134>)
   22538:	68a2      	ldr	r2, [r4, #8]
   2253a:	689b      	ldr	r3, [r3, #8]
   2253c:	429a      	cmp	r2, r3
   2253e:	d00c      	beq.n	2255a <z_impl_k_mutex_unlock+0x46>
   22540:	4942      	ldr	r1, [pc, #264]	; (2264c <z_impl_k_mutex_unlock+0x138>)
   22542:	23d5      	movs	r3, #213	; 0xd5
   22544:	4a3d      	ldr	r2, [pc, #244]	; (2263c <z_impl_k_mutex_unlock+0x128>)
   22546:	483e      	ldr	r0, [pc, #248]	; (22640 <z_impl_k_mutex_unlock+0x12c>)
   22548:	f003 faf9 	bl	25b3e <printk>
   2254c:	483d      	ldr	r0, [pc, #244]	; (22644 <z_impl_k_mutex_unlock+0x130>)
   2254e:	f003 faf6 	bl	25b3e <printk>
   22552:	21d5      	movs	r1, #213	; 0xd5
   22554:	4839      	ldr	r0, [pc, #228]	; (2263c <z_impl_k_mutex_unlock+0x128>)
   22556:	f003 faff 	bl	25b58 <assert_post_action>

	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();
   2255a:	f7ff fee7 	bl	2232c <z_sched_lock>

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   2255e:	68e3      	ldr	r3, [r4, #12]
   22560:	2b01      	cmp	r3, #1
   22562:	d005      	beq.n	22570 <z_impl_k_mutex_unlock+0x5c>
		mutex->lock_count--;
   22564:	3b01      	subs	r3, #1
   22566:	60e3      	str	r3, [r4, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   22568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2256c:	f000 bc4e 	b.w	22e0c <k_sched_unlock>
	__asm__ volatile(
   22570:	f04f 0320 	mov.w	r3, #32
   22574:	f3ef 8611 	mrs	r6, BASEPRI
   22578:	f383 8811 	msr	BASEPRI, r3
   2257c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22580:	4833      	ldr	r0, [pc, #204]	; (22650 <z_impl_k_mutex_unlock+0x13c>)
   22582:	f001 fbab 	bl	23cdc <z_spin_lock_valid>
   22586:	b960      	cbnz	r0, 225a2 <z_impl_k_mutex_unlock+0x8e>
   22588:	4932      	ldr	r1, [pc, #200]	; (22654 <z_impl_k_mutex_unlock+0x140>)
   2258a:	234e      	movs	r3, #78	; 0x4e
   2258c:	4a32      	ldr	r2, [pc, #200]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   2258e:	482c      	ldr	r0, [pc, #176]	; (22640 <z_impl_k_mutex_unlock+0x12c>)
   22590:	f003 fad5 	bl	25b3e <printk>
   22594:	4831      	ldr	r0, [pc, #196]	; (2265c <z_impl_k_mutex_unlock+0x148>)
   22596:	f003 fad2 	bl	25b3e <printk>
   2259a:	214e      	movs	r1, #78	; 0x4e
   2259c:	482e      	ldr	r0, [pc, #184]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   2259e:	f003 fadb 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   225a2:	482b      	ldr	r0, [pc, #172]	; (22650 <z_impl_k_mutex_unlock+0x13c>)
   225a4:	f001 fbb8 	bl	23d18 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   225a8:	68a0      	ldr	r0, [r4, #8]
   225aa:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   225ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
   225b0:	4299      	cmp	r1, r3
   225b2:	d001      	beq.n	225b8 <z_impl_k_mutex_unlock+0xa4>
		z_thread_priority_set(mutex->owner, new_prio);
   225b4:	f000 ff8c 	bl	234d0 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   225b8:	4620      	mov	r0, r4
   225ba:	f001 f81f 	bl	235fc <z_unpend_first_thread>
   225be:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   225c0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   225c2:	b308      	cbz	r0, 22608 <z_impl_k_mutex_unlock+0xf4>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   225c4:	7b43      	ldrb	r3, [r0, #13]
   225c6:	06db      	lsls	r3, r3, #27
   225c8:	d103      	bne.n	225d2 <z_impl_k_mutex_unlock+0xbe>
	if (z_is_thread_ready(thread)) {
   225ca:	6983      	ldr	r3, [r0, #24]
   225cc:	b90b      	cbnz	r3, 225d2 <z_impl_k_mutex_unlock+0xbe>
		z_add_thread_to_ready_q(thread);
   225ce:	f000 fc9f 	bl	22f10 <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   225d2:	481f      	ldr	r0, [pc, #124]	; (22650 <z_impl_k_mutex_unlock+0x13c>)
   225d4:	f001 fb90 	bl	23cf8 <z_spin_unlock_valid>
   225d8:	b960      	cbnz	r0, 225f4 <z_impl_k_mutex_unlock+0xe0>
   225da:	4921      	ldr	r1, [pc, #132]	; (22660 <z_impl_k_mutex_unlock+0x14c>)
   225dc:	2361      	movs	r3, #97	; 0x61
   225de:	4a1e      	ldr	r2, [pc, #120]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   225e0:	4817      	ldr	r0, [pc, #92]	; (22640 <z_impl_k_mutex_unlock+0x12c>)
   225e2:	f003 faac 	bl	25b3e <printk>
   225e6:	481f      	ldr	r0, [pc, #124]	; (22664 <z_impl_k_mutex_unlock+0x150>)
   225e8:	f003 faa9 	bl	25b3e <printk>
   225ec:	2161      	movs	r1, #97	; 0x61
   225ee:	481a      	ldr	r0, [pc, #104]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   225f0:	f003 fab2 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   225f4:	f386 8811 	msr	BASEPRI, r6
   225f8:	f3bf 8f6f 	isb	sy
   225fc:	2300      	movs	r3, #0
   225fe:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   22600:	f995 300e 	ldrsb.w	r3, [r5, #14]
   22604:	6123      	str	r3, [r4, #16]
   22606:	e7af      	b.n	22568 <z_impl_k_mutex_unlock+0x54>
		mutex->lock_count = 0U;
   22608:	60e0      	str	r0, [r4, #12]
   2260a:	4811      	ldr	r0, [pc, #68]	; (22650 <z_impl_k_mutex_unlock+0x13c>)
   2260c:	f001 fb74 	bl	23cf8 <z_spin_unlock_valid>
   22610:	b960      	cbnz	r0, 2262c <z_impl_k_mutex_unlock+0x118>
   22612:	4913      	ldr	r1, [pc, #76]	; (22660 <z_impl_k_mutex_unlock+0x14c>)
   22614:	2361      	movs	r3, #97	; 0x61
   22616:	4a10      	ldr	r2, [pc, #64]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   22618:	4809      	ldr	r0, [pc, #36]	; (22640 <z_impl_k_mutex_unlock+0x12c>)
   2261a:	f003 fa90 	bl	25b3e <printk>
   2261e:	4811      	ldr	r0, [pc, #68]	; (22664 <z_impl_k_mutex_unlock+0x150>)
   22620:	f003 fa8d 	bl	25b3e <printk>
   22624:	2161      	movs	r1, #97	; 0x61
   22626:	480c      	ldr	r0, [pc, #48]	; (22658 <z_impl_k_mutex_unlock+0x144>)
   22628:	f003 fa96 	bl	25b58 <assert_post_action>
   2262c:	f386 8811 	msr	BASEPRI, r6
   22630:	f3bf 8f6f 	isb	sy
   22634:	e798      	b.n	22568 <z_impl_k_mutex_unlock+0x54>
   22636:	bf00      	nop
   22638:	0002c2da 	.word	0x0002c2da
   2263c:	0002c2b6 	.word	0x0002c2b6
   22640:	0002abaa 	.word	0x0002abaa
   22644:	0002b126 	.word	0x0002b126
   22648:	20022120 	.word	0x20022120
   2264c:	0002c2f1 	.word	0x0002c2f1
   22650:	2002211c 	.word	0x2002211c
   22654:	0002b68e 	.word	0x0002b68e
   22658:	0002b666 	.word	0x0002b666
   2265c:	0002b6a3 	.word	0x0002b6a3
   22660:	0002b6b8 	.word	0x0002b6b8
   22664:	0002b6cf 	.word	0x0002b6cf

00022668 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   22668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2266c:	4604      	mov	r4, r0
   2266e:	460e      	mov	r6, r1
   22670:	4690      	mov	r8, r2
   22672:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22674:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22678:	f04f 0320 	mov.w	r3, #32
   2267c:	f3ef 8711 	mrs	r7, BASEPRI
   22680:	f383 8811 	msr	BASEPRI, r3
   22684:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22688:	4628      	mov	r0, r5
   2268a:	f001 fb27 	bl	23cdc <z_spin_lock_valid>
   2268e:	b960      	cbnz	r0, 226aa <queue_insert+0x42>
   22690:	4932      	ldr	r1, [pc, #200]	; (2275c <queue_insert+0xf4>)
   22692:	234e      	movs	r3, #78	; 0x4e
   22694:	4a32      	ldr	r2, [pc, #200]	; (22760 <queue_insert+0xf8>)
   22696:	4833      	ldr	r0, [pc, #204]	; (22764 <queue_insert+0xfc>)
   22698:	f003 fa51 	bl	25b3e <printk>
   2269c:	4832      	ldr	r0, [pc, #200]	; (22768 <queue_insert+0x100>)
   2269e:	f003 fa4e 	bl	25b3e <printk>
   226a2:	214e      	movs	r1, #78	; 0x4e
   226a4:	482e      	ldr	r0, [pc, #184]	; (22760 <queue_insert+0xf8>)
   226a6:	f003 fa57 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   226aa:	4628      	mov	r0, r5
   226ac:	f001 fb34 	bl	23d18 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   226b0:	f1b9 0f00 	cmp.w	r9, #0
   226b4:	d02c      	beq.n	22710 <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   226b6:	2008      	movs	r0, #8
   226b8:	f7ff fcd6 	bl	22068 <z_thread_malloc>
		if (anode == NULL) {
   226bc:	b9c0      	cbnz	r0, 226f0 <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   226be:	4628      	mov	r0, r5
   226c0:	f001 fb1a 	bl	23cf8 <z_spin_unlock_valid>
   226c4:	b960      	cbnz	r0, 226e0 <queue_insert+0x78>
   226c6:	4929      	ldr	r1, [pc, #164]	; (2276c <queue_insert+0x104>)
   226c8:	2361      	movs	r3, #97	; 0x61
   226ca:	4a25      	ldr	r2, [pc, #148]	; (22760 <queue_insert+0xf8>)
   226cc:	4825      	ldr	r0, [pc, #148]	; (22764 <queue_insert+0xfc>)
   226ce:	f003 fa36 	bl	25b3e <printk>
   226d2:	4827      	ldr	r0, [pc, #156]	; (22770 <queue_insert+0x108>)
   226d4:	f003 fa33 	bl	25b3e <printk>
   226d8:	2161      	movs	r1, #97	; 0x61
   226da:	4821      	ldr	r0, [pc, #132]	; (22760 <queue_insert+0xf8>)
   226dc:	f003 fa3c 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   226e0:	f387 8811 	msr	BASEPRI, r7
   226e4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   226e8:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   226ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0U, "flags too large");
	node->next_and_flags = flags;
   226f0:	2301      	movs	r3, #1
		anode->data = data;
   226f2:	f8c0 8004 	str.w	r8, [r0, #4]
   226f6:	6003      	str	r3, [r0, #0]
   226f8:	6803      	ldr	r3, [r0, #0]
   226fa:	f003 0303 	and.w	r3, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   226fe:	b95e      	cbnz	r6, 22718 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22700:	6822      	ldr	r2, [r4, #0]
   22702:	4313      	orrs	r3, r2
   22704:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22706:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22708:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2270a:	b973      	cbnz	r3, 2272a <queue_insert+0xc2>
	list->tail = node;
   2270c:	6060      	str	r0, [r4, #4]
   2270e:	e00c      	b.n	2272a <queue_insert+0xc2>
	node->next_and_flags = flags;
   22710:	f8c8 9000 	str.w	r9, [r8]
   22714:	4640      	mov	r0, r8
   22716:	e7ef      	b.n	226f8 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22718:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2271a:	f032 0203 	bics.w	r2, r2, #3
   2271e:	d115      	bne.n	2274c <queue_insert+0xe4>
Z_GENLIST_APPEND(sflist, sfnode)
   22720:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22722:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22724:	b962      	cbnz	r2, 22740 <queue_insert+0xd8>
	list->head = node;
   22726:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2272a:	2104      	movs	r1, #4
   2272c:	f104 000c 	add.w	r0, r4, #12
   22730:	f005 f85b 	bl	277ea <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22734:	4628      	mov	r0, r5
   22736:	4639      	mov	r1, r7
   22738:	f000 f9f6 	bl	22b28 <z_reschedule>
	return 0;
   2273c:	2000      	movs	r0, #0
   2273e:	e7d5      	b.n	226ec <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22740:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22742:	f003 0303 	and.w	r3, r3, #3
   22746:	4303      	orrs	r3, r0
   22748:	6013      	str	r3, [r2, #0]
   2274a:	e7df      	b.n	2270c <queue_insert+0xa4>
   2274c:	4313      	orrs	r3, r2
   2274e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22750:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22752:	f003 0303 	and.w	r3, r3, #3
   22756:	4318      	orrs	r0, r3
   22758:	6030      	str	r0, [r6, #0]
   2275a:	e7e6      	b.n	2272a <queue_insert+0xc2>
   2275c:	0002b68e 	.word	0x0002b68e
   22760:	0002b666 	.word	0x0002b666
   22764:	0002abaa 	.word	0x0002abaa
   22768:	0002b6a3 	.word	0x0002b6a3
   2276c:	0002b6b8 	.word	0x0002b6b8
   22770:	0002b6cf 	.word	0x0002b6cf

00022774 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   22774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22778:	4604      	mov	r4, r0
   2277a:	b089      	sub	sp, #36	; 0x24
   2277c:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2277e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22782:	f04f 0320 	mov.w	r3, #32
   22786:	f3ef 8811 	mrs	r8, BASEPRI
   2278a:	f383 8811 	msr	BASEPRI, r3
   2278e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22792:	4628      	mov	r0, r5
   22794:	f001 faa2 	bl	23cdc <z_spin_lock_valid>
   22798:	b960      	cbnz	r0, 227b4 <z_impl_k_queue_get+0x40>
   2279a:	4967      	ldr	r1, [pc, #412]	; (22938 <z_impl_k_queue_get+0x1c4>)
   2279c:	234e      	movs	r3, #78	; 0x4e
   2279e:	4a67      	ldr	r2, [pc, #412]	; (2293c <z_impl_k_queue_get+0x1c8>)
   227a0:	4867      	ldr	r0, [pc, #412]	; (22940 <z_impl_k_queue_get+0x1cc>)
   227a2:	f003 f9cc 	bl	25b3e <printk>
   227a6:	4867      	ldr	r0, [pc, #412]	; (22944 <z_impl_k_queue_get+0x1d0>)
   227a8:	f003 f9c9 	bl	25b3e <printk>
   227ac:	214e      	movs	r1, #78	; 0x4e
   227ae:	4863      	ldr	r0, [pc, #396]	; (2293c <z_impl_k_queue_get+0x1c8>)
   227b0:	f003 f9d2 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   227b4:	4628      	mov	r0, r5
   227b6:	f001 faaf 	bl	23d18 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   227ba:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   227bc:	b320      	cbz	r0, 22808 <z_impl_k_queue_get+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   227be:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   227c0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   227c2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   227c6:	4290      	cmp	r0, r2
	list->tail = node;
   227c8:	bf08      	it	eq
   227ca:	6063      	streq	r3, [r4, #4]
	list->head = node;
   227cc:	6023      	str	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   227ce:	2101      	movs	r1, #1
   227d0:	f004 ff1f 	bl	27612 <z_queue_node_peek>
   227d4:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   227d6:	4628      	mov	r0, r5
   227d8:	f001 fa8e 	bl	23cf8 <z_spin_unlock_valid>
   227dc:	b960      	cbnz	r0, 227f8 <z_impl_k_queue_get+0x84>
   227de:	495a      	ldr	r1, [pc, #360]	; (22948 <z_impl_k_queue_get+0x1d4>)
   227e0:	2361      	movs	r3, #97	; 0x61
   227e2:	4a56      	ldr	r2, [pc, #344]	; (2293c <z_impl_k_queue_get+0x1c8>)
   227e4:	4856      	ldr	r0, [pc, #344]	; (22940 <z_impl_k_queue_get+0x1cc>)
   227e6:	f003 f9aa 	bl	25b3e <printk>
   227ea:	4858      	ldr	r0, [pc, #352]	; (2294c <z_impl_k_queue_get+0x1d8>)
   227ec:	f003 f9a7 	bl	25b3e <printk>
   227f0:	2161      	movs	r1, #97	; 0x61
   227f2:	4852      	ldr	r0, [pc, #328]	; (2293c <z_impl_k_queue_get+0x1c8>)
   227f4:	f003 f9b0 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   227f8:	f388 8811 	msr	BASEPRI, r8
   227fc:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   22800:	4630      	mov	r0, r6
   22802:	b009      	add	sp, #36	; 0x24
   22804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22808:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   2280a:	b9af      	cbnz	r7, 22838 <z_impl_k_queue_get+0xc4>
   2280c:	f001 fa74 	bl	23cf8 <z_spin_unlock_valid>
   22810:	b960      	cbnz	r0, 2282c <z_impl_k_queue_get+0xb8>
   22812:	494d      	ldr	r1, [pc, #308]	; (22948 <z_impl_k_queue_get+0x1d4>)
   22814:	2361      	movs	r3, #97	; 0x61
   22816:	4a49      	ldr	r2, [pc, #292]	; (2293c <z_impl_k_queue_get+0x1c8>)
   22818:	4849      	ldr	r0, [pc, #292]	; (22940 <z_impl_k_queue_get+0x1cc>)
   2281a:	f003 f990 	bl	25b3e <printk>
   2281e:	484b      	ldr	r0, [pc, #300]	; (2294c <z_impl_k_queue_get+0x1d8>)
   22820:	f003 f98d 	bl	25b3e <printk>
   22824:	2161      	movs	r1, #97	; 0x61
   22826:	4845      	ldr	r0, [pc, #276]	; (2293c <z_impl_k_queue_get+0x1c8>)
   22828:	f003 f996 	bl	25b58 <assert_post_action>
   2282c:	f388 8811 	msr	BASEPRI, r8
   22830:	f3bf 8f6f 	isb	sy
			return NULL;
   22834:	2600      	movs	r6, #0
   22836:	e7e3      	b.n	22800 <z_impl_k_queue_get+0x8c>
   22838:	f001 fa5e 	bl	23cf8 <z_spin_unlock_valid>
   2283c:	b960      	cbnz	r0, 22858 <z_impl_k_queue_get+0xe4>
   2283e:	4942      	ldr	r1, [pc, #264]	; (22948 <z_impl_k_queue_get+0x1d4>)
   22840:	2361      	movs	r3, #97	; 0x61
   22842:	4a3e      	ldr	r2, [pc, #248]	; (2293c <z_impl_k_queue_get+0x1c8>)
   22844:	483e      	ldr	r0, [pc, #248]	; (22940 <z_impl_k_queue_get+0x1cc>)
   22846:	f003 f97a 	bl	25b3e <printk>
   2284a:	4840      	ldr	r0, [pc, #256]	; (2294c <z_impl_k_queue_get+0x1d8>)
   2284c:	f003 f977 	bl	25b3e <printk>
   22850:	2161      	movs	r1, #97	; 0x61
   22852:	483a      	ldr	r0, [pc, #232]	; (2293c <z_impl_k_queue_get+0x1c8>)
   22854:	f003 f980 	bl	25b58 <assert_post_action>
   22858:	f388 8811 	msr	BASEPRI, r8
   2285c:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   22860:	2200      	movs	r2, #0
   22862:	4623      	mov	r3, r4
   22864:	2104      	movs	r1, #4
   22866:	a803      	add	r0, sp, #12
   22868:	f001 ffc6 	bl	247f8 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2286c:	1c7a      	adds	r2, r7, #1
   2286e:	d002      	beq.n	22876 <z_impl_k_queue_get+0x102>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   22870:	f004 ff67 	bl	27742 <z_impl_k_uptime_get_32>
   22874:	4683      	mov	fp, r0
{
   22876:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2287a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2293c <z_impl_k_queue_get+0x1c8>
   2287e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 22940 <z_impl_k_queue_get+0x1cc>
		event.state = K_POLL_STATE_NOT_READY;
   22882:	9b06      	ldr	r3, [sp, #24]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   22884:	eba7 0209 	sub.w	r2, r7, r9
   22888:	f36f 3310 	bfc	r3, #12, #5
   2288c:	2101      	movs	r1, #1
   2288e:	a803      	add	r0, sp, #12
   22890:	9306      	str	r3, [sp, #24]
   22892:	f002 f807 	bl	248a4 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   22896:	b108      	cbz	r0, 2289c <z_impl_k_queue_get+0x128>
   22898:	300b      	adds	r0, #11
   2289a:	d1cb      	bne.n	22834 <z_impl_k_queue_get+0xc0>
	__asm__ volatile(
   2289c:	f04f 0320 	mov.w	r3, #32
   228a0:	f3ef 8211 	mrs	r2, BASEPRI
   228a4:	f383 8811 	msr	BASEPRI, r3
   228a8:	f3bf 8f6f 	isb	sy
   228ac:	4628      	mov	r0, r5
   228ae:	9201      	str	r2, [sp, #4]
   228b0:	f001 fa14 	bl	23cdc <z_spin_lock_valid>
   228b4:	b960      	cbnz	r0, 228d0 <z_impl_k_queue_get+0x15c>
   228b6:	4920      	ldr	r1, [pc, #128]	; (22938 <z_impl_k_queue_get+0x1c4>)
   228b8:	234e      	movs	r3, #78	; 0x4e
   228ba:	4642      	mov	r2, r8
   228bc:	4650      	mov	r0, sl
   228be:	f003 f93e 	bl	25b3e <printk>
   228c2:	4820      	ldr	r0, [pc, #128]	; (22944 <z_impl_k_queue_get+0x1d0>)
   228c4:	f003 f93b 	bl	25b3e <printk>
   228c8:	214e      	movs	r1, #78	; 0x4e
   228ca:	4640      	mov	r0, r8
   228cc:	f003 f944 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   228d0:	4628      	mov	r0, r5
   228d2:	f001 fa21 	bl	23d18 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   228d6:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   228d8:	b138      	cbz	r0, 228ea <z_impl_k_queue_get+0x176>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   228da:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   228dc:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   228de:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   228e2:	4290      	cmp	r0, r2
	list->head = node;
   228e4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   228e6:	bf08      	it	eq
   228e8:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   228ea:	2101      	movs	r1, #1
   228ec:	f004 fe91 	bl	27612 <z_queue_node_peek>
   228f0:	4606      	mov	r6, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   228f2:	4628      	mov	r0, r5
   228f4:	f001 fa00 	bl	23cf8 <z_spin_unlock_valid>
   228f8:	b960      	cbnz	r0, 22914 <z_impl_k_queue_get+0x1a0>
   228fa:	4913      	ldr	r1, [pc, #76]	; (22948 <z_impl_k_queue_get+0x1d4>)
   228fc:	2361      	movs	r3, #97	; 0x61
   228fe:	4642      	mov	r2, r8
   22900:	4650      	mov	r0, sl
   22902:	f003 f91c 	bl	25b3e <printk>
   22906:	4811      	ldr	r0, [pc, #68]	; (2294c <z_impl_k_queue_get+0x1d8>)
   22908:	f003 f919 	bl	25b3e <printk>
   2290c:	2161      	movs	r1, #97	; 0x61
   2290e:	4640      	mov	r0, r8
   22910:	f003 f922 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22914:	9b01      	ldr	r3, [sp, #4]
   22916:	f383 8811 	msr	BASEPRI, r3
   2291a:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2291e:	2e00      	cmp	r6, #0
   22920:	f47f af6e 	bne.w	22800 <z_impl_k_queue_get+0x8c>
   22924:	1c7b      	adds	r3, r7, #1
   22926:	d0ac      	beq.n	22882 <z_impl_k_queue_get+0x10e>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   22928:	f004 ff0b 	bl	27742 <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   2292c:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   22930:	454f      	cmp	r7, r9
   22932:	daa6      	bge.n	22882 <z_impl_k_queue_get+0x10e>
   22934:	e77e      	b.n	22834 <z_impl_k_queue_get+0xc0>
   22936:	bf00      	nop
   22938:	0002b68e 	.word	0x0002b68e
   2293c:	0002b666 	.word	0x0002b666
   22940:	0002abaa 	.word	0x0002abaa
   22944:	0002b6a3 	.word	0x0002b6a3
   22948:	0002b6b8 	.word	0x0002b6b8
   2294c:	0002b6cf 	.word	0x0002b6cf

00022950 <resched>:
   22950:	f3ef 8005 	mrs	r0, IPSR
   22954:	280d      	cmp	r0, #13
   22956:	d809      	bhi.n	2296c <resched+0x1c>
   22958:	b128      	cbz	r0, 22966 <resched+0x16>
   2295a:	4b05      	ldr	r3, [pc, #20]	; (22970 <resched+0x20>)
   2295c:	6858      	ldr	r0, [r3, #4]
   2295e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   22962:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
   22966:	f080 0001 	eor.w	r0, r0, #1
   2296a:	4770      	bx	lr
   2296c:	2001      	movs	r0, #1
   2296e:	e7fa      	b.n	22966 <resched+0x16>
   22970:	e000ed00 	.word	0xe000ed00

00022974 <reset_time_slice>:
{
   22974:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22976:	f7ee f9ab 	bl	10cd0 <z_clock_elapsed>
   2297a:	4b05      	ldr	r3, [pc, #20]	; (22990 <reset_time_slice+0x1c>)
   2297c:	4a05      	ldr	r2, [pc, #20]	; (22994 <reset_time_slice+0x20>)
   2297e:	681b      	ldr	r3, [r3, #0]
	z_set_timeout_expiry(slice_time, false);
   22980:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   22982:	4418      	add	r0, r3
   22984:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
   22986:	4618      	mov	r0, r3
}
   22988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
   2298c:	f001 bc7e 	b.w	2428c <z_set_timeout_expiry>
   22990:	20022160 	.word	0x20022160
   22994:	20022120 	.word	0x20022120

00022998 <pended_on.isra.15>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   22998:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2299a:	b510      	push	{r4, lr}
   2299c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2299e:	b95b      	cbnz	r3, 229b8 <pended_on.isra.15+0x20>
   229a0:	4906      	ldr	r1, [pc, #24]	; (229bc <pended_on.isra.15+0x24>)
   229a2:	4807      	ldr	r0, [pc, #28]	; (229c0 <pended_on.isra.15+0x28>)
   229a4:	f240 1383 	movw	r3, #387	; 0x183
   229a8:	4a06      	ldr	r2, [pc, #24]	; (229c4 <pended_on.isra.15+0x2c>)
   229aa:	f003 f8c8 	bl	25b3e <printk>
   229ae:	f240 1183 	movw	r1, #387	; 0x183
   229b2:	4804      	ldr	r0, [pc, #16]	; (229c4 <pended_on.isra.15+0x2c>)
   229b4:	f003 f8d0 	bl	25b58 <assert_post_action>
}
   229b8:	6820      	ldr	r0, [r4, #0]
   229ba:	bd10      	pop	{r4, pc}
   229bc:	0002c3bf 	.word	0x0002c3bf
   229c0:	0002abaa 	.word	0x0002abaa
   229c4:	0002c39b 	.word	0x0002c39b

000229c8 <k_sched_time_slice_set>:
{
   229c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229ca:	4607      	mov	r7, r0
   229cc:	460d      	mov	r5, r1
	__asm__ volatile(
   229ce:	f04f 0320 	mov.w	r3, #32
   229d2:	f3ef 8411 	mrs	r4, BASEPRI
   229d6:	f383 8811 	msr	BASEPRI, r3
   229da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   229de:	481f      	ldr	r0, [pc, #124]	; (22a5c <k_sched_time_slice_set+0x94>)
   229e0:	f001 f97c 	bl	23cdc <z_spin_lock_valid>
   229e4:	b960      	cbnz	r0, 22a00 <k_sched_time_slice_set+0x38>
   229e6:	491e      	ldr	r1, [pc, #120]	; (22a60 <k_sched_time_slice_set+0x98>)
   229e8:	234e      	movs	r3, #78	; 0x4e
   229ea:	4a1e      	ldr	r2, [pc, #120]	; (22a64 <k_sched_time_slice_set+0x9c>)
   229ec:	481e      	ldr	r0, [pc, #120]	; (22a68 <k_sched_time_slice_set+0xa0>)
   229ee:	f003 f8a6 	bl	25b3e <printk>
   229f2:	481e      	ldr	r0, [pc, #120]	; (22a6c <k_sched_time_slice_set+0xa4>)
   229f4:	f003 f8a3 	bl	25b3e <printk>
   229f8:	214e      	movs	r1, #78	; 0x4e
   229fa:	481a      	ldr	r0, [pc, #104]	; (22a64 <k_sched_time_slice_set+0x9c>)
   229fc:	f003 f8ac 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a00:	4816      	ldr	r0, [pc, #88]	; (22a5c <k_sched_time_slice_set+0x94>)
   22a02:	f001 f989 	bl	23d18 <z_spin_lock_set_owner>
   22a06:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   22a0a:	2200      	movs	r2, #0
   22a0c:	2100      	movs	r1, #0
   22a0e:	4b18      	ldr	r3, [pc, #96]	; (22a70 <k_sched_time_slice_set+0xa8>)
   22a10:	4818      	ldr	r0, [pc, #96]	; (22a74 <k_sched_time_slice_set+0xac>)
   22a12:	611a      	str	r2, [r3, #16]
   22a14:	fbc6 0107 	smlal	r0, r1, r6, r7
   22a18:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   22a1c:	2300      	movs	r3, #0
   22a1e:	f7e9 fb91 	bl	c144 <__aeabi_ldivmod>
   22a22:	4b15      	ldr	r3, [pc, #84]	; (22a78 <k_sched_time_slice_set+0xb0>)
   22a24:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   22a26:	4b15      	ldr	r3, [pc, #84]	; (22a7c <k_sched_time_slice_set+0xb4>)
   22a28:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   22a2a:	f7ff ffa3 	bl	22974 <reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22a2e:	480b      	ldr	r0, [pc, #44]	; (22a5c <k_sched_time_slice_set+0x94>)
   22a30:	f001 f962 	bl	23cf8 <z_spin_unlock_valid>
   22a34:	b960      	cbnz	r0, 22a50 <k_sched_time_slice_set+0x88>
   22a36:	4912      	ldr	r1, [pc, #72]	; (22a80 <k_sched_time_slice_set+0xb8>)
   22a38:	2361      	movs	r3, #97	; 0x61
   22a3a:	4a0a      	ldr	r2, [pc, #40]	; (22a64 <k_sched_time_slice_set+0x9c>)
   22a3c:	480a      	ldr	r0, [pc, #40]	; (22a68 <k_sched_time_slice_set+0xa0>)
   22a3e:	f003 f87e 	bl	25b3e <printk>
   22a42:	4810      	ldr	r0, [pc, #64]	; (22a84 <k_sched_time_slice_set+0xbc>)
   22a44:	f003 f87b 	bl	25b3e <printk>
   22a48:	2161      	movs	r1, #97	; 0x61
   22a4a:	4806      	ldr	r0, [pc, #24]	; (22a64 <k_sched_time_slice_set+0x9c>)
   22a4c:	f003 f884 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22a50:	f384 8811 	msr	BASEPRI, r4
   22a54:	f3bf 8f6f 	isb	sy
}
   22a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22a5a:	bf00      	nop
   22a5c:	20022158 	.word	0x20022158
   22a60:	0002b68e 	.word	0x0002b68e
   22a64:	0002b666 	.word	0x0002b666
   22a68:	0002abaa 	.word	0x0002abaa
   22a6c:	0002b6a3 	.word	0x0002b6a3
   22a70:	20022120 	.word	0x20022120
   22a74:	0003e7ff 	.word	0x0003e7ff
   22a78:	20022160 	.word	0x20022160
   22a7c:	2002215c 	.word	0x2002215c
   22a80:	0002b6b8 	.word	0x0002b6b8
   22a84:	0002b6cf 	.word	0x0002b6cf

00022a88 <z_unpend_thread_no_timeout>:
{
   22a88:	b538      	push	{r3, r4, r5, lr}
   22a8a:	4604      	mov	r4, r0
	__asm__ volatile(
   22a8c:	f04f 0320 	mov.w	r3, #32
   22a90:	f3ef 8511 	mrs	r5, BASEPRI
   22a94:	f383 8811 	msr	BASEPRI, r3
   22a98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22a9c:	481b      	ldr	r0, [pc, #108]	; (22b0c <z_unpend_thread_no_timeout+0x84>)
   22a9e:	f001 f91d 	bl	23cdc <z_spin_lock_valid>
   22aa2:	b960      	cbnz	r0, 22abe <z_unpend_thread_no_timeout+0x36>
   22aa4:	491a      	ldr	r1, [pc, #104]	; (22b10 <z_unpend_thread_no_timeout+0x88>)
   22aa6:	234e      	movs	r3, #78	; 0x4e
   22aa8:	4a1a      	ldr	r2, [pc, #104]	; (22b14 <z_unpend_thread_no_timeout+0x8c>)
   22aaa:	481b      	ldr	r0, [pc, #108]	; (22b18 <z_unpend_thread_no_timeout+0x90>)
   22aac:	f003 f847 	bl	25b3e <printk>
   22ab0:	481a      	ldr	r0, [pc, #104]	; (22b1c <z_unpend_thread_no_timeout+0x94>)
   22ab2:	f003 f844 	bl	25b3e <printk>
   22ab6:	214e      	movs	r1, #78	; 0x4e
   22ab8:	4816      	ldr	r0, [pc, #88]	; (22b14 <z_unpend_thread_no_timeout+0x8c>)
   22aba:	f003 f84d 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22abe:	4813      	ldr	r0, [pc, #76]	; (22b0c <z_unpend_thread_no_timeout+0x84>)
   22ac0:	f001 f92a 	bl	23d18 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22ac4:	f104 0008 	add.w	r0, r4, #8
   22ac8:	f7ff ff66 	bl	22998 <pended_on.isra.15>
   22acc:	4621      	mov	r1, r4
   22ace:	f000 f8e3 	bl	22c98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22ad2:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22ad4:	480d      	ldr	r0, [pc, #52]	; (22b0c <z_unpend_thread_no_timeout+0x84>)
   22ad6:	f023 0302 	bic.w	r3, r3, #2
   22ada:	7363      	strb	r3, [r4, #13]
   22adc:	f001 f90c 	bl	23cf8 <z_spin_unlock_valid>
   22ae0:	b960      	cbnz	r0, 22afc <z_unpend_thread_no_timeout+0x74>
   22ae2:	490f      	ldr	r1, [pc, #60]	; (22b20 <z_unpend_thread_no_timeout+0x98>)
   22ae4:	2361      	movs	r3, #97	; 0x61
   22ae6:	4a0b      	ldr	r2, [pc, #44]	; (22b14 <z_unpend_thread_no_timeout+0x8c>)
   22ae8:	480b      	ldr	r0, [pc, #44]	; (22b18 <z_unpend_thread_no_timeout+0x90>)
   22aea:	f003 f828 	bl	25b3e <printk>
   22aee:	480d      	ldr	r0, [pc, #52]	; (22b24 <z_unpend_thread_no_timeout+0x9c>)
   22af0:	f003 f825 	bl	25b3e <printk>
   22af4:	2161      	movs	r1, #97	; 0x61
   22af6:	4807      	ldr	r0, [pc, #28]	; (22b14 <z_unpend_thread_no_timeout+0x8c>)
   22af8:	f003 f82e 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22afc:	f385 8811 	msr	BASEPRI, r5
   22b00:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22b04:	2300      	movs	r3, #0
   22b06:	60a3      	str	r3, [r4, #8]
}
   22b08:	bd38      	pop	{r3, r4, r5, pc}
   22b0a:	bf00      	nop
   22b0c:	20022158 	.word	0x20022158
   22b10:	0002b68e 	.word	0x0002b68e
   22b14:	0002b666 	.word	0x0002b666
   22b18:	0002abaa 	.word	0x0002abaa
   22b1c:	0002b6a3 	.word	0x0002b6a3
   22b20:	0002b6b8 	.word	0x0002b6b8
   22b24:	0002b6cf 	.word	0x0002b6cf

00022b28 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22b28:	b510      	push	{r4, lr}
   22b2a:	4602      	mov	r2, r0
   22b2c:	460c      	mov	r4, r1
	if (resched()) {
   22b2e:	f7ff ff0f 	bl	22950 <resched>
   22b32:	b1a8      	cbz	r0, 22b60 <z_reschedule+0x38>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22b34:	4610      	mov	r0, r2
   22b36:	f001 f8df 	bl	23cf8 <z_spin_unlock_valid>
   22b3a:	b960      	cbnz	r0, 22b56 <z_reschedule+0x2e>
   22b3c:	4913      	ldr	r1, [pc, #76]	; (22b8c <z_reschedule+0x64>)
   22b3e:	2378      	movs	r3, #120	; 0x78
   22b40:	4a13      	ldr	r2, [pc, #76]	; (22b90 <z_reschedule+0x68>)
   22b42:	4814      	ldr	r0, [pc, #80]	; (22b94 <z_reschedule+0x6c>)
   22b44:	f002 fffb 	bl	25b3e <printk>
   22b48:	4813      	ldr	r0, [pc, #76]	; (22b98 <z_reschedule+0x70>)
   22b4a:	f002 fff8 	bl	25b3e <printk>
   22b4e:	2178      	movs	r1, #120	; 0x78
   22b50:	480f      	ldr	r0, [pc, #60]	; (22b90 <z_reschedule+0x68>)
   22b52:	f003 f801 	bl	25b58 <assert_post_action>
   22b56:	4620      	mov	r0, r4
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   22b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22b5c:	f7ee ba18 	b.w	10f90 <__swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22b60:	4610      	mov	r0, r2
   22b62:	f001 f8c9 	bl	23cf8 <z_spin_unlock_valid>
   22b66:	b960      	cbnz	r0, 22b82 <z_reschedule+0x5a>
   22b68:	4908      	ldr	r1, [pc, #32]	; (22b8c <z_reschedule+0x64>)
   22b6a:	2361      	movs	r3, #97	; 0x61
   22b6c:	4a08      	ldr	r2, [pc, #32]	; (22b90 <z_reschedule+0x68>)
   22b6e:	4809      	ldr	r0, [pc, #36]	; (22b94 <z_reschedule+0x6c>)
   22b70:	f002 ffe5 	bl	25b3e <printk>
   22b74:	4808      	ldr	r0, [pc, #32]	; (22b98 <z_reschedule+0x70>)
   22b76:	f002 ffe2 	bl	25b3e <printk>
   22b7a:	2161      	movs	r1, #97	; 0x61
   22b7c:	4804      	ldr	r0, [pc, #16]	; (22b90 <z_reschedule+0x68>)
   22b7e:	f002 ffeb 	bl	25b58 <assert_post_action>
   22b82:	f384 8811 	msr	BASEPRI, r4
   22b86:	f3bf 8f6f 	isb	sy
   22b8a:	bd10      	pop	{r4, pc}
   22b8c:	0002b6b8 	.word	0x0002b6b8
   22b90:	0002b666 	.word	0x0002b666
   22b94:	0002abaa 	.word	0x0002abaa
   22b98:	0002b6cf 	.word	0x0002b6cf

00022b9c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   22b9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22b9e:	f04f 0320 	mov.w	r3, #32
   22ba2:	f3ef 8511 	mrs	r5, BASEPRI
   22ba6:	f383 8811 	msr	BASEPRI, r3
   22baa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22bae:	482d      	ldr	r0, [pc, #180]	; (22c64 <k_sched_lock+0xc8>)
   22bb0:	f001 f894 	bl	23cdc <z_spin_lock_valid>
   22bb4:	b960      	cbnz	r0, 22bd0 <k_sched_lock+0x34>
   22bb6:	492c      	ldr	r1, [pc, #176]	; (22c68 <k_sched_lock+0xcc>)
   22bb8:	234e      	movs	r3, #78	; 0x4e
   22bba:	4a2c      	ldr	r2, [pc, #176]	; (22c6c <k_sched_lock+0xd0>)
   22bbc:	482c      	ldr	r0, [pc, #176]	; (22c70 <k_sched_lock+0xd4>)
   22bbe:	f002 ffbe 	bl	25b3e <printk>
   22bc2:	482c      	ldr	r0, [pc, #176]	; (22c74 <k_sched_lock+0xd8>)
   22bc4:	f002 ffbb 	bl	25b3e <printk>
   22bc8:	214e      	movs	r1, #78	; 0x4e
   22bca:	4828      	ldr	r0, [pc, #160]	; (22c6c <k_sched_lock+0xd0>)
   22bcc:	f002 ffc4 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22bd0:	4824      	ldr	r0, [pc, #144]	; (22c64 <k_sched_lock+0xc8>)
   22bd2:	f001 f8a1 	bl	23d18 <z_spin_lock_set_owner>
   22bd6:	f3ef 8305 	mrs	r3, IPSR
   22bda:	2b0d      	cmp	r3, #13
   22bdc:	d804      	bhi.n	22be8 <k_sched_lock+0x4c>
   22bde:	b193      	cbz	r3, 22c06 <k_sched_lock+0x6a>
   22be0:	4b25      	ldr	r3, [pc, #148]	; (22c78 <k_sched_lock+0xdc>)
   22be2:	685b      	ldr	r3, [r3, #4]
   22be4:	051b      	lsls	r3, r3, #20
   22be6:	d40e      	bmi.n	22c06 <k_sched_lock+0x6a>
	__ASSERT(!z_is_in_isr(), "");
   22be8:	4924      	ldr	r1, [pc, #144]	; (22c7c <k_sched_lock+0xe0>)
   22bea:	f44f 7380 	mov.w	r3, #256	; 0x100
   22bee:	4a24      	ldr	r2, [pc, #144]	; (22c80 <k_sched_lock+0xe4>)
   22bf0:	481f      	ldr	r0, [pc, #124]	; (22c70 <k_sched_lock+0xd4>)
   22bf2:	f002 ffa4 	bl	25b3e <printk>
   22bf6:	4823      	ldr	r0, [pc, #140]	; (22c84 <k_sched_lock+0xe8>)
   22bf8:	f002 ffa1 	bl	25b3e <printk>
   22bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
   22c00:	481f      	ldr	r0, [pc, #124]	; (22c80 <k_sched_lock+0xe4>)
   22c02:	f002 ffa9 	bl	25b58 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   22c06:	4c20      	ldr	r4, [pc, #128]	; (22c88 <k_sched_lock+0xec>)
   22c08:	68a2      	ldr	r2, [r4, #8]
   22c0a:	7bd2      	ldrb	r2, [r2, #15]
   22c0c:	2a01      	cmp	r2, #1
   22c0e:	d10e      	bne.n	22c2e <k_sched_lock+0x92>
   22c10:	491e      	ldr	r1, [pc, #120]	; (22c8c <k_sched_lock+0xf0>)
   22c12:	f240 1301 	movw	r3, #257	; 0x101
   22c16:	4a1a      	ldr	r2, [pc, #104]	; (22c80 <k_sched_lock+0xe4>)
   22c18:	4815      	ldr	r0, [pc, #84]	; (22c70 <k_sched_lock+0xd4>)
   22c1a:	f002 ff90 	bl	25b3e <printk>
   22c1e:	4819      	ldr	r0, [pc, #100]	; (22c84 <k_sched_lock+0xe8>)
   22c20:	f002 ff8d 	bl	25b3e <printk>
   22c24:	f240 1101 	movw	r1, #257	; 0x101
   22c28:	4815      	ldr	r0, [pc, #84]	; (22c80 <k_sched_lock+0xe4>)
   22c2a:	f002 ff95 	bl	25b58 <assert_post_action>
	--_current->base.sched_locked;
   22c2e:	68a2      	ldr	r2, [r4, #8]
   22c30:	7bd3      	ldrb	r3, [r2, #15]
   22c32:	3b01      	subs	r3, #1
   22c34:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22c36:	480b      	ldr	r0, [pc, #44]	; (22c64 <k_sched_lock+0xc8>)
   22c38:	f001 f85e 	bl	23cf8 <z_spin_unlock_valid>
   22c3c:	b960      	cbnz	r0, 22c58 <k_sched_lock+0xbc>
   22c3e:	4914      	ldr	r1, [pc, #80]	; (22c90 <k_sched_lock+0xf4>)
   22c40:	2361      	movs	r3, #97	; 0x61
   22c42:	4a0a      	ldr	r2, [pc, #40]	; (22c6c <k_sched_lock+0xd0>)
   22c44:	480a      	ldr	r0, [pc, #40]	; (22c70 <k_sched_lock+0xd4>)
   22c46:	f002 ff7a 	bl	25b3e <printk>
   22c4a:	4812      	ldr	r0, [pc, #72]	; (22c94 <k_sched_lock+0xf8>)
   22c4c:	f002 ff77 	bl	25b3e <printk>
   22c50:	2161      	movs	r1, #97	; 0x61
   22c52:	4806      	ldr	r0, [pc, #24]	; (22c6c <k_sched_lock+0xd0>)
   22c54:	f002 ff80 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22c58:	f385 8811 	msr	BASEPRI, r5
   22c5c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   22c60:	bd38      	pop	{r3, r4, r5, pc}
   22c62:	bf00      	nop
   22c64:	20022158 	.word	0x20022158
   22c68:	0002b68e 	.word	0x0002b68e
   22c6c:	0002b666 	.word	0x0002b666
   22c70:	0002abaa 	.word	0x0002abaa
   22c74:	0002b6a3 	.word	0x0002b6a3
   22c78:	e000ed00 	.word	0xe000ed00
   22c7c:	0002c33e 	.word	0x0002c33e
   22c80:	0002c311 	.word	0x0002c311
   22c84:	0002b126 	.word	0x0002b126
   22c88:	20022120 	.word	0x20022120
   22c8c:	0002c34b 	.word	0x0002c34b
   22c90:	0002b6b8 	.word	0x0002b6b8
   22c94:	0002b6cf 	.word	0x0002b6cf

00022c98 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22c98:	4b12      	ldr	r3, [pc, #72]	; (22ce4 <z_priq_dumb_remove+0x4c>)
{
   22c9a:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22c9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
   22ca0:	4282      	cmp	r2, r0
{
   22ca2:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   22ca4:	d105      	bne.n	22cb2 <z_priq_dumb_remove+0x1a>
   22ca6:	689b      	ldr	r3, [r3, #8]
   22ca8:	428b      	cmp	r3, r1
   22caa:	d102      	bne.n	22cb2 <z_priq_dumb_remove+0x1a>
   22cac:	7b4b      	ldrb	r3, [r1, #13]
   22cae:	06db      	lsls	r3, r3, #27
   22cb0:	d117      	bne.n	22ce2 <z_priq_dumb_remove+0x4a>
	return thread == _idle_thread;
   22cb2:	4b0d      	ldr	r3, [pc, #52]	; (22ce8 <z_priq_dumb_remove+0x50>)
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!is_idle(thread));
   22cb4:	681b      	ldr	r3, [r3, #0]
   22cb6:	429c      	cmp	r4, r3
   22cb8:	d10b      	bne.n	22cd2 <z_priq_dumb_remove+0x3a>
   22cba:	490c      	ldr	r1, [pc, #48]	; (22cec <z_priq_dumb_remove+0x54>)
   22cbc:	480c      	ldr	r0, [pc, #48]	; (22cf0 <z_priq_dumb_remove+0x58>)
   22cbe:	f44f 7323 	mov.w	r3, #652	; 0x28c
   22cc2:	4a0c      	ldr	r2, [pc, #48]	; (22cf4 <z_priq_dumb_remove+0x5c>)
   22cc4:	f002 ff3b 	bl	25b3e <printk>
   22cc8:	f44f 7123 	mov.w	r1, #652	; 0x28c
   22ccc:	4809      	ldr	r0, [pc, #36]	; (22cf4 <z_priq_dumb_remove+0x5c>)
   22cce:	f002 ff43 	bl	25b58 <assert_post_action>
	node->prev->next = node->next;
   22cd2:	e9d4 2300 	ldrd	r2, r3, [r4]
   22cd6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22cd8:	6822      	ldr	r2, [r4, #0]
   22cda:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22cdc:	2300      	movs	r3, #0
	node->prev = NULL;
   22cde:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22ce2:	bd10      	pop	{r4, pc}
   22ce4:	20022120 	.word	0x20022120
   22ce8:	0002a568 	.word	0x0002a568
   22cec:	0002c400 	.word	0x0002c400
   22cf0:	0002abaa 	.word	0x0002abaa
   22cf4:	0002c39b 	.word	0x0002c39b

00022cf8 <z_unpend_thread>:
{
   22cf8:	b538      	push	{r3, r4, r5, lr}
   22cfa:	4604      	mov	r4, r0
	__asm__ volatile(
   22cfc:	f04f 0320 	mov.w	r3, #32
   22d00:	f3ef 8511 	mrs	r5, BASEPRI
   22d04:	f383 8811 	msr	BASEPRI, r3
   22d08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22d0c:	481d      	ldr	r0, [pc, #116]	; (22d84 <z_unpend_thread+0x8c>)
   22d0e:	f000 ffe5 	bl	23cdc <z_spin_lock_valid>
   22d12:	b960      	cbnz	r0, 22d2e <z_unpend_thread+0x36>
   22d14:	491c      	ldr	r1, [pc, #112]	; (22d88 <z_unpend_thread+0x90>)
   22d16:	234e      	movs	r3, #78	; 0x4e
   22d18:	4a1c      	ldr	r2, [pc, #112]	; (22d8c <z_unpend_thread+0x94>)
   22d1a:	481d      	ldr	r0, [pc, #116]	; (22d90 <z_unpend_thread+0x98>)
   22d1c:	f002 ff0f 	bl	25b3e <printk>
   22d20:	481c      	ldr	r0, [pc, #112]	; (22d94 <z_unpend_thread+0x9c>)
   22d22:	f002 ff0c 	bl	25b3e <printk>
   22d26:	214e      	movs	r1, #78	; 0x4e
   22d28:	4818      	ldr	r0, [pc, #96]	; (22d8c <z_unpend_thread+0x94>)
   22d2a:	f002 ff15 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d2e:	4815      	ldr	r0, [pc, #84]	; (22d84 <z_unpend_thread+0x8c>)
   22d30:	f000 fff2 	bl	23d18 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22d34:	f104 0008 	add.w	r0, r4, #8
   22d38:	f7ff fe2e 	bl	22998 <pended_on.isra.15>
   22d3c:	4621      	mov	r1, r4
   22d3e:	f7ff ffab 	bl	22c98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22d42:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22d44:	480f      	ldr	r0, [pc, #60]	; (22d84 <z_unpend_thread+0x8c>)
   22d46:	f023 0302 	bic.w	r3, r3, #2
   22d4a:	7363      	strb	r3, [r4, #13]
   22d4c:	f000 ffd4 	bl	23cf8 <z_spin_unlock_valid>
   22d50:	b960      	cbnz	r0, 22d6c <z_unpend_thread+0x74>
   22d52:	4911      	ldr	r1, [pc, #68]	; (22d98 <z_unpend_thread+0xa0>)
   22d54:	2361      	movs	r3, #97	; 0x61
   22d56:	4a0d      	ldr	r2, [pc, #52]	; (22d8c <z_unpend_thread+0x94>)
   22d58:	480d      	ldr	r0, [pc, #52]	; (22d90 <z_unpend_thread+0x98>)
   22d5a:	f002 fef0 	bl	25b3e <printk>
   22d5e:	480f      	ldr	r0, [pc, #60]	; (22d9c <z_unpend_thread+0xa4>)
   22d60:	f002 feed 	bl	25b3e <printk>
   22d64:	2161      	movs	r1, #97	; 0x61
   22d66:	4809      	ldr	r0, [pc, #36]	; (22d8c <z_unpend_thread+0x94>)
   22d68:	f002 fef6 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22d6c:	f385 8811 	msr	BASEPRI, r5
   22d70:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22d74:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22d76:	f104 0018 	add.w	r0, r4, #24
   22d7a:	60a3      	str	r3, [r4, #8]
}
   22d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22d80:	f001 b9f2 	b.w	24168 <z_abort_timeout>
   22d84:	20022158 	.word	0x20022158
   22d88:	0002b68e 	.word	0x0002b68e
   22d8c:	0002b666 	.word	0x0002b666
   22d90:	0002abaa 	.word	0x0002abaa
   22d94:	0002b6a3 	.word	0x0002b6a3
   22d98:	0002b6b8 	.word	0x0002b6b8
   22d9c:	0002b6cf 	.word	0x0002b6cf

00022da0 <update_cache>:
{
   22da0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22da2:	4c15      	ldr	r4, [pc, #84]	; (22df8 <update_cache+0x58>)
{
   22da4:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   22da6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22daa:	f004 fc77 	bl	2769c <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   22dae:	4605      	mov	r5, r0
   22db0:	b900      	cbnz	r0, 22db4 <update_cache+0x14>
   22db2:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   22db4:	b9ca      	cbnz	r2, 22dea <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   22db6:	68a3      	ldr	r3, [r4, #8]
   22db8:	b963      	cbnz	r3, 22dd4 <update_cache+0x34>
   22dba:	4910      	ldr	r1, [pc, #64]	; (22dfc <update_cache+0x5c>)
   22dbc:	237f      	movs	r3, #127	; 0x7f
   22dbe:	4a10      	ldr	r2, [pc, #64]	; (22e00 <update_cache+0x60>)
   22dc0:	4810      	ldr	r0, [pc, #64]	; (22e04 <update_cache+0x64>)
   22dc2:	f002 febc 	bl	25b3e <printk>
   22dc6:	4810      	ldr	r0, [pc, #64]	; (22e08 <update_cache+0x68>)
   22dc8:	f002 feb9 	bl	25b3e <printk>
   22dcc:	217f      	movs	r1, #127	; 0x7f
   22dce:	480c      	ldr	r0, [pc, #48]	; (22e00 <update_cache+0x60>)
   22dd0:	f002 fec2 	bl	25b58 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   22dd4:	68a3      	ldr	r3, [r4, #8]
   22dd6:	7b5a      	ldrb	r2, [r3, #13]
   22dd8:	06d2      	lsls	r2, r2, #27
   22dda:	d106      	bne.n	22dea <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22ddc:	69aa      	ldr	r2, [r5, #24]
   22dde:	b922      	cbnz	r2, 22dea <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   22de0:	89da      	ldrh	r2, [r3, #14]
   22de2:	2a7f      	cmp	r2, #127	; 0x7f
   22de4:	d901      	bls.n	22dea <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   22de6:	6263      	str	r3, [r4, #36]	; 0x24
}
   22de8:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   22dea:	68a3      	ldr	r3, [r4, #8]
   22dec:	42ab      	cmp	r3, r5
   22dee:	d001      	beq.n	22df4 <update_cache+0x54>
			reset_time_slice();
   22df0:	f7ff fdc0 	bl	22974 <reset_time_slice>
		_kernel.ready_q.cache = th;
   22df4:	6265      	str	r5, [r4, #36]	; 0x24
}
   22df6:	e7f7      	b.n	22de8 <update_cache+0x48>
   22df8:	20022120 	.word	0x20022120
   22dfc:	0002c3d6 	.word	0x0002c3d6
   22e00:	0002c39b 	.word	0x0002c39b
   22e04:	0002abaa 	.word	0x0002abaa
   22e08:	0002b126 	.word	0x0002b126

00022e0c <k_sched_unlock>:
{
   22e0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   22e0e:	4c33      	ldr	r4, [pc, #204]	; (22edc <k_sched_unlock+0xd0>)
   22e10:	68a2      	ldr	r2, [r4, #8]
   22e12:	7bd2      	ldrb	r2, [r2, #15]
   22e14:	b972      	cbnz	r2, 22e34 <k_sched_unlock+0x28>
   22e16:	4932      	ldr	r1, [pc, #200]	; (22ee0 <k_sched_unlock+0xd4>)
   22e18:	f240 2321 	movw	r3, #545	; 0x221
   22e1c:	4a31      	ldr	r2, [pc, #196]	; (22ee4 <k_sched_unlock+0xd8>)
   22e1e:	4832      	ldr	r0, [pc, #200]	; (22ee8 <k_sched_unlock+0xdc>)
   22e20:	f002 fe8d 	bl	25b3e <printk>
   22e24:	4831      	ldr	r0, [pc, #196]	; (22eec <k_sched_unlock+0xe0>)
   22e26:	f002 fe8a 	bl	25b3e <printk>
   22e2a:	f240 2121 	movw	r1, #545	; 0x221
   22e2e:	482d      	ldr	r0, [pc, #180]	; (22ee4 <k_sched_unlock+0xd8>)
   22e30:	f002 fe92 	bl	25b58 <assert_post_action>
   22e34:	f3ef 8305 	mrs	r3, IPSR
   22e38:	2b0d      	cmp	r3, #13
   22e3a:	d804      	bhi.n	22e46 <k_sched_unlock+0x3a>
   22e3c:	b193      	cbz	r3, 22e64 <k_sched_unlock+0x58>
   22e3e:	4b2c      	ldr	r3, [pc, #176]	; (22ef0 <k_sched_unlock+0xe4>)
   22e40:	685b      	ldr	r3, [r3, #4]
   22e42:	051b      	lsls	r3, r3, #20
   22e44:	d40e      	bmi.n	22e64 <k_sched_unlock+0x58>
	__ASSERT(!z_is_in_isr(), "");
   22e46:	492b      	ldr	r1, [pc, #172]	; (22ef4 <k_sched_unlock+0xe8>)
   22e48:	f240 2322 	movw	r3, #546	; 0x222
   22e4c:	4a25      	ldr	r2, [pc, #148]	; (22ee4 <k_sched_unlock+0xd8>)
   22e4e:	4826      	ldr	r0, [pc, #152]	; (22ee8 <k_sched_unlock+0xdc>)
   22e50:	f002 fe75 	bl	25b3e <printk>
   22e54:	4825      	ldr	r0, [pc, #148]	; (22eec <k_sched_unlock+0xe0>)
   22e56:	f002 fe72 	bl	25b3e <printk>
   22e5a:	f240 2122 	movw	r1, #546	; 0x222
   22e5e:	4821      	ldr	r0, [pc, #132]	; (22ee4 <k_sched_unlock+0xd8>)
   22e60:	f002 fe7a 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22e64:	f04f 0320 	mov.w	r3, #32
   22e68:	f3ef 8511 	mrs	r5, BASEPRI
   22e6c:	f383 8811 	msr	BASEPRI, r3
   22e70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22e74:	4820      	ldr	r0, [pc, #128]	; (22ef8 <k_sched_unlock+0xec>)
   22e76:	f000 ff31 	bl	23cdc <z_spin_lock_valid>
   22e7a:	b960      	cbnz	r0, 22e96 <k_sched_unlock+0x8a>
   22e7c:	491f      	ldr	r1, [pc, #124]	; (22efc <k_sched_unlock+0xf0>)
   22e7e:	234e      	movs	r3, #78	; 0x4e
   22e80:	4a1f      	ldr	r2, [pc, #124]	; (22f00 <k_sched_unlock+0xf4>)
   22e82:	4819      	ldr	r0, [pc, #100]	; (22ee8 <k_sched_unlock+0xdc>)
   22e84:	f002 fe5b 	bl	25b3e <printk>
   22e88:	481e      	ldr	r0, [pc, #120]	; (22f04 <k_sched_unlock+0xf8>)
   22e8a:	f002 fe58 	bl	25b3e <printk>
   22e8e:	214e      	movs	r1, #78	; 0x4e
   22e90:	481b      	ldr	r0, [pc, #108]	; (22f00 <k_sched_unlock+0xf4>)
   22e92:	f002 fe61 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e96:	4818      	ldr	r0, [pc, #96]	; (22ef8 <k_sched_unlock+0xec>)
   22e98:	f000 ff3e 	bl	23d18 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   22e9c:	68a2      	ldr	r2, [r4, #8]
		update_cache(1);
   22e9e:	2001      	movs	r0, #1
		++_current->base.sched_locked;
   22ea0:	7bd3      	ldrb	r3, [r2, #15]
   22ea2:	3301      	adds	r3, #1
   22ea4:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   22ea6:	f7ff ff7b 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22eaa:	4813      	ldr	r0, [pc, #76]	; (22ef8 <k_sched_unlock+0xec>)
   22eac:	f000 ff24 	bl	23cf8 <z_spin_unlock_valid>
   22eb0:	b960      	cbnz	r0, 22ecc <k_sched_unlock+0xc0>
   22eb2:	4915      	ldr	r1, [pc, #84]	; (22f08 <k_sched_unlock+0xfc>)
   22eb4:	2361      	movs	r3, #97	; 0x61
   22eb6:	4a12      	ldr	r2, [pc, #72]	; (22f00 <k_sched_unlock+0xf4>)
   22eb8:	480b      	ldr	r0, [pc, #44]	; (22ee8 <k_sched_unlock+0xdc>)
   22eba:	f002 fe40 	bl	25b3e <printk>
   22ebe:	4813      	ldr	r0, [pc, #76]	; (22f0c <k_sched_unlock+0x100>)
   22ec0:	f002 fe3d 	bl	25b3e <printk>
   22ec4:	2161      	movs	r1, #97	; 0x61
   22ec6:	480e      	ldr	r0, [pc, #56]	; (22f00 <k_sched_unlock+0xf4>)
   22ec8:	f002 fe46 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22ecc:	f385 8811 	msr	BASEPRI, r5
   22ed0:	f3bf 8f6f 	isb	sy
}
   22ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   22ed8:	f004 bbd6 	b.w	27688 <z_reschedule_unlocked>
   22edc:	20022120 	.word	0x20022120
   22ee0:	0002c373 	.word	0x0002c373
   22ee4:	0002c39b 	.word	0x0002c39b
   22ee8:	0002abaa 	.word	0x0002abaa
   22eec:	0002b126 	.word	0x0002b126
   22ef0:	e000ed00 	.word	0xe000ed00
   22ef4:	0002c33e 	.word	0x0002c33e
   22ef8:	20022158 	.word	0x20022158
   22efc:	0002b68e 	.word	0x0002b68e
   22f00:	0002b666 	.word	0x0002b666
   22f04:	0002b6a3 	.word	0x0002b6a3
   22f08:	0002b6b8 	.word	0x0002b6b8
   22f0c:	0002b6cf 	.word	0x0002b6cf

00022f10 <z_add_thread_to_ready_q>:
{
   22f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f12:	4604      	mov	r4, r0
	__asm__ volatile(
   22f14:	f04f 0320 	mov.w	r3, #32
   22f18:	f3ef 8511 	mrs	r5, BASEPRI
   22f1c:	f383 8811 	msr	BASEPRI, r3
   22f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22f24:	482f      	ldr	r0, [pc, #188]	; (22fe4 <z_add_thread_to_ready_q+0xd4>)
   22f26:	f000 fed9 	bl	23cdc <z_spin_lock_valid>
   22f2a:	b960      	cbnz	r0, 22f46 <z_add_thread_to_ready_q+0x36>
   22f2c:	492e      	ldr	r1, [pc, #184]	; (22fe8 <z_add_thread_to_ready_q+0xd8>)
   22f2e:	234e      	movs	r3, #78	; 0x4e
   22f30:	4a2e      	ldr	r2, [pc, #184]	; (22fec <z_add_thread_to_ready_q+0xdc>)
   22f32:	482f      	ldr	r0, [pc, #188]	; (22ff0 <z_add_thread_to_ready_q+0xe0>)
   22f34:	f002 fe03 	bl	25b3e <printk>
   22f38:	482e      	ldr	r0, [pc, #184]	; (22ff4 <z_add_thread_to_ready_q+0xe4>)
   22f3a:	f002 fe00 	bl	25b3e <printk>
   22f3e:	214e      	movs	r1, #78	; 0x4e
   22f40:	482a      	ldr	r0, [pc, #168]	; (22fec <z_add_thread_to_ready_q+0xdc>)
   22f42:	f002 fe09 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   22f46:	4827      	ldr	r0, [pc, #156]	; (22fe4 <z_add_thread_to_ready_q+0xd4>)
   22f48:	f000 fee6 	bl	23d18 <z_spin_lock_set_owner>
	return thread == _idle_thread;
   22f4c:	4b2a      	ldr	r3, [pc, #168]	; (22ff8 <z_add_thread_to_ready_q+0xe8>)
	__ASSERT_NO_MSG(!is_idle(thread));
   22f4e:	681b      	ldr	r3, [r3, #0]
   22f50:	429c      	cmp	r4, r3
   22f52:	d10b      	bne.n	22f6c <z_add_thread_to_ready_q+0x5c>
   22f54:	4929      	ldr	r1, [pc, #164]	; (22ffc <z_add_thread_to_ready_q+0xec>)
   22f56:	4826      	ldr	r0, [pc, #152]	; (22ff0 <z_add_thread_to_ready_q+0xe0>)
   22f58:	f240 2376 	movw	r3, #630	; 0x276
   22f5c:	4a28      	ldr	r2, [pc, #160]	; (23000 <z_add_thread_to_ready_q+0xf0>)
   22f5e:	f002 fdee 	bl	25b3e <printk>
   22f62:	f240 2176 	movw	r1, #630	; 0x276
   22f66:	4826      	ldr	r0, [pc, #152]	; (23000 <z_add_thread_to_ready_q+0xf0>)
   22f68:	f002 fdf6 	bl	25b58 <assert_post_action>
	return list->head == list;
   22f6c:	4a25      	ldr	r2, [pc, #148]	; (23004 <z_add_thread_to_ready_q+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f6e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   22f72:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   22f76:	428b      	cmp	r3, r1
   22f78:	d00b      	beq.n	22f92 <z_add_thread_to_ready_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f7a:	b153      	cbz	r3, 22f92 <z_add_thread_to_ready_q+0x82>
	if (t1->base.prio < t2->base.prio) {
   22f7c:	f994 600e 	ldrsb.w	r6, [r4, #14]
   22f80:	f993 700e 	ldrsb.w	r7, [r3, #14]
   22f84:	42b7      	cmp	r7, r6
   22f86:	dc0a      	bgt.n	22f9e <z_add_thread_to_ready_q+0x8e>
	return (node == list->tail) ? NULL : node->next;
   22f88:	4298      	cmp	r0, r3
   22f8a:	d002      	beq.n	22f92 <z_add_thread_to_ready_q+0x82>
   22f8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f8e:	2b00      	cmp	r3, #0
   22f90:	d1f6      	bne.n	22f80 <z_add_thread_to_ready_q+0x70>
	node->prev = list->tail;
   22f92:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   22f96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22f98:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22f9a:	62d4      	str	r4, [r2, #44]	; 0x2c
   22f9c:	e005      	b.n	22faa <z_add_thread_to_ready_q+0x9a>
	node->prev = successor->prev;
   22f9e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22fa0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   22fa4:	685a      	ldr	r2, [r3, #4]
   22fa6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22fa8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   22faa:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   22fac:	2000      	movs	r0, #0
   22fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22fb2:	7363      	strb	r3, [r4, #13]
   22fb4:	f7ff fef4 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22fb8:	480a      	ldr	r0, [pc, #40]	; (22fe4 <z_add_thread_to_ready_q+0xd4>)
   22fba:	f000 fe9d 	bl	23cf8 <z_spin_unlock_valid>
   22fbe:	b960      	cbnz	r0, 22fda <z_add_thread_to_ready_q+0xca>
   22fc0:	4911      	ldr	r1, [pc, #68]	; (23008 <z_add_thread_to_ready_q+0xf8>)
   22fc2:	2361      	movs	r3, #97	; 0x61
   22fc4:	4a09      	ldr	r2, [pc, #36]	; (22fec <z_add_thread_to_ready_q+0xdc>)
   22fc6:	480a      	ldr	r0, [pc, #40]	; (22ff0 <z_add_thread_to_ready_q+0xe0>)
   22fc8:	f002 fdb9 	bl	25b3e <printk>
   22fcc:	480f      	ldr	r0, [pc, #60]	; (2300c <z_add_thread_to_ready_q+0xfc>)
   22fce:	f002 fdb6 	bl	25b3e <printk>
   22fd2:	2161      	movs	r1, #97	; 0x61
   22fd4:	4805      	ldr	r0, [pc, #20]	; (22fec <z_add_thread_to_ready_q+0xdc>)
   22fd6:	f002 fdbf 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   22fda:	f385 8811 	msr	BASEPRI, r5
   22fde:	f3bf 8f6f 	isb	sy
}
   22fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22fe4:	20022158 	.word	0x20022158
   22fe8:	0002b68e 	.word	0x0002b68e
   22fec:	0002b666 	.word	0x0002b666
   22ff0:	0002abaa 	.word	0x0002abaa
   22ff4:	0002b6a3 	.word	0x0002b6a3
   22ff8:	0002a568 	.word	0x0002a568
   22ffc:	0002c400 	.word	0x0002c400
   23000:	0002c39b 	.word	0x0002c39b
   23004:	20022120 	.word	0x20022120
   23008:	0002b6b8 	.word	0x0002b6b8
   2300c:	0002b6cf 	.word	0x0002b6cf

00023010 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   23010:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   23014:	b570      	push	{r4, r5, r6, lr}
   23016:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   23018:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   2301c:	2b00      	cmp	r3, #0
   2301e:	d040      	beq.n	230a2 <z_thread_timeout+0x92>
	__asm__ volatile(
   23020:	f04f 0320 	mov.w	r3, #32
   23024:	f3ef 8611 	mrs	r6, BASEPRI
   23028:	f383 8811 	msr	BASEPRI, r3
   2302c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23030:	4824      	ldr	r0, [pc, #144]	; (230c4 <z_thread_timeout+0xb4>)
   23032:	f000 fe53 	bl	23cdc <z_spin_lock_valid>
   23036:	b960      	cbnz	r0, 23052 <z_thread_timeout+0x42>
   23038:	4923      	ldr	r1, [pc, #140]	; (230c8 <z_thread_timeout+0xb8>)
   2303a:	234e      	movs	r3, #78	; 0x4e
   2303c:	4a23      	ldr	r2, [pc, #140]	; (230cc <z_thread_timeout+0xbc>)
   2303e:	4824      	ldr	r0, [pc, #144]	; (230d0 <z_thread_timeout+0xc0>)
   23040:	f002 fd7d 	bl	25b3e <printk>
   23044:	4823      	ldr	r0, [pc, #140]	; (230d4 <z_thread_timeout+0xc4>)
   23046:	f002 fd7a 	bl	25b3e <printk>
   2304a:	214e      	movs	r1, #78	; 0x4e
   2304c:	481f      	ldr	r0, [pc, #124]	; (230cc <z_thread_timeout+0xbc>)
   2304e:	f002 fd83 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23052:	481c      	ldr	r0, [pc, #112]	; (230c4 <z_thread_timeout+0xb4>)
   23054:	f000 fe60 	bl	23d18 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   23058:	f1a4 0010 	sub.w	r0, r4, #16
   2305c:	f7ff fc9c 	bl	22998 <pended_on.isra.15>
   23060:	4629      	mov	r1, r5
   23062:	f7ff fe19 	bl	22c98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23066:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2306a:	4816      	ldr	r0, [pc, #88]	; (230c4 <z_thread_timeout+0xb4>)
   2306c:	f023 0302 	bic.w	r3, r3, #2
   23070:	f804 3c0b 	strb.w	r3, [r4, #-11]
   23074:	f000 fe40 	bl	23cf8 <z_spin_unlock_valid>
   23078:	b960      	cbnz	r0, 23094 <z_thread_timeout+0x84>
   2307a:	4917      	ldr	r1, [pc, #92]	; (230d8 <z_thread_timeout+0xc8>)
   2307c:	2361      	movs	r3, #97	; 0x61
   2307e:	4a13      	ldr	r2, [pc, #76]	; (230cc <z_thread_timeout+0xbc>)
   23080:	4813      	ldr	r0, [pc, #76]	; (230d0 <z_thread_timeout+0xc0>)
   23082:	f002 fd5c 	bl	25b3e <printk>
   23086:	4815      	ldr	r0, [pc, #84]	; (230dc <z_thread_timeout+0xcc>)
   23088:	f002 fd59 	bl	25b3e <printk>
   2308c:	2161      	movs	r1, #97	; 0x61
   2308e:	480f      	ldr	r0, [pc, #60]	; (230cc <z_thread_timeout+0xbc>)
   23090:	f002 fd62 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   23094:	f386 8811 	msr	BASEPRI, r6
   23098:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2309c:	2300      	movs	r3, #0
   2309e:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   230a2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   230a6:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   230a8:	f023 0314 	bic.w	r3, r3, #20
   230ac:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   230b0:	f004 fac9 	bl	27646 <z_is_thread_ready>
   230b4:	b120      	cbz	r0, 230c0 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   230b6:	4628      	mov	r0, r5
}
   230b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   230bc:	f7ff bf28 	b.w	22f10 <z_add_thread_to_ready_q>
   230c0:	bd70      	pop	{r4, r5, r6, pc}
   230c2:	bf00      	nop
   230c4:	20022158 	.word	0x20022158
   230c8:	0002b68e 	.word	0x0002b68e
   230cc:	0002b666 	.word	0x0002b666
   230d0:	0002abaa 	.word	0x0002abaa
   230d4:	0002b6a3 	.word	0x0002b6a3
   230d8:	0002b6b8 	.word	0x0002b6b8
   230dc:	0002b6cf 	.word	0x0002b6cf

000230e0 <z_move_thread_to_end_of_prio_q>:
{
   230e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230e2:	4604      	mov	r4, r0
	__asm__ volatile(
   230e4:	f04f 0320 	mov.w	r3, #32
   230e8:	f3ef 8511 	mrs	r5, BASEPRI
   230ec:	f383 8811 	msr	BASEPRI, r3
   230f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   230f4:	4833      	ldr	r0, [pc, #204]	; (231c4 <z_move_thread_to_end_of_prio_q+0xe4>)
   230f6:	f000 fdf1 	bl	23cdc <z_spin_lock_valid>
   230fa:	b960      	cbnz	r0, 23116 <z_move_thread_to_end_of_prio_q+0x36>
   230fc:	4932      	ldr	r1, [pc, #200]	; (231c8 <z_move_thread_to_end_of_prio_q+0xe8>)
   230fe:	234e      	movs	r3, #78	; 0x4e
   23100:	4a32      	ldr	r2, [pc, #200]	; (231cc <z_move_thread_to_end_of_prio_q+0xec>)
   23102:	4833      	ldr	r0, [pc, #204]	; (231d0 <z_move_thread_to_end_of_prio_q+0xf0>)
   23104:	f002 fd1b 	bl	25b3e <printk>
   23108:	4832      	ldr	r0, [pc, #200]	; (231d4 <z_move_thread_to_end_of_prio_q+0xf4>)
   2310a:	f002 fd18 	bl	25b3e <printk>
   2310e:	214e      	movs	r1, #78	; 0x4e
   23110:	482e      	ldr	r0, [pc, #184]	; (231cc <z_move_thread_to_end_of_prio_q+0xec>)
   23112:	f002 fd21 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23116:	482b      	ldr	r0, [pc, #172]	; (231c4 <z_move_thread_to_end_of_prio_q+0xe4>)
   23118:	f000 fdfe 	bl	23d18 <z_spin_lock_set_owner>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   2311c:	4621      	mov	r1, r4
   2311e:	482e      	ldr	r0, [pc, #184]	; (231d8 <z_move_thread_to_end_of_prio_q+0xf8>)
   23120:	f7ff fdba 	bl	22c98 <z_priq_dumb_remove>
	return thread == _idle_thread;
   23124:	4b2d      	ldr	r3, [pc, #180]	; (231dc <z_move_thread_to_end_of_prio_q+0xfc>)
	__ASSERT_NO_MSG(!is_idle(thread));
   23126:	681b      	ldr	r3, [r3, #0]
   23128:	429c      	cmp	r4, r3
   2312a:	d10b      	bne.n	23144 <z_move_thread_to_end_of_prio_q+0x64>
   2312c:	492c      	ldr	r1, [pc, #176]	; (231e0 <z_move_thread_to_end_of_prio_q+0x100>)
   2312e:	4828      	ldr	r0, [pc, #160]	; (231d0 <z_move_thread_to_end_of_prio_q+0xf0>)
   23130:	f240 2376 	movw	r3, #630	; 0x276
   23134:	4a2b      	ldr	r2, [pc, #172]	; (231e4 <z_move_thread_to_end_of_prio_q+0x104>)
   23136:	f002 fd02 	bl	25b3e <printk>
   2313a:	f240 2176 	movw	r1, #630	; 0x276
   2313e:	4829      	ldr	r0, [pc, #164]	; (231e4 <z_move_thread_to_end_of_prio_q+0x104>)
   23140:	f002 fd0a 	bl	25b58 <assert_post_action>
	return list->head == list;
   23144:	4a28      	ldr	r2, [pc, #160]	; (231e8 <z_move_thread_to_end_of_prio_q+0x108>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23146:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2314a:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   2314e:	428b      	cmp	r3, r1
   23150:	d00b      	beq.n	2316a <z_move_thread_to_end_of_prio_q+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23152:	b153      	cbz	r3, 2316a <z_move_thread_to_end_of_prio_q+0x8a>
	if (t1->base.prio < t2->base.prio) {
   23154:	f994 600e 	ldrsb.w	r6, [r4, #14]
   23158:	f993 700e 	ldrsb.w	r7, [r3, #14]
   2315c:	42b7      	cmp	r7, r6
   2315e:	dc0a      	bgt.n	23176 <z_move_thread_to_end_of_prio_q+0x96>
	return (node == list->tail) ? NULL : node->next;
   23160:	4283      	cmp	r3, r0
   23162:	d002      	beq.n	2316a <z_move_thread_to_end_of_prio_q+0x8a>
   23164:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23166:	2b00      	cmp	r3, #0
   23168:	d1f6      	bne.n	23158 <z_move_thread_to_end_of_prio_q+0x78>
	node->prev = list->tail;
   2316a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2316e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23170:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23172:	62d4      	str	r4, [r2, #44]	; 0x2c
   23174:	e005      	b.n	23182 <z_move_thread_to_end_of_prio_q+0xa2>
	node->prev = successor->prev;
   23176:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23178:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2317c:	6859      	ldr	r1, [r3, #4]
   2317e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23180:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   23182:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   23184:	6890      	ldr	r0, [r2, #8]
   23186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2318a:	7363      	strb	r3, [r4, #13]
   2318c:	1b03      	subs	r3, r0, r4
   2318e:	4258      	negs	r0, r3
   23190:	4158      	adcs	r0, r3
   23192:	f7ff fe05 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23196:	480b      	ldr	r0, [pc, #44]	; (231c4 <z_move_thread_to_end_of_prio_q+0xe4>)
   23198:	f000 fdae 	bl	23cf8 <z_spin_unlock_valid>
   2319c:	b960      	cbnz	r0, 231b8 <z_move_thread_to_end_of_prio_q+0xd8>
   2319e:	4913      	ldr	r1, [pc, #76]	; (231ec <z_move_thread_to_end_of_prio_q+0x10c>)
   231a0:	2361      	movs	r3, #97	; 0x61
   231a2:	4a0a      	ldr	r2, [pc, #40]	; (231cc <z_move_thread_to_end_of_prio_q+0xec>)
   231a4:	480a      	ldr	r0, [pc, #40]	; (231d0 <z_move_thread_to_end_of_prio_q+0xf0>)
   231a6:	f002 fcca 	bl	25b3e <printk>
   231aa:	4811      	ldr	r0, [pc, #68]	; (231f0 <z_move_thread_to_end_of_prio_q+0x110>)
   231ac:	f002 fcc7 	bl	25b3e <printk>
   231b0:	2161      	movs	r1, #97	; 0x61
   231b2:	4806      	ldr	r0, [pc, #24]	; (231cc <z_move_thread_to_end_of_prio_q+0xec>)
   231b4:	f002 fcd0 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   231b8:	f385 8811 	msr	BASEPRI, r5
   231bc:	f3bf 8f6f 	isb	sy
}
   231c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231c2:	bf00      	nop
   231c4:	20022158 	.word	0x20022158
   231c8:	0002b68e 	.word	0x0002b68e
   231cc:	0002b666 	.word	0x0002b666
   231d0:	0002abaa 	.word	0x0002abaa
   231d4:	0002b6a3 	.word	0x0002b6a3
   231d8:	20022148 	.word	0x20022148
   231dc:	0002a568 	.word	0x0002a568
   231e0:	0002c400 	.word	0x0002c400
   231e4:	0002c39b 	.word	0x0002c39b
   231e8:	20022120 	.word	0x20022120
   231ec:	0002b6b8 	.word	0x0002b6b8
   231f0:	0002b6cf 	.word	0x0002b6cf

000231f4 <z_time_slice>:
	if (pending_current == _current) {
   231f4:	4914      	ldr	r1, [pc, #80]	; (23248 <z_time_slice+0x54>)
   231f6:	4a15      	ldr	r2, [pc, #84]	; (2324c <z_time_slice+0x58>)
{
   231f8:	b510      	push	{r4, lr}
	if (pending_current == _current) {
   231fa:	688b      	ldr	r3, [r1, #8]
   231fc:	6814      	ldr	r4, [r2, #0]
   231fe:	42a3      	cmp	r3, r4
   23200:	d103      	bne.n	2320a <z_time_slice+0x16>
}
   23202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   23206:	f7ff bbb5 	b.w	22974 <reset_time_slice>
	pending_current = NULL;
   2320a:	2400      	movs	r4, #0
   2320c:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2320e:	4a10      	ldr	r2, [pc, #64]	; (23250 <z_time_slice+0x5c>)
   23210:	6812      	ldr	r2, [r2, #0]
   23212:	b1ba      	cbz	r2, 23244 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   23214:	89da      	ldrh	r2, [r3, #14]
   23216:	2a7f      	cmp	r2, #127	; 0x7f
   23218:	d814      	bhi.n	23244 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   2321a:	4a0e      	ldr	r2, [pc, #56]	; (23254 <z_time_slice+0x60>)
   2321c:	f993 400e 	ldrsb.w	r4, [r3, #14]
   23220:	6812      	ldr	r2, [r2, #0]
   23222:	4294      	cmp	r4, r2
   23224:	db0e      	blt.n	23244 <z_time_slice+0x50>
	return thread == _idle_thread;
   23226:	4a0c      	ldr	r2, [pc, #48]	; (23258 <z_time_slice+0x64>)
		&& !is_idle(t)
   23228:	6812      	ldr	r2, [r2, #0]
   2322a:	4293      	cmp	r3, r2
   2322c:	d00a      	beq.n	23244 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   2322e:	699a      	ldr	r2, [r3, #24]
   23230:	b942      	cbnz	r2, 23244 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   23232:	690a      	ldr	r2, [r1, #16]
   23234:	4282      	cmp	r2, r0
   23236:	dc03      	bgt.n	23240 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   23238:	4618      	mov	r0, r3
   2323a:	f7ff ff51 	bl	230e0 <z_move_thread_to_end_of_prio_q>
   2323e:	e7e0      	b.n	23202 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
   23240:	1a12      	subs	r2, r2, r0
   23242:	610a      	str	r2, [r1, #16]
}
   23244:	bd10      	pop	{r4, pc}
   23246:	bf00      	nop
   23248:	20022120 	.word	0x20022120
   2324c:	20022154 	.word	0x20022154
   23250:	20022160 	.word	0x20022160
   23254:	2002215c 	.word	0x2002215c
   23258:	0002a568 	.word	0x0002a568

0002325c <z_remove_thread_from_ready_q>:
{
   2325c:	b538      	push	{r3, r4, r5, lr}
   2325e:	4604      	mov	r4, r0
	__asm__ volatile(
   23260:	f04f 0320 	mov.w	r3, #32
   23264:	f3ef 8511 	mrs	r5, BASEPRI
   23268:	f383 8811 	msr	BASEPRI, r3
   2326c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23270:	481d      	ldr	r0, [pc, #116]	; (232e8 <z_remove_thread_from_ready_q+0x8c>)
   23272:	f000 fd33 	bl	23cdc <z_spin_lock_valid>
   23276:	b960      	cbnz	r0, 23292 <z_remove_thread_from_ready_q+0x36>
   23278:	491c      	ldr	r1, [pc, #112]	; (232ec <z_remove_thread_from_ready_q+0x90>)
   2327a:	234e      	movs	r3, #78	; 0x4e
   2327c:	4a1c      	ldr	r2, [pc, #112]	; (232f0 <z_remove_thread_from_ready_q+0x94>)
   2327e:	481d      	ldr	r0, [pc, #116]	; (232f4 <z_remove_thread_from_ready_q+0x98>)
   23280:	f002 fc5d 	bl	25b3e <printk>
   23284:	481c      	ldr	r0, [pc, #112]	; (232f8 <z_remove_thread_from_ready_q+0x9c>)
   23286:	f002 fc5a 	bl	25b3e <printk>
   2328a:	214e      	movs	r1, #78	; 0x4e
   2328c:	4818      	ldr	r0, [pc, #96]	; (232f0 <z_remove_thread_from_ready_q+0x94>)
   2328e:	f002 fc63 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23292:	4815      	ldr	r0, [pc, #84]	; (232e8 <z_remove_thread_from_ready_q+0x8c>)
   23294:	f000 fd40 	bl	23d18 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   23298:	7b63      	ldrb	r3, [r4, #13]
   2329a:	065a      	lsls	r2, r3, #25
   2329c:	d507      	bpl.n	232ae <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2329e:	4621      	mov	r1, r4
   232a0:	4816      	ldr	r0, [pc, #88]	; (232fc <z_remove_thread_from_ready_q+0xa0>)
   232a2:	f7ff fcf9 	bl	22c98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   232a6:	7b63      	ldrb	r3, [r4, #13]
   232a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   232ac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   232ae:	4b14      	ldr	r3, [pc, #80]	; (23300 <z_remove_thread_from_ready_q+0xa4>)
   232b0:	6898      	ldr	r0, [r3, #8]
   232b2:	1b03      	subs	r3, r0, r4
   232b4:	4258      	negs	r0, r3
   232b6:	4158      	adcs	r0, r3
   232b8:	f7ff fd72 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   232bc:	480a      	ldr	r0, [pc, #40]	; (232e8 <z_remove_thread_from_ready_q+0x8c>)
   232be:	f000 fd1b 	bl	23cf8 <z_spin_unlock_valid>
   232c2:	b960      	cbnz	r0, 232de <z_remove_thread_from_ready_q+0x82>
   232c4:	490f      	ldr	r1, [pc, #60]	; (23304 <z_remove_thread_from_ready_q+0xa8>)
   232c6:	2361      	movs	r3, #97	; 0x61
   232c8:	4a09      	ldr	r2, [pc, #36]	; (232f0 <z_remove_thread_from_ready_q+0x94>)
   232ca:	480a      	ldr	r0, [pc, #40]	; (232f4 <z_remove_thread_from_ready_q+0x98>)
   232cc:	f002 fc37 	bl	25b3e <printk>
   232d0:	480d      	ldr	r0, [pc, #52]	; (23308 <z_remove_thread_from_ready_q+0xac>)
   232d2:	f002 fc34 	bl	25b3e <printk>
   232d6:	2161      	movs	r1, #97	; 0x61
   232d8:	4805      	ldr	r0, [pc, #20]	; (232f0 <z_remove_thread_from_ready_q+0x94>)
   232da:	f002 fc3d 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   232de:	f385 8811 	msr	BASEPRI, r5
   232e2:	f3bf 8f6f 	isb	sy
}
   232e6:	bd38      	pop	{r3, r4, r5, pc}
   232e8:	20022158 	.word	0x20022158
   232ec:	0002b68e 	.word	0x0002b68e
   232f0:	0002b666 	.word	0x0002b666
   232f4:	0002abaa 	.word	0x0002abaa
   232f8:	0002b6a3 	.word	0x0002b6a3
   232fc:	20022148 	.word	0x20022148
   23300:	20022120 	.word	0x20022120
   23304:	0002b6b8 	.word	0x0002b6b8
   23308:	0002b6cf 	.word	0x0002b6cf

0002330c <pend>:
{
   2330c:	b570      	push	{r4, r5, r6, lr}
   2330e:	4604      	mov	r4, r0
   23310:	460d      	mov	r5, r1
   23312:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   23314:	f7ff ffa2 	bl	2325c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   23318:	7b63      	ldrb	r3, [r4, #13]
   2331a:	f043 0302 	orr.w	r3, r3, #2
   2331e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23320:	2d00      	cmp	r5, #0
   23322:	d02d      	beq.n	23380 <pend+0x74>
	return thread == _idle_thread;
   23324:	4b21      	ldr	r3, [pc, #132]	; (233ac <pend+0xa0>)
		thread->base.pended_on = wait_q;
   23326:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!is_idle(thread));
   23328:	681b      	ldr	r3, [r3, #0]
   2332a:	429c      	cmp	r4, r3
   2332c:	d10b      	bne.n	23346 <pend+0x3a>
   2332e:	4920      	ldr	r1, [pc, #128]	; (233b0 <pend+0xa4>)
   23330:	4820      	ldr	r0, [pc, #128]	; (233b4 <pend+0xa8>)
   23332:	f240 2376 	movw	r3, #630	; 0x276
   23336:	4a20      	ldr	r2, [pc, #128]	; (233b8 <pend+0xac>)
   23338:	f002 fc01 	bl	25b3e <printk>
   2333c:	f240 2176 	movw	r1, #630	; 0x276
   23340:	481d      	ldr	r0, [pc, #116]	; (233b8 <pend+0xac>)
   23342:	f002 fc09 	bl	25b58 <assert_post_action>
	return list->head == list;
   23346:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23348:	429d      	cmp	r5, r3
   2334a:	d00c      	beq.n	23366 <pend+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2334c:	b15b      	cbz	r3, 23366 <pend+0x5a>
	if (t1->base.prio < t2->base.prio) {
   2334e:	f994 200e 	ldrsb.w	r2, [r4, #14]
   23352:	f993 100e 	ldrsb.w	r1, [r3, #14]
   23356:	4291      	cmp	r1, r2
   23358:	dc0c      	bgt.n	23374 <pend+0x68>
	return (node == list->tail) ? NULL : node->next;
   2335a:	6869      	ldr	r1, [r5, #4]
   2335c:	428b      	cmp	r3, r1
   2335e:	d002      	beq.n	23366 <pend+0x5a>
   23360:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23362:	2b00      	cmp	r3, #0
   23364:	d1f5      	bne.n	23352 <pend+0x46>
	node->prev = list->tail;
   23366:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   23368:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2336a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2336c:	686b      	ldr	r3, [r5, #4]
   2336e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23370:	606c      	str	r4, [r5, #4]
   23372:	e005      	b.n	23380 <pend+0x74>
	node->prev = successor->prev;
   23374:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23376:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2337a:	685a      	ldr	r2, [r3, #4]
   2337c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2337e:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   23380:	1c73      	adds	r3, r6, #1
   23382:	d012      	beq.n	233aa <pend+0x9e>
   23384:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   23388:	2100      	movs	r1, #0
   2338a:	480c      	ldr	r0, [pc, #48]	; (233bc <pend+0xb0>)
   2338c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   23390:	fbc5 0106 	smlal	r0, r1, r5, r6
   23394:	2300      	movs	r3, #0
   23396:	f7e8 fed5 	bl	c144 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2339a:	4909      	ldr	r1, [pc, #36]	; (233c0 <pend+0xb4>)
   2339c:	1c42      	adds	r2, r0, #1
   2339e:	f104 0018 	add.w	r0, r4, #24
}
   233a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   233a6:	f000 be39 	b.w	2401c <z_add_timeout>
   233aa:	bd70      	pop	{r4, r5, r6, pc}
   233ac:	0002a568 	.word	0x0002a568
   233b0:	0002c400 	.word	0x0002c400
   233b4:	0002abaa 	.word	0x0002abaa
   233b8:	0002c39b 	.word	0x0002c39b
   233bc:	0003e7ff 	.word	0x0003e7ff
   233c0:	00023011 	.word	0x00023011

000233c4 <z_pend_curr_irqlock>:
{
   233c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233c6:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   233c8:	4d21      	ldr	r5, [pc, #132]	; (23450 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   233ca:	4c22      	ldr	r4, [pc, #136]	; (23454 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   233cc:	68a8      	ldr	r0, [r5, #8]
   233ce:	f7ff ff9d 	bl	2330c <pend>
	pending_current = _current;
   233d2:	68ab      	ldr	r3, [r5, #8]
   233d4:	4630      	mov	r0, r6
   233d6:	6023      	str	r3, [r4, #0]
   233d8:	f7ed fdda 	bl	10f90 <__swap>
   233dc:	4606      	mov	r6, r0
	__asm__ volatile(
   233de:	f04f 0320 	mov.w	r3, #32
   233e2:	f3ef 8711 	mrs	r7, BASEPRI
   233e6:	f383 8811 	msr	BASEPRI, r3
   233ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   233ee:	481a      	ldr	r0, [pc, #104]	; (23458 <z_pend_curr_irqlock+0x94>)
   233f0:	f000 fc74 	bl	23cdc <z_spin_lock_valid>
   233f4:	b960      	cbnz	r0, 23410 <z_pend_curr_irqlock+0x4c>
   233f6:	4919      	ldr	r1, [pc, #100]	; (2345c <z_pend_curr_irqlock+0x98>)
   233f8:	234e      	movs	r3, #78	; 0x4e
   233fa:	4a19      	ldr	r2, [pc, #100]	; (23460 <z_pend_curr_irqlock+0x9c>)
   233fc:	4819      	ldr	r0, [pc, #100]	; (23464 <z_pend_curr_irqlock+0xa0>)
   233fe:	f002 fb9e 	bl	25b3e <printk>
   23402:	4819      	ldr	r0, [pc, #100]	; (23468 <z_pend_curr_irqlock+0xa4>)
   23404:	f002 fb9b 	bl	25b3e <printk>
   23408:	214e      	movs	r1, #78	; 0x4e
   2340a:	4815      	ldr	r0, [pc, #84]	; (23460 <z_pend_curr_irqlock+0x9c>)
   2340c:	f002 fba4 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23410:	4811      	ldr	r0, [pc, #68]	; (23458 <z_pend_curr_irqlock+0x94>)
   23412:	f000 fc81 	bl	23d18 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   23416:	6823      	ldr	r3, [r4, #0]
   23418:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2341a:	480f      	ldr	r0, [pc, #60]	; (23458 <z_pend_curr_irqlock+0x94>)
   2341c:	429a      	cmp	r2, r3
			pending_current = NULL;
   2341e:	bf04      	itt	eq
   23420:	2300      	moveq	r3, #0
   23422:	6023      	streq	r3, [r4, #0]
   23424:	f000 fc68 	bl	23cf8 <z_spin_unlock_valid>
   23428:	b960      	cbnz	r0, 23444 <z_pend_curr_irqlock+0x80>
   2342a:	4910      	ldr	r1, [pc, #64]	; (2346c <z_pend_curr_irqlock+0xa8>)
   2342c:	2361      	movs	r3, #97	; 0x61
   2342e:	4a0c      	ldr	r2, [pc, #48]	; (23460 <z_pend_curr_irqlock+0x9c>)
   23430:	480c      	ldr	r0, [pc, #48]	; (23464 <z_pend_curr_irqlock+0xa0>)
   23432:	f002 fb84 	bl	25b3e <printk>
   23436:	480e      	ldr	r0, [pc, #56]	; (23470 <z_pend_curr_irqlock+0xac>)
   23438:	f002 fb81 	bl	25b3e <printk>
   2343c:	2161      	movs	r1, #97	; 0x61
   2343e:	4808      	ldr	r0, [pc, #32]	; (23460 <z_pend_curr_irqlock+0x9c>)
   23440:	f002 fb8a 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   23444:	f387 8811 	msr	BASEPRI, r7
   23448:	f3bf 8f6f 	isb	sy
}
   2344c:	4630      	mov	r0, r6
   2344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23450:	20022120 	.word	0x20022120
   23454:	20022154 	.word	0x20022154
   23458:	20022158 	.word	0x20022158
   2345c:	0002b68e 	.word	0x0002b68e
   23460:	0002b666 	.word	0x0002b666
   23464:	0002abaa 	.word	0x0002abaa
   23468:	0002b6a3 	.word	0x0002b6a3
   2346c:	0002b6b8 	.word	0x0002b6b8
   23470:	0002b6cf 	.word	0x0002b6cf

00023474 <z_pend_curr>:
{
   23474:	b538      	push	{r3, r4, r5, lr}
   23476:	4605      	mov	r5, r0
   23478:	460c      	mov	r4, r1
   2347a:	4611      	mov	r1, r2
	pending_current = _current;
   2347c:	4a0e      	ldr	r2, [pc, #56]	; (234b8 <z_pend_curr+0x44>)
   2347e:	6890      	ldr	r0, [r2, #8]
   23480:	4a0e      	ldr	r2, [pc, #56]	; (234bc <z_pend_curr+0x48>)
   23482:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   23484:	461a      	mov	r2, r3
   23486:	f7ff ff41 	bl	2330c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2348a:	4628      	mov	r0, r5
   2348c:	f000 fc34 	bl	23cf8 <z_spin_unlock_valid>
   23490:	b960      	cbnz	r0, 234ac <z_pend_curr+0x38>
   23492:	490b      	ldr	r1, [pc, #44]	; (234c0 <z_pend_curr+0x4c>)
   23494:	2378      	movs	r3, #120	; 0x78
   23496:	4a0b      	ldr	r2, [pc, #44]	; (234c4 <z_pend_curr+0x50>)
   23498:	480b      	ldr	r0, [pc, #44]	; (234c8 <z_pend_curr+0x54>)
   2349a:	f002 fb50 	bl	25b3e <printk>
   2349e:	480b      	ldr	r0, [pc, #44]	; (234cc <z_pend_curr+0x58>)
   234a0:	f002 fb4d 	bl	25b3e <printk>
   234a4:	2178      	movs	r1, #120	; 0x78
   234a6:	4807      	ldr	r0, [pc, #28]	; (234c4 <z_pend_curr+0x50>)
   234a8:	f002 fb56 	bl	25b58 <assert_post_action>
   234ac:	4620      	mov	r0, r4
}
   234ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   234b2:	f7ed bd6d 	b.w	10f90 <__swap>
   234b6:	bf00      	nop
   234b8:	20022120 	.word	0x20022120
   234bc:	20022154 	.word	0x20022154
   234c0:	0002b6b8 	.word	0x0002b6b8
   234c4:	0002b666 	.word	0x0002b666
   234c8:	0002abaa 	.word	0x0002abaa
   234cc:	0002b6cf 	.word	0x0002b6cf

000234d0 <z_thread_priority_set>:
{
   234d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234d2:	4604      	mov	r4, r0
   234d4:	460d      	mov	r5, r1
	__asm__ volatile(
   234d6:	f04f 0320 	mov.w	r3, #32
   234da:	f3ef 8611 	mrs	r6, BASEPRI
   234de:	f383 8811 	msr	BASEPRI, r3
   234e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   234e6:	4839      	ldr	r0, [pc, #228]	; (235cc <z_thread_priority_set+0xfc>)
   234e8:	f000 fbf8 	bl	23cdc <z_spin_lock_valid>
   234ec:	b960      	cbnz	r0, 23508 <z_thread_priority_set+0x38>
   234ee:	4938      	ldr	r1, [pc, #224]	; (235d0 <z_thread_priority_set+0x100>)
   234f0:	234e      	movs	r3, #78	; 0x4e
   234f2:	4a38      	ldr	r2, [pc, #224]	; (235d4 <z_thread_priority_set+0x104>)
   234f4:	4838      	ldr	r0, [pc, #224]	; (235d8 <z_thread_priority_set+0x108>)
   234f6:	f002 fb22 	bl	25b3e <printk>
   234fa:	4838      	ldr	r0, [pc, #224]	; (235dc <z_thread_priority_set+0x10c>)
   234fc:	f002 fb1f 	bl	25b3e <printk>
   23500:	214e      	movs	r1, #78	; 0x4e
   23502:	4834      	ldr	r0, [pc, #208]	; (235d4 <z_thread_priority_set+0x104>)
   23504:	f002 fb28 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23508:	4830      	ldr	r0, [pc, #192]	; (235cc <z_thread_priority_set+0xfc>)
   2350a:	f000 fc05 	bl	23d18 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   2350e:	4620      	mov	r0, r4
   23510:	f004 f899 	bl	27646 <z_is_thread_ready>
   23514:	b26d      	sxtb	r5, r5
		if (need_sched) {
   23516:	4607      	mov	r7, r0
   23518:	2800      	cmp	r0, #0
   2351a:	d054      	beq.n	235c6 <z_thread_priority_set+0xf6>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2351c:	4621      	mov	r1, r4
   2351e:	4830      	ldr	r0, [pc, #192]	; (235e0 <z_thread_priority_set+0x110>)
   23520:	f7ff fbba 	bl	22c98 <z_priq_dumb_remove>
	return thread == _idle_thread;
   23524:	4b2f      	ldr	r3, [pc, #188]	; (235e4 <z_thread_priority_set+0x114>)
			thread->base.prio = prio;
   23526:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!is_idle(thread));
   23528:	681b      	ldr	r3, [r3, #0]
   2352a:	429c      	cmp	r4, r3
   2352c:	d10b      	bne.n	23546 <z_thread_priority_set+0x76>
   2352e:	492e      	ldr	r1, [pc, #184]	; (235e8 <z_thread_priority_set+0x118>)
   23530:	4829      	ldr	r0, [pc, #164]	; (235d8 <z_thread_priority_set+0x108>)
   23532:	f240 2376 	movw	r3, #630	; 0x276
   23536:	4a2d      	ldr	r2, [pc, #180]	; (235ec <z_thread_priority_set+0x11c>)
   23538:	f002 fb01 	bl	25b3e <printk>
   2353c:	f240 2176 	movw	r1, #630	; 0x276
   23540:	482a      	ldr	r0, [pc, #168]	; (235ec <z_thread_priority_set+0x11c>)
   23542:	f002 fb09 	bl	25b58 <assert_post_action>
	return list->head == list;
   23546:	4a2a      	ldr	r2, [pc, #168]	; (235f0 <z_thread_priority_set+0x120>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23548:	f102 0128 	add.w	r1, r2, #40	; 0x28
   2354c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   23550:	428b      	cmp	r3, r1
   23552:	d00b      	beq.n	2356c <z_thread_priority_set+0x9c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23554:	b153      	cbz	r3, 2356c <z_thread_priority_set+0x9c>
	if (t1->base.prio < t2->base.prio) {
   23556:	f994 500e 	ldrsb.w	r5, [r4, #14]
   2355a:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   2355e:	45ac      	cmp	ip, r5
   23560:	dc0a      	bgt.n	23578 <z_thread_priority_set+0xa8>
	return (node == list->tail) ? NULL : node->next;
   23562:	4283      	cmp	r3, r0
   23564:	d002      	beq.n	2356c <z_thread_priority_set+0x9c>
   23566:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23568:	2b00      	cmp	r3, #0
   2356a:	d1f6      	bne.n	2355a <z_thread_priority_set+0x8a>
	node->prev = list->tail;
   2356c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   23570:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23572:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23574:	62d4      	str	r4, [r2, #44]	; 0x2c
   23576:	e005      	b.n	23584 <z_thread_priority_set+0xb4>
	node->prev = successor->prev;
   23578:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2357a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2357e:	685a      	ldr	r2, [r3, #4]
   23580:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23582:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23584:	2001      	movs	r0, #1
   23586:	f7ff fc0b 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2358a:	4810      	ldr	r0, [pc, #64]	; (235cc <z_thread_priority_set+0xfc>)
   2358c:	f000 fbb4 	bl	23cf8 <z_spin_unlock_valid>
   23590:	b960      	cbnz	r0, 235ac <z_thread_priority_set+0xdc>
   23592:	4918      	ldr	r1, [pc, #96]	; (235f4 <z_thread_priority_set+0x124>)
   23594:	2361      	movs	r3, #97	; 0x61
   23596:	4a0f      	ldr	r2, [pc, #60]	; (235d4 <z_thread_priority_set+0x104>)
   23598:	480f      	ldr	r0, [pc, #60]	; (235d8 <z_thread_priority_set+0x108>)
   2359a:	f002 fad0 	bl	25b3e <printk>
   2359e:	4816      	ldr	r0, [pc, #88]	; (235f8 <z_thread_priority_set+0x128>)
   235a0:	f002 facd 	bl	25b3e <printk>
   235a4:	2161      	movs	r1, #97	; 0x61
   235a6:	480b      	ldr	r0, [pc, #44]	; (235d4 <z_thread_priority_set+0x104>)
   235a8:	f002 fad6 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   235ac:	f386 8811 	msr	BASEPRI, r6
   235b0:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
   235b4:	b14f      	cbz	r7, 235ca <z_thread_priority_set+0xfa>
   235b6:	4b0e      	ldr	r3, [pc, #56]	; (235f0 <z_thread_priority_set+0x120>)
   235b8:	689b      	ldr	r3, [r3, #8]
   235ba:	7bdb      	ldrb	r3, [r3, #15]
   235bc:	b92b      	cbnz	r3, 235ca <z_thread_priority_set+0xfa>
}
   235be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule_unlocked();
   235c2:	f004 b861 	b.w	27688 <z_reschedule_unlocked>
			thread->base.prio = prio;
   235c6:	73a5      	strb	r5, [r4, #14]
   235c8:	e7df      	b.n	2358a <z_thread_priority_set+0xba>
}
   235ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235cc:	20022158 	.word	0x20022158
   235d0:	0002b68e 	.word	0x0002b68e
   235d4:	0002b666 	.word	0x0002b666
   235d8:	0002abaa 	.word	0x0002abaa
   235dc:	0002b6a3 	.word	0x0002b6a3
   235e0:	20022148 	.word	0x20022148
   235e4:	0002a568 	.word	0x0002a568
   235e8:	0002c400 	.word	0x0002c400
   235ec:	0002c39b 	.word	0x0002c39b
   235f0:	20022120 	.word	0x20022120
   235f4:	0002b6b8 	.word	0x0002b6b8
   235f8:	0002b6cf 	.word	0x0002b6cf

000235fc <z_unpend_first_thread>:
{
   235fc:	b538      	push	{r3, r4, r5, lr}
   235fe:	4604      	mov	r4, r0
	__asm__ volatile(
   23600:	f04f 0320 	mov.w	r3, #32
   23604:	f3ef 8511 	mrs	r5, BASEPRI
   23608:	f383 8811 	msr	BASEPRI, r3
   2360c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23610:	4839      	ldr	r0, [pc, #228]	; (236f8 <z_unpend_first_thread+0xfc>)
   23612:	f000 fb63 	bl	23cdc <z_spin_lock_valid>
   23616:	b960      	cbnz	r0, 23632 <z_unpend_first_thread+0x36>
   23618:	4938      	ldr	r1, [pc, #224]	; (236fc <z_unpend_first_thread+0x100>)
   2361a:	234e      	movs	r3, #78	; 0x4e
   2361c:	4a38      	ldr	r2, [pc, #224]	; (23700 <z_unpend_first_thread+0x104>)
   2361e:	4839      	ldr	r0, [pc, #228]	; (23704 <z_unpend_first_thread+0x108>)
   23620:	f002 fa8d 	bl	25b3e <printk>
   23624:	4838      	ldr	r0, [pc, #224]	; (23708 <z_unpend_first_thread+0x10c>)
   23626:	f002 fa8a 	bl	25b3e <printk>
   2362a:	214e      	movs	r1, #78	; 0x4e
   2362c:	4834      	ldr	r0, [pc, #208]	; (23700 <z_unpend_first_thread+0x104>)
   2362e:	f002 fa93 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23632:	4831      	ldr	r0, [pc, #196]	; (236f8 <z_unpend_first_thread+0xfc>)
   23634:	f000 fb70 	bl	23d18 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   23638:	4620      	mov	r0, r4
   2363a:	f004 f82f 	bl	2769c <z_priq_dumb_best>
   2363e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23640:	482d      	ldr	r0, [pc, #180]	; (236f8 <z_unpend_first_thread+0xfc>)
   23642:	f000 fb59 	bl	23cf8 <z_spin_unlock_valid>
   23646:	b960      	cbnz	r0, 23662 <z_unpend_first_thread+0x66>
   23648:	4930      	ldr	r1, [pc, #192]	; (2370c <z_unpend_first_thread+0x110>)
   2364a:	2361      	movs	r3, #97	; 0x61
   2364c:	4a2c      	ldr	r2, [pc, #176]	; (23700 <z_unpend_first_thread+0x104>)
   2364e:	482d      	ldr	r0, [pc, #180]	; (23704 <z_unpend_first_thread+0x108>)
   23650:	f002 fa75 	bl	25b3e <printk>
   23654:	482e      	ldr	r0, [pc, #184]	; (23710 <z_unpend_first_thread+0x114>)
   23656:	f002 fa72 	bl	25b3e <printk>
   2365a:	2161      	movs	r1, #97	; 0x61
   2365c:	4828      	ldr	r0, [pc, #160]	; (23700 <z_unpend_first_thread+0x104>)
   2365e:	f002 fa7b 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   23662:	f385 8811 	msr	BASEPRI, r5
   23666:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2366a:	2c00      	cmp	r4, #0
   2366c:	d041      	beq.n	236f2 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   2366e:	f04f 0320 	mov.w	r3, #32
   23672:	f3ef 8511 	mrs	r5, BASEPRI
   23676:	f383 8811 	msr	BASEPRI, r3
   2367a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2367e:	481e      	ldr	r0, [pc, #120]	; (236f8 <z_unpend_first_thread+0xfc>)
   23680:	f000 fb2c 	bl	23cdc <z_spin_lock_valid>
   23684:	b960      	cbnz	r0, 236a0 <z_unpend_first_thread+0xa4>
   23686:	491d      	ldr	r1, [pc, #116]	; (236fc <z_unpend_first_thread+0x100>)
   23688:	234e      	movs	r3, #78	; 0x4e
   2368a:	4a1d      	ldr	r2, [pc, #116]	; (23700 <z_unpend_first_thread+0x104>)
   2368c:	481d      	ldr	r0, [pc, #116]	; (23704 <z_unpend_first_thread+0x108>)
   2368e:	f002 fa56 	bl	25b3e <printk>
   23692:	481d      	ldr	r0, [pc, #116]	; (23708 <z_unpend_first_thread+0x10c>)
   23694:	f002 fa53 	bl	25b3e <printk>
   23698:	214e      	movs	r1, #78	; 0x4e
   2369a:	4819      	ldr	r0, [pc, #100]	; (23700 <z_unpend_first_thread+0x104>)
   2369c:	f002 fa5c 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   236a0:	4815      	ldr	r0, [pc, #84]	; (236f8 <z_unpend_first_thread+0xfc>)
   236a2:	f000 fb39 	bl	23d18 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   236a6:	f104 0008 	add.w	r0, r4, #8
   236aa:	f7ff f975 	bl	22998 <pended_on.isra.15>
   236ae:	4621      	mov	r1, r4
   236b0:	f7ff faf2 	bl	22c98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   236b4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   236b6:	4810      	ldr	r0, [pc, #64]	; (236f8 <z_unpend_first_thread+0xfc>)
   236b8:	f023 0302 	bic.w	r3, r3, #2
   236bc:	7363      	strb	r3, [r4, #13]
   236be:	f000 fb1b 	bl	23cf8 <z_spin_unlock_valid>
   236c2:	b960      	cbnz	r0, 236de <z_unpend_first_thread+0xe2>
   236c4:	4911      	ldr	r1, [pc, #68]	; (2370c <z_unpend_first_thread+0x110>)
   236c6:	2361      	movs	r3, #97	; 0x61
   236c8:	4a0d      	ldr	r2, [pc, #52]	; (23700 <z_unpend_first_thread+0x104>)
   236ca:	480e      	ldr	r0, [pc, #56]	; (23704 <z_unpend_first_thread+0x108>)
   236cc:	f002 fa37 	bl	25b3e <printk>
   236d0:	480f      	ldr	r0, [pc, #60]	; (23710 <z_unpend_first_thread+0x114>)
   236d2:	f002 fa34 	bl	25b3e <printk>
   236d6:	2161      	movs	r1, #97	; 0x61
   236d8:	4809      	ldr	r0, [pc, #36]	; (23700 <z_unpend_first_thread+0x104>)
   236da:	f002 fa3d 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   236de:	f385 8811 	msr	BASEPRI, r5
   236e2:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   236e6:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   236e8:	f104 0018 	add.w	r0, r4, #24
   236ec:	60a3      	str	r3, [r4, #8]
   236ee:	f000 fd3b 	bl	24168 <z_abort_timeout>
}
   236f2:	4620      	mov	r0, r4
   236f4:	bd38      	pop	{r3, r4, r5, pc}
   236f6:	bf00      	nop
   236f8:	20022158 	.word	0x20022158
   236fc:	0002b68e 	.word	0x0002b68e
   23700:	0002b666 	.word	0x0002b666
   23704:	0002abaa 	.word	0x0002abaa
   23708:	0002b6a3 	.word	0x0002b6a3
   2370c:	0002b6b8 	.word	0x0002b6b8
   23710:	0002b6cf 	.word	0x0002b6cf

00023714 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   23714:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   23716:	4b04      	ldr	r3, [pc, #16]	; (23728 <z_sched_init+0x14>)
   23718:	4608      	mov	r0, r1
   2371a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2371e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   23722:	f7ff b951 	b.w	229c8 <k_sched_time_slice_set>
   23726:	bf00      	nop
   23728:	20022120 	.word	0x20022120

0002372c <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   2372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2372e:	f3ef 8305 	mrs	r3, IPSR
   23732:	2b0d      	cmp	r3, #13
   23734:	d804      	bhi.n	23740 <z_impl_k_yield+0x14>
   23736:	b193      	cbz	r3, 2375e <z_impl_k_yield+0x32>
   23738:	4b44      	ldr	r3, [pc, #272]	; (2384c <z_impl_k_yield+0x120>)
   2373a:	685b      	ldr	r3, [r3, #4]
   2373c:	051b      	lsls	r3, r3, #20
   2373e:	d40e      	bmi.n	2375e <z_impl_k_yield+0x32>
	__ASSERT(!z_is_in_isr(), "");
   23740:	4943      	ldr	r1, [pc, #268]	; (23850 <z_impl_k_yield+0x124>)
   23742:	f240 337e 	movw	r3, #894	; 0x37e
   23746:	4a43      	ldr	r2, [pc, #268]	; (23854 <z_impl_k_yield+0x128>)
   23748:	4843      	ldr	r0, [pc, #268]	; (23858 <z_impl_k_yield+0x12c>)
   2374a:	f002 f9f8 	bl	25b3e <printk>
   2374e:	4843      	ldr	r0, [pc, #268]	; (2385c <z_impl_k_yield+0x130>)
   23750:	f002 f9f5 	bl	25b3e <printk>
   23754:	f240 317e 	movw	r1, #894	; 0x37e
   23758:	483e      	ldr	r0, [pc, #248]	; (23854 <z_impl_k_yield+0x128>)
   2375a:	f002 f9fd 	bl	25b58 <assert_post_action>

	if (!is_idle(_current)) {
   2375e:	4d40      	ldr	r5, [pc, #256]	; (23860 <z_impl_k_yield+0x134>)
	return thread == _idle_thread;
   23760:	4e40      	ldr	r6, [pc, #256]	; (23864 <z_impl_k_yield+0x138>)
	if (!is_idle(_current)) {
   23762:	68a9      	ldr	r1, [r5, #8]
   23764:	6832      	ldr	r2, [r6, #0]
   23766:	4291      	cmp	r1, r2
   23768:	d064      	beq.n	23834 <z_impl_k_yield+0x108>
	__asm__ volatile(
   2376a:	f04f 0320 	mov.w	r3, #32
   2376e:	f3ef 8711 	mrs	r7, BASEPRI
   23772:	f383 8811 	msr	BASEPRI, r3
   23776:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2377a:	483b      	ldr	r0, [pc, #236]	; (23868 <z_impl_k_yield+0x13c>)
   2377c:	f000 faae 	bl	23cdc <z_spin_lock_valid>
   23780:	b960      	cbnz	r0, 2379c <z_impl_k_yield+0x70>
   23782:	493a      	ldr	r1, [pc, #232]	; (2386c <z_impl_k_yield+0x140>)
   23784:	234e      	movs	r3, #78	; 0x4e
   23786:	4a3a      	ldr	r2, [pc, #232]	; (23870 <z_impl_k_yield+0x144>)
   23788:	4833      	ldr	r0, [pc, #204]	; (23858 <z_impl_k_yield+0x12c>)
   2378a:	f002 f9d8 	bl	25b3e <printk>
   2378e:	4839      	ldr	r0, [pc, #228]	; (23874 <z_impl_k_yield+0x148>)
   23790:	f002 f9d5 	bl	25b3e <printk>
   23794:	214e      	movs	r1, #78	; 0x4e
   23796:	4836      	ldr	r0, [pc, #216]	; (23870 <z_impl_k_yield+0x144>)
   23798:	f002 f9de 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   2379c:	4832      	ldr	r0, [pc, #200]	; (23868 <z_impl_k_yield+0x13c>)
   2379e:	f000 fabb 	bl	23d18 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   237a2:	68a9      	ldr	r1, [r5, #8]
   237a4:	4834      	ldr	r0, [pc, #208]	; (23878 <z_impl_k_yield+0x14c>)
   237a6:	f7ff fa77 	bl	22c98 <z_priq_dumb_remove>
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   237aa:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!is_idle(thread));
   237ac:	6833      	ldr	r3, [r6, #0]
   237ae:	429c      	cmp	r4, r3
   237b0:	d10b      	bne.n	237ca <z_impl_k_yield+0x9e>
   237b2:	4932      	ldr	r1, [pc, #200]	; (2387c <z_impl_k_yield+0x150>)
   237b4:	4828      	ldr	r0, [pc, #160]	; (23858 <z_impl_k_yield+0x12c>)
   237b6:	f240 2376 	movw	r3, #630	; 0x276
   237ba:	4a26      	ldr	r2, [pc, #152]	; (23854 <z_impl_k_yield+0x128>)
   237bc:	f002 f9bf 	bl	25b3e <printk>
   237c0:	f240 2176 	movw	r1, #630	; 0x276
   237c4:	4823      	ldr	r0, [pc, #140]	; (23854 <z_impl_k_yield+0x128>)
   237c6:	f002 f9c7 	bl	25b58 <assert_post_action>
   237ca:	e9d5 310a 	ldrd	r3, r1, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   237ce:	4a2a      	ldr	r2, [pc, #168]	; (23878 <z_impl_k_yield+0x14c>)
   237d0:	4293      	cmp	r3, r2
   237d2:	d00b      	beq.n	237ec <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   237d4:	b153      	cbz	r3, 237ec <z_impl_k_yield+0xc0>
	if (t1->base.prio < t2->base.prio) {
   237d6:	f994 000e 	ldrsb.w	r0, [r4, #14]
   237da:	f993 600e 	ldrsb.w	r6, [r3, #14]
   237de:	4286      	cmp	r6, r0
   237e0:	dc0a      	bgt.n	237f8 <z_impl_k_yield+0xcc>
	return (node == list->tail) ? NULL : node->next;
   237e2:	4299      	cmp	r1, r3
   237e4:	d002      	beq.n	237ec <z_impl_k_yield+0xc0>
   237e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   237e8:	2b00      	cmp	r3, #0
   237ea:	d1f6      	bne.n	237da <z_impl_k_yield+0xae>
	node->prev = list->tail;
   237ec:	e9c4 2100 	strd	r2, r1, [r4]
	list->tail->next = node;
   237f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   237f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   237f4:	62ec      	str	r4, [r5, #44]	; 0x2c
   237f6:	e005      	b.n	23804 <z_impl_k_yield+0xd8>
	node->prev = successor->prev;
   237f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   237fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   237fe:	685a      	ldr	r2, [r3, #4]
   23800:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23802:	605c      	str	r4, [r3, #4]
					      _current);
			}
			update_cache(1);
   23804:	2001      	movs	r0, #1
   23806:	f7ff facb 	bl	22da0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2380a:	4817      	ldr	r0, [pc, #92]	; (23868 <z_impl_k_yield+0x13c>)
   2380c:	f000 fa74 	bl	23cf8 <z_spin_unlock_valid>
   23810:	b960      	cbnz	r0, 2382c <z_impl_k_yield+0x100>
   23812:	491b      	ldr	r1, [pc, #108]	; (23880 <z_impl_k_yield+0x154>)
   23814:	2361      	movs	r3, #97	; 0x61
   23816:	4a16      	ldr	r2, [pc, #88]	; (23870 <z_impl_k_yield+0x144>)
   23818:	480f      	ldr	r0, [pc, #60]	; (23858 <z_impl_k_yield+0x12c>)
   2381a:	f002 f990 	bl	25b3e <printk>
   2381e:	4819      	ldr	r0, [pc, #100]	; (23884 <z_impl_k_yield+0x158>)
   23820:	f002 f98d 	bl	25b3e <printk>
   23824:	2161      	movs	r1, #97	; 0x61
   23826:	4812      	ldr	r0, [pc, #72]	; (23870 <z_impl_k_yield+0x144>)
   23828:	f002 f996 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   2382c:	f387 8811 	msr	BASEPRI, r7
   23830:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23834:	f04f 0320 	mov.w	r3, #32
   23838:	f3ef 8011 	mrs	r0, BASEPRI
   2383c:	f383 8811 	msr	BASEPRI, r3
   23840:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   23844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23848:	f7ed bba2 	b.w	10f90 <__swap>
   2384c:	e000ed00 	.word	0xe000ed00
   23850:	0002c33e 	.word	0x0002c33e
   23854:	0002c39b 	.word	0x0002c39b
   23858:	0002abaa 	.word	0x0002abaa
   2385c:	0002b126 	.word	0x0002b126
   23860:	20022120 	.word	0x20022120
   23864:	0002a568 	.word	0x0002a568
   23868:	20022158 	.word	0x20022158
   2386c:	0002b68e 	.word	0x0002b68e
   23870:	0002b666 	.word	0x0002b666
   23874:	0002b6a3 	.word	0x0002b6a3
   23878:	20022148 	.word	0x20022148
   2387c:	0002c400 	.word	0x0002c400
   23880:	0002b6b8 	.word	0x0002b6b8
   23884:	0002b6cf 	.word	0x0002b6cf

00023888 <z_tick_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   23888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2388c:	4604      	mov	r4, r0
   2388e:	f3ef 8305 	mrs	r3, IPSR
   23892:	2b0d      	cmp	r3, #13
   23894:	d804      	bhi.n	238a0 <z_tick_sleep+0x18>
   23896:	b193      	cbz	r3, 238be <z_tick_sleep+0x36>
   23898:	4b3e      	ldr	r3, [pc, #248]	; (23994 <z_tick_sleep+0x10c>)
   2389a:	685b      	ldr	r3, [r3, #4]
   2389c:	051a      	lsls	r2, r3, #20
   2389e:	d40e      	bmi.n	238be <z_tick_sleep+0x36>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_is_in_isr(), "");
   238a0:	493d      	ldr	r1, [pc, #244]	; (23998 <z_tick_sleep+0x110>)
   238a2:	f44f 7366 	mov.w	r3, #920	; 0x398
   238a6:	4a3d      	ldr	r2, [pc, #244]	; (2399c <z_tick_sleep+0x114>)
   238a8:	483d      	ldr	r0, [pc, #244]	; (239a0 <z_tick_sleep+0x118>)
   238aa:	f002 f948 	bl	25b3e <printk>
   238ae:	483d      	ldr	r0, [pc, #244]	; (239a4 <z_tick_sleep+0x11c>)
   238b0:	f002 f945 	bl	25b3e <printk>
   238b4:	f44f 7166 	mov.w	r1, #920	; 0x398
   238b8:	4838      	ldr	r0, [pc, #224]	; (2399c <z_tick_sleep+0x114>)
   238ba:	f002 f94d 	bl	25b58 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   238be:	b92c      	cbnz	r4, 238cc <z_tick_sleep+0x44>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   238c0:	f7ff ff34 	bl	2372c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   238c4:	4620      	mov	r0, r4
   238c6:	b002      	add	sp, #8
   238c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   238cc:	f003 ff35 	bl	2773a <z_tick_get_32>
	struct k_spinlock local_lock = {};
   238d0:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   238d2:	f104 0801 	add.w	r8, r4, #1
	struct k_spinlock local_lock = {};
   238d6:	ae02      	add	r6, sp, #8
	expected_wakeup_time = ticks + z_tick_get_32();
   238d8:	eb08 0400 	add.w	r4, r8, r0
	struct k_spinlock local_lock = {};
   238dc:	f846 3d04 	str.w	r3, [r6, #-4]!
   238e0:	f04f 0320 	mov.w	r3, #32
   238e4:	f3ef 8711 	mrs	r7, BASEPRI
   238e8:	f383 8811 	msr	BASEPRI, r3
   238ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   238f0:	4630      	mov	r0, r6
   238f2:	f000 f9f3 	bl	23cdc <z_spin_lock_valid>
   238f6:	b960      	cbnz	r0, 23912 <z_tick_sleep+0x8a>
   238f8:	492b      	ldr	r1, [pc, #172]	; (239a8 <z_tick_sleep+0x120>)
   238fa:	234e      	movs	r3, #78	; 0x4e
   238fc:	4a2b      	ldr	r2, [pc, #172]	; (239ac <z_tick_sleep+0x124>)
   238fe:	4828      	ldr	r0, [pc, #160]	; (239a0 <z_tick_sleep+0x118>)
   23900:	f002 f91d 	bl	25b3e <printk>
   23904:	482a      	ldr	r0, [pc, #168]	; (239b0 <z_tick_sleep+0x128>)
   23906:	f002 f91a 	bl	25b3e <printk>
   2390a:	214e      	movs	r1, #78	; 0x4e
   2390c:	4827      	ldr	r0, [pc, #156]	; (239ac <z_tick_sleep+0x124>)
   2390e:	f002 f923 	bl	25b58 <assert_post_action>
	pending_current = _current;
   23912:	4d28      	ldr	r5, [pc, #160]	; (239b4 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   23914:	4630      	mov	r0, r6
   23916:	f000 f9ff 	bl	23d18 <z_spin_lock_set_owner>
   2391a:	4b27      	ldr	r3, [pc, #156]	; (239b8 <z_tick_sleep+0x130>)
   2391c:	68a8      	ldr	r0, [r5, #8]
   2391e:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   23920:	f7ff fc9c 	bl	2325c <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   23924:	68a8      	ldr	r0, [r5, #8]
   23926:	4642      	mov	r2, r8
   23928:	3018      	adds	r0, #24
   2392a:	4924      	ldr	r1, [pc, #144]	; (239bc <z_tick_sleep+0x134>)
   2392c:	f000 fb76 	bl	2401c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23930:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23932:	4630      	mov	r0, r6
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23934:	7b53      	ldrb	r3, [r2, #13]
   23936:	f043 0310 	orr.w	r3, r3, #16
   2393a:	7353      	strb	r3, [r2, #13]
   2393c:	f000 f9dc 	bl	23cf8 <z_spin_unlock_valid>
   23940:	b960      	cbnz	r0, 2395c <z_tick_sleep+0xd4>
   23942:	491f      	ldr	r1, [pc, #124]	; (239c0 <z_tick_sleep+0x138>)
   23944:	2378      	movs	r3, #120	; 0x78
   23946:	4a19      	ldr	r2, [pc, #100]	; (239ac <z_tick_sleep+0x124>)
   23948:	4815      	ldr	r0, [pc, #84]	; (239a0 <z_tick_sleep+0x118>)
   2394a:	f002 f8f8 	bl	25b3e <printk>
   2394e:	481d      	ldr	r0, [pc, #116]	; (239c4 <z_tick_sleep+0x13c>)
   23950:	f002 f8f5 	bl	25b3e <printk>
   23954:	2178      	movs	r1, #120	; 0x78
   23956:	4815      	ldr	r0, [pc, #84]	; (239ac <z_tick_sleep+0x124>)
   23958:	f002 f8fe 	bl	25b58 <assert_post_action>
   2395c:	4638      	mov	r0, r7
   2395e:	f7ed fb17 	bl	10f90 <__swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   23962:	68ab      	ldr	r3, [r5, #8]
   23964:	7b5b      	ldrb	r3, [r3, #13]
   23966:	06db      	lsls	r3, r3, #27
   23968:	d50e      	bpl.n	23988 <z_tick_sleep+0x100>
   2396a:	4917      	ldr	r1, [pc, #92]	; (239c8 <z_tick_sleep+0x140>)
   2396c:	f240 33b5 	movw	r3, #949	; 0x3b5
   23970:	4a0a      	ldr	r2, [pc, #40]	; (2399c <z_tick_sleep+0x114>)
   23972:	480b      	ldr	r0, [pc, #44]	; (239a0 <z_tick_sleep+0x118>)
   23974:	f002 f8e3 	bl	25b3e <printk>
   23978:	480a      	ldr	r0, [pc, #40]	; (239a4 <z_tick_sleep+0x11c>)
   2397a:	f002 f8e0 	bl	25b3e <printk>
   2397e:	f240 31b5 	movw	r1, #949	; 0x3b5
   23982:	4806      	ldr	r0, [pc, #24]	; (2399c <z_tick_sleep+0x114>)
   23984:	f002 f8e8 	bl	25b58 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   23988:	f003 fed7 	bl	2773a <z_tick_get_32>
   2398c:	1a24      	subs	r4, r4, r0
   2398e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   23992:	e797      	b.n	238c4 <z_tick_sleep+0x3c>
   23994:	e000ed00 	.word	0xe000ed00
   23998:	0002c33e 	.word	0x0002c33e
   2399c:	0002c39b 	.word	0x0002c39b
   239a0:	0002abaa 	.word	0x0002abaa
   239a4:	0002b126 	.word	0x0002b126
   239a8:	0002b68e 	.word	0x0002b68e
   239ac:	0002b666 	.word	0x0002b666
   239b0:	0002b6a3 	.word	0x0002b6a3
   239b4:	20022120 	.word	0x20022120
   239b8:	20022154 	.word	0x20022154
   239bc:	00023011 	.word	0x00023011
   239c0:	0002b6b8 	.word	0x0002b6b8
   239c4:	0002b6cf 	.word	0x0002b6cf
   239c8:	0002c411 	.word	0x0002c411

000239cc <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   239cc:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(ms != K_FOREVER, "");
   239ce:	1c43      	adds	r3, r0, #1
{
   239d0:	4604      	mov	r4, r0
	__ASSERT(ms != K_FOREVER, "");
   239d2:	d10e      	bne.n	239f2 <z_impl_k_sleep+0x26>
   239d4:	4911      	ldr	r1, [pc, #68]	; (23a1c <z_impl_k_sleep+0x50>)
   239d6:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   239da:	4a11      	ldr	r2, [pc, #68]	; (23a20 <z_impl_k_sleep+0x54>)
   239dc:	4811      	ldr	r0, [pc, #68]	; (23a24 <z_impl_k_sleep+0x58>)
   239de:	f002 f8ae 	bl	25b3e <printk>
   239e2:	4811      	ldr	r0, [pc, #68]	; (23a28 <z_impl_k_sleep+0x5c>)
   239e4:	f002 f8ab 	bl	25b3e <printk>
   239e8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   239ec:	480c      	ldr	r0, [pc, #48]	; (23a20 <z_impl_k_sleep+0x54>)
   239ee:	f002 f8b3 	bl	25b58 <assert_post_action>
   239f2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   239f6:	2100      	movs	r1, #0
   239f8:	480c      	ldr	r0, [pc, #48]	; (23a2c <z_impl_k_sleep+0x60>)
   239fa:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   239fe:	2300      	movs	r3, #0
   23a00:	fbc5 0104 	smlal	r0, r1, r5, r4
   23a04:	f7e8 fb9e 	bl	c144 <__aeabi_ldivmod>

	ticks = z_ms_to_ticks(ms);
	ticks = z_tick_sleep(ticks);
   23a08:	f7ff ff3e 	bl	23888 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   23a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a10:	fb80 2302 	smull	r2, r3, r0, r2
   23a14:	09d0      	lsrs	r0, r2, #7
	return __ticks_to_ms(ticks);
}
   23a16:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   23a1a:	bd38      	pop	{r3, r4, r5, pc}
   23a1c:	0002c3f5 	.word	0x0002c3f5
   23a20:	0002c39b 	.word	0x0002c39b
   23a24:	0002abaa 	.word	0x0002abaa
   23a28:	0002b126 	.word	0x0002b126
   23a2c:	0003e7ff 	.word	0x0003e7ff

00023a30 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   23a30:	4b01      	ldr	r3, [pc, #4]	; (23a38 <z_impl_k_current_get+0x8>)
   23a32:	6898      	ldr	r0, [r3, #8]
   23a34:	4770      	bx	lr
   23a36:	bf00      	nop
   23a38:	20022120 	.word	0x20022120

00023a3c <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   23a3c:	b570      	push	{r4, r5, r6, lr}
   23a3e:	4604      	mov	r4, r0
   23a40:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   23a42:	4615      	mov	r5, r2
   23a44:	b962      	cbnz	r2, 23a60 <z_impl_k_sem_init+0x24>
   23a46:	4912      	ldr	r1, [pc, #72]	; (23a90 <z_impl_k_sem_init+0x54>)
   23a48:	2346      	movs	r3, #70	; 0x46
   23a4a:	4a12      	ldr	r2, [pc, #72]	; (23a94 <z_impl_k_sem_init+0x58>)
   23a4c:	4812      	ldr	r0, [pc, #72]	; (23a98 <z_impl_k_sem_init+0x5c>)
   23a4e:	f002 f876 	bl	25b3e <printk>
   23a52:	4812      	ldr	r0, [pc, #72]	; (23a9c <z_impl_k_sem_init+0x60>)
   23a54:	f002 f873 	bl	25b3e <printk>
   23a58:	2146      	movs	r1, #70	; 0x46
   23a5a:	480e      	ldr	r0, [pc, #56]	; (23a94 <z_impl_k_sem_init+0x58>)
   23a5c:	f002 f87c 	bl	25b58 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   23a60:	42b5      	cmp	r5, r6
   23a62:	d20c      	bcs.n	23a7e <z_impl_k_sem_init+0x42>
   23a64:	490e      	ldr	r1, [pc, #56]	; (23aa0 <z_impl_k_sem_init+0x64>)
   23a66:	2347      	movs	r3, #71	; 0x47
   23a68:	4a0a      	ldr	r2, [pc, #40]	; (23a94 <z_impl_k_sem_init+0x58>)
   23a6a:	480b      	ldr	r0, [pc, #44]	; (23a98 <z_impl_k_sem_init+0x5c>)
   23a6c:	f002 f867 	bl	25b3e <printk>
   23a70:	480c      	ldr	r0, [pc, #48]	; (23aa4 <z_impl_k_sem_init+0x68>)
   23a72:	f002 f864 	bl	25b3e <printk>
   23a76:	2147      	movs	r1, #71	; 0x47
   23a78:	4806      	ldr	r0, [pc, #24]	; (23a94 <z_impl_k_sem_init+0x58>)
   23a7a:	f002 f86d 	bl	25b58 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   23a7e:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   23a82:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   23a86:	e9c4 4400 	strd	r4, r4, [r4]
   23a8a:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   23a8e:	bd70      	pop	{r4, r5, r6, pc}
   23a90:	0002c46b 	.word	0x0002c46b
   23a94:	0002c449 	.word	0x0002c449
   23a98:	0002abaa 	.word	0x0002abaa
   23a9c:	0002c477 	.word	0x0002c477
   23aa0:	0002c48e 	.word	0x0002c48e
   23aa4:	0002c4a5 	.word	0x0002c4a5

00023aa8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23aa8:	b570      	push	{r4, r5, r6, lr}
   23aaa:	4604      	mov	r4, r0
   23aac:	f04f 0320 	mov.w	r3, #32
   23ab0:	f3ef 8611 	mrs	r6, BASEPRI
   23ab4:	f383 8811 	msr	BASEPRI, r3
   23ab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23abc:	4819      	ldr	r0, [pc, #100]	; (23b24 <z_impl_k_sem_give+0x7c>)
   23abe:	f000 f90d 	bl	23cdc <z_spin_lock_valid>
   23ac2:	b960      	cbnz	r0, 23ade <z_impl_k_sem_give+0x36>
   23ac4:	4918      	ldr	r1, [pc, #96]	; (23b28 <z_impl_k_sem_give+0x80>)
   23ac6:	234e      	movs	r3, #78	; 0x4e
   23ac8:	4a18      	ldr	r2, [pc, #96]	; (23b2c <z_impl_k_sem_give+0x84>)
   23aca:	4819      	ldr	r0, [pc, #100]	; (23b30 <z_impl_k_sem_give+0x88>)
   23acc:	f002 f837 	bl	25b3e <printk>
   23ad0:	4818      	ldr	r0, [pc, #96]	; (23b34 <z_impl_k_sem_give+0x8c>)
   23ad2:	f002 f834 	bl	25b3e <printk>
   23ad6:	214e      	movs	r1, #78	; 0x4e
   23ad8:	4814      	ldr	r0, [pc, #80]	; (23b2c <z_impl_k_sem_give+0x84>)
   23ada:	f002 f83d 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ade:	4811      	ldr	r0, [pc, #68]	; (23b24 <z_impl_k_sem_give+0x7c>)
   23ae0:	f000 f91a 	bl	23d18 <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   23ae4:	4620      	mov	r0, r4
   23ae6:	f7ff fd89 	bl	235fc <z_unpend_first_thread>
	if (thread != NULL) {
   23aea:	4605      	mov	r5, r0
   23aec:	b170      	cbz	r0, 23b0c <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   23aee:	7b43      	ldrb	r3, [r0, #13]
   23af0:	06db      	lsls	r3, r3, #27
   23af2:	d103      	bne.n	23afc <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   23af4:	6983      	ldr	r3, [r0, #24]
   23af6:	b90b      	cbnz	r3, 23afc <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   23af8:	f7ff fa0a 	bl	22f10 <z_add_thread_to_ready_q>
   23afc:	2300      	movs	r3, #0
   23afe:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   23b00:	4631      	mov	r1, r6
}
   23b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   23b06:	4807      	ldr	r0, [pc, #28]	; (23b24 <z_impl_k_sem_give+0x7c>)
   23b08:	f7ff b80e 	b.w	22b28 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23b0c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23b10:	429a      	cmp	r2, r3
   23b12:	bf18      	it	ne
   23b14:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23b16:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23b18:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23b1a:	f104 0010 	add.w	r0, r4, #16
   23b1e:	f003 fe64 	bl	277ea <z_handle_obj_poll_events>
   23b22:	e7ed      	b.n	23b00 <z_impl_k_sem_give+0x58>
   23b24:	20022164 	.word	0x20022164
   23b28:	0002b68e 	.word	0x0002b68e
   23b2c:	0002b666 	.word	0x0002b666
   23b30:	0002abaa 	.word	0x0002abaa
   23b34:	0002b6a3 	.word	0x0002b6a3

00023b38 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   23b38:	b570      	push	{r4, r5, r6, lr}
   23b3a:	4605      	mov	r5, r0
   23b3c:	460e      	mov	r6, r1
   23b3e:	f3ef 8305 	mrs	r3, IPSR
   23b42:	2b0d      	cmp	r3, #13
   23b44:	d804      	bhi.n	23b50 <z_impl_k_sem_take+0x18>
   23b46:	b18b      	cbz	r3, 23b6c <z_impl_k_sem_take+0x34>
   23b48:	4b34      	ldr	r3, [pc, #208]	; (23c1c <z_impl_k_sem_take+0xe4>)
   23b4a:	685b      	ldr	r3, [r3, #4]
   23b4c:	051b      	lsls	r3, r3, #20
   23b4e:	d40d      	bmi.n	23b6c <z_impl_k_sem_take+0x34>
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   23b50:	b166      	cbz	r6, 23b6c <z_impl_k_sem_take+0x34>
   23b52:	4933      	ldr	r1, [pc, #204]	; (23c20 <z_impl_k_sem_take+0xe8>)
   23b54:	238c      	movs	r3, #140	; 0x8c
   23b56:	4a33      	ldr	r2, [pc, #204]	; (23c24 <z_impl_k_sem_take+0xec>)
   23b58:	4833      	ldr	r0, [pc, #204]	; (23c28 <z_impl_k_sem_take+0xf0>)
   23b5a:	f001 fff0 	bl	25b3e <printk>
   23b5e:	4833      	ldr	r0, [pc, #204]	; (23c2c <z_impl_k_sem_take+0xf4>)
   23b60:	f001 ffed 	bl	25b3e <printk>
   23b64:	218c      	movs	r1, #140	; 0x8c
   23b66:	482f      	ldr	r0, [pc, #188]	; (23c24 <z_impl_k_sem_take+0xec>)
   23b68:	f001 fff6 	bl	25b58 <assert_post_action>
   23b6c:	f04f 0320 	mov.w	r3, #32
   23b70:	f3ef 8411 	mrs	r4, BASEPRI
   23b74:	f383 8811 	msr	BASEPRI, r3
   23b78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23b7c:	482c      	ldr	r0, [pc, #176]	; (23c30 <z_impl_k_sem_take+0xf8>)
   23b7e:	f000 f8ad 	bl	23cdc <z_spin_lock_valid>
   23b82:	b960      	cbnz	r0, 23b9e <z_impl_k_sem_take+0x66>
   23b84:	492b      	ldr	r1, [pc, #172]	; (23c34 <z_impl_k_sem_take+0xfc>)
   23b86:	234e      	movs	r3, #78	; 0x4e
   23b88:	4a2b      	ldr	r2, [pc, #172]	; (23c38 <z_impl_k_sem_take+0x100>)
   23b8a:	4827      	ldr	r0, [pc, #156]	; (23c28 <z_impl_k_sem_take+0xf0>)
   23b8c:	f001 ffd7 	bl	25b3e <printk>
   23b90:	482a      	ldr	r0, [pc, #168]	; (23c3c <z_impl_k_sem_take+0x104>)
   23b92:	f001 ffd4 	bl	25b3e <printk>
   23b96:	214e      	movs	r1, #78	; 0x4e
   23b98:	4827      	ldr	r0, [pc, #156]	; (23c38 <z_impl_k_sem_take+0x100>)
   23b9a:	f001 ffdd 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23b9e:	4824      	ldr	r0, [pc, #144]	; (23c30 <z_impl_k_sem_take+0xf8>)
   23ba0:	f000 f8ba 	bl	23d18 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   23ba4:	68ab      	ldr	r3, [r5, #8]
   23ba6:	b1c3      	cbz	r3, 23bda <z_impl_k_sem_take+0xa2>
		sem->count--;
   23ba8:	3b01      	subs	r3, #1
   23baa:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23bac:	4820      	ldr	r0, [pc, #128]	; (23c30 <z_impl_k_sem_take+0xf8>)
   23bae:	f000 f8a3 	bl	23cf8 <z_spin_unlock_valid>
   23bb2:	b960      	cbnz	r0, 23bce <z_impl_k_sem_take+0x96>
   23bb4:	4922      	ldr	r1, [pc, #136]	; (23c40 <z_impl_k_sem_take+0x108>)
   23bb6:	2361      	movs	r3, #97	; 0x61
   23bb8:	4a1f      	ldr	r2, [pc, #124]	; (23c38 <z_impl_k_sem_take+0x100>)
   23bba:	481b      	ldr	r0, [pc, #108]	; (23c28 <z_impl_k_sem_take+0xf0>)
   23bbc:	f001 ffbf 	bl	25b3e <printk>
   23bc0:	4820      	ldr	r0, [pc, #128]	; (23c44 <z_impl_k_sem_take+0x10c>)
   23bc2:	f001 ffbc 	bl	25b3e <printk>
   23bc6:	2161      	movs	r1, #97	; 0x61
   23bc8:	481b      	ldr	r0, [pc, #108]	; (23c38 <z_impl_k_sem_take+0x100>)
   23bca:	f001 ffc5 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   23bce:	f384 8811 	msr	BASEPRI, r4
   23bd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   23bd6:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   23bd8:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   23bda:	b9be      	cbnz	r6, 23c0c <z_impl_k_sem_take+0xd4>
   23bdc:	4814      	ldr	r0, [pc, #80]	; (23c30 <z_impl_k_sem_take+0xf8>)
   23bde:	f000 f88b 	bl	23cf8 <z_spin_unlock_valid>
   23be2:	b960      	cbnz	r0, 23bfe <z_impl_k_sem_take+0xc6>
   23be4:	4916      	ldr	r1, [pc, #88]	; (23c40 <z_impl_k_sem_take+0x108>)
   23be6:	2361      	movs	r3, #97	; 0x61
   23be8:	4a13      	ldr	r2, [pc, #76]	; (23c38 <z_impl_k_sem_take+0x100>)
   23bea:	480f      	ldr	r0, [pc, #60]	; (23c28 <z_impl_k_sem_take+0xf0>)
   23bec:	f001 ffa7 	bl	25b3e <printk>
   23bf0:	4814      	ldr	r0, [pc, #80]	; (23c44 <z_impl_k_sem_take+0x10c>)
   23bf2:	f001 ffa4 	bl	25b3e <printk>
   23bf6:	2161      	movs	r1, #97	; 0x61
   23bf8:	480f      	ldr	r0, [pc, #60]	; (23c38 <z_impl_k_sem_take+0x100>)
   23bfa:	f001 ffad 	bl	25b58 <assert_post_action>
   23bfe:	f384 8811 	msr	BASEPRI, r4
   23c02:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   23c06:	f06f 000f 	mvn.w	r0, #15
   23c0a:	e7e5      	b.n	23bd8 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23c0c:	4633      	mov	r3, r6
   23c0e:	462a      	mov	r2, r5
   23c10:	4621      	mov	r1, r4
}
   23c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23c16:	4806      	ldr	r0, [pc, #24]	; (23c30 <z_impl_k_sem_take+0xf8>)
   23c18:	f7ff bc2c 	b.w	23474 <z_pend_curr>
   23c1c:	e000ed00 	.word	0xe000ed00
   23c20:	0002c4ca 	.word	0x0002c4ca
   23c24:	0002c449 	.word	0x0002c449
   23c28:	0002abaa 	.word	0x0002abaa
   23c2c:	0002b126 	.word	0x0002b126
   23c30:	20022164 	.word	0x20022164
   23c34:	0002b68e 	.word	0x0002b68e
   23c38:	0002b666 	.word	0x0002b666
   23c3c:	0002b6a3 	.word	0x0002b6a3
   23c40:	0002b6b8 	.word	0x0002b6b8
   23c44:	0002b6cf 	.word	0x0002b6cf

00023c48 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   23c48:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   23c4a:	4c08      	ldr	r4, [pc, #32]	; (23c6c <k_sys_work_q_init+0x24>)
   23c4c:	f04f 33ff 	mov.w	r3, #4294967295
   23c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23c54:	4620      	mov	r0, r4
   23c56:	4906      	ldr	r1, [pc, #24]	; (23c70 <k_sys_work_q_init+0x28>)
   23c58:	f000 f974 	bl	23f44 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   23c5c:	f104 0014 	add.w	r0, r4, #20
   23c60:	4904      	ldr	r1, [pc, #16]	; (23c74 <k_sys_work_q_init+0x2c>)
   23c62:	f003 fd42 	bl	276ea <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   23c66:	2000      	movs	r0, #0
   23c68:	bd10      	pop	{r4, pc}
   23c6a:	bf00      	nop
   23c6c:	20022168 	.word	0x20022168
   23c70:	20026938 	.word	0x20026938
   23c74:	0002c4f1 	.word	0x0002c4f1

00023c78 <k_is_in_isr>:
   23c78:	f3ef 8005 	mrs	r0, IPSR
   23c7c:	280d      	cmp	r0, #13
   23c7e:	d807      	bhi.n	23c90 <k_is_in_isr+0x18>
   23c80:	b138      	cbz	r0, 23c92 <k_is_in_isr+0x1a>
   23c82:	4b04      	ldr	r3, [pc, #16]	; (23c94 <k_is_in_isr+0x1c>)
   23c84:	6858      	ldr	r0, [r3, #4]
   23c86:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   23c8a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   23c8e:	4770      	bx	lr
   23c90:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   23c92:	4770      	bx	lr
   23c94:	e000ed00 	.word	0xe000ed00

00023c98 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   23c98:	4b02      	ldr	r3, [pc, #8]	; (23ca4 <z_is_thread_essential+0xc>)
   23c9a:	689b      	ldr	r3, [r3, #8]
   23c9c:	7b18      	ldrb	r0, [r3, #12]
}
   23c9e:	f000 0001 	and.w	r0, r0, #1
   23ca2:	4770      	bx	lr
   23ca4:	20022120 	.word	0x20022120

00023ca8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   23ca8:	b530      	push	{r4, r5, lr}
   23caa:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23cac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   23cae:	4604      	mov	r4, r0
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23cb0:	9504      	str	r5, [sp, #16]
   23cb2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23cb4:	9503      	str	r5, [sp, #12]
   23cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23cb8:	9502      	str	r5, [sp, #8]
   23cba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   23cbc:	9501      	str	r5, [sp, #4]
   23cbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   23cc0:	9500      	str	r5, [sp, #0]
   23cc2:	f7ed fb5d 	bl	11380 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   23cc6:	4b04      	ldr	r3, [pc, #16]	; (23cd8 <z_setup_new_thread+0x30>)
   23cc8:	689b      	ldr	r3, [r3, #8]
   23cca:	b913      	cbnz	r3, 23cd2 <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   23ccc:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   23cce:	b007      	add	sp, #28
   23cd0:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   23cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   23cd4:	e7fa      	b.n	23ccc <z_setup_new_thread+0x24>
   23cd6:	bf00      	nop
   23cd8:	20022120 	.word	0x20022120

00023cdc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu) {
   23cdc:	6800      	ldr	r0, [r0, #0]
   23cde:	b138      	cbz	r0, 23cf0 <z_spin_lock_valid+0x14>
		if ((l->thread_cpu & 3) == _current_cpu->id) {
   23ce0:	4b04      	ldr	r3, [pc, #16]	; (23cf4 <z_spin_lock_valid+0x18>)
   23ce2:	f000 0003 	and.w	r0, r0, #3
   23ce6:	7d1b      	ldrb	r3, [r3, #20]
   23ce8:	1ac0      	subs	r0, r0, r3
   23cea:	bf18      	it	ne
   23cec:	2001      	movne	r0, #1
   23cee:	4770      	bx	lr
			return false;
		}
	}
	return true;
   23cf0:	2001      	movs	r0, #1
}
   23cf2:	4770      	bx	lr
   23cf4:	20022120 	.word	0x20022120

00023cf8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   23cf8:	4a06      	ldr	r2, [pc, #24]	; (23d14 <z_spin_unlock_valid+0x1c>)
   23cfa:	7d11      	ldrb	r1, [r2, #20]
   23cfc:	6893      	ldr	r3, [r2, #8]
   23cfe:	6802      	ldr	r2, [r0, #0]
   23d00:	430b      	orrs	r3, r1
   23d02:	429a      	cmp	r2, r3
   23d04:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   23d08:	bf06      	itte	eq
   23d0a:	6003      	streq	r3, [r0, #0]
	return true;
   23d0c:	2001      	moveq	r0, #1
		return false;
   23d0e:	4618      	movne	r0, r3
}
   23d10:	4770      	bx	lr
   23d12:	bf00      	nop
   23d14:	20022120 	.word	0x20022120

00023d18 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   23d18:	4a02      	ldr	r2, [pc, #8]	; (23d24 <z_spin_lock_set_owner+0xc>)
   23d1a:	7d11      	ldrb	r1, [r2, #20]
   23d1c:	6893      	ldr	r3, [r2, #8]
   23d1e:	430b      	orrs	r3, r1
   23d20:	6003      	str	r3, [r0, #0]
}
   23d22:	4770      	bx	lr
   23d24:	20022120 	.word	0x20022120

00023d28 <z_impl_k_thread_start>:
{
   23d28:	b538      	push	{r3, r4, r5, lr}
   23d2a:	4604      	mov	r4, r0
	__asm__ volatile(
   23d2c:	f04f 0320 	mov.w	r3, #32
   23d30:	f3ef 8511 	mrs	r5, BASEPRI
   23d34:	f383 8811 	msr	BASEPRI, r3
   23d38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23d3c:	481e      	ldr	r0, [pc, #120]	; (23db8 <z_impl_k_thread_start+0x90>)
   23d3e:	f7ff ffcd 	bl	23cdc <z_spin_lock_valid>
   23d42:	b960      	cbnz	r0, 23d5e <z_impl_k_thread_start+0x36>
   23d44:	491d      	ldr	r1, [pc, #116]	; (23dbc <z_impl_k_thread_start+0x94>)
   23d46:	234e      	movs	r3, #78	; 0x4e
   23d48:	4a1d      	ldr	r2, [pc, #116]	; (23dc0 <z_impl_k_thread_start+0x98>)
   23d4a:	481e      	ldr	r0, [pc, #120]	; (23dc4 <z_impl_k_thread_start+0x9c>)
   23d4c:	f001 fef7 	bl	25b3e <printk>
   23d50:	481d      	ldr	r0, [pc, #116]	; (23dc8 <z_impl_k_thread_start+0xa0>)
   23d52:	f001 fef4 	bl	25b3e <printk>
   23d56:	214e      	movs	r1, #78	; 0x4e
   23d58:	4819      	ldr	r0, [pc, #100]	; (23dc0 <z_impl_k_thread_start+0x98>)
   23d5a:	f001 fefd 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d5e:	4816      	ldr	r0, [pc, #88]	; (23db8 <z_impl_k_thread_start+0x90>)
   23d60:	f7ff ffda 	bl	23d18 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   23d64:	7b63      	ldrb	r3, [r4, #13]
   23d66:	075a      	lsls	r2, r3, #29
   23d68:	d415      	bmi.n	23d96 <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23d6a:	4813      	ldr	r0, [pc, #76]	; (23db8 <z_impl_k_thread_start+0x90>)
   23d6c:	f7ff ffc4 	bl	23cf8 <z_spin_unlock_valid>
   23d70:	b960      	cbnz	r0, 23d8c <z_impl_k_thread_start+0x64>
   23d72:	4916      	ldr	r1, [pc, #88]	; (23dcc <z_impl_k_thread_start+0xa4>)
   23d74:	2361      	movs	r3, #97	; 0x61
   23d76:	4a12      	ldr	r2, [pc, #72]	; (23dc0 <z_impl_k_thread_start+0x98>)
   23d78:	4812      	ldr	r0, [pc, #72]	; (23dc4 <z_impl_k_thread_start+0x9c>)
   23d7a:	f001 fee0 	bl	25b3e <printk>
   23d7e:	4814      	ldr	r0, [pc, #80]	; (23dd0 <z_impl_k_thread_start+0xa8>)
   23d80:	f001 fedd 	bl	25b3e <printk>
   23d84:	2161      	movs	r1, #97	; 0x61
   23d86:	480e      	ldr	r0, [pc, #56]	; (23dc0 <z_impl_k_thread_start+0x98>)
   23d88:	f001 fee6 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   23d8c:	f385 8811 	msr	BASEPRI, r5
   23d90:	f3bf 8f6f 	isb	sy
}
   23d94:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23d96:	f023 0304 	bic.w	r3, r3, #4
   23d9a:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   23d9c:	4620      	mov	r0, r4
   23d9e:	f003 fc99 	bl	276d4 <z_is_thread_ready>
   23da2:	b110      	cbz	r0, 23daa <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   23da4:	4620      	mov	r0, r4
   23da6:	f7ff f8b3 	bl	22f10 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   23daa:	4629      	mov	r1, r5
}
   23dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23db0:	4801      	ldr	r0, [pc, #4]	; (23db8 <z_impl_k_thread_start+0x90>)
   23db2:	f7fe beb9 	b.w	22b28 <z_reschedule>
   23db6:	bf00      	nop
   23db8:	2002222c 	.word	0x2002222c
   23dbc:	0002b68e 	.word	0x0002b68e
   23dc0:	0002b666 	.word	0x0002b666
   23dc4:	0002abaa 	.word	0x0002abaa
   23dc8:	0002b6a3 	.word	0x0002b6a3
   23dcc:	0002b6b8 	.word	0x0002b6b8
   23dd0:	0002b6cf 	.word	0x0002b6cf

00023dd4 <z_impl_k_thread_create>:
{
   23dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23dd8:	b086      	sub	sp, #24
   23dda:	4604      	mov	r4, r0
   23ddc:	460e      	mov	r6, r1
   23dde:	4617      	mov	r7, r2
   23de0:	4698      	mov	r8, r3
   23de2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   23de4:	f3ef 8305 	mrs	r3, IPSR
   23de8:	2b0d      	cmp	r3, #13
   23dea:	d804      	bhi.n	23df6 <z_impl_k_thread_create+0x22>
   23dec:	b193      	cbz	r3, 23e14 <z_impl_k_thread_create+0x40>
   23dee:	4b20      	ldr	r3, [pc, #128]	; (23e70 <z_impl_k_thread_create+0x9c>)
   23df0:	685b      	ldr	r3, [r3, #4]
   23df2:	051a      	lsls	r2, r3, #20
   23df4:	d40e      	bmi.n	23e14 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");
   23df6:	491f      	ldr	r1, [pc, #124]	; (23e74 <z_impl_k_thread_create+0xa0>)
   23df8:	f240 13b3 	movw	r3, #435	; 0x1b3
   23dfc:	4a1e      	ldr	r2, [pc, #120]	; (23e78 <z_impl_k_thread_create+0xa4>)
   23dfe:	481f      	ldr	r0, [pc, #124]	; (23e7c <z_impl_k_thread_create+0xa8>)
   23e00:	f001 fe9d 	bl	25b3e <printk>
   23e04:	481e      	ldr	r0, [pc, #120]	; (23e80 <z_impl_k_thread_create+0xac>)
   23e06:	f001 fe9a 	bl	25b3e <printk>
   23e0a:	f240 11b3 	movw	r1, #435	; 0x1b3
   23e0e:	481a      	ldr	r0, [pc, #104]	; (23e78 <z_impl_k_thread_create+0xa4>)
   23e10:	f001 fea2 	bl	25b58 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23e14:	2300      	movs	r3, #0
   23e16:	9305      	str	r3, [sp, #20]
   23e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23e1a:	463a      	mov	r2, r7
   23e1c:	9304      	str	r3, [sp, #16]
   23e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23e20:	4631      	mov	r1, r6
   23e22:	9303      	str	r3, [sp, #12]
   23e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23e26:	4620      	mov	r0, r4
   23e28:	9302      	str	r3, [sp, #8]
   23e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23e2c:	9301      	str	r3, [sp, #4]
   23e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23e30:	9300      	str	r3, [sp, #0]
   23e32:	4643      	mov	r3, r8
   23e34:	f7ff ff38 	bl	23ca8 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   23e38:	1c6b      	adds	r3, r5, #1
   23e3a:	d003      	beq.n	23e44 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   23e3c:	b935      	cbnz	r5, 23e4c <z_impl_k_thread_create+0x78>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   23e3e:	4620      	mov	r0, r4
   23e40:	f7ff ff72 	bl	23d28 <z_impl_k_thread_start>
}
   23e44:	4620      	mov	r0, r4
   23e46:	b006      	add	sp, #24
   23e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   23e4c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23e50:	2100      	movs	r1, #0
   23e52:	480c      	ldr	r0, [pc, #48]	; (23e84 <z_impl_k_thread_create+0xb0>)
   23e54:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   23e58:	2300      	movs	r3, #0
   23e5a:	fbc6 0105 	smlal	r0, r1, r6, r5
   23e5e:	f7e8 f971 	bl	c144 <__aeabi_ldivmod>
   23e62:	4909      	ldr	r1, [pc, #36]	; (23e88 <z_impl_k_thread_create+0xb4>)
   23e64:	1c42      	adds	r2, r0, #1
   23e66:	f104 0018 	add.w	r0, r4, #24
   23e6a:	f000 f8d7 	bl	2401c <z_add_timeout>
   23e6e:	e7e9      	b.n	23e44 <z_impl_k_thread_create+0x70>
   23e70:	e000ed00 	.word	0xe000ed00
   23e74:	0002c33e 	.word	0x0002c33e
   23e78:	0002c4fa 	.word	0x0002c4fa
   23e7c:	0002abaa 	.word	0x0002abaa
   23e80:	0002c51f 	.word	0x0002c51f
   23e84:	0003e7ff 	.word	0x0003e7ff
   23e88:	00023011 	.word	0x00023011

00023e8c <z_init_static_threads>:
{
   23e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   23e90:	4e28      	ldr	r6, [pc, #160]	; (23f34 <z_init_static_threads+0xa8>)
   23e92:	4d29      	ldr	r5, [pc, #164]	; (23f38 <z_init_static_threads+0xac>)
   23e94:	46b0      	mov	r8, r6
{
   23e96:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   23e98:	42b5      	cmp	r5, r6
   23e9a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   23e9e:	d30f      	bcc.n	23ec0 <z_init_static_threads+0x34>
	k_sched_lock();
   23ea0:	f7fe fe7c 	bl	22b9c <k_sched_lock>
   23ea4:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   23ea8:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   23eaa:	4c23      	ldr	r4, [pc, #140]	; (23f38 <z_init_static_threads+0xac>)
   23eac:	4e23      	ldr	r6, [pc, #140]	; (23f3c <z_init_static_threads+0xb0>)
   23eae:	f8df a090 	ldr.w	sl, [pc, #144]	; 23f40 <z_init_static_threads+0xb4>
   23eb2:	4544      	cmp	r4, r8
   23eb4:	d321      	bcc.n	23efa <z_init_static_threads+0x6e>
}
   23eb6:	b007      	add	sp, #28
   23eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   23ebc:	f7fe bfa6 	b.w	22e0c <k_sched_unlock>
		z_setup_new_thread(
   23ec0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23ec4:	9305      	str	r3, [sp, #20]
   23ec6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23eca:	9304      	str	r3, [sp, #16]
   23ecc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23ed0:	9303      	str	r3, [sp, #12]
   23ed2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23ed6:	9302      	str	r3, [sp, #8]
   23ed8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23edc:	9301      	str	r3, [sp, #4]
   23ede:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23ee2:	9300      	str	r3, [sp, #0]
   23ee4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23ee8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23eec:	f7ff fedc 	bl	23ca8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23ef0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23ef4:	64dd      	str	r5, [r3, #76]	; 0x4c
   23ef6:	4625      	mov	r5, r4
   23ef8:	e7ce      	b.n	23e98 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   23efa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23efc:	1c4b      	adds	r3, r1, #1
   23efe:	d004      	beq.n	23f0a <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
   23f00:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   23f02:	b921      	cbnz	r1, 23f0e <z_init_static_threads+0x82>
   23f04:	4628      	mov	r0, r5
   23f06:	f7ff ff0f 	bl	23d28 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23f0a:	3430      	adds	r4, #48	; 0x30
   23f0c:	e7d1      	b.n	23eb2 <z_init_static_threads+0x26>
   23f0e:	46b3      	mov	fp, r6
   23f10:	46bc      	mov	ip, r7
   23f12:	fbc9 bc01 	smlal	fp, ip, r9, r1
   23f16:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   23f1a:	2300      	movs	r3, #0
   23f1c:	4658      	mov	r0, fp
   23f1e:	4661      	mov	r1, ip
   23f20:	f7e8 f910 	bl	c144 <__aeabi_ldivmod>
   23f24:	4651      	mov	r1, sl
   23f26:	1c42      	adds	r2, r0, #1
   23f28:	f105 0018 	add.w	r0, r5, #24
   23f2c:	f000 f876 	bl	2401c <z_add_timeout>
   23f30:	e7eb      	b.n	23f0a <z_init_static_threads+0x7e>
   23f32:	bf00      	nop
   23f34:	2002bb30 	.word	0x2002bb30
   23f38:	2002bb30 	.word	0x2002bb30
   23f3c:	0003e7ff 	.word	0x0003e7ff
   23f40:	00023011 	.word	0x00023011

00023f44 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   23f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f48:	4605      	mov	r5, r0
   23f4a:	b086      	sub	sp, #24
   23f4c:	4698      	mov	r8, r3
   23f4e:	460e      	mov	r6, r1
   23f50:	4617      	mov	r7, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   23f52:	f003 fb6a 	bl	2762a <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   23f56:	2000      	movs	r0, #0
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   23f58:	f105 0414 	add.w	r4, r5, #20
   23f5c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   23f60:	e9cd 0802 	strd	r0, r8, [sp, #8]
   23f64:	e9cd 5000 	strd	r5, r0, [sp]
   23f68:	4631      	mov	r1, r6
   23f6a:	4b06      	ldr	r3, [pc, #24]	; (23f84 <k_work_q_start+0x40>)
   23f6c:	463a      	mov	r2, r7
   23f6e:	4620      	mov	r0, r4
   23f70:	f7ff ff30 	bl	23dd4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   23f74:	4620      	mov	r0, r4
   23f76:	4904      	ldr	r1, [pc, #16]	; (23f88 <k_work_q_start+0x44>)
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   23f78:	b006      	add	sp, #24
   23f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23f7e:	f003 bbb4 	b.w	276ea <z_impl_k_thread_name_set>
   23f82:	bf00      	nop
   23f84:	00025831 	.word	0x00025831
   23f88:	0002c544 	.word	0x0002c544

00023f8c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   23f8c:	4b03      	ldr	r3, [pc, #12]	; (23f9c <elapsed+0x10>)
   23f8e:	681b      	ldr	r3, [r3, #0]
   23f90:	b90b      	cbnz	r3, 23f96 <elapsed+0xa>
   23f92:	f7ec be9d 	b.w	10cd0 <z_clock_elapsed>
}
   23f96:	2000      	movs	r0, #0
   23f98:	4770      	bx	lr
   23f9a:	bf00      	nop
   23f9c:	20022230 	.word	0x20022230

00023fa0 <next_timeout>:

static s32_t next_timeout(void)
{
   23fa0:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   23fa2:	4b10      	ldr	r3, [pc, #64]	; (23fe4 <next_timeout+0x44>)
   23fa4:	781b      	ldrb	r3, [r3, #0]
   23fa6:	2b00      	cmp	r3, #0
	return list->head == list;
   23fa8:	4b0f      	ldr	r3, [pc, #60]	; (23fe8 <next_timeout+0x48>)
   23faa:	bf18      	it	ne
   23fac:	f04f 30ff 	movne.w	r0, #4294967295
   23fb0:	681c      	ldr	r4, [r3, #0]
   23fb2:	bf08      	it	eq
   23fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fb8:	429c      	cmp	r4, r3
   23fba:	d00a      	beq.n	23fd2 <next_timeout+0x32>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   23fbc:	b14c      	cbz	r4, 23fd2 <next_timeout+0x32>
   23fbe:	68a5      	ldr	r5, [r4, #8]
   23fc0:	f7ff ffe4 	bl	23f8c <elapsed>
   23fc4:	1a28      	subs	r0, r5, r0
   23fc6:	2800      	cmp	r0, #0
   23fc8:	db0a      	blt.n	23fe0 <next_timeout+0x40>
   23fca:	68a4      	ldr	r4, [r4, #8]
   23fcc:	f7ff ffde 	bl	23f8c <elapsed>
   23fd0:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23fd2:	4b06      	ldr	r3, [pc, #24]	; (23fec <next_timeout+0x4c>)
   23fd4:	691b      	ldr	r3, [r3, #16]
   23fd6:	b113      	cbz	r3, 23fde <next_timeout+0x3e>
   23fd8:	4298      	cmp	r0, r3
   23fda:	bfa8      	it	ge
   23fdc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23fde:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   23fe0:	2000      	movs	r0, #0
   23fe2:	e7f6      	b.n	23fd2 <next_timeout+0x32>
   23fe4:	20024045 	.word	0x20024045
   23fe8:	20028348 	.word	0x20028348
   23fec:	20022120 	.word	0x20022120

00023ff0 <remove_timeout>:
{
   23ff0:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23ff2:	b140      	cbz	r0, 24006 <remove_timeout+0x16>
   23ff4:	4a08      	ldr	r2, [pc, #32]	; (24018 <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
   23ff6:	6852      	ldr	r2, [r2, #4]
   23ff8:	4290      	cmp	r0, r2
   23ffa:	d004      	beq.n	24006 <remove_timeout+0x16>
	if (next(t) != NULL) {
   23ffc:	b11b      	cbz	r3, 24006 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   23ffe:	689a      	ldr	r2, [r3, #8]
   24000:	6881      	ldr	r1, [r0, #8]
   24002:	440a      	add	r2, r1
   24004:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   24006:	6842      	ldr	r2, [r0, #4]
   24008:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2400a:	6803      	ldr	r3, [r0, #0]
   2400c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2400e:	2300      	movs	r3, #0
	node->prev = NULL;
   24010:	e9c0 3300 	strd	r3, r3, [r0]
}
   24014:	4770      	bx	lr
   24016:	bf00      	nop
   24018:	20028348 	.word	0x20028348

0002401c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2401c:	6803      	ldr	r3, [r0, #0]
{
   2401e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24022:	4604      	mov	r4, r0
   24024:	460e      	mov	r6, r1
   24026:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24028:	b163      	cbz	r3, 24044 <z_add_timeout+0x28>
   2402a:	4943      	ldr	r1, [pc, #268]	; (24138 <z_add_timeout+0x11c>)
   2402c:	2354      	movs	r3, #84	; 0x54
   2402e:	4a43      	ldr	r2, [pc, #268]	; (2413c <z_add_timeout+0x120>)
   24030:	4843      	ldr	r0, [pc, #268]	; (24140 <z_add_timeout+0x124>)
   24032:	f001 fd84 	bl	25b3e <printk>
   24036:	4843      	ldr	r0, [pc, #268]	; (24144 <z_add_timeout+0x128>)
   24038:	f001 fd81 	bl	25b3e <printk>
   2403c:	2154      	movs	r1, #84	; 0x54
   2403e:	483f      	ldr	r0, [pc, #252]	; (2413c <z_add_timeout+0x120>)
   24040:	f001 fd8a 	bl	25b58 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   24044:	2d01      	cmp	r5, #1
   24046:	bfb8      	it	lt
   24048:	2501      	movlt	r5, #1
	to->fn = fn;
   2404a:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   2404c:	f04f 0320 	mov.w	r3, #32
   24050:	f3ef 8811 	mrs	r8, BASEPRI
   24054:	f383 8811 	msr	BASEPRI, r3
   24058:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2405c:	483a      	ldr	r0, [pc, #232]	; (24148 <z_add_timeout+0x12c>)
   2405e:	f7ff fe3d 	bl	23cdc <z_spin_lock_valid>
   24062:	b960      	cbnz	r0, 2407e <z_add_timeout+0x62>
   24064:	4939      	ldr	r1, [pc, #228]	; (2414c <z_add_timeout+0x130>)
   24066:	234e      	movs	r3, #78	; 0x4e
   24068:	4a39      	ldr	r2, [pc, #228]	; (24150 <z_add_timeout+0x134>)
   2406a:	4835      	ldr	r0, [pc, #212]	; (24140 <z_add_timeout+0x124>)
   2406c:	f001 fd67 	bl	25b3e <printk>
   24070:	4838      	ldr	r0, [pc, #224]	; (24154 <z_add_timeout+0x138>)
   24072:	f001 fd64 	bl	25b3e <printk>
   24076:	214e      	movs	r1, #78	; 0x4e
   24078:	4835      	ldr	r0, [pc, #212]	; (24150 <z_add_timeout+0x134>)
   2407a:	f001 fd6d 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   2407e:	4832      	ldr	r0, [pc, #200]	; (24148 <z_add_timeout+0x12c>)
   24080:	f7ff fe4a 	bl	23d18 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   24084:	f7ff ff82 	bl	23f8c <elapsed>
	return list->head == list;
   24088:	4e33      	ldr	r6, [pc, #204]	; (24158 <z_add_timeout+0x13c>)
   2408a:	4428      	add	r0, r5
   2408c:	6835      	ldr	r5, [r6, #0]
   2408e:	60a0      	str	r0, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24090:	42b5      	cmp	r5, r6
   24092:	d005      	beq.n	240a0 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   24094:	4f29      	ldr	r7, [pc, #164]	; (2413c <z_add_timeout+0x120>)
   24096:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 24164 <z_add_timeout+0x148>
   2409a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 24140 <z_add_timeout+0x124>
		for (t = first(); t != NULL; t = next(t)) {
   2409e:	b935      	cbnz	r5, 240ae <z_add_timeout+0x92>
	node->prev = list->tail;
   240a0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   240a2:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
   240a4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   240a6:	6873      	ldr	r3, [r6, #4]
   240a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   240aa:	6074      	str	r4, [r6, #4]
   240ac:	e01b      	b.n	240e6 <z_add_timeout+0xca>
			__ASSERT(t->dticks >= 0, "");
   240ae:	68ab      	ldr	r3, [r5, #8]
   240b0:	2b00      	cmp	r3, #0
   240b2:	da0c      	bge.n	240ce <z_add_timeout+0xb2>
   240b4:	4649      	mov	r1, r9
   240b6:	235d      	movs	r3, #93	; 0x5d
   240b8:	463a      	mov	r2, r7
   240ba:	4650      	mov	r0, sl
   240bc:	f001 fd3f 	bl	25b3e <printk>
   240c0:	4820      	ldr	r0, [pc, #128]	; (24144 <z_add_timeout+0x128>)
   240c2:	f001 fd3c 	bl	25b3e <printk>
   240c6:	215d      	movs	r1, #93	; 0x5d
   240c8:	4638      	mov	r0, r7
   240ca:	f001 fd45 	bl	25b58 <assert_post_action>

			if (t->dticks > to->dticks) {
   240ce:	68aa      	ldr	r2, [r5, #8]
   240d0:	68a3      	ldr	r3, [r4, #8]
   240d2:	429a      	cmp	r2, r3
   240d4:	dd28      	ble.n	24128 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
   240d6:	1ad3      	subs	r3, r2, r3
   240d8:	60ab      	str	r3, [r5, #8]
	node->prev = successor->prev;
   240da:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   240dc:	e9c4 5300 	strd	r5, r3, [r4]
	successor->prev->next = node;
   240e0:	686b      	ldr	r3, [r5, #4]
   240e2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   240e4:	606c      	str	r4, [r5, #4]
	return list->head == list;
   240e6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   240e8:	42b3      	cmp	r3, r6
   240ea:	d006      	beq.n	240fa <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   240ec:	429c      	cmp	r4, r3
   240ee:	d104      	bne.n	240fa <z_add_timeout+0xde>
			z_clock_set_timeout(next_timeout(), false);
   240f0:	f7ff ff56 	bl	23fa0 <next_timeout>
   240f4:	2100      	movs	r1, #0
   240f6:	f7ec fd81 	bl	10bfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   240fa:	4813      	ldr	r0, [pc, #76]	; (24148 <z_add_timeout+0x12c>)
   240fc:	f7ff fdfc 	bl	23cf8 <z_spin_unlock_valid>
   24100:	b960      	cbnz	r0, 2411c <z_add_timeout+0x100>
   24102:	4916      	ldr	r1, [pc, #88]	; (2415c <z_add_timeout+0x140>)
   24104:	2361      	movs	r3, #97	; 0x61
   24106:	4a12      	ldr	r2, [pc, #72]	; (24150 <z_add_timeout+0x134>)
   24108:	480d      	ldr	r0, [pc, #52]	; (24140 <z_add_timeout+0x124>)
   2410a:	f001 fd18 	bl	25b3e <printk>
   2410e:	4814      	ldr	r0, [pc, #80]	; (24160 <z_add_timeout+0x144>)
   24110:	f001 fd15 	bl	25b3e <printk>
   24114:	2161      	movs	r1, #97	; 0x61
   24116:	480e      	ldr	r0, [pc, #56]	; (24150 <z_add_timeout+0x134>)
   24118:	f001 fd1e 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   2411c:	f388 8811 	msr	BASEPRI, r8
   24120:	f3bf 8f6f 	isb	sy
		}
	}
}
   24124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   24128:	1a9b      	subs	r3, r3, r2
   2412a:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   2412c:	6873      	ldr	r3, [r6, #4]
   2412e:	42ab      	cmp	r3, r5
   24130:	d0b6      	beq.n	240a0 <z_add_timeout+0x84>
   24132:	682d      	ldr	r5, [r5, #0]
   24134:	e7b3      	b.n	2409e <z_add_timeout+0x82>
   24136:	bf00      	nop
   24138:	0002c574 	.word	0x0002c574
   2413c:	0002c54e 	.word	0x0002c54e
   24140:	0002abaa 	.word	0x0002abaa
   24144:	0002b126 	.word	0x0002b126
   24148:	20022234 	.word	0x20022234
   2414c:	0002b68e 	.word	0x0002b68e
   24150:	0002b666 	.word	0x0002b666
   24154:	0002b6a3 	.word	0x0002b6a3
   24158:	20028348 	.word	0x20028348
   2415c:	0002b6b8 	.word	0x0002b6b8
   24160:	0002b6cf 	.word	0x0002b6cf
   24164:	0002c594 	.word	0x0002c594

00024168 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24168:	b538      	push	{r3, r4, r5, lr}
   2416a:	4604      	mov	r4, r0
	__asm__ volatile(
   2416c:	f04f 0320 	mov.w	r3, #32
   24170:	f3ef 8511 	mrs	r5, BASEPRI
   24174:	f383 8811 	msr	BASEPRI, r3
   24178:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2417c:	4819      	ldr	r0, [pc, #100]	; (241e4 <z_abort_timeout+0x7c>)
   2417e:	f7ff fdad 	bl	23cdc <z_spin_lock_valid>
   24182:	b960      	cbnz	r0, 2419e <z_abort_timeout+0x36>
   24184:	4918      	ldr	r1, [pc, #96]	; (241e8 <z_abort_timeout+0x80>)
   24186:	234e      	movs	r3, #78	; 0x4e
   24188:	4a18      	ldr	r2, [pc, #96]	; (241ec <z_abort_timeout+0x84>)
   2418a:	4819      	ldr	r0, [pc, #100]	; (241f0 <z_abort_timeout+0x88>)
   2418c:	f001 fcd7 	bl	25b3e <printk>
   24190:	4818      	ldr	r0, [pc, #96]	; (241f4 <z_abort_timeout+0x8c>)
   24192:	f001 fcd4 	bl	25b3e <printk>
   24196:	214e      	movs	r1, #78	; 0x4e
   24198:	4814      	ldr	r0, [pc, #80]	; (241ec <z_abort_timeout+0x84>)
   2419a:	f001 fcdd 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   2419e:	4811      	ldr	r0, [pc, #68]	; (241e4 <z_abort_timeout+0x7c>)
   241a0:	f7ff fdba 	bl	23d18 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   241a4:	6823      	ldr	r3, [r4, #0]
   241a6:	b1d3      	cbz	r3, 241de <z_abort_timeout+0x76>
			remove_timeout(to);
   241a8:	4620      	mov	r0, r4
   241aa:	f7ff ff21 	bl	23ff0 <remove_timeout>
			ret = 0;
   241ae:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   241b0:	480c      	ldr	r0, [pc, #48]	; (241e4 <z_abort_timeout+0x7c>)
   241b2:	f7ff fda1 	bl	23cf8 <z_spin_unlock_valid>
   241b6:	b960      	cbnz	r0, 241d2 <z_abort_timeout+0x6a>
   241b8:	490f      	ldr	r1, [pc, #60]	; (241f8 <z_abort_timeout+0x90>)
   241ba:	2361      	movs	r3, #97	; 0x61
   241bc:	4a0b      	ldr	r2, [pc, #44]	; (241ec <z_abort_timeout+0x84>)
   241be:	480c      	ldr	r0, [pc, #48]	; (241f0 <z_abort_timeout+0x88>)
   241c0:	f001 fcbd 	bl	25b3e <printk>
   241c4:	480d      	ldr	r0, [pc, #52]	; (241fc <z_abort_timeout+0x94>)
   241c6:	f001 fcba 	bl	25b3e <printk>
   241ca:	2161      	movs	r1, #97	; 0x61
   241cc:	4807      	ldr	r0, [pc, #28]	; (241ec <z_abort_timeout+0x84>)
   241ce:	f001 fcc3 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   241d2:	f385 8811 	msr	BASEPRI, r5
   241d6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   241da:	4620      	mov	r0, r4
   241dc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   241de:	f06f 0415 	mvn.w	r4, #21
   241e2:	e7e5      	b.n	241b0 <z_abort_timeout+0x48>
   241e4:	20022234 	.word	0x20022234
   241e8:	0002b68e 	.word	0x0002b68e
   241ec:	0002b666 	.word	0x0002b666
   241f0:	0002abaa 	.word	0x0002abaa
   241f4:	0002b6a3 	.word	0x0002b6a3
   241f8:	0002b6b8 	.word	0x0002b6b8
   241fc:	0002b6cf 	.word	0x0002b6cf

00024200 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   24200:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24202:	f04f 0320 	mov.w	r3, #32
   24206:	f3ef 8511 	mrs	r5, BASEPRI
   2420a:	f383 8811 	msr	BASEPRI, r3
   2420e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   24212:	4817      	ldr	r0, [pc, #92]	; (24270 <_flash_used+0x20>)
   24214:	f7ff fd62 	bl	23cdc <z_spin_lock_valid>
   24218:	b960      	cbnz	r0, 24234 <z_get_next_timeout_expiry+0x34>
   2421a:	4916      	ldr	r1, [pc, #88]	; (24274 <_flash_used+0x24>)
   2421c:	234e      	movs	r3, #78	; 0x4e
   2421e:	4a16      	ldr	r2, [pc, #88]	; (24278 <_flash_used+0x28>)
   24220:	4816      	ldr	r0, [pc, #88]	; (2427c <_flash_used+0x2c>)
   24222:	f001 fc8c 	bl	25b3e <printk>
   24226:	4816      	ldr	r0, [pc, #88]	; (24280 <_flash_used+0x30>)
   24228:	f001 fc89 	bl	25b3e <printk>
   2422c:	214e      	movs	r1, #78	; 0x4e
   2422e:	4812      	ldr	r0, [pc, #72]	; (24278 <_flash_used+0x28>)
   24230:	f001 fc92 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   24234:	480e      	ldr	r0, [pc, #56]	; (24270 <_flash_used+0x20>)
   24236:	f7ff fd6f 	bl	23d18 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2423a:	f7ff feb1 	bl	23fa0 <next_timeout>
   2423e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   24240:	480b      	ldr	r0, [pc, #44]	; (24270 <_flash_used+0x20>)
   24242:	f7ff fd59 	bl	23cf8 <z_spin_unlock_valid>
   24246:	b960      	cbnz	r0, 24262 <_flash_used+0x12>
   24248:	490e      	ldr	r1, [pc, #56]	; (24284 <_flash_used+0x34>)
   2424a:	2361      	movs	r3, #97	; 0x61
   2424c:	4a0a      	ldr	r2, [pc, #40]	; (24278 <_flash_used+0x28>)
   2424e:	480b      	ldr	r0, [pc, #44]	; (2427c <_flash_used+0x2c>)
   24250:	f001 fc75 	bl	25b3e <printk>
   24254:	480c      	ldr	r0, [pc, #48]	; (24288 <_flash_used+0x38>)
   24256:	f001 fc72 	bl	25b3e <printk>
   2425a:	2161      	movs	r1, #97	; 0x61
   2425c:	4806      	ldr	r0, [pc, #24]	; (24278 <_flash_used+0x28>)
   2425e:	f001 fc7b 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   24262:	f385 8811 	msr	BASEPRI, r5
   24266:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2426a:	4620      	mov	r0, r4
   2426c:	bd38      	pop	{r3, r4, r5, pc}
   2426e:	bf00      	nop
   24270:	20022234 	.word	0x20022234
   24274:	0002b68e 	.word	0x0002b68e
   24278:	0002b666 	.word	0x0002b666
   2427c:	0002abaa 	.word	0x0002abaa
   24280:	0002b6a3 	.word	0x0002b6a3
   24284:	0002b6b8 	.word	0x0002b6b8
   24288:	0002b6cf 	.word	0x0002b6cf

0002428c <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   2428c:	b570      	push	{r4, r5, r6, lr}
   2428e:	4604      	mov	r4, r0
   24290:	460e      	mov	r6, r1
	__asm__ volatile(
   24292:	f04f 0320 	mov.w	r3, #32
   24296:	f3ef 8511 	mrs	r5, BASEPRI
   2429a:	f383 8811 	msr	BASEPRI, r3
   2429e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   242a2:	481a      	ldr	r0, [pc, #104]	; (2430c <z_set_timeout_expiry+0x80>)
   242a4:	f7ff fd1a 	bl	23cdc <z_spin_lock_valid>
   242a8:	b960      	cbnz	r0, 242c4 <z_set_timeout_expiry+0x38>
   242aa:	4919      	ldr	r1, [pc, #100]	; (24310 <z_set_timeout_expiry+0x84>)
   242ac:	234e      	movs	r3, #78	; 0x4e
   242ae:	4a19      	ldr	r2, [pc, #100]	; (24314 <z_set_timeout_expiry+0x88>)
   242b0:	4819      	ldr	r0, [pc, #100]	; (24318 <z_set_timeout_expiry+0x8c>)
   242b2:	f001 fc44 	bl	25b3e <printk>
   242b6:	4819      	ldr	r0, [pc, #100]	; (2431c <z_set_timeout_expiry+0x90>)
   242b8:	f001 fc41 	bl	25b3e <printk>
   242bc:	214e      	movs	r1, #78	; 0x4e
   242be:	4815      	ldr	r0, [pc, #84]	; (24314 <z_set_timeout_expiry+0x88>)
   242c0:	f001 fc4a 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   242c4:	4811      	ldr	r0, [pc, #68]	; (2430c <z_set_timeout_expiry+0x80>)
   242c6:	f7ff fd27 	bl	23d18 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   242ca:	f7ff fe69 	bl	23fa0 <next_timeout>
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
   242ce:	42a0      	cmp	r0, r4
   242d0:	dd05      	ble.n	242de <z_set_timeout_expiry+0x52>
   242d2:	2801      	cmp	r0, #1
   242d4:	dd03      	ble.n	242de <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   242d6:	4631      	mov	r1, r6
   242d8:	4620      	mov	r0, r4
   242da:	f7ec fc8f 	bl	10bfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   242de:	480b      	ldr	r0, [pc, #44]	; (2430c <z_set_timeout_expiry+0x80>)
   242e0:	f7ff fd0a 	bl	23cf8 <z_spin_unlock_valid>
   242e4:	b960      	cbnz	r0, 24300 <z_set_timeout_expiry+0x74>
   242e6:	490e      	ldr	r1, [pc, #56]	; (24320 <z_set_timeout_expiry+0x94>)
   242e8:	2361      	movs	r3, #97	; 0x61
   242ea:	4a0a      	ldr	r2, [pc, #40]	; (24314 <z_set_timeout_expiry+0x88>)
   242ec:	480a      	ldr	r0, [pc, #40]	; (24318 <z_set_timeout_expiry+0x8c>)
   242ee:	f001 fc26 	bl	25b3e <printk>
   242f2:	480c      	ldr	r0, [pc, #48]	; (24324 <z_set_timeout_expiry+0x98>)
   242f4:	f001 fc23 	bl	25b3e <printk>
   242f8:	2161      	movs	r1, #97	; 0x61
   242fa:	4806      	ldr	r0, [pc, #24]	; (24314 <z_set_timeout_expiry+0x88>)
   242fc:	f001 fc2c 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   24300:	f385 8811 	msr	BASEPRI, r5
   24304:	f3bf 8f6f 	isb	sy
		}
	}
}
   24308:	bd70      	pop	{r4, r5, r6, pc}
   2430a:	bf00      	nop
   2430c:	20022234 	.word	0x20022234
   24310:	0002b68e 	.word	0x0002b68e
   24314:	0002b666 	.word	0x0002b666
   24318:	0002abaa 	.word	0x0002abaa
   2431c:	0002b6a3 	.word	0x0002b6a3
   24320:	0002b6b8 	.word	0x0002b6b8
   24324:	0002b6cf 	.word	0x0002b6cf

00024328 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   24328:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   2432c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2432e:	f7fe ff61 	bl	231f4 <z_time_slice>
	__asm__ volatile(
   24332:	f04f 0320 	mov.w	r3, #32
   24336:	f3ef 8511 	mrs	r5, BASEPRI
   2433a:	f383 8811 	msr	BASEPRI, r3
   2433e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   24342:	4846      	ldr	r0, [pc, #280]	; (2445c <z_clock_announce+0x134>)
   24344:	f7ff fcca 	bl	23cdc <z_spin_lock_valid>
   24348:	b960      	cbnz	r0, 24364 <z_clock_announce+0x3c>
   2434a:	4945      	ldr	r1, [pc, #276]	; (24460 <z_clock_announce+0x138>)
   2434c:	234e      	movs	r3, #78	; 0x4e
   2434e:	4a45      	ldr	r2, [pc, #276]	; (24464 <z_clock_announce+0x13c>)
   24350:	4845      	ldr	r0, [pc, #276]	; (24468 <z_clock_announce+0x140>)
   24352:	f001 fbf4 	bl	25b3e <printk>
   24356:	4845      	ldr	r0, [pc, #276]	; (2446c <z_clock_announce+0x144>)
   24358:	f001 fbf1 	bl	25b3e <printk>
   2435c:	214e      	movs	r1, #78	; 0x4e
   2435e:	4841      	ldr	r0, [pc, #260]	; (24464 <z_clock_announce+0x13c>)
   24360:	f001 fbfa 	bl	25b58 <assert_post_action>
   24364:	4f42      	ldr	r7, [pc, #264]	; (24470 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24366:	4e43      	ldr	r6, [pc, #268]	; (24474 <z_clock_announce+0x14c>)
   24368:	46b9      	mov	r9, r7
	z_spin_lock_set_owner(l);
   2436a:	483c      	ldr	r0, [pc, #240]	; (2445c <z_clock_announce+0x134>)
	return list->head == list;
   2436c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 24480 <z_clock_announce+0x158>
   24370:	f7ff fcd2 	bl	23d18 <z_spin_lock_set_owner>
   24374:	6034      	str	r4, [r6, #0]
   24376:	f8d8 4000 	ldr.w	r4, [r8]
   2437a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2437c:	4544      	cmp	r4, r8
   2437e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   24382:	d005      	beq.n	24390 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24384:	b124      	cbz	r4, 24390 <z_clock_announce+0x68>
   24386:	68a3      	ldr	r3, [r4, #8]
   24388:	4293      	cmp	r3, r2
   2438a:	dd25      	ble.n	243d8 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2438c:	1a9b      	subs	r3, r3, r2
   2438e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   24390:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24392:	eb1b 0002 	adds.w	r0, fp, r2
   24396:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   2439a:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   2439e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   243a0:	f7ff fdfe 	bl	23fa0 <next_timeout>
   243a4:	4621      	mov	r1, r4
   243a6:	f7ec fc29 	bl	10bfc <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   243aa:	482c      	ldr	r0, [pc, #176]	; (2445c <z_clock_announce+0x134>)
   243ac:	f7ff fca4 	bl	23cf8 <z_spin_unlock_valid>
   243b0:	b960      	cbnz	r0, 243cc <z_clock_announce+0xa4>
   243b2:	4931      	ldr	r1, [pc, #196]	; (24478 <z_clock_announce+0x150>)
   243b4:	2361      	movs	r3, #97	; 0x61
   243b6:	4a2b      	ldr	r2, [pc, #172]	; (24464 <z_clock_announce+0x13c>)
   243b8:	482b      	ldr	r0, [pc, #172]	; (24468 <z_clock_announce+0x140>)
   243ba:	f001 fbc0 	bl	25b3e <printk>
   243be:	482f      	ldr	r0, [pc, #188]	; (2447c <z_clock_announce+0x154>)
   243c0:	f001 fbbd 	bl	25b3e <printk>
   243c4:	2161      	movs	r1, #97	; 0x61
   243c6:	4827      	ldr	r0, [pc, #156]	; (24464 <z_clock_announce+0x13c>)
   243c8:	f001 fbc6 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   243cc:	f385 8811 	msr	BASEPRI, r5
   243d0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   243d4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   243d8:	eb1b 0003 	adds.w	r0, fp, r3
   243dc:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   243e0:	1ad3      	subs	r3, r2, r3
   243e2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   243e4:	2300      	movs	r3, #0
		curr_tick += dt;
   243e6:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   243ea:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   243ec:	4620      	mov	r0, r4
   243ee:	f7ff fdff 	bl	23ff0 <remove_timeout>
   243f2:	481a      	ldr	r0, [pc, #104]	; (2445c <z_clock_announce+0x134>)
   243f4:	f7ff fc80 	bl	23cf8 <z_spin_unlock_valid>
   243f8:	b960      	cbnz	r0, 24414 <z_clock_announce+0xec>
   243fa:	491f      	ldr	r1, [pc, #124]	; (24478 <z_clock_announce+0x150>)
   243fc:	2361      	movs	r3, #97	; 0x61
   243fe:	4a19      	ldr	r2, [pc, #100]	; (24464 <z_clock_announce+0x13c>)
   24400:	4819      	ldr	r0, [pc, #100]	; (24468 <z_clock_announce+0x140>)
   24402:	f001 fb9c 	bl	25b3e <printk>
   24406:	481d      	ldr	r0, [pc, #116]	; (2447c <z_clock_announce+0x154>)
   24408:	f001 fb99 	bl	25b3e <printk>
   2440c:	2161      	movs	r1, #97	; 0x61
   2440e:	4815      	ldr	r0, [pc, #84]	; (24464 <z_clock_announce+0x13c>)
   24410:	f001 fba2 	bl	25b58 <assert_post_action>
   24414:	f385 8811 	msr	BASEPRI, r5
   24418:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2441c:	68e3      	ldr	r3, [r4, #12]
   2441e:	4620      	mov	r0, r4
   24420:	4798      	blx	r3
	__asm__ volatile(
   24422:	f04f 0320 	mov.w	r3, #32
   24426:	f3ef 8511 	mrs	r5, BASEPRI
   2442a:	f383 8811 	msr	BASEPRI, r3
   2442e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   24432:	480a      	ldr	r0, [pc, #40]	; (2445c <z_clock_announce+0x134>)
   24434:	f7ff fc52 	bl	23cdc <z_spin_lock_valid>
   24438:	b960      	cbnz	r0, 24454 <z_clock_announce+0x12c>
   2443a:	4909      	ldr	r1, [pc, #36]	; (24460 <z_clock_announce+0x138>)
   2443c:	234e      	movs	r3, #78	; 0x4e
   2443e:	4a09      	ldr	r2, [pc, #36]	; (24464 <z_clock_announce+0x13c>)
   24440:	4809      	ldr	r0, [pc, #36]	; (24468 <z_clock_announce+0x140>)
   24442:	f001 fb7c 	bl	25b3e <printk>
   24446:	4809      	ldr	r0, [pc, #36]	; (2446c <z_clock_announce+0x144>)
   24448:	f001 fb79 	bl	25b3e <printk>
   2444c:	214e      	movs	r1, #78	; 0x4e
   2444e:	4805      	ldr	r0, [pc, #20]	; (24464 <z_clock_announce+0x13c>)
   24450:	f001 fb82 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   24454:	4801      	ldr	r0, [pc, #4]	; (2445c <z_clock_announce+0x134>)
   24456:	f7ff fc5f 	bl	23d18 <z_spin_lock_set_owner>
   2445a:	e78c      	b.n	24376 <z_clock_announce+0x4e>
   2445c:	20022234 	.word	0x20022234
   24460:	0002b68e 	.word	0x0002b68e
   24464:	0002b666 	.word	0x0002b666
   24468:	0002abaa 	.word	0x0002abaa
   2446c:	0002b6a3 	.word	0x0002b6a3
   24470:	20020000 	.word	0x20020000
   24474:	20022230 	.word	0x20022230
   24478:	0002b6b8 	.word	0x0002b6b8
   2447c:	0002b6cf 	.word	0x0002b6cf
   24480:	20028348 	.word	0x20028348

00024484 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   24484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24488:	f04f 0320 	mov.w	r3, #32
   2448c:	f3ef 8611 	mrs	r6, BASEPRI
   24490:	f383 8811 	msr	BASEPRI, r3
   24494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   24498:	481a      	ldr	r0, [pc, #104]	; (24504 <z_tick_get+0x80>)
   2449a:	f7ff fc1f 	bl	23cdc <z_spin_lock_valid>
   2449e:	b960      	cbnz	r0, 244ba <z_tick_get+0x36>
   244a0:	4919      	ldr	r1, [pc, #100]	; (24508 <z_tick_get+0x84>)
   244a2:	234e      	movs	r3, #78	; 0x4e
   244a4:	4a19      	ldr	r2, [pc, #100]	; (2450c <z_tick_get+0x88>)
   244a6:	481a      	ldr	r0, [pc, #104]	; (24510 <z_tick_get+0x8c>)
   244a8:	f001 fb49 	bl	25b3e <printk>
   244ac:	4819      	ldr	r0, [pc, #100]	; (24514 <z_tick_get+0x90>)
   244ae:	f001 fb46 	bl	25b3e <printk>
   244b2:	214e      	movs	r1, #78	; 0x4e
   244b4:	4815      	ldr	r0, [pc, #84]	; (2450c <z_tick_get+0x88>)
   244b6:	f001 fb4f 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   244ba:	4812      	ldr	r0, [pc, #72]	; (24504 <z_tick_get+0x80>)
   244bc:	f7ff fc2c 	bl	23d18 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   244c0:	f7ec fc06 	bl	10cd0 <z_clock_elapsed>
   244c4:	4b14      	ldr	r3, [pc, #80]	; (24518 <z_tick_get+0x94>)
   244c6:	e9d3 4500 	ldrd	r4, r5, [r3]
   244ca:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   244cc:	480d      	ldr	r0, [pc, #52]	; (24504 <z_tick_get+0x80>)
   244ce:	f145 0800 	adc.w	r8, r5, #0
   244d2:	f7ff fc11 	bl	23cf8 <z_spin_unlock_valid>
   244d6:	b960      	cbnz	r0, 244f2 <z_tick_get+0x6e>
   244d8:	4910      	ldr	r1, [pc, #64]	; (2451c <z_tick_get+0x98>)
   244da:	2361      	movs	r3, #97	; 0x61
   244dc:	4a0b      	ldr	r2, [pc, #44]	; (2450c <z_tick_get+0x88>)
   244de:	480c      	ldr	r0, [pc, #48]	; (24510 <z_tick_get+0x8c>)
   244e0:	f001 fb2d 	bl	25b3e <printk>
   244e4:	480e      	ldr	r0, [pc, #56]	; (24520 <z_tick_get+0x9c>)
   244e6:	f001 fb2a 	bl	25b3e <printk>
   244ea:	2161      	movs	r1, #97	; 0x61
   244ec:	4807      	ldr	r0, [pc, #28]	; (2450c <z_tick_get+0x88>)
   244ee:	f001 fb33 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   244f2:	f386 8811 	msr	BASEPRI, r6
   244f6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   244fa:	4638      	mov	r0, r7
   244fc:	4641      	mov	r1, r8
   244fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24502:	bf00      	nop
   24504:	20022234 	.word	0x20022234
   24508:	0002b68e 	.word	0x0002b68e
   2450c:	0002b666 	.word	0x0002b666
   24510:	0002abaa 	.word	0x0002abaa
   24514:	0002b6a3 	.word	0x0002b6a3
   24518:	20020000 	.word	0x20020000
   2451c:	0002b6b8 	.word	0x0002b6b8
   24520:	0002b6cf 	.word	0x0002b6cf

00024524 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   24524:	6a02      	ldr	r2, [r0, #32]
{
   24526:	b538      	push	{r3, r4, r5, lr}
	if (timer->period > 0) {
   24528:	2a00      	cmp	r2, #0
{
   2452a:	4604      	mov	r4, r0
	if (timer->period > 0) {
   2452c:	dd02      	ble.n	24534 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2452e:	490e      	ldr	r1, [pc, #56]	; (24568 <z_timer_expiration_handler+0x44>)
   24530:	f7ff fd74 	bl	2401c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   24534:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24536:	3301      	adds	r3, #1
   24538:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2453a:	69a3      	ldr	r3, [r4, #24]
   2453c:	b10b      	cbz	r3, 24542 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   2453e:	4620      	mov	r0, r4
   24540:	4798      	blx	r3
	return list->head == list;
   24542:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24546:	42a5      	cmp	r5, r4
   24548:	d00d      	beq.n	24566 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2454a:	b165      	cbz	r5, 24566 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2454c:	4628      	mov	r0, r5
   2454e:	f7fe fa9b 	bl	22a88 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   24552:	7b6b      	ldrb	r3, [r5, #13]
   24554:	06db      	lsls	r3, r3, #27
   24556:	d104      	bne.n	24562 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   24558:	69ab      	ldr	r3, [r5, #24]
   2455a:	b913      	cbnz	r3, 24562 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   2455c:	4628      	mov	r0, r5
   2455e:	f7fe fcd7 	bl	22f10 <z_add_thread_to_ready_q>
   24562:	2300      	movs	r3, #0
   24564:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_set_thread_return_value(thread, 0);
}
   24566:	bd38      	pop	{r3, r4, r5, pc}
   24568:	00024525 	.word	0x00024525

0002456c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2456c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT(duration >= 0 && period >= 0 &&
   24570:	f1b1 0900 	subs.w	r9, r1, #0
{
   24574:	4604      	mov	r4, r0
   24576:	4615      	mov	r5, r2
	__ASSERT(duration >= 0 && period >= 0 &&
   24578:	db05      	blt.n	24586 <z_impl_k_timer_start+0x1a>
   2457a:	2a00      	cmp	r2, #0
   2457c:	db03      	blt.n	24586 <z_impl_k_timer_start+0x1a>
   2457e:	f1b9 0f00 	cmp.w	r9, #0
   24582:	d10d      	bne.n	245a0 <z_impl_k_timer_start+0x34>
   24584:	b962      	cbnz	r2, 245a0 <z_impl_k_timer_start+0x34>
   24586:	491a      	ldr	r1, [pc, #104]	; (245f0 <z_impl_k_timer_start+0x84>)
   24588:	2373      	movs	r3, #115	; 0x73
   2458a:	4a1a      	ldr	r2, [pc, #104]	; (245f4 <z_impl_k_timer_start+0x88>)
   2458c:	481a      	ldr	r0, [pc, #104]	; (245f8 <z_impl_k_timer_start+0x8c>)
   2458e:	f001 fad6 	bl	25b3e <printk>
   24592:	481a      	ldr	r0, [pc, #104]	; (245fc <z_impl_k_timer_start+0x90>)
   24594:	f001 fad3 	bl	25b3e <printk>
   24598:	2173      	movs	r1, #115	; 0x73
   2459a:	4816      	ldr	r0, [pc, #88]	; (245f4 <z_impl_k_timer_start+0x88>)
   2459c:	f001 fadc 	bl	25b58 <assert_post_action>
   245a0:	2700      	movs	r7, #0
   245a2:	4e17      	ldr	r6, [pc, #92]	; (24600 <z_impl_k_timer_start+0x94>)
   245a4:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   245a8:	4630      	mov	r0, r6
   245aa:	4639      	mov	r1, r7
   245ac:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   245b0:	2300      	movs	r3, #0
   245b2:	fbc8 0105 	smlal	r0, r1, r8, r5
   245b6:	f7e7 fdc5 	bl	c144 <__aeabi_ldivmod>
   245ba:	4639      	mov	r1, r7
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   245bc:	9000      	str	r0, [sp, #0]
   245be:	4630      	mov	r0, r6
   245c0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
   245c4:	2300      	movs	r3, #0
   245c6:	fbc8 0109 	smlal	r0, r1, r8, r9
   245ca:	f7e7 fdbb 	bl	c144 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   245ce:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   245d0:	4620      	mov	r0, r4
   245d2:	f7ff fdc9 	bl	24168 <z_abort_timeout>
	timer->period = period_in_ticks;
   245d6:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   245d8:	4620      	mov	r0, r4
	timer->period = period_in_ticks;
   245da:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
   245dc:	2300      	movs	r3, #0
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   245de:	9a01      	ldr	r2, [sp, #4]
   245e0:	4908      	ldr	r1, [pc, #32]	; (24604 <z_impl_k_timer_start+0x98>)
	timer->status = 0U;
   245e2:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   245e4:	b003      	add	sp, #12
   245e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   245ea:	f7ff bd17 	b.w	2401c <z_add_timeout>
   245ee:	bf00      	nop
   245f0:	0002c5c7 	.word	0x0002c5c7
   245f4:	0002c5a3 	.word	0x0002c5a3
   245f8:	0002abaa 	.word	0x0002abaa
   245fc:	0002c606 	.word	0x0002c606
   24600:	0003e7ff 	.word	0x0003e7ff
   24604:	00024525 	.word	0x00024525

00024608 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      k_spinlock_key_t key)
{
   24608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2460c:	2414      	movs	r4, #20
   2460e:	460f      	mov	r7, r1
   24610:	4690      	mov	r8, r2
   24612:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   24616:	4d45      	ldr	r5, [pc, #276]	; (2472c <clear_event_registrations+0x124>)
   24618:	f8df 914c 	ldr.w	r9, [pc, #332]	; 24768 <clear_event_registrations+0x160>
   2461c:	4e44      	ldr	r6, [pc, #272]	; (24730 <clear_event_registrations+0x128>)
	for (; last_registered >= 0; last_registered--) {
   2461e:	2f00      	cmp	r7, #0
   24620:	da01      	bge.n	24626 <clear_event_registrations+0x1e>
		clear_event_registration(&events[last_registered]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   24622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   24626:	2300      	movs	r3, #0
   24628:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   2462a:	7b63      	ldrb	r3, [r4, #13]
   2462c:	f003 030f 	and.w	r3, r3, #15
   24630:	2b04      	cmp	r3, #4
   24632:	d839      	bhi.n	246a8 <clear_event_registrations+0xa0>
   24634:	e8df f003 	tbb	[pc, r3]
   24638:	38032a45 	.word	0x38032a45
   2463c:	1c          	.byte	0x1c
   2463d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2463e:	6923      	ldr	r3, [r4, #16]
   24640:	b963      	cbnz	r3, 2465c <clear_event_registrations+0x54>
   24642:	493c      	ldr	r1, [pc, #240]	; (24734 <clear_event_registrations+0x12c>)
   24644:	2396      	movs	r3, #150	; 0x96
   24646:	462a      	mov	r2, r5
   24648:	4630      	mov	r0, r6
   2464a:	f001 fa78 	bl	25b3e <printk>
   2464e:	483a      	ldr	r0, [pc, #232]	; (24738 <clear_event_registrations+0x130>)
   24650:	f001 fa75 	bl	25b3e <printk>
   24654:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24656:	4628      	mov	r0, r5
   24658:	f001 fa7e 	bl	25b58 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2465c:	6822      	ldr	r2, [r4, #0]
   2465e:	b382      	cbz	r2, 246c2 <clear_event_registrations+0xba>
	node->prev->next = node->next;
   24660:	6863      	ldr	r3, [r4, #4]
   24662:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   24664:	6822      	ldr	r2, [r4, #0]
   24666:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   24668:	2300      	movs	r3, #0
	node->prev = NULL;
   2466a:	e9c4 3300 	strd	r3, r3, [r4]
   2466e:	e028      	b.n	246c2 <clear_event_registrations+0xba>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24670:	6923      	ldr	r3, [r4, #16]
   24672:	2b00      	cmp	r3, #0
   24674:	d1f2      	bne.n	2465c <clear_event_registrations+0x54>
   24676:	4931      	ldr	r1, [pc, #196]	; (2473c <clear_event_registrations+0x134>)
   24678:	239a      	movs	r3, #154	; 0x9a
   2467a:	462a      	mov	r2, r5
   2467c:	4630      	mov	r0, r6
   2467e:	f001 fa5e 	bl	25b3e <printk>
   24682:	482f      	ldr	r0, [pc, #188]	; (24740 <clear_event_registrations+0x138>)
   24684:	f001 fa5b 	bl	25b3e <printk>
   24688:	219a      	movs	r1, #154	; 0x9a
   2468a:	e7e4      	b.n	24656 <clear_event_registrations+0x4e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2468c:	6923      	ldr	r3, [r4, #16]
   2468e:	2b00      	cmp	r3, #0
   24690:	d1e4      	bne.n	2465c <clear_event_registrations+0x54>
   24692:	492c      	ldr	r1, [pc, #176]	; (24744 <clear_event_registrations+0x13c>)
   24694:	239e      	movs	r3, #158	; 0x9e
   24696:	462a      	mov	r2, r5
   24698:	4630      	mov	r0, r6
   2469a:	f001 fa50 	bl	25b3e <printk>
   2469e:	482a      	ldr	r0, [pc, #168]	; (24748 <clear_event_registrations+0x140>)
   246a0:	f001 fa4d 	bl	25b3e <printk>
   246a4:	219e      	movs	r1, #158	; 0x9e
   246a6:	e7d6      	b.n	24656 <clear_event_registrations+0x4e>
		__ASSERT(false, "invalid event type\n");
   246a8:	4649      	mov	r1, r9
   246aa:	23a5      	movs	r3, #165	; 0xa5
   246ac:	462a      	mov	r2, r5
   246ae:	4630      	mov	r0, r6
   246b0:	f001 fa45 	bl	25b3e <printk>
   246b4:	4825      	ldr	r0, [pc, #148]	; (2474c <clear_event_registrations+0x144>)
   246b6:	f001 fa42 	bl	25b3e <printk>
   246ba:	21a5      	movs	r1, #165	; 0xa5
   246bc:	4628      	mov	r0, r5
   246be:	f001 fa4b 	bl	25b58 <assert_post_action>
   246c2:	4823      	ldr	r0, [pc, #140]	; (24750 <clear_event_registrations+0x148>)
   246c4:	f7ff fb18 	bl	23cf8 <z_spin_unlock_valid>
   246c8:	b960      	cbnz	r0, 246e4 <clear_event_registrations+0xdc>
   246ca:	4922      	ldr	r1, [pc, #136]	; (24754 <clear_event_registrations+0x14c>)
   246cc:	2361      	movs	r3, #97	; 0x61
   246ce:	4a22      	ldr	r2, [pc, #136]	; (24758 <clear_event_registrations+0x150>)
   246d0:	4630      	mov	r0, r6
   246d2:	f001 fa34 	bl	25b3e <printk>
   246d6:	4821      	ldr	r0, [pc, #132]	; (2475c <clear_event_registrations+0x154>)
   246d8:	f001 fa31 	bl	25b3e <printk>
   246dc:	2161      	movs	r1, #97	; 0x61
   246de:	481e      	ldr	r0, [pc, #120]	; (24758 <clear_event_registrations+0x150>)
   246e0:	f001 fa3a 	bl	25b58 <assert_post_action>
   246e4:	f388 8811 	msr	BASEPRI, r8
   246e8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   246ec:	f04f 0320 	mov.w	r3, #32
   246f0:	f3ef 8811 	mrs	r8, BASEPRI
   246f4:	f383 8811 	msr	BASEPRI, r3
   246f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   246fc:	4814      	ldr	r0, [pc, #80]	; (24750 <clear_event_registrations+0x148>)
   246fe:	f7ff faed 	bl	23cdc <z_spin_lock_valid>
   24702:	b960      	cbnz	r0, 2471e <clear_event_registrations+0x116>
   24704:	4916      	ldr	r1, [pc, #88]	; (24760 <clear_event_registrations+0x158>)
   24706:	234e      	movs	r3, #78	; 0x4e
   24708:	4a13      	ldr	r2, [pc, #76]	; (24758 <clear_event_registrations+0x150>)
   2470a:	4630      	mov	r0, r6
   2470c:	f001 fa17 	bl	25b3e <printk>
   24710:	4814      	ldr	r0, [pc, #80]	; (24764 <clear_event_registrations+0x15c>)
   24712:	f001 fa14 	bl	25b3e <printk>
   24716:	214e      	movs	r1, #78	; 0x4e
   24718:	480f      	ldr	r0, [pc, #60]	; (24758 <clear_event_registrations+0x150>)
   2471a:	f001 fa1d 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   2471e:	480c      	ldr	r0, [pc, #48]	; (24750 <clear_event_registrations+0x148>)
   24720:	f7ff fafa 	bl	23d18 <z_spin_lock_set_owner>
	for (; last_registered >= 0; last_registered--) {
   24724:	3f01      	subs	r7, #1
   24726:	3c14      	subs	r4, #20
   24728:	e779      	b.n	2461e <clear_event_registrations+0x16>
   2472a:	bf00      	nop
   2472c:	0002c61c 	.word	0x0002c61c
   24730:	0002abaa 	.word	0x0002abaa
   24734:	0002c63f 	.word	0x0002c63f
   24738:	0002c659 	.word	0x0002c659
   2473c:	0002c66e 	.word	0x0002c66e
   24740:	0002c68a 	.word	0x0002c68a
   24744:	0002c69b 	.word	0x0002c69b
   24748:	0002c6b8 	.word	0x0002c6b8
   2474c:	0002c6cf 	.word	0x0002c6cf
   24750:	20022238 	.word	0x20022238
   24754:	0002b6b8 	.word	0x0002b6b8
   24758:	0002b666 	.word	0x0002b666
   2475c:	0002b6cf 	.word	0x0002b6cf
   24760:	0002b68e 	.word	0x0002b68e
   24764:	0002b6a3 	.word	0x0002b6a3
   24768:	0002c399 	.word	0x0002c399

0002476c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   2476c:	6883      	ldr	r3, [r0, #8]
{
   2476e:	b570      	push	{r4, r5, r6, lr}
   24770:	4605      	mov	r5, r0
   24772:	460e      	mov	r6, r1
	if (!event->poller) {
   24774:	b353      	cbz	r3, 247cc <signal_poll_event+0x60>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   24776:	681c      	ldr	r4, [r3, #0]

	__ASSERT(event->poller->thread != NULL,
   24778:	b974      	cbnz	r4, 24798 <signal_poll_event+0x2c>
   2477a:	491b      	ldr	r1, [pc, #108]	; (247e8 <signal_poll_event+0x7c>)
   2477c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   24780:	4a1a      	ldr	r2, [pc, #104]	; (247ec <signal_poll_event+0x80>)
   24782:	481b      	ldr	r0, [pc, #108]	; (247f0 <signal_poll_event+0x84>)
   24784:	f001 f9db 	bl	25b3e <printk>
   24788:	481a      	ldr	r0, [pc, #104]	; (247f4 <signal_poll_event+0x88>)
   2478a:	f001 f9d8 	bl	25b3e <printk>
   2478e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   24792:	4816      	ldr	r0, [pc, #88]	; (247ec <signal_poll_event+0x80>)
   24794:	f001 f9e0 	bl	25b58 <assert_post_action>
		 "poller should have a thread\n");

	event->poller->is_polling = false;
   24798:	2200      	movs	r2, #0
   2479a:	68ab      	ldr	r3, [r5, #8]
   2479c:	711a      	strb	r2, [r3, #4]

	if (!z_is_thread_pending(thread)) {
   2479e:	7b63      	ldrb	r3, [r4, #13]
   247a0:	079a      	lsls	r2, r3, #30
   247a2:	d513      	bpl.n	247cc <signal_poll_event+0x60>
		goto ready_event;
	}

	if (z_is_thread_timeout_expired(thread)) {
   247a4:	6a23      	ldr	r3, [r4, #32]
   247a6:	3302      	adds	r3, #2
   247a8:	d01a      	beq.n	247e0 <signal_poll_event+0x74>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   247aa:	4620      	mov	r0, r4
   247ac:	f7fe faa4 	bl	22cf8 <z_unpend_thread>
	z_set_thread_return_value(thread,
   247b0:	2e08      	cmp	r6, #8
   247b2:	bf0c      	ite	eq
   247b4:	f06f 0303 	mvneq.w	r3, #3
   247b8:	2300      	movne	r3, #0
   247ba:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   247bc:	7b63      	ldrb	r3, [r4, #13]
   247be:	06db      	lsls	r3, r3, #27
   247c0:	d104      	bne.n	247cc <signal_poll_event+0x60>
				 state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   247c2:	69a3      	ldr	r3, [r4, #24]
   247c4:	b913      	cbnz	r3, 247cc <signal_poll_event+0x60>
		z_add_thread_to_ready_q(thread);
   247c6:	4620      	mov	r0, r4
   247c8:	f7fe fba2 	bl	22f10 <z_add_thread_to_ready_q>
	event->poller = NULL;
   247cc:	2000      	movs	r0, #0
	event->state |= state;
   247ce:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   247d0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   247d2:	f3c3 3204 	ubfx	r2, r3, #12, #5
   247d6:	4316      	orrs	r6, r2
   247d8:	f366 3310 	bfi	r3, r6, #12, #5
   247dc:	60eb      	str	r3, [r5, #12]
	z_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
}
   247de:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   247e0:	f06f 000a 	mvn.w	r0, #10
   247e4:	e7fb      	b.n	247de <signal_poll_event+0x72>
   247e6:	bf00      	nop
   247e8:	0002c78c 	.word	0x0002c78c
   247ec:	0002c61c 	.word	0x0002c61c
   247f0:	0002abaa 	.word	0x0002abaa
   247f4:	0002c7b1 	.word	0x0002c7b1

000247f8 <k_poll_event_init>:
{
   247f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247fa:	4604      	mov	r4, r0
   247fc:	460f      	mov	r7, r1
   247fe:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   24800:	4616      	mov	r6, r2
   24802:	b162      	cbz	r2, 2481e <k_poll_event_init+0x26>
   24804:	491f      	ldr	r1, [pc, #124]	; (24884 <k_poll_event_init+0x8c>)
   24806:	232a      	movs	r3, #42	; 0x2a
   24808:	4a1f      	ldr	r2, [pc, #124]	; (24888 <k_poll_event_init+0x90>)
   2480a:	4820      	ldr	r0, [pc, #128]	; (2488c <k_poll_event_init+0x94>)
   2480c:	f001 f997 	bl	25b3e <printk>
   24810:	481f      	ldr	r0, [pc, #124]	; (24890 <k_poll_event_init+0x98>)
   24812:	f001 f994 	bl	25b3e <printk>
   24816:	212a      	movs	r1, #42	; 0x2a
   24818:	481b      	ldr	r0, [pc, #108]	; (24888 <k_poll_event_init+0x90>)
   2481a:	f001 f99d 	bl	25b58 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2481e:	2f0f      	cmp	r7, #15
   24820:	d90c      	bls.n	2483c <k_poll_event_init+0x44>
   24822:	491c      	ldr	r1, [pc, #112]	; (24894 <k_poll_event_init+0x9c>)
   24824:	232b      	movs	r3, #43	; 0x2b
   24826:	4a18      	ldr	r2, [pc, #96]	; (24888 <k_poll_event_init+0x90>)
   24828:	4818      	ldr	r0, [pc, #96]	; (2488c <k_poll_event_init+0x94>)
   2482a:	f001 f988 	bl	25b3e <printk>
   2482e:	481a      	ldr	r0, [pc, #104]	; (24898 <k_poll_event_init+0xa0>)
   24830:	f001 f985 	bl	25b3e <printk>
   24834:	212b      	movs	r1, #43	; 0x2b
   24836:	4814      	ldr	r0, [pc, #80]	; (24888 <k_poll_event_init+0x90>)
   24838:	f001 f98e 	bl	25b58 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   2483c:	b965      	cbnz	r5, 24858 <k_poll_event_init+0x60>
   2483e:	4917      	ldr	r1, [pc, #92]	; (2489c <k_poll_event_init+0xa4>)
   24840:	232c      	movs	r3, #44	; 0x2c
   24842:	4a11      	ldr	r2, [pc, #68]	; (24888 <k_poll_event_init+0x90>)
   24844:	4811      	ldr	r0, [pc, #68]	; (2488c <k_poll_event_init+0x94>)
   24846:	f001 f97a 	bl	25b3e <printk>
   2484a:	4815      	ldr	r0, [pc, #84]	; (248a0 <k_poll_event_init+0xa8>)
   2484c:	f001 f977 	bl	25b3e <printk>
   24850:	212c      	movs	r1, #44	; 0x2c
   24852:	480d      	ldr	r0, [pc, #52]	; (24888 <k_poll_event_init+0x90>)
   24854:	f001 f980 	bl	25b58 <assert_post_action>
	event->poller = NULL;
   24858:	2200      	movs	r2, #0
	event->type = type;
   2485a:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   2485c:	60a2      	str	r2, [r4, #8]
	event->type = type;
   2485e:	f367 0303 	bfi	r3, r7, #0, #4
   24862:	7363      	strb	r3, [r4, #13]
	event->state = K_POLL_STATE_NOT_READY;
   24864:	68e3      	ldr	r3, [r4, #12]
	event->obj = obj;
   24866:	6125      	str	r5, [r4, #16]
	event->state = K_POLL_STATE_NOT_READY;
   24868:	f362 3310 	bfi	r3, r2, #12, #5
   2486c:	60e3      	str	r3, [r4, #12]
	event->mode = mode;
   2486e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   24872:	f366 0341 	bfi	r3, r6, #1, #1
   24876:	73a3      	strb	r3, [r4, #14]
	event->unused = 0U;
   24878:	89e3      	ldrh	r3, [r4, #14]
   2487a:	f362 038f 	bfi	r3, r2, #2, #14
   2487e:	81e3      	strh	r3, [r4, #14]
}
   24880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24882:	bf00      	nop
   24884:	0002c6e5 	.word	0x0002c6e5
   24888:	0002c61c 	.word	0x0002c61c
   2488c:	0002abaa 	.word	0x0002abaa
   24890:	0002c705 	.word	0x0002c705
   24894:	0002c72b 	.word	0x0002c72b
   24898:	0002c74f 	.word	0x0002c74f
   2489c:	0002c75f 	.word	0x0002c75f
   248a0:	0002c772 	.word	0x0002c772

000248a4 <z_impl_k_poll>:
{
   248a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248a8:	4605      	mov	r5, r0
   248aa:	b087      	sub	sp, #28
   248ac:	468b      	mov	fp, r1
   248ae:	4690      	mov	r8, r2
   248b0:	f3ef 8305 	mrs	r3, IPSR
   248b4:	2b0d      	cmp	r3, #13
   248b6:	d804      	bhi.n	248c2 <z_impl_k_poll+0x1e>
   248b8:	b183      	cbz	r3, 248dc <z_impl_k_poll+0x38>
   248ba:	4ba6      	ldr	r3, [pc, #664]	; (24b54 <z_impl_k_poll+0x2b0>)
   248bc:	685b      	ldr	r3, [r3, #4]
   248be:	051b      	lsls	r3, r3, #20
   248c0:	d40c      	bmi.n	248dc <z_impl_k_poll+0x38>
	__ASSERT(!z_is_in_isr(), "");
   248c2:	49a5      	ldr	r1, [pc, #660]	; (24b58 <z_impl_k_poll+0x2b4>)
   248c4:	23c1      	movs	r3, #193	; 0xc1
   248c6:	4aa5      	ldr	r2, [pc, #660]	; (24b5c <z_impl_k_poll+0x2b8>)
   248c8:	48a5      	ldr	r0, [pc, #660]	; (24b60 <z_impl_k_poll+0x2bc>)
   248ca:	f001 f938 	bl	25b3e <printk>
   248ce:	48a5      	ldr	r0, [pc, #660]	; (24b64 <z_impl_k_poll+0x2c0>)
   248d0:	f001 f935 	bl	25b3e <printk>
   248d4:	21c1      	movs	r1, #193	; 0xc1
   248d6:	48a1      	ldr	r0, [pc, #644]	; (24b5c <z_impl_k_poll+0x2b8>)
   248d8:	f001 f93e 	bl	25b58 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   248dc:	b965      	cbnz	r5, 248f8 <z_impl_k_poll+0x54>
   248de:	49a2      	ldr	r1, [pc, #648]	; (24b68 <z_impl_k_poll+0x2c4>)
   248e0:	23c2      	movs	r3, #194	; 0xc2
   248e2:	4a9e      	ldr	r2, [pc, #632]	; (24b5c <z_impl_k_poll+0x2b8>)
   248e4:	489e      	ldr	r0, [pc, #632]	; (24b60 <z_impl_k_poll+0x2bc>)
   248e6:	f001 f92a 	bl	25b3e <printk>
   248ea:	48a0      	ldr	r0, [pc, #640]	; (24b6c <z_impl_k_poll+0x2c8>)
   248ec:	f001 f927 	bl	25b3e <printk>
   248f0:	21c2      	movs	r1, #194	; 0xc2
   248f2:	489a      	ldr	r0, [pc, #616]	; (24b5c <z_impl_k_poll+0x2b8>)
   248f4:	f001 f930 	bl	25b58 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   248f8:	f1bb 0f00 	cmp.w	fp, #0
   248fc:	dc0c      	bgt.n	24918 <z_impl_k_poll+0x74>
   248fe:	499c      	ldr	r1, [pc, #624]	; (24b70 <z_impl_k_poll+0x2cc>)
   24900:	23c3      	movs	r3, #195	; 0xc3
   24902:	4a96      	ldr	r2, [pc, #600]	; (24b5c <z_impl_k_poll+0x2b8>)
   24904:	4896      	ldr	r0, [pc, #600]	; (24b60 <z_impl_k_poll+0x2bc>)
   24906:	f001 f91a 	bl	25b3e <printk>
   2490a:	489a      	ldr	r0, [pc, #616]	; (24b74 <z_impl_k_poll+0x2d0>)
   2490c:	f001 f917 	bl	25b3e <printk>
   24910:	21c3      	movs	r1, #195	; 0xc3
   24912:	4892      	ldr	r0, [pc, #584]	; (24b5c <z_impl_k_poll+0x2b8>)
   24914:	f001 f920 	bl	25b58 <assert_post_action>
	struct _poller poller = { .thread = _current, .is_polling = true, };
   24918:	4b97      	ldr	r3, [pc, #604]	; (24b78 <z_impl_k_poll+0x2d4>)
   2491a:	462c      	mov	r4, r5
   2491c:	689b      	ldr	r3, [r3, #8]
	for (int ii = 0; ii < num_events; ii++) {
   2491e:	f04f 0900 	mov.w	r9, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   24922:	9302      	str	r3, [sp, #8]
   24924:	2301      	movs	r3, #1
	int last_registered = -1, rc;
   24926:	f04f 36ff 	mov.w	r6, #4294967295
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2492a:	f8df a254 	ldr.w	sl, [pc, #596]	; 24b80 <z_impl_k_poll+0x2dc>
   2492e:	4f93      	ldr	r7, [pc, #588]	; (24b7c <z_impl_k_poll+0x2d8>)
	struct _poller poller = { .thread = _current, .is_polling = true, };
   24930:	f88d 300c 	strb.w	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   24934:	45d9      	cmp	r9, fp
   24936:	db3f      	blt.n	249b8 <z_impl_k_poll+0x114>
   24938:	f04f 0320 	mov.w	r3, #32
   2493c:	f3ef 8411 	mrs	r4, BASEPRI
   24940:	f383 8811 	msr	BASEPRI, r3
   24944:	f3bf 8f6f 	isb	sy
   24948:	488d      	ldr	r0, [pc, #564]	; (24b80 <z_impl_k_poll+0x2dc>)
   2494a:	f7ff f9c7 	bl	23cdc <z_spin_lock_valid>
   2494e:	b960      	cbnz	r0, 2496a <z_impl_k_poll+0xc6>
   24950:	498c      	ldr	r1, [pc, #560]	; (24b84 <z_impl_k_poll+0x2e0>)
   24952:	234e      	movs	r3, #78	; 0x4e
   24954:	4a89      	ldr	r2, [pc, #548]	; (24b7c <z_impl_k_poll+0x2d8>)
   24956:	4882      	ldr	r0, [pc, #520]	; (24b60 <z_impl_k_poll+0x2bc>)
   24958:	f001 f8f1 	bl	25b3e <printk>
   2495c:	488a      	ldr	r0, [pc, #552]	; (24b88 <z_impl_k_poll+0x2e4>)
   2495e:	f001 f8ee 	bl	25b3e <printk>
   24962:	214e      	movs	r1, #78	; 0x4e
   24964:	4885      	ldr	r0, [pc, #532]	; (24b7c <z_impl_k_poll+0x2d8>)
   24966:	f001 f8f7 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   2496a:	4885      	ldr	r0, [pc, #532]	; (24b80 <z_impl_k_poll+0x2dc>)
   2496c:	f7ff f9d4 	bl	23d18 <z_spin_lock_set_owner>
	if (!poller.is_polling) {
   24970:	f89d 300c 	ldrb.w	r3, [sp, #12]
   24974:	2b00      	cmp	r3, #0
   24976:	f040 811f 	bne.w	24bb8 <z_impl_k_poll+0x314>
		clear_event_registrations(events, last_registered, key);
   2497a:	4628      	mov	r0, r5
   2497c:	4622      	mov	r2, r4
   2497e:	4631      	mov	r1, r6
   24980:	f7ff fe42 	bl	24608 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   24984:	487e      	ldr	r0, [pc, #504]	; (24b80 <z_impl_k_poll+0x2dc>)
   24986:	f7ff f9b7 	bl	23cf8 <z_spin_unlock_valid>
   2498a:	b960      	cbnz	r0, 249a6 <z_impl_k_poll+0x102>
   2498c:	497f      	ldr	r1, [pc, #508]	; (24b8c <z_impl_k_poll+0x2e8>)
   2498e:	2361      	movs	r3, #97	; 0x61
   24990:	4a7a      	ldr	r2, [pc, #488]	; (24b7c <z_impl_k_poll+0x2d8>)
   24992:	4873      	ldr	r0, [pc, #460]	; (24b60 <z_impl_k_poll+0x2bc>)
   24994:	f001 f8d3 	bl	25b3e <printk>
   24998:	487d      	ldr	r0, [pc, #500]	; (24b90 <z_impl_k_poll+0x2ec>)
   2499a:	f001 f8d0 	bl	25b3e <printk>
   2499e:	2161      	movs	r1, #97	; 0x61
   249a0:	4876      	ldr	r0, [pc, #472]	; (24b7c <z_impl_k_poll+0x2d8>)
   249a2:	f001 f8d9 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   249a6:	f384 8811 	msr	BASEPRI, r4
   249aa:	f3bf 8f6f 	isb	sy
		return 0;
   249ae:	2400      	movs	r4, #0
}
   249b0:	4620      	mov	r0, r4
   249b2:	b007      	add	sp, #28
   249b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   249b8:	f04f 0320 	mov.w	r3, #32
   249bc:	f3ef 8211 	mrs	r2, BASEPRI
   249c0:	f383 8811 	msr	BASEPRI, r3
   249c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   249c8:	4650      	mov	r0, sl
   249ca:	9201      	str	r2, [sp, #4]
   249cc:	f7ff f986 	bl	23cdc <z_spin_lock_valid>
   249d0:	b960      	cbnz	r0, 249ec <z_impl_k_poll+0x148>
   249d2:	496c      	ldr	r1, [pc, #432]	; (24b84 <z_impl_k_poll+0x2e0>)
   249d4:	234e      	movs	r3, #78	; 0x4e
   249d6:	463a      	mov	r2, r7
   249d8:	4861      	ldr	r0, [pc, #388]	; (24b60 <z_impl_k_poll+0x2bc>)
   249da:	f001 f8b0 	bl	25b3e <printk>
   249de:	486a      	ldr	r0, [pc, #424]	; (24b88 <z_impl_k_poll+0x2e4>)
   249e0:	f001 f8ad 	bl	25b3e <printk>
   249e4:	214e      	movs	r1, #78	; 0x4e
   249e6:	4638      	mov	r0, r7
   249e8:	f001 f8b6 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   249ec:	4650      	mov	r0, sl
   249ee:	f7ff f993 	bl	23d18 <z_spin_lock_set_owner>
	switch (event->type) {
   249f2:	7b63      	ldrb	r3, [r4, #13]
   249f4:	f003 030f 	and.w	r3, r3, #15
   249f8:	2b04      	cmp	r3, #4
   249fa:	d826      	bhi.n	24a4a <z_impl_k_poll+0x1a6>
   249fc:	e8df f003 	tbb	[pc, r3]
   24a00:	25031f07 	.word	0x25031f07
   24a04:	19          	.byte	0x19
   24a05:	00          	.byte	0x00
K_SYSCALL_DECLARE1(K_SYSCALL_K_SEM_COUNT_GET, k_sem_count_get, unsigned int, struct k_sem *, sem)
   24a06:	6923      	ldr	r3, [r4, #16]
		if (k_sem_count_get(event->sem) > 0) {
   24a08:	689b      	ldr	r3, [r3, #8]
   24a0a:	2b00      	cmp	r3, #0
   24a0c:	d12e      	bne.n	24a6c <z_impl_k_poll+0x1c8>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   24a0e:	f1b8 0f00 	cmp.w	r8, #0
   24a12:	d037      	beq.n	24a84 <z_impl_k_poll+0x1e0>
   24a14:	f89d 300c 	ldrb.w	r3, [sp, #12]
   24a18:	2b00      	cmp	r3, #0
   24a1a:	d033      	beq.n	24a84 <z_impl_k_poll+0x1e0>
	switch (event->type) {
   24a1c:	7b63      	ldrb	r3, [r4, #13]
   24a1e:	f003 030f 	and.w	r3, r3, #15
   24a22:	2b04      	cmp	r3, #4
   24a24:	f200 8088 	bhi.w	24b38 <z_impl_k_poll+0x294>
   24a28:	e8df f003 	tbb	[pc, r3]
   24a2c:	8646735b 	.word	0x8646735b
   24a30:	5f          	.byte	0x5f
   24a31:	00          	.byte	0x00
Z_GENLIST_IS_EMPTY(sflist)
   24a32:	6923      	ldr	r3, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   24a34:	681b      	ldr	r3, [r3, #0]
   24a36:	2b00      	cmp	r3, #0
   24a38:	d0e9      	beq.n	24a0e <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24a3a:	2204      	movs	r2, #4
   24a3c:	e017      	b.n	24a6e <z_impl_k_poll+0x1ca>
		if (event->signal->signaled != 0U) {
   24a3e:	6923      	ldr	r3, [r4, #16]
   24a40:	689b      	ldr	r3, [r3, #8]
   24a42:	2b00      	cmp	r3, #0
   24a44:	d0e3      	beq.n	24a0e <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_SIGNALED;
   24a46:	2201      	movs	r2, #1
   24a48:	e011      	b.n	24a6e <z_impl_k_poll+0x1ca>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   24a4a:	2350      	movs	r3, #80	; 0x50
   24a4c:	4a43      	ldr	r2, [pc, #268]	; (24b5c <z_impl_k_poll+0x2b8>)
   24a4e:	4951      	ldr	r1, [pc, #324]	; (24b94 <z_impl_k_poll+0x2f0>)
   24a50:	4843      	ldr	r0, [pc, #268]	; (24b60 <z_impl_k_poll+0x2bc>)
   24a52:	f001 f874 	bl	25b3e <printk>
   24a56:	7b61      	ldrb	r1, [r4, #13]
   24a58:	484f      	ldr	r0, [pc, #316]	; (24b98 <z_impl_k_poll+0x2f4>)
   24a5a:	f001 010f 	and.w	r1, r1, #15
   24a5e:	f001 f86e 	bl	25b3e <printk>
   24a62:	2150      	movs	r1, #80	; 0x50
   24a64:	483d      	ldr	r0, [pc, #244]	; (24b5c <z_impl_k_poll+0x2b8>)
   24a66:	f001 f877 	bl	25b58 <assert_post_action>
   24a6a:	e7d0      	b.n	24a0e <z_impl_k_poll+0x16a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24a6c:	2202      	movs	r2, #2
	event->poller = NULL;
   24a6e:	2100      	movs	r1, #0
	event->state |= state;
   24a70:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   24a72:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   24a74:	f3c3 3004 	ubfx	r0, r3, #12, #5
   24a78:	4302      	orrs	r2, r0
   24a7a:	f362 3310 	bfi	r3, r2, #12, #5
   24a7e:	60e3      	str	r3, [r4, #12]
			poller.is_polling = false;
   24a80:	f88d 100c 	strb.w	r1, [sp, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   24a84:	4650      	mov	r0, sl
   24a86:	f7ff f937 	bl	23cf8 <z_spin_unlock_valid>
   24a8a:	b960      	cbnz	r0, 24aa6 <z_impl_k_poll+0x202>
   24a8c:	493f      	ldr	r1, [pc, #252]	; (24b8c <z_impl_k_poll+0x2e8>)
   24a8e:	2361      	movs	r3, #97	; 0x61
   24a90:	463a      	mov	r2, r7
   24a92:	4833      	ldr	r0, [pc, #204]	; (24b60 <z_impl_k_poll+0x2bc>)
   24a94:	f001 f853 	bl	25b3e <printk>
   24a98:	483d      	ldr	r0, [pc, #244]	; (24b90 <z_impl_k_poll+0x2ec>)
   24a9a:	f001 f850 	bl	25b3e <printk>
   24a9e:	2161      	movs	r1, #97	; 0x61
   24aa0:	4638      	mov	r0, r7
   24aa2:	f001 f859 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   24aa6:	9b01      	ldr	r3, [sp, #4]
   24aa8:	f383 8811 	msr	BASEPRI, r3
   24aac:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24ab0:	f109 0901 	add.w	r9, r9, #1
   24ab4:	3414      	adds	r4, #20
   24ab6:	e73d      	b.n	24934 <z_impl_k_poll+0x90>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   24ab8:	6923      	ldr	r3, [r4, #16]
   24aba:	b963      	cbnz	r3, 24ad6 <z_impl_k_poll+0x232>
   24abc:	4937      	ldr	r1, [pc, #220]	; (24b9c <z_impl_k_poll+0x2f8>)
   24abe:	2375      	movs	r3, #117	; 0x75
   24ac0:	4a26      	ldr	r2, [pc, #152]	; (24b5c <z_impl_k_poll+0x2b8>)
   24ac2:	4827      	ldr	r0, [pc, #156]	; (24b60 <z_impl_k_poll+0x2bc>)
   24ac4:	f001 f83b 	bl	25b3e <printk>
   24ac8:	4835      	ldr	r0, [pc, #212]	; (24ba0 <z_impl_k_poll+0x2fc>)
   24aca:	f001 f838 	bl	25b3e <printk>
   24ace:	2175      	movs	r1, #117	; 0x75
   24ad0:	4822      	ldr	r0, [pc, #136]	; (24b5c <z_impl_k_poll+0x2b8>)
   24ad2:	f001 f841 	bl	25b58 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   24ad6:	4621      	mov	r1, r4
   24ad8:	6920      	ldr	r0, [r4, #16]
   24ada:	aa02      	add	r2, sp, #8
   24adc:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   24ade:	f002 fe55 	bl	2778c <add_event>
	event->poller = poller;
   24ae2:	ab02      	add	r3, sp, #8
   24ae4:	60a3      	str	r3, [r4, #8]
				++last_registered;
   24ae6:	3601      	adds	r6, #1
   24ae8:	e7cc      	b.n	24a84 <z_impl_k_poll+0x1e0>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   24aea:	6923      	ldr	r3, [r4, #16]
   24aec:	b963      	cbnz	r3, 24b08 <z_impl_k_poll+0x264>
   24aee:	492d      	ldr	r1, [pc, #180]	; (24ba4 <z_impl_k_poll+0x300>)
   24af0:	2379      	movs	r3, #121	; 0x79
   24af2:	4a1a      	ldr	r2, [pc, #104]	; (24b5c <z_impl_k_poll+0x2b8>)
   24af4:	481a      	ldr	r0, [pc, #104]	; (24b60 <z_impl_k_poll+0x2bc>)
   24af6:	f001 f822 	bl	25b3e <printk>
   24afa:	482b      	ldr	r0, [pc, #172]	; (24ba8 <z_impl_k_poll+0x304>)
   24afc:	f001 f81f 	bl	25b3e <printk>
   24b00:	2179      	movs	r1, #121	; 0x79
   24b02:	4816      	ldr	r0, [pc, #88]	; (24b5c <z_impl_k_poll+0x2b8>)
   24b04:	f001 f828 	bl	25b58 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   24b08:	6920      	ldr	r0, [r4, #16]
   24b0a:	aa02      	add	r2, sp, #8
   24b0c:	4621      	mov	r1, r4
   24b0e:	300c      	adds	r0, #12
   24b10:	e7e5      	b.n	24ade <z_impl_k_poll+0x23a>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   24b12:	6923      	ldr	r3, [r4, #16]
   24b14:	b963      	cbnz	r3, 24b30 <z_impl_k_poll+0x28c>
   24b16:	4925      	ldr	r1, [pc, #148]	; (24bac <z_impl_k_poll+0x308>)
   24b18:	237d      	movs	r3, #125	; 0x7d
   24b1a:	4a10      	ldr	r2, [pc, #64]	; (24b5c <z_impl_k_poll+0x2b8>)
   24b1c:	4810      	ldr	r0, [pc, #64]	; (24b60 <z_impl_k_poll+0x2bc>)
   24b1e:	f001 f80e 	bl	25b3e <printk>
   24b22:	4823      	ldr	r0, [pc, #140]	; (24bb0 <z_impl_k_poll+0x30c>)
   24b24:	f001 f80b 	bl	25b3e <printk>
   24b28:	217d      	movs	r1, #125	; 0x7d
   24b2a:	480c      	ldr	r0, [pc, #48]	; (24b5c <z_impl_k_poll+0x2b8>)
   24b2c:	f001 f814 	bl	25b58 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   24b30:	aa02      	add	r2, sp, #8
   24b32:	4621      	mov	r1, r4
   24b34:	6920      	ldr	r0, [r4, #16]
   24b36:	e7d2      	b.n	24ade <z_impl_k_poll+0x23a>
		__ASSERT(false, "invalid event type\n");
   24b38:	2384      	movs	r3, #132	; 0x84
   24b3a:	4a08      	ldr	r2, [pc, #32]	; (24b5c <z_impl_k_poll+0x2b8>)
   24b3c:	4915      	ldr	r1, [pc, #84]	; (24b94 <z_impl_k_poll+0x2f0>)
   24b3e:	4808      	ldr	r0, [pc, #32]	; (24b60 <z_impl_k_poll+0x2bc>)
   24b40:	f000 fffd 	bl	25b3e <printk>
   24b44:	481b      	ldr	r0, [pc, #108]	; (24bb4 <z_impl_k_poll+0x310>)
   24b46:	f000 fffa 	bl	25b3e <printk>
   24b4a:	2184      	movs	r1, #132	; 0x84
   24b4c:	4803      	ldr	r0, [pc, #12]	; (24b5c <z_impl_k_poll+0x2b8>)
   24b4e:	f001 f803 	bl	25b58 <assert_post_action>
   24b52:	e7c6      	b.n	24ae2 <z_impl_k_poll+0x23e>
   24b54:	e000ed00 	.word	0xe000ed00
   24b58:	0002c33e 	.word	0x0002c33e
   24b5c:	0002c61c 	.word	0x0002c61c
   24b60:	0002abaa 	.word	0x0002abaa
   24b64:	0002b126 	.word	0x0002b126
   24b68:	0002c7d0 	.word	0x0002c7d0
   24b6c:	0002c7e6 	.word	0x0002c7e6
   24b70:	0002c7f5 	.word	0x0002c7f5
   24b74:	0002c804 	.word	0x0002c804
   24b78:	20022120 	.word	0x20022120
   24b7c:	0002b666 	.word	0x0002b666
   24b80:	20022238 	.word	0x20022238
   24b84:	0002b68e 	.word	0x0002b68e
   24b88:	0002b6a3 	.word	0x0002b6a3
   24b8c:	0002b6b8 	.word	0x0002b6b8
   24b90:	0002b6cf 	.word	0x0002b6cf
   24b94:	0002c399 	.word	0x0002c399
   24b98:	0002c813 	.word	0x0002c813
   24b9c:	0002c63f 	.word	0x0002c63f
   24ba0:	0002c659 	.word	0x0002c659
   24ba4:	0002c66e 	.word	0x0002c66e
   24ba8:	0002c68a 	.word	0x0002c68a
   24bac:	0002c69b 	.word	0x0002c69b
   24bb0:	0002c6b8 	.word	0x0002c6b8
   24bb4:	0002c6cf 	.word	0x0002c6cf
	poller.is_polling = false;
   24bb8:	2300      	movs	r3, #0
   24bba:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   24bbe:	f1b8 0f00 	cmp.w	r8, #0
   24bc2:	d117      	bne.n	24bf4 <z_impl_k_poll+0x350>
   24bc4:	482b      	ldr	r0, [pc, #172]	; (24c74 <z_impl_k_poll+0x3d0>)
   24bc6:	f7ff f897 	bl	23cf8 <z_spin_unlock_valid>
   24bca:	b960      	cbnz	r0, 24be6 <z_impl_k_poll+0x342>
   24bcc:	492a      	ldr	r1, [pc, #168]	; (24c78 <z_impl_k_poll+0x3d4>)
   24bce:	2361      	movs	r3, #97	; 0x61
   24bd0:	4a2a      	ldr	r2, [pc, #168]	; (24c7c <z_impl_k_poll+0x3d8>)
   24bd2:	482b      	ldr	r0, [pc, #172]	; (24c80 <z_impl_k_poll+0x3dc>)
   24bd4:	f000 ffb3 	bl	25b3e <printk>
   24bd8:	482a      	ldr	r0, [pc, #168]	; (24c84 <z_impl_k_poll+0x3e0>)
   24bda:	f000 ffb0 	bl	25b3e <printk>
   24bde:	2161      	movs	r1, #97	; 0x61
   24be0:	4826      	ldr	r0, [pc, #152]	; (24c7c <z_impl_k_poll+0x3d8>)
   24be2:	f000 ffb9 	bl	25b58 <assert_post_action>
   24be6:	f384 8811 	msr	BASEPRI, r4
   24bea:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24bee:	f06f 040a 	mvn.w	r4, #10
   24bf2:	e6dd      	b.n	249b0 <z_impl_k_poll+0x10c>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24bf4:	aa04      	add	r2, sp, #16
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24bf6:	4621      	mov	r1, r4
   24bf8:	4643      	mov	r3, r8
   24bfa:	481e      	ldr	r0, [pc, #120]	; (24c74 <z_impl_k_poll+0x3d0>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24bfc:	e9cd 2204 	strd	r2, r2, [sp, #16]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24c00:	f7fe fc38 	bl	23474 <z_pend_curr>
   24c04:	4604      	mov	r4, r0
	__asm__ volatile(
   24c06:	f04f 0320 	mov.w	r3, #32
   24c0a:	f3ef 8711 	mrs	r7, BASEPRI
   24c0e:	f383 8811 	msr	BASEPRI, r3
   24c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   24c16:	4817      	ldr	r0, [pc, #92]	; (24c74 <z_impl_k_poll+0x3d0>)
   24c18:	f7ff f860 	bl	23cdc <z_spin_lock_valid>
   24c1c:	b960      	cbnz	r0, 24c38 <z_impl_k_poll+0x394>
   24c1e:	491a      	ldr	r1, [pc, #104]	; (24c88 <z_impl_k_poll+0x3e4>)
   24c20:	234e      	movs	r3, #78	; 0x4e
   24c22:	4a16      	ldr	r2, [pc, #88]	; (24c7c <z_impl_k_poll+0x3d8>)
   24c24:	4816      	ldr	r0, [pc, #88]	; (24c80 <z_impl_k_poll+0x3dc>)
   24c26:	f000 ff8a 	bl	25b3e <printk>
   24c2a:	4818      	ldr	r0, [pc, #96]	; (24c8c <z_impl_k_poll+0x3e8>)
   24c2c:	f000 ff87 	bl	25b3e <printk>
   24c30:	214e      	movs	r1, #78	; 0x4e
   24c32:	4812      	ldr	r0, [pc, #72]	; (24c7c <z_impl_k_poll+0x3d8>)
   24c34:	f000 ff90 	bl	25b58 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c38:	480e      	ldr	r0, [pc, #56]	; (24c74 <z_impl_k_poll+0x3d0>)
   24c3a:	f7ff f86d 	bl	23d18 <z_spin_lock_set_owner>
	clear_event_registrations(events, last_registered, key);
   24c3e:	4628      	mov	r0, r5
   24c40:	463a      	mov	r2, r7
   24c42:	4631      	mov	r1, r6
   24c44:	f7ff fce0 	bl	24608 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   24c48:	480a      	ldr	r0, [pc, #40]	; (24c74 <z_impl_k_poll+0x3d0>)
   24c4a:	f7ff f855 	bl	23cf8 <z_spin_unlock_valid>
   24c4e:	b960      	cbnz	r0, 24c6a <z_impl_k_poll+0x3c6>
   24c50:	4909      	ldr	r1, [pc, #36]	; (24c78 <z_impl_k_poll+0x3d4>)
   24c52:	2361      	movs	r3, #97	; 0x61
   24c54:	4a09      	ldr	r2, [pc, #36]	; (24c7c <z_impl_k_poll+0x3d8>)
   24c56:	480a      	ldr	r0, [pc, #40]	; (24c80 <z_impl_k_poll+0x3dc>)
   24c58:	f000 ff71 	bl	25b3e <printk>
   24c5c:	4809      	ldr	r0, [pc, #36]	; (24c84 <z_impl_k_poll+0x3e0>)
   24c5e:	f000 ff6e 	bl	25b3e <printk>
   24c62:	2161      	movs	r1, #97	; 0x61
   24c64:	4805      	ldr	r0, [pc, #20]	; (24c7c <z_impl_k_poll+0x3d8>)
   24c66:	f000 ff77 	bl	25b58 <assert_post_action>
	__asm__ volatile(
   24c6a:	f387 8811 	msr	BASEPRI, r7
   24c6e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24c72:	e69d      	b.n	249b0 <z_impl_k_poll+0x10c>
   24c74:	20022238 	.word	0x20022238
   24c78:	0002b6b8 	.word	0x0002b6b8
   24c7c:	0002b666 	.word	0x0002b666
   24c80:	0002abaa 	.word	0x0002abaa
   24c84:	0002b6cf 	.word	0x0002b6cf
   24c88:	0002b68e 	.word	0x0002b68e
   24c8c:	0002b6a3 	.word	0x0002b6a3

00024c90 <ocrypto_ecdsa_p256_public_key>:
   24c90:	b530      	push	{r4, r5, lr}
   24c92:	b099      	sub	sp, #100	; 0x64
   24c94:	4605      	mov	r5, r0
   24c96:	4668      	mov	r0, sp
   24c98:	f000 f8f2 	bl	24e80 <ocrypto_sc_p256_from32bytes>
   24c9c:	4669      	mov	r1, sp
   24c9e:	a808      	add	r0, sp, #32
   24ca0:	f000 fae6 	bl	25270 <ocrypto_curve_p256_scalarmult_base>
   24ca4:	4604      	mov	r4, r0
   24ca6:	a908      	add	r1, sp, #32
   24ca8:	4628      	mov	r0, r5
   24caa:	f000 fa21 	bl	250f0 <ocrypto_curve_p256_to64bytes>
   24cae:	4620      	mov	r0, r4
   24cb0:	b019      	add	sp, #100	; 0x64
   24cb2:	bd30      	pop	{r4, r5, pc}

00024cb4 <ocrypto_mod_p256_cneg>:
   24cb4:	b570      	push	{r4, r5, r6, lr}
   24cb6:	b088      	sub	sp, #32
   24cb8:	4604      	mov	r4, r0
   24cba:	460d      	mov	r5, r1
   24cbc:	4668      	mov	r0, sp
   24cbe:	2120      	movs	r1, #32
   24cc0:	4616      	mov	r6, r2
   24cc2:	f7e7 ff94 	bl	cbee <ocrypto_constant_time_fill_zero>
   24cc6:	2300      	movs	r3, #0
   24cc8:	4629      	mov	r1, r5
   24cca:	4620      	mov	r0, r4
   24ccc:	2220      	movs	r2, #32
   24cce:	9300      	str	r3, [sp, #0]
   24cd0:	f7e7 ff86 	bl	cbe0 <ocrypto_constant_time_copy>
   24cd4:	462a      	mov	r2, r5
   24cd6:	4669      	mov	r1, sp
   24cd8:	4668      	mov	r0, sp
   24cda:	f7e7 ffce 	bl	cc7a <ocrypto_mod_p256_sub>
   24cde:	4632      	mov	r2, r6
   24ce0:	4669      	mov	r1, sp
   24ce2:	4620      	mov	r0, r4
   24ce4:	f7e7 fcd9 	bl	c69a <ocrypto_bigint_cswap256>
   24ce8:	b008      	add	sp, #32
   24cea:	bd70      	pop	{r4, r5, r6, pc}

00024cec <ocrypto_mod_p256_toBytes>:
   24cec:	69cb      	ldr	r3, [r1, #28]
   24cee:	ba1b      	rev	r3, r3
   24cf0:	6003      	str	r3, [r0, #0]
   24cf2:	698b      	ldr	r3, [r1, #24]
   24cf4:	ba1b      	rev	r3, r3
   24cf6:	6043      	str	r3, [r0, #4]
   24cf8:	694b      	ldr	r3, [r1, #20]
   24cfa:	ba1b      	rev	r3, r3
   24cfc:	6083      	str	r3, [r0, #8]
   24cfe:	690b      	ldr	r3, [r1, #16]
   24d00:	ba1b      	rev	r3, r3
   24d02:	60c3      	str	r3, [r0, #12]
   24d04:	68cb      	ldr	r3, [r1, #12]
   24d06:	ba1b      	rev	r3, r3
   24d08:	6103      	str	r3, [r0, #16]
   24d0a:	688b      	ldr	r3, [r1, #8]
   24d0c:	ba1b      	rev	r3, r3
   24d0e:	6143      	str	r3, [r0, #20]
   24d10:	684b      	ldr	r3, [r1, #4]
   24d12:	ba1b      	rev	r3, r3
   24d14:	6183      	str	r3, [r0, #24]
   24d16:	680b      	ldr	r3, [r1, #0]
   24d18:	ba1b      	rev	r3, r3
   24d1a:	61c3      	str	r3, [r0, #28]
   24d1c:	4770      	bx	lr
   24d1e:	bf00      	nop

00024d20 <ocrypto_mod_p256_invert>:
   24d20:	b570      	push	{r4, r5, r6, lr}
   24d22:	460d      	mov	r5, r1
   24d24:	2405      	movs	r4, #5
   24d26:	b098      	sub	sp, #96	; 0x60
   24d28:	4606      	mov	r6, r0
   24d2a:	a810      	add	r0, sp, #64	; 0x40
   24d2c:	f7e7 ffd2 	bl	ccd4 <ocrypto_mod_p256_square>
   24d30:	462a      	mov	r2, r5
   24d32:	a910      	add	r1, sp, #64	; 0x40
   24d34:	4668      	mov	r0, sp
   24d36:	f7e7 ffce 	bl	ccd6 <ocrypto_mod_p256_mul>
   24d3a:	4669      	mov	r1, sp
   24d3c:	a810      	add	r0, sp, #64	; 0x40
   24d3e:	f7e7 ffc9 	bl	ccd4 <ocrypto_mod_p256_square>
   24d42:	a910      	add	r1, sp, #64	; 0x40
   24d44:	4608      	mov	r0, r1
   24d46:	f7e7 ffc5 	bl	ccd4 <ocrypto_mod_p256_square>
   24d4a:	466a      	mov	r2, sp
   24d4c:	a910      	add	r1, sp, #64	; 0x40
   24d4e:	a808      	add	r0, sp, #32
   24d50:	f7e7 ffc1 	bl	ccd6 <ocrypto_mod_p256_mul>
   24d54:	a908      	add	r1, sp, #32
   24d56:	a810      	add	r0, sp, #64	; 0x40
   24d58:	f7e7 ffbc 	bl	ccd4 <ocrypto_mod_p256_square>
   24d5c:	a910      	add	r1, sp, #64	; 0x40
   24d5e:	4608      	mov	r0, r1
   24d60:	f7e7 ffb8 	bl	ccd4 <ocrypto_mod_p256_square>
   24d64:	a910      	add	r1, sp, #64	; 0x40
   24d66:	4608      	mov	r0, r1
   24d68:	f7e7 ffb4 	bl	ccd4 <ocrypto_mod_p256_square>
   24d6c:	a910      	add	r1, sp, #64	; 0x40
   24d6e:	4608      	mov	r0, r1
   24d70:	f7e7 ffb0 	bl	ccd4 <ocrypto_mod_p256_square>
   24d74:	a910      	add	r1, sp, #64	; 0x40
   24d76:	aa08      	add	r2, sp, #32
   24d78:	4608      	mov	r0, r1
   24d7a:	f7e7 ffac 	bl	ccd6 <ocrypto_mod_p256_mul>
   24d7e:	a910      	add	r1, sp, #64	; 0x40
   24d80:	4608      	mov	r0, r1
   24d82:	f7e7 ffa7 	bl	ccd4 <ocrypto_mod_p256_square>
   24d86:	a910      	add	r1, sp, #64	; 0x40
   24d88:	4608      	mov	r0, r1
   24d8a:	f7e7 ffa3 	bl	ccd4 <ocrypto_mod_p256_square>
   24d8e:	a910      	add	r1, sp, #64	; 0x40
   24d90:	466a      	mov	r2, sp
   24d92:	a808      	add	r0, sp, #32
   24d94:	f7e7 ff9f 	bl	ccd6 <ocrypto_mod_p256_mul>
   24d98:	a908      	add	r1, sp, #32
   24d9a:	a810      	add	r0, sp, #64	; 0x40
   24d9c:	f7e7 ff9a 	bl	ccd4 <ocrypto_mod_p256_square>
   24da0:	a910      	add	r1, sp, #64	; 0x40
   24da2:	4608      	mov	r0, r1
   24da4:	f7e7 ff96 	bl	ccd4 <ocrypto_mod_p256_square>
   24da8:	3c01      	subs	r4, #1
   24daa:	a910      	add	r1, sp, #64	; 0x40
   24dac:	d1f5      	bne.n	24d9a <ocrypto_mod_p256_invert+0x7a>
   24dae:	aa08      	add	r2, sp, #32
   24db0:	4608      	mov	r0, r1
   24db2:	f7e7 ff90 	bl	ccd6 <ocrypto_mod_p256_mul>
   24db6:	2405      	movs	r4, #5
   24db8:	a910      	add	r1, sp, #64	; 0x40
   24dba:	4608      	mov	r0, r1
   24dbc:	f7e7 ff8a 	bl	ccd4 <ocrypto_mod_p256_square>
   24dc0:	a910      	add	r1, sp, #64	; 0x40
   24dc2:	4608      	mov	r0, r1
   24dc4:	f7e7 ff86 	bl	ccd4 <ocrypto_mod_p256_square>
   24dc8:	3c01      	subs	r4, #1
   24dca:	d1f5      	bne.n	24db8 <ocrypto_mod_p256_invert+0x98>
   24dcc:	a910      	add	r1, sp, #64	; 0x40
   24dce:	aa08      	add	r2, sp, #32
   24dd0:	4608      	mov	r0, r1
   24dd2:	f7e7 ff80 	bl	ccd6 <ocrypto_mod_p256_mul>
   24dd6:	a910      	add	r1, sp, #64	; 0x40
   24dd8:	a808      	add	r0, sp, #32
   24dda:	f7e7 ff7b 	bl	ccd4 <ocrypto_mod_p256_square>
   24dde:	a908      	add	r1, sp, #32
   24de0:	4608      	mov	r0, r1
   24de2:	f7e7 ff77 	bl	ccd4 <ocrypto_mod_p256_square>
   24de6:	a908      	add	r1, sp, #32
   24de8:	466a      	mov	r2, sp
   24dea:	4668      	mov	r0, sp
   24dec:	f7e7 ff73 	bl	ccd6 <ocrypto_mod_p256_mul>
   24df0:	2410      	movs	r4, #16
   24df2:	4669      	mov	r1, sp
   24df4:	a810      	add	r0, sp, #64	; 0x40
   24df6:	f7e7 ff6d 	bl	ccd4 <ocrypto_mod_p256_square>
   24dfa:	a910      	add	r1, sp, #64	; 0x40
   24dfc:	4608      	mov	r0, r1
   24dfe:	f7e7 ff69 	bl	ccd4 <ocrypto_mod_p256_square>
   24e02:	3c01      	subs	r4, #1
   24e04:	a910      	add	r1, sp, #64	; 0x40
   24e06:	d1f5      	bne.n	24df4 <ocrypto_mod_p256_invert+0xd4>
   24e08:	462a      	mov	r2, r5
   24e0a:	4608      	mov	r0, r1
   24e0c:	f7e7 ff63 	bl	ccd6 <ocrypto_mod_p256_mul>
   24e10:	2440      	movs	r4, #64	; 0x40
   24e12:	a910      	add	r1, sp, #64	; 0x40
   24e14:	4608      	mov	r0, r1
   24e16:	f7e7 ff5d 	bl	ccd4 <ocrypto_mod_p256_square>
   24e1a:	a910      	add	r1, sp, #64	; 0x40
   24e1c:	4608      	mov	r0, r1
   24e1e:	f7e7 ff59 	bl	ccd4 <ocrypto_mod_p256_square>
   24e22:	3c01      	subs	r4, #1
   24e24:	d1f5      	bne.n	24e12 <ocrypto_mod_p256_invert+0xf2>
   24e26:	a910      	add	r1, sp, #64	; 0x40
   24e28:	466a      	mov	r2, sp
   24e2a:	4608      	mov	r0, r1
   24e2c:	f7e7 ff53 	bl	ccd6 <ocrypto_mod_p256_mul>
   24e30:	2410      	movs	r4, #16
   24e32:	a910      	add	r1, sp, #64	; 0x40
   24e34:	4608      	mov	r0, r1
   24e36:	f7e7 ff4d 	bl	ccd4 <ocrypto_mod_p256_square>
   24e3a:	a910      	add	r1, sp, #64	; 0x40
   24e3c:	4608      	mov	r0, r1
   24e3e:	f7e7 ff49 	bl	ccd4 <ocrypto_mod_p256_square>
   24e42:	3c01      	subs	r4, #1
   24e44:	d1f5      	bne.n	24e32 <ocrypto_mod_p256_invert+0x112>
   24e46:	a910      	add	r1, sp, #64	; 0x40
   24e48:	466a      	mov	r2, sp
   24e4a:	4608      	mov	r0, r1
   24e4c:	f7e7 ff43 	bl	ccd6 <ocrypto_mod_p256_mul>
   24e50:	2410      	movs	r4, #16
   24e52:	a910      	add	r1, sp, #64	; 0x40
   24e54:	4608      	mov	r0, r1
   24e56:	f7e7 ff3d 	bl	ccd4 <ocrypto_mod_p256_square>
   24e5a:	a910      	add	r1, sp, #64	; 0x40
   24e5c:	4608      	mov	r0, r1
   24e5e:	f7e7 ff39 	bl	ccd4 <ocrypto_mod_p256_square>
   24e62:	3c01      	subs	r4, #1
   24e64:	d1f5      	bne.n	24e52 <ocrypto_mod_p256_invert+0x132>
   24e66:	a910      	add	r1, sp, #64	; 0x40
   24e68:	aa08      	add	r2, sp, #32
   24e6a:	4608      	mov	r0, r1
   24e6c:	f7e7 ff33 	bl	ccd6 <ocrypto_mod_p256_mul>
   24e70:	462a      	mov	r2, r5
   24e72:	a910      	add	r1, sp, #64	; 0x40
   24e74:	4630      	mov	r0, r6
   24e76:	f7e7 ff2e 	bl	ccd6 <ocrypto_mod_p256_mul>
   24e7a:	b018      	add	sp, #96	; 0x60
   24e7c:	bd70      	pop	{r4, r5, r6, pc}
   24e7e:	bf00      	nop

00024e80 <ocrypto_sc_p256_from32bytes>:
   24e80:	b538      	push	{r3, r4, r5, lr}
   24e82:	460b      	mov	r3, r1
   24e84:	680a      	ldr	r2, [r1, #0]
   24e86:	4d12      	ldr	r5, [pc, #72]	; (24ed0 <ocrypto_sc_p256_from32bytes+0x50>)
   24e88:	ba12      	rev	r2, r2
   24e8a:	61c2      	str	r2, [r0, #28]
   24e8c:	684a      	ldr	r2, [r1, #4]
   24e8e:	4601      	mov	r1, r0
   24e90:	ba12      	rev	r2, r2
   24e92:	6182      	str	r2, [r0, #24]
   24e94:	689a      	ldr	r2, [r3, #8]
   24e96:	4604      	mov	r4, r0
   24e98:	ba12      	rev	r2, r2
   24e9a:	6142      	str	r2, [r0, #20]
   24e9c:	68da      	ldr	r2, [r3, #12]
   24e9e:	ba12      	rev	r2, r2
   24ea0:	6102      	str	r2, [r0, #16]
   24ea2:	691a      	ldr	r2, [r3, #16]
   24ea4:	ba12      	rev	r2, r2
   24ea6:	60c2      	str	r2, [r0, #12]
   24ea8:	695a      	ldr	r2, [r3, #20]
   24eaa:	ba12      	rev	r2, r2
   24eac:	6082      	str	r2, [r0, #8]
   24eae:	699a      	ldr	r2, [r3, #24]
   24eb0:	ba12      	rev	r2, r2
   24eb2:	6042      	str	r2, [r0, #4]
   24eb4:	69db      	ldr	r3, [r3, #28]
   24eb6:	462a      	mov	r2, r5
   24eb8:	ba1b      	rev	r3, r3
   24eba:	6003      	str	r3, [r0, #0]
   24ebc:	f7e7 fb62 	bl	c584 <ocrypto_bigint_sub256>
   24ec0:	4629      	mov	r1, r5
   24ec2:	4602      	mov	r2, r0
   24ec4:	4620      	mov	r0, r4
   24ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24eca:	f7e7 bb7b 	b.w	c5c4 <ocrypto_bigint_cadd256>
   24ece:	bf00      	nop
   24ed0:	0002a56c 	.word	0x0002a56c

00024ed4 <p256_zdblu>:
   24ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ed8:	4607      	mov	r7, r0
   24eda:	460d      	mov	r5, r1
   24edc:	4690      	mov	r8, r2
   24ede:	b088      	sub	sp, #32
   24ee0:	f102 0120 	add.w	r1, r2, #32
   24ee4:	4668      	mov	r0, sp
   24ee6:	f107 0620 	add.w	r6, r7, #32
   24eea:	f7e7 fef3 	bl	ccd4 <ocrypto_mod_p256_square>
   24eee:	466a      	mov	r2, sp
   24ef0:	4669      	mov	r1, sp
   24ef2:	4668      	mov	r0, sp
   24ef4:	f7e7 fe82 	bl	cbfc <ocrypto_mod_p256_add>
   24ef8:	4630      	mov	r0, r6
   24efa:	4669      	mov	r1, sp
   24efc:	f7e7 feea 	bl	ccd4 <ocrypto_mod_p256_square>
   24f00:	4632      	mov	r2, r6
   24f02:	4631      	mov	r1, r6
   24f04:	4630      	mov	r0, r6
   24f06:	f105 0420 	add.w	r4, r5, #32
   24f0a:	f7e7 fe77 	bl	cbfc <ocrypto_mod_p256_add>
   24f0e:	466a      	mov	r2, sp
   24f10:	4669      	mov	r1, sp
   24f12:	4668      	mov	r0, sp
   24f14:	f7e7 fe72 	bl	cbfc <ocrypto_mod_p256_add>
   24f18:	4620      	mov	r0, r4
   24f1a:	4641      	mov	r1, r8
   24f1c:	f7e7 feda 	bl	ccd4 <ocrypto_mod_p256_square>
   24f20:	466a      	mov	r2, sp
   24f22:	4641      	mov	r1, r8
   24f24:	4638      	mov	r0, r7
   24f26:	f7e7 fed6 	bl	ccd6 <ocrypto_mod_p256_mul>
   24f2a:	4622      	mov	r2, r4
   24f2c:	4621      	mov	r1, r4
   24f2e:	4668      	mov	r0, sp
   24f30:	f7e7 fe64 	bl	cbfc <ocrypto_mod_p256_add>
   24f34:	4622      	mov	r2, r4
   24f36:	4669      	mov	r1, sp
   24f38:	4668      	mov	r0, sp
   24f3a:	f7e7 fe5f 	bl	cbfc <ocrypto_mod_p256_add>
   24f3e:	4669      	mov	r1, sp
   24f40:	4668      	mov	r0, sp
   24f42:	4a11      	ldr	r2, [pc, #68]	; (24f88 <p256_zdblu+0xb4>)
   24f44:	f7e7 fe5a 	bl	cbfc <ocrypto_mod_p256_add>
   24f48:	4669      	mov	r1, sp
   24f4a:	4628      	mov	r0, r5
   24f4c:	f7e7 fec2 	bl	ccd4 <ocrypto_mod_p256_square>
   24f50:	463a      	mov	r2, r7
   24f52:	4629      	mov	r1, r5
   24f54:	4628      	mov	r0, r5
   24f56:	f7e7 fe90 	bl	cc7a <ocrypto_mod_p256_sub>
   24f5a:	463a      	mov	r2, r7
   24f5c:	4629      	mov	r1, r5
   24f5e:	4628      	mov	r0, r5
   24f60:	f7e7 fe8b 	bl	cc7a <ocrypto_mod_p256_sub>
   24f64:	462a      	mov	r2, r5
   24f66:	4639      	mov	r1, r7
   24f68:	4620      	mov	r0, r4
   24f6a:	f7e7 fe86 	bl	cc7a <ocrypto_mod_p256_sub>
   24f6e:	466a      	mov	r2, sp
   24f70:	4621      	mov	r1, r4
   24f72:	4620      	mov	r0, r4
   24f74:	f7e7 feaf 	bl	ccd6 <ocrypto_mod_p256_mul>
   24f78:	4632      	mov	r2, r6
   24f7a:	4621      	mov	r1, r4
   24f7c:	4620      	mov	r0, r4
   24f7e:	f7e7 fe7c 	bl	cc7a <ocrypto_mod_p256_sub>
   24f82:	b008      	add	sp, #32
   24f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24f88:	0002a60c 	.word	0x0002a60c

00024f8c <p256_zaddc>:
   24f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f8e:	4604      	mov	r4, r0
   24f90:	460e      	mov	r6, r1
   24f92:	b099      	sub	sp, #100	; 0x64
   24f94:	460a      	mov	r2, r1
   24f96:	4601      	mov	r1, r0
   24f98:	4668      	mov	r0, sp
   24f9a:	f7e7 fe6e 	bl	cc7a <ocrypto_mod_p256_sub>
   24f9e:	4669      	mov	r1, sp
   24fa0:	4668      	mov	r0, sp
   24fa2:	f7e7 fe97 	bl	ccd4 <ocrypto_mod_p256_square>
   24fa6:	466a      	mov	r2, sp
   24fa8:	4621      	mov	r1, r4
   24faa:	a808      	add	r0, sp, #32
   24fac:	f106 0520 	add.w	r5, r6, #32
   24fb0:	f104 0720 	add.w	r7, r4, #32
   24fb4:	f7e7 fe8f 	bl	ccd6 <ocrypto_mod_p256_mul>
   24fb8:	466a      	mov	r2, sp
   24fba:	4631      	mov	r1, r6
   24fbc:	4668      	mov	r0, sp
   24fbe:	f7e7 fe8a 	bl	ccd6 <ocrypto_mod_p256_mul>
   24fc2:	4639      	mov	r1, r7
   24fc4:	462a      	mov	r2, r5
   24fc6:	a810      	add	r0, sp, #64	; 0x40
   24fc8:	f7e7 fe18 	bl	cbfc <ocrypto_mod_p256_add>
   24fcc:	462a      	mov	r2, r5
   24fce:	4639      	mov	r1, r7
   24fd0:	4628      	mov	r0, r5
   24fd2:	f7e7 fe52 	bl	cc7a <ocrypto_mod_p256_sub>
   24fd6:	4629      	mov	r1, r5
   24fd8:	4630      	mov	r0, r6
   24fda:	f7e7 fe7b 	bl	ccd4 <ocrypto_mod_p256_square>
   24fde:	466a      	mov	r2, sp
   24fe0:	a908      	add	r1, sp, #32
   24fe2:	4620      	mov	r0, r4
   24fe4:	f7e7 fe0a 	bl	cbfc <ocrypto_mod_p256_add>
   24fe8:	4622      	mov	r2, r4
   24fea:	4631      	mov	r1, r6
   24fec:	4630      	mov	r0, r6
   24fee:	f7e7 fe44 	bl	cc7a <ocrypto_mod_p256_sub>
   24ff2:	466a      	mov	r2, sp
   24ff4:	a908      	add	r1, sp, #32
   24ff6:	4668      	mov	r0, sp
   24ff8:	f7e7 fe3f 	bl	cc7a <ocrypto_mod_p256_sub>
   24ffc:	466a      	mov	r2, sp
   24ffe:	4639      	mov	r1, r7
   25000:	4638      	mov	r0, r7
   25002:	f7e7 fe68 	bl	ccd6 <ocrypto_mod_p256_mul>
   25006:	4632      	mov	r2, r6
   25008:	a908      	add	r1, sp, #32
   2500a:	4668      	mov	r0, sp
   2500c:	f7e7 fe35 	bl	cc7a <ocrypto_mod_p256_sub>
   25010:	466a      	mov	r2, sp
   25012:	4629      	mov	r1, r5
   25014:	4628      	mov	r0, r5
   25016:	f7e7 fe5e 	bl	ccd6 <ocrypto_mod_p256_mul>
   2501a:	463a      	mov	r2, r7
   2501c:	4629      	mov	r1, r5
   2501e:	4628      	mov	r0, r5
   25020:	f7e7 fe2b 	bl	cc7a <ocrypto_mod_p256_sub>
   25024:	a910      	add	r1, sp, #64	; 0x40
   25026:	4668      	mov	r0, sp
   25028:	f7e7 fe54 	bl	ccd4 <ocrypto_mod_p256_square>
   2502c:	4622      	mov	r2, r4
   2502e:	4669      	mov	r1, sp
   25030:	4620      	mov	r0, r4
   25032:	f7e7 fe22 	bl	cc7a <ocrypto_mod_p256_sub>
   25036:	a908      	add	r1, sp, #32
   25038:	4622      	mov	r2, r4
   2503a:	4608      	mov	r0, r1
   2503c:	f7e7 fe1d 	bl	cc7a <ocrypto_mod_p256_sub>
   25040:	a910      	add	r1, sp, #64	; 0x40
   25042:	aa08      	add	r2, sp, #32
   25044:	4608      	mov	r0, r1
   25046:	f7e7 fe46 	bl	ccd6 <ocrypto_mod_p256_mul>
   2504a:	463a      	mov	r2, r7
   2504c:	a910      	add	r1, sp, #64	; 0x40
   2504e:	4638      	mov	r0, r7
   25050:	f7e7 fe13 	bl	cc7a <ocrypto_mod_p256_sub>
   25054:	b019      	add	sp, #100	; 0x64
   25056:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025058 <p256_zaddu>:
   25058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2505c:	460c      	mov	r4, r1
   2505e:	4605      	mov	r5, r0
   25060:	4690      	mov	r8, r2
   25062:	b088      	sub	sp, #32
   25064:	4622      	mov	r2, r4
   25066:	4601      	mov	r1, r0
   25068:	4668      	mov	r0, sp
   2506a:	f7e7 fe06 	bl	cc7a <ocrypto_mod_p256_sub>
   2506e:	4669      	mov	r1, sp
   25070:	4668      	mov	r0, sp
   25072:	f7e7 fe2f 	bl	ccd4 <ocrypto_mod_p256_square>
   25076:	466a      	mov	r2, sp
   25078:	4629      	mov	r1, r5
   2507a:	4628      	mov	r0, r5
   2507c:	f104 0620 	add.w	r6, r4, #32
   25080:	f7e7 fe29 	bl	ccd6 <ocrypto_mod_p256_mul>
   25084:	f105 0720 	add.w	r7, r5, #32
   25088:	466a      	mov	r2, sp
   2508a:	4621      	mov	r1, r4
   2508c:	4668      	mov	r0, sp
   2508e:	f7e7 fe22 	bl	ccd6 <ocrypto_mod_p256_mul>
   25092:	4632      	mov	r2, r6
   25094:	4630      	mov	r0, r6
   25096:	4639      	mov	r1, r7
   25098:	f7e7 fdef 	bl	cc7a <ocrypto_mod_p256_sub>
   2509c:	4631      	mov	r1, r6
   2509e:	4620      	mov	r0, r4
   250a0:	f7e7 fe18 	bl	ccd4 <ocrypto_mod_p256_square>
   250a4:	462a      	mov	r2, r5
   250a6:	4621      	mov	r1, r4
   250a8:	4620      	mov	r0, r4
   250aa:	f7e7 fde6 	bl	cc7a <ocrypto_mod_p256_sub>
   250ae:	466a      	mov	r2, sp
   250b0:	4621      	mov	r1, r4
   250b2:	4620      	mov	r0, r4
   250b4:	f7e7 fde1 	bl	cc7a <ocrypto_mod_p256_sub>
   250b8:	466a      	mov	r2, sp
   250ba:	4629      	mov	r1, r5
   250bc:	4640      	mov	r0, r8
   250be:	f7e7 fddc 	bl	cc7a <ocrypto_mod_p256_sub>
   250c2:	4642      	mov	r2, r8
   250c4:	4639      	mov	r1, r7
   250c6:	4638      	mov	r0, r7
   250c8:	f7e7 fe05 	bl	ccd6 <ocrypto_mod_p256_mul>
   250cc:	4622      	mov	r2, r4
   250ce:	4629      	mov	r1, r5
   250d0:	4668      	mov	r0, sp
   250d2:	f7e7 fdd2 	bl	cc7a <ocrypto_mod_p256_sub>
   250d6:	466a      	mov	r2, sp
   250d8:	4631      	mov	r1, r6
   250da:	4630      	mov	r0, r6
   250dc:	f7e7 fdfb 	bl	ccd6 <ocrypto_mod_p256_mul>
   250e0:	463a      	mov	r2, r7
   250e2:	4631      	mov	r1, r6
   250e4:	4630      	mov	r0, r6
   250e6:	f7e7 fdc8 	bl	cc7a <ocrypto_mod_p256_sub>
   250ea:	b008      	add	sp, #32
   250ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000250f0 <ocrypto_curve_p256_to64bytes>:
   250f0:	b538      	push	{r3, r4, r5, lr}
   250f2:	4604      	mov	r4, r0
   250f4:	460d      	mov	r5, r1
   250f6:	f7ff fdf9 	bl	24cec <ocrypto_mod_p256_toBytes>
   250fa:	f105 0120 	add.w	r1, r5, #32
   250fe:	f104 0020 	add.w	r0, r4, #32
   25102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25106:	f7ff bdf1 	b.w	24cec <ocrypto_mod_p256_toBytes>
   2510a:	bf00      	nop

0002510c <ocrypto_curve_p256_scalarmult>:
   2510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25110:	b0b8      	sub	sp, #224	; 0xe0
   25112:	468a      	mov	sl, r1
   25114:	4681      	mov	r9, r0
   25116:	4611      	mov	r1, r2
   25118:	a810      	add	r0, sp, #64	; 0x40
   2511a:	4a51      	ldr	r2, [pc, #324]	; (25260 <ocrypto_curve_p256_scalarmult+0x154>)
   2511c:	f7e7 fa32 	bl	c584 <ocrypto_bigint_sub256>
   25120:	4950      	ldr	r1, [pc, #320]	; (25264 <ocrypto_curve_p256_scalarmult+0x158>)
   25122:	4602      	mov	r2, r0
   25124:	a810      	add	r0, sp, #64	; 0x40
   25126:	f7e7 fa4d 	bl	c5c4 <ocrypto_bigint_cadd256>
   2512a:	4680      	mov	r8, r0
   2512c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   2512e:	494c      	ldr	r1, [pc, #304]	; (25260 <ocrypto_curve_p256_scalarmult+0x154>)
   25130:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   25134:	f1c7 0201 	rsb	r2, r7, #1
   25138:	a810      	add	r0, sp, #64	; 0x40
   2513a:	f7e7 fa43 	bl	c5c4 <ocrypto_bigint_cadd256>
   2513e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   25140:	4652      	mov	r2, sl
   25142:	43ed      	mvns	r5, r5
   25144:	a928      	add	r1, sp, #160	; 0xa0
   25146:	a818      	add	r0, sp, #96	; 0x60
   25148:	f7ff fec4 	bl	24ed4 <p256_zdblu>
   2514c:	0fed      	lsrs	r5, r5, #31
   2514e:	a920      	add	r1, sp, #128	; 0x80
   25150:	f1c5 0201 	rsb	r2, r5, #1
   25154:	4608      	mov	r0, r1
   25156:	f7ff fdad 	bl	24cb4 <ocrypto_mod_p256_cneg>
   2515a:	26fe      	movs	r6, #254	; 0xfe
   2515c:	f1c8 0801 	rsb	r8, r8, #1
   25160:	466a      	mov	r2, sp
   25162:	a918      	add	r1, sp, #96	; 0x60
   25164:	a828      	add	r0, sp, #160	; 0xa0
   25166:	f7ff ff77 	bl	25058 <p256_zaddu>
   2516a:	1173      	asrs	r3, r6, #5
   2516c:	aa38      	add	r2, sp, #224	; 0xe0
   2516e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   25172:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   25176:	f006 031f 	and.w	r3, r6, #31
   2517a:	40dc      	lsrs	r4, r3
   2517c:	f004 0401 	and.w	r4, r4, #1
   25180:	4065      	eors	r5, r4
   25182:	462a      	mov	r2, r5
   25184:	a928      	add	r1, sp, #160	; 0xa0
   25186:	a818      	add	r0, sp, #96	; 0x60
   25188:	f7e7 fa87 	bl	c69a <ocrypto_bigint_cswap256>
   2518c:	462a      	mov	r2, r5
   2518e:	a930      	add	r1, sp, #192	; 0xc0
   25190:	a820      	add	r0, sp, #128	; 0x80
   25192:	f7e7 fa82 	bl	c69a <ocrypto_bigint_cswap256>
   25196:	3e01      	subs	r6, #1
   25198:	a928      	add	r1, sp, #160	; 0xa0
   2519a:	a818      	add	r0, sp, #96	; 0x60
   2519c:	f7ff fef6 	bl	24f8c <p256_zaddc>
   251a0:	1c73      	adds	r3, r6, #1
   251a2:	4625      	mov	r5, r4
   251a4:	d1dc      	bne.n	25160 <ocrypto_curve_p256_scalarmult+0x54>
   251a6:	f1c4 0201 	rsb	r2, r4, #1
   251aa:	a808      	add	r0, sp, #32
   251ac:	a920      	add	r1, sp, #128	; 0x80
   251ae:	f7ff fd81 	bl	24cb4 <ocrypto_mod_p256_cneg>
   251b2:	407d      	eors	r5, r7
   251b4:	466a      	mov	r2, sp
   251b6:	a918      	add	r1, sp, #96	; 0x60
   251b8:	a828      	add	r0, sp, #160	; 0xa0
   251ba:	f7ff ff4d 	bl	25058 <p256_zaddu>
   251be:	a928      	add	r1, sp, #160	; 0xa0
   251c0:	462a      	mov	r2, r5
   251c2:	a818      	add	r0, sp, #96	; 0x60
   251c4:	f7e7 fa69 	bl	c69a <ocrypto_bigint_cswap256>
   251c8:	462a      	mov	r2, r5
   251ca:	a930      	add	r1, sp, #192	; 0xc0
   251cc:	a820      	add	r0, sp, #128	; 0x80
   251ce:	f7e7 fa64 	bl	c69a <ocrypto_bigint_cswap256>
   251d2:	a908      	add	r1, sp, #32
   251d4:	466a      	mov	r2, sp
   251d6:	4608      	mov	r0, r1
   251d8:	f7e7 fd7d 	bl	ccd6 <ocrypto_mod_p256_mul>
   251dc:	a908      	add	r1, sp, #32
   251de:	4608      	mov	r0, r1
   251e0:	f7ff fd9e 	bl	24d20 <ocrypto_mod_p256_invert>
   251e4:	a908      	add	r1, sp, #32
   251e6:	f109 0420 	add.w	r4, r9, #32
   251ea:	f10a 0220 	add.w	r2, sl, #32
   251ee:	4608      	mov	r0, r1
   251f0:	f7e7 fd71 	bl	ccd6 <ocrypto_mod_p256_mul>
   251f4:	a920      	add	r1, sp, #128	; 0x80
   251f6:	aa08      	add	r2, sp, #32
   251f8:	4620      	mov	r0, r4
   251fa:	f7e7 fd6c 	bl	ccd6 <ocrypto_mod_p256_mul>
   251fe:	aa08      	add	r2, sp, #32
   25200:	a918      	add	r1, sp, #96	; 0x60
   25202:	4668      	mov	r0, sp
   25204:	f7e7 fd67 	bl	ccd6 <ocrypto_mod_p256_mul>
   25208:	4669      	mov	r1, sp
   2520a:	4668      	mov	r0, sp
   2520c:	f7e7 fd62 	bl	ccd4 <ocrypto_mod_p256_square>
   25210:	aa18      	add	r2, sp, #96	; 0x60
   25212:	4669      	mov	r1, sp
   25214:	a808      	add	r0, sp, #32
   25216:	f7e7 fd5e 	bl	ccd6 <ocrypto_mod_p256_mul>
   2521a:	4621      	mov	r1, r4
   2521c:	4668      	mov	r0, sp
   2521e:	f7e7 fd59 	bl	ccd4 <ocrypto_mod_p256_square>
   25222:	aa08      	add	r2, sp, #32
   25224:	4669      	mov	r1, sp
   25226:	4610      	mov	r0, r2
   25228:	f7e7 fd27 	bl	cc7a <ocrypto_mod_p256_sub>
   2522c:	a908      	add	r1, sp, #32
   2522e:	4a0e      	ldr	r2, [pc, #56]	; (25268 <ocrypto_curve_p256_scalarmult+0x15c>)
   25230:	4668      	mov	r0, sp
   25232:	f7e7 fd22 	bl	cc7a <ocrypto_mod_p256_sub>
   25236:	4620      	mov	r0, r4
   25238:	2120      	movs	r1, #32
   2523a:	f7e7 fcc4 	bl	cbc6 <ocrypto_constant_time_is_zero>
   2523e:	a908      	add	r1, sp, #32
   25240:	4243      	negs	r3, r0
   25242:	4602      	mov	r2, r0
   25244:	4668      	mov	r0, sp
   25246:	ea43 0808 	orr.w	r8, r3, r8
   2524a:	f7e7 fa26 	bl	c69a <ocrypto_bigint_cswap256>
   2524e:	4648      	mov	r0, r9
   25250:	4669      	mov	r1, sp
   25252:	4a06      	ldr	r2, [pc, #24]	; (2526c <ocrypto_curve_p256_scalarmult+0x160>)
   25254:	f7e7 fd3f 	bl	ccd6 <ocrypto_mod_p256_mul>
   25258:	4640      	mov	r0, r8
   2525a:	b038      	add	sp, #224	; 0xe0
   2525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25260:	0002a64c 	.word	0x0002a64c
   25264:	0002a5cc 	.word	0x0002a5cc
   25268:	0002a62c 	.word	0x0002a62c
   2526c:	0002a5ec 	.word	0x0002a5ec

00025270 <ocrypto_curve_p256_scalarmult_base>:
   25270:	460a      	mov	r2, r1
   25272:	4901      	ldr	r1, [pc, #4]	; (25278 <ocrypto_curve_p256_scalarmult_base+0x8>)
   25274:	f7ff bf4a 	b.w	2510c <ocrypto_curve_p256_scalarmult>
   25278:	0002a58c 	.word	0x0002a58c

0002527c <__itoa>:
   2527c:	1e93      	subs	r3, r2, #2
   2527e:	2b22      	cmp	r3, #34	; 0x22
   25280:	d816      	bhi.n	252b0 <__itoa+0x34>
   25282:	2a0a      	cmp	r2, #10
   25284:	b510      	push	{r4, lr}
   25286:	d10c      	bne.n	252a2 <__itoa+0x26>
   25288:	2800      	cmp	r0, #0
   2528a:	da0a      	bge.n	252a2 <__itoa+0x26>
   2528c:	460b      	mov	r3, r1
   2528e:	242d      	movs	r4, #45	; 0x2d
   25290:	4240      	negs	r0, r0
   25292:	f803 4b01 	strb.w	r4, [r3], #1
   25296:	460c      	mov	r4, r1
   25298:	4619      	mov	r1, r3
   2529a:	f000 f80f 	bl	252bc <__utoa>
   2529e:	4620      	mov	r0, r4
   252a0:	bd10      	pop	{r4, pc}
   252a2:	460b      	mov	r3, r1
   252a4:	460c      	mov	r4, r1
   252a6:	4619      	mov	r1, r3
   252a8:	f000 f808 	bl	252bc <__utoa>
   252ac:	4620      	mov	r0, r4
   252ae:	bd10      	pop	{r4, pc}
   252b0:	2000      	movs	r0, #0
   252b2:	7008      	strb	r0, [r1, #0]
   252b4:	4770      	bx	lr
   252b6:	bf00      	nop

000252b8 <itoa>:
   252b8:	f7ff bfe0 	b.w	2527c <__itoa>

000252bc <__utoa>:
   252bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   252be:	4e1d      	ldr	r6, [pc, #116]	; (25334 <__utoa+0x78>)
   252c0:	b08b      	sub	sp, #44	; 0x2c
   252c2:	f1a2 0e02 	sub.w	lr, r2, #2
   252c6:	4604      	mov	r4, r0
   252c8:	460f      	mov	r7, r1
   252ca:	4694      	mov	ip, r2
   252cc:	466d      	mov	r5, sp
   252ce:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   252d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   252d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   252d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   252d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   252da:	e896 0003 	ldmia.w	r6, {r0, r1}
   252de:	f845 0b04 	str.w	r0, [r5], #4
   252e2:	7029      	strb	r1, [r5, #0]
   252e4:	d822      	bhi.n	2532c <__utoa+0x70>
   252e6:	1e7e      	subs	r6, r7, #1
   252e8:	2100      	movs	r1, #0
   252ea:	4630      	mov	r0, r6
   252ec:	e000      	b.n	252f0 <__utoa+0x34>
   252ee:	4619      	mov	r1, r3
   252f0:	1c4b      	adds	r3, r1, #1
   252f2:	fbb4 f5fc 	udiv	r5, r4, ip
   252f6:	fb0c 4215 	mls	r2, ip, r5, r4
   252fa:	462c      	mov	r4, r5
   252fc:	ad0a      	add	r5, sp, #40	; 0x28
   252fe:	442a      	add	r2, r5
   25300:	f812 2c28 	ldrb.w	r2, [r2, #-40]
   25304:	f800 2f01 	strb.w	r2, [r0, #1]!
   25308:	2c00      	cmp	r4, #0
   2530a:	d1f0      	bne.n	252ee <__utoa+0x32>
   2530c:	54fc      	strb	r4, [r7, r3]
   2530e:	b151      	cbz	r1, 25326 <__utoa+0x6a>
   25310:	443b      	add	r3, r7
   25312:	3401      	adds	r4, #1
   25314:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   25318:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
   2531c:	1b0a      	subs	r2, r1, r4
   2531e:	7035      	strb	r5, [r6, #0]
   25320:	4294      	cmp	r4, r2
   25322:	7018      	strb	r0, [r3, #0]
   25324:	dbf5      	blt.n	25312 <__utoa+0x56>
   25326:	4638      	mov	r0, r7
   25328:	b00b      	add	sp, #44	; 0x2c
   2532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2532c:	2000      	movs	r0, #0
   2532e:	7038      	strb	r0, [r7, #0]
   25330:	e7fa      	b.n	25328 <__utoa+0x6c>
   25332:	bf00      	nop
   25334:	0002a66c 	.word	0x0002a66c

00025338 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   25338:	6843      	ldr	r3, [r0, #4]
   2533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2533c:	b103      	cbz	r3, 25340 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   2533e:	4718      	bx	r3
}
   25340:	4770      	bx	lr

00025342 <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   25342:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
   25344:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   25346:	685c      	ldr	r4, [r3, #4]
   25348:	4613      	mov	r3, r2
   2534a:	46a4      	mov	ip, r4
   2534c:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
   2534e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   25352:	2100      	movs	r1, #0
   25354:	4760      	bx	ip

00025356 <gpio_pin_write>:
   25356:	6843      	ldr	r3, [r0, #4]
{
   25358:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   2535a:	685c      	ldr	r4, [r3, #4]
   2535c:	4613      	mov	r3, r2
   2535e:	46a4      	mov	ip, r4
   25360:	460a      	mov	r2, r1
}
   25362:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   25366:	2100      	movs	r1, #0
   25368:	4760      	bx	ip

0002536a <gpio_pin_configure.constprop.0>:
	return api->config(port, access_op, pin, flags);
   2536a:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_configure(struct device *port, u32_t pin,
   2536c:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   2536e:	681c      	ldr	r4, [r3, #0]
   25370:	460a      	mov	r2, r1
   25372:	46a4      	mov	ip, r4
   25374:	2301      	movs	r3, #1
   25376:	2100      	movs	r1, #0
}
   25378:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->config(port, access_op, pin, flags);
   2537c:	4760      	bx	ip

0002537e <reversebits8>:
    out = (out & 0xaa) >> 1 | (out & 0x55) << 1;
   2537e:	b2c0      	uxtb	r0, r0
   25380:	1043      	asrs	r3, r0, #1
   25382:	f003 0255 	and.w	r2, r3, #85	; 0x55
   25386:	0043      	lsls	r3, r0, #1
   25388:	f003 03aa 	and.w	r3, r3, #170	; 0xaa
    out = (out & 0xcc) >> 2 | (out & 0x33) << 2;
   2538c:	4313      	orrs	r3, r2
   2538e:	1098      	asrs	r0, r3, #2
   25390:	f000 0233 	and.w	r2, r0, #51	; 0x33
   25394:	0098      	lsls	r0, r3, #2
   25396:	f000 00cc 	and.w	r0, r0, #204	; 0xcc
   2539a:	4310      	orrs	r0, r2
    out = (out & 0xf0) >> 4 | (out & 0x0f) << 4;
   2539c:	0103      	lsls	r3, r0, #4
   2539e:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
};     
   253a2:	b2c0      	uxtb	r0, r0
   253a4:	4770      	bx	lr

000253a6 <reverseArray>:
void reverseArray(u8_t arr[], int start, int end) { 
   253a6:	b510      	push	{r4, lr}
   253a8:	4401      	add	r1, r0
   253aa:	4402      	add	r2, r0
   if (start >= end) 
   253ac:	1a0b      	subs	r3, r1, r0
   253ae:	1a14      	subs	r4, r2, r0
   253b0:	42a3      	cmp	r3, r4
   253b2:	da06      	bge.n	253c2 <reverseArray+0x1c>
   temp = arr[start];    
   253b4:	780b      	ldrb	r3, [r1, #0]
   arr[start] = arr[end]; 
   253b6:	7814      	ldrb	r4, [r2, #0]
   253b8:	f801 4b01 	strb.w	r4, [r1], #1
   arr[end] = temp; 
   253bc:	f802 3901 	strb.w	r3, [r2], #-1
   253c0:	e7f4      	b.n	253ac <reverseArray+0x6>
}  
   253c2:	bd10      	pop	{r4, pc}

000253c4 <display_println>:
void display_println(u8_t line, u8_t message[36], u8_t (*font)[336][28], int font_hight, int font_width, int char_width){
   253c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  memcpy(message_reversed, message, (144 / char_width));
   253c8:	2490      	movs	r4, #144	; 0x90
void display_println(u8_t line, u8_t message[36], u8_t (*font)[336][28], int font_hight, int font_width, int char_width){
   253ca:	b08b      	sub	sp, #44	; 0x2c
   253cc:	4689      	mov	r9, r1
   253ce:	4607      	mov	r7, r0
  memset(message_reversed, NULL, sizeof(message_reversed)); //clear barcode buffer.
   253d0:	2100      	movs	r1, #0
void display_println(u8_t line, u8_t message[36], u8_t (*font)[336][28], int font_hight, int font_width, int char_width){
   253d2:	4690      	mov	r8, r2
  memset(message_reversed, NULL, sizeof(message_reversed)); //clear barcode buffer.
   253d4:	4668      	mov	r0, sp
   253d6:	2212      	movs	r2, #18
void display_println(u8_t line, u8_t message[36], u8_t (*font)[336][28], int font_hight, int font_width, int char_width){
   253d8:	461e      	mov	r6, r3
   253da:	9d12      	ldr	r5, [sp, #72]	; 0x48
  memset(message_reversed, NULL, sizeof(message_reversed)); //clear barcode buffer.
   253dc:	f000 fd70 	bl	25ec0 <memset>
  memcpy(message_reversed, message, (144 / char_width));
   253e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   253e2:	4649      	mov	r1, r9
   253e4:	fb94 f4f3 	sdiv	r4, r4, r3
   253e8:	4668      	mov	r0, sp
   253ea:	4622      	mov	r2, r4
   253ec:	f000 fd3b 	bl	25e66 <memcpy>
  reverseArray(message_reversed, 0, (144 / char_width) - 1);
   253f0:	1e62      	subs	r2, r4, #1
   253f2:	2100      	movs	r1, #0
   253f4:	4668      	mov	r0, sp
   253f6:	f7ff ffd6 	bl	253a6 <reverseArray>
  for(n = 0 ; n < font_hight ; n++){
   253fa:	f04f 0900 	mov.w	r9, #0
   253fe:	45b1      	cmp	r9, r6
   25400:	da22      	bge.n	25448 <display_println+0x84>
   25402:	aa05      	add	r2, sp, #20
        for(i = 0 ; i < 144 / char_width ; i++){
   25404:	2000      	movs	r0, #0
   25406:	4611      	mov	r1, r2
   25408:	e00d      	b.n	25426 <display_println+0x62>
          for(j = 0 ; j < font_width ; j++){
   2540a:	f04f 0c00 	mov.w	ip, #0
          data_byte_location = message_reversed[i] - 32;
   2540e:	f81d 3000 	ldrb.w	r3, [sp, r0]
   25412:	3b20      	subs	r3, #32
            line_data_buffer[x + j] = (*font)[0][(data_byte_location * font_hight * font_width) + (n * font_width) + j];
   25414:	b29b      	uxth	r3, r3
   25416:	fb06 9303 	mla	r3, r6, r3, r9
   2541a:	fb05 8303 	mla	r3, r5, r3, r8
          for(j = 0 ; j < font_width ; j++){
   2541e:	45ac      	cmp	ip, r5
   25420:	db0b      	blt.n	2543a <display_println+0x76>
        for(i = 0 ; i < 144 / char_width ; i++){
   25422:	3001      	adds	r0, #1
   25424:	442a      	add	r2, r5
   25426:	4284      	cmp	r4, r0
   25428:	dcef      	bgt.n	2540a <display_println+0x46>
        write_line(line - n, &line_data_buffer[0]);
   2542a:	eba7 0009 	sub.w	r0, r7, r9
   2542e:	b2c0      	uxtb	r0, r0
   25430:	f7e9 fcbc 	bl	edac <write_line>
  for(n = 0 ; n < font_hight ; n++){
   25434:	f109 0901 	add.w	r9, r9, #1
   25438:	e7e1      	b.n	253fe <display_println+0x3a>
            line_data_buffer[x + j] = (*font)[0][(data_byte_location * font_hight * font_width) + (n * font_width) + j];
   2543a:	f813 e00c 	ldrb.w	lr, [r3, ip]
   2543e:	f802 e00c 	strb.w	lr, [r2, ip]
          for(j = 0 ; j < font_width ; j++){
   25442:	f10c 0c01 	add.w	ip, ip, #1
   25446:	e7ea      	b.n	2541e <display_println+0x5a>
} 
   25448:	b00b      	add	sp, #44	; 0x2c
   2544a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002544e <elva_uart_transmit>:
void elva_uart_transmit(struct device *uart_port , uint8_t *message, uint32_t size){
   2544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25450:	4605      	mov	r5, r0
   25452:	460f      	mov	r7, r1
   25454:	4616      	mov	r6, r2
  for (i=0 ; i < size ; i++){
   25456:	2400      	movs	r4, #0
   25458:	b2e3      	uxtb	r3, r4
   2545a:	429e      	cmp	r6, r3
   2545c:	f104 0401 	add.w	r4, r4, #1
   25460:	d800      	bhi.n	25464 <elva_uart_transmit+0x16>
}
   25462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	api->poll_out(dev, out_char);
   25464:	686a      	ldr	r2, [r5, #4]
   25466:	5cf9      	ldrb	r1, [r7, r3]
   25468:	6852      	ldr	r2, [r2, #4]
   2546a:	4628      	mov	r0, r5
   2546c:	4790      	blx	r2
   2546e:	e7f3      	b.n	25458 <elva_uart_transmit+0xa>

00025470 <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   25470:	6843      	ldr	r3, [r0, #4]
{
   25472:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   25474:	685c      	ldr	r4, [r3, #4]
   25476:	4613      	mov	r3, r2
   25478:	46a4      	mov	ip, r4
   2547a:	460a      	mov	r2, r1
}
   2547c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   25480:	2100      	movs	r1, #0
   25482:	4760      	bx	ip

00025484 <gpio_pin_configure>:
	return api->config(port, access_op, pin, flags);
   25484:	6843      	ldr	r3, [r0, #4]
{
   25486:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   25488:	681c      	ldr	r4, [r3, #0]
   2548a:	4613      	mov	r3, r2
   2548c:	46a4      	mov	ip, r4
   2548e:	460a      	mov	r2, r1
}
   25490:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->config(port, access_op, pin, flags);
   25494:	2100      	movs	r1, #0
   25496:	4760      	bx	ip

00025498 <bat_control>:
int bat_control(void){
   25498:	b507      	push	{r0, r1, r2, lr}
    char byte[2] = {0x00, 0x00};   
   2549a:	2300      	movs	r3, #0
    return read_command(&byte, 1, 1);
   2549c:	2201      	movs	r2, #1
    char byte[2] = {0x00, 0x00};   
   2549e:	a802      	add	r0, sp, #8
   254a0:	f820 3d04 	strh.w	r3, [r0, #-4]!
    return read_command(&byte, 1, 1);
   254a4:	4611      	mov	r1, r2
   254a6:	f7e9 ff0d 	bl	f2c4 <read_command>
    }
   254aa:	b003      	add	sp, #12
   254ac:	f85d fb04 	ldr.w	pc, [sp], #4

000254b0 <readControlWord>:
    }

int readControlWord(int function){
   254b0:	b513      	push	{r0, r1, r4, lr}
    char subCommandMSB = (function >> 8);
    char subCommandLSB = (function & 0x00FF);
    char command[3] = {0, subCommandLSB, subCommandMSB};
   254b2:	2400      	movs	r4, #0
    char subCommandLSB = (function & 0x00FF);
   254b4:	f88d 0005 	strb.w	r0, [sp, #5]
    char subCommandMSB = (function >> 8);
   254b8:	1200      	asrs	r0, r0, #8
   254ba:	f88d 0006 	strb.w	r0, [sp, #6]
    char data[3] = {0, 0, 0};
    int ret = 0;
    int error = 0;
    char msb;
    int lsb = 0;
    write_command(&command[0], 3);
   254be:	2103      	movs	r1, #3
   254c0:	a801      	add	r0, sp, #4
    char command[3] = {0, subCommandLSB, subCommandMSB};
   254c2:	f88d 4004 	strb.w	r4, [sp, #4]
    write_command(&command[0], 3);
   254c6:	f7e9 fedb 	bl	f280 <write_command>
    ret = read_command(0x00, 1, 2);
   254ca:	2202      	movs	r2, #2
   254cc:	2101      	movs	r1, #1
   254ce:	4620      	mov	r0, r4
   254d0:	f7e9 fef8 	bl	f2c4 <read_command>
    if(ret){
   254d4:	b108      	cbz	r0, 254da <readControlWord+0x2a>
        msb = ret;
        lsb = (ret << 8);
        ret = lsb | msb;
   254d6:	f360 201f 	bfi	r0, r0, #8, #24
        return ret;
        }
    return 0;
    } 
   254da:	b002      	add	sp, #8
   254dc:	bd10      	pop	{r4, pc}

000254de <executeControlWord>:

// Execute a subcommand() from the BQ27441-G1A's control()
bool executeControlWord(int function){
    char subCommandMSB = (function >> 8);
    char subCommandLSB = (function & 0x00FF);
    char command[3] = {0x00, subCommandLSB, subCommandMSB};
   254de:	2300      	movs	r3, #0
bool executeControlWord(int function){
   254e0:	b507      	push	{r0, r1, r2, lr}
    char subCommandLSB = (function & 0x00FF);
   254e2:	f88d 0005 	strb.w	r0, [sp, #5]
    char subCommandMSB = (function >> 8);
   254e6:	1200      	asrs	r0, r0, #8
   254e8:	f88d 0006 	strb.w	r0, [sp, #6]
    char data[2] = {0, 0};
	
    if(write_command(&command[0], 3)){
   254ec:	2103      	movs	r1, #3
   254ee:	a801      	add	r0, sp, #4
    char command[3] = {0x00, subCommandLSB, subCommandMSB};
   254f0:	f88d 3004 	strb.w	r3, [sp, #4]
    if(write_command(&command[0], 3)){
   254f4:	f7e9 fec4 	bl	f280 <write_command>
        return true;
    	} else {
            return false;
            }
    }
   254f8:	3000      	adds	r0, #0
   254fa:	bf18      	it	ne
   254fc:	2001      	movne	r0, #1
   254fe:	b003      	add	sp, #12
   25500:	f85d fb04 	ldr.w	pc, [sp], #4

00025504 <softReset>:
    return executeControlWord(CONTROL_SOFT_RESET);
   25504:	2042      	movs	r0, #66	; 0x42
   25506:	f7ff bfea 	b.w	254de <executeControlWord>

0002550a <sealed>:

///////////////////////////
//// PRIVATE FUNCTIONS ////
///////////////////////////

bool sealed(void){
   2550a:	b508      	push	{r3, lr}
    int stat = status();
   2550c:	f7e9 ffc0 	bl	f490 <status>
    return stat & STATUS_SS;
    }
   25510:	f3c0 3040 	ubfx	r0, r0, #13, #1
   25514:	bd08      	pop	{r3, pc}

00025516 <seal>:
 
/* Seal Battery monitor. */
bool seal(void){
   25516:	b508      	push	{r3, lr}
    return readControlWord(CONTROL_SEALED);
   25518:	2020      	movs	r0, #32
   2551a:	f7ff ffc9 	bl	254b0 <readControlWord>
    }
   2551e:	3000      	adds	r0, #0
   25520:	bf18      	it	ne
   25522:	2001      	movne	r0, #1
   25524:	bd08      	pop	{r3, pc}

00025526 <unseal>:

/* Unseal battery monitor. */
bool unseal(void){
   25526:	b508      	push	{r3, lr}
    // To unseal the BQ27441, write the key to the control
    // command. Then immediately write the same key to control again.
    if (readControlWord(UNSEAL_KEY)){
   25528:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2552c:	f7ff ffc0 	bl	254b0 <readControlWord>
   25530:	b130      	cbz	r0, 25540 <unseal+0x1a>
        return readControlWord(UNSEAL_KEY);
   25532:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   25536:	f7ff ffbb 	bl	254b0 <readControlWord>
   2553a:	3000      	adds	r0, #0
   2553c:	bf18      	it	ne
   2553e:	2001      	movne	r0, #1
        }
    return false;
    }
   25540:	bd08      	pop	{r3, pc}

00025542 <bat_setCapacity>:
bool bat_setCapacity(int capacity){
   25542:	b507      	push	{r0, r1, r2, lr}
    unsigned char capMSB = capacity >> 8; //capture left byte from capacity.
   25544:	1203      	asrs	r3, r0, #8
   25546:	f88d 3004 	strb.w	r3, [sp, #4]
    unsigned char capLSB = capacity & 0x00FF; //capture right side of capacity.
   2554a:	f88d 0005 	strb.w	r0, [sp, #5]
    return writeExtendedData(ID_STATE, 10, capacityData, 2);
   2554e:	2302      	movs	r3, #2
   25550:	aa01      	add	r2, sp, #4
   25552:	210a      	movs	r1, #10
   25554:	2052      	movs	r0, #82	; 0x52
   25556:	f7e9 fff3 	bl	f540 <writeExtendedData>
    }
   2555a:	b003      	add	sp, #12
   2555c:	f85d fb04 	ldr.w	pc, [sp], #4

00025560 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   25560:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   25564:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   25568:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2556a:	bf08      	it	eq
   2556c:	f06f 0015 	mvneq.w	r0, #21
   25570:	4770      	bx	lr

00025572 <get_bit_ptr>:
{
   25572:	b570      	push	{r4, r5, r6, lr}
   25574:	250c      	movs	r5, #12
   25576:	434d      	muls	r5, r1
   25578:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   2557a:	f990 000b 	ldrsb.w	r0, [r0, #11]
   2557e:	1974      	adds	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
   25580:	4288      	cmp	r0, r1
   25582:	bfa8      	it	ge
   25584:	4621      	movge	r1, r4
	*word = &bitarray[bn / 32];
   25586:	f04f 0420 	mov.w	r4, #32
   2558a:	fb92 f4f4 	sdiv	r4, r2, r4
		&p->levels[level].bits : p->levels[level].bits_p;
   2558e:	bfb8      	it	lt
   25590:	5971      	ldrlt	r1, [r6, r5]
}
   25592:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
   25596:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2559a:	6019      	str	r1, [r3, #0]
}
   2559c:	bd70      	pop	{r4, r5, r6, pc}

0002559e <set_free_bit>:
{
   2559e:	b507      	push	{r0, r1, r2, lr}
	int bit = get_bit_ptr(p, level, bn, &word);
   255a0:	ab01      	add	r3, sp, #4
   255a2:	f7ff ffe6 	bl	25572 <get_bit_ptr>
	*word |= (1<<bit);
   255a6:	2301      	movs	r3, #1
   255a8:	9a01      	ldr	r2, [sp, #4]
   255aa:	fa03 f000 	lsl.w	r0, r3, r0
   255ae:	6813      	ldr	r3, [r2, #0]
   255b0:	4303      	orrs	r3, r0
   255b2:	6013      	str	r3, [r2, #0]
}
   255b4:	b003      	add	sp, #12
   255b6:	f85d fb04 	ldr.w	pc, [sp], #4

000255ba <clear_free_bit>:
{
   255ba:	b507      	push	{r0, r1, r2, lr}
	int bit = get_bit_ptr(p, level, bn, &word);
   255bc:	ab01      	add	r3, sp, #4
   255be:	f7ff ffd8 	bl	25572 <get_bit_ptr>
	*word &= ~(1<<bit);
   255c2:	2301      	movs	r3, #1
   255c4:	9a01      	ldr	r2, [sp, #4]
   255c6:	fa03 f000 	lsl.w	r0, r3, r0
   255ca:	6813      	ldr	r3, [r2, #0]
   255cc:	ea23 0300 	bic.w	r3, r3, r0
   255d0:	6013      	str	r3, [r2, #0]
}
   255d2:	b003      	add	sp, #12
   255d4:	f85d fb04 	ldr.w	pc, [sp], #4

000255d8 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   255d8:	f04f 0320 	mov.w	r3, #32
   255dc:	f3ef 8011 	mrs	r0, BASEPRI
   255e0:	f383 8811 	msr	BASEPRI, r3
   255e4:	f3bf 8f6f 	isb	sy
}
   255e8:	4770      	bx	lr

000255ea <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   255ea:	07c3      	lsls	r3, r0, #31
   255ec:	d503      	bpl.n	255f6 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   255ee:	f381 8811 	msr	BASEPRI, r1
   255f2:	f3bf 8f6f 	isb	sy
}
   255f6:	4770      	bx	lr

000255f8 <z_sys_mem_pool_base_init>:
{
   255f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   255fc:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   255fe:	22ff      	movs	r2, #255	; 0xff
	for (i = 0; i < p->n_levels; i++) {
   25600:	2100      	movs	r1, #0
		sys_dlist_init(&p->levels[i].free_list);
   25602:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   25606:	6843      	ldr	r3, [r0, #4]
   25608:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   2560a:	6800      	ldr	r0, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2560c:	435d      	muls	r5, r3
	for (i = 0; i < p->n_levels; i++) {
   2560e:	f894 c00a 	ldrb.w	ip, [r4, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   25612:	4428      	add	r0, r5
	p->max_inline_level = -1;
   25614:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
   25616:	458c      	cmp	ip, r1
   25618:	dc05      	bgt.n	25626 <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   2561a:	2500      	movs	r5, #0
   2561c:	8923      	ldrh	r3, [r4, #8]
   2561e:	42ab      	cmp	r3, r5
   25620:	dc22      	bgt.n	25668 <z_sys_mem_pool_base_init+0x70>
}
   25622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int nblocks = buflen / sz;
   25626:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
   2562a:	fb0e f701 	mul.w	r7, lr, r1
   2562e:	f8d4 800c 	ldr.w	r8, [r4, #12]
		if (nblocks < 32) {
   25632:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   25634:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
   25638:	bfc8      	it	gt
   2563a:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   2563c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   25640:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
   25644:	bfc8      	it	gt
   25646:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
   25648:	f103 0303 	add.w	r3, r3, #3
	list->tail = (sys_dnode_t *)list;
   2564c:	e9c6 9901 	strd	r9, r9, [r6, #4]
   25650:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
   25654:	bfd4      	ite	le
   25656:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
   25658:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
   2565c:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
   25660:	bfc8      	it	gt
   25662:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
   25666:	e7d6      	b.n	25616 <z_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
   25668:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   2566a:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   2566c:	436a      	muls	r2, r5
   2566e:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   25670:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
   25672:	1881      	adds	r1, r0, r2
	node->next = list;
   25674:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   25676:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   25678:	4620      	mov	r0, r4
   2567a:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   2567c:	689a      	ldr	r2, [r3, #8]
   2567e:	6011      	str	r1, [r2, #0]
	list->tail = node;
   25680:	6099      	str	r1, [r3, #8]
   25682:	462a      	mov	r2, r5
   25684:	2100      	movs	r1, #0
   25686:	f7ff ff8a 	bl	2559e <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   2568a:	3501      	adds	r5, #1
   2568c:	e7c6      	b.n	2561c <z_sys_mem_pool_base_init+0x24>

0002568e <z_sys_mem_pool_block_alloc>:
{
   2568e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25692:	b08b      	sub	sp, #44	; 0x2c
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   25694:	7a85      	ldrb	r5, [r0, #10]
{
   25696:	af00      	add	r7, sp, #0
   25698:	e9c7 3202 	strd	r3, r2, [r7, #8]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   2569c:	00ab      	lsls	r3, r5, #2
   2569e:	330a      	adds	r3, #10
   256a0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   256a4:	ebad 0d03 	sub.w	sp, sp, r3
   256a8:	46e9      	mov	r9, sp
	lsizes[0] = _ALIGN4(p->max_sz);
   256aa:	464a      	mov	r2, r9
   256ac:	6843      	ldr	r3, [r0, #4]
{
   256ae:	4604      	mov	r4, r0
	for (i = 0; i < p->n_levels; i++) {
   256b0:	2000      	movs	r0, #0
	lsizes[0] = _ALIGN4(p->max_sz);
   256b2:	3303      	adds	r3, #3
   256b4:	f023 0303 	bic.w	r3, r3, #3
   256b8:	f842 3904 	str.w	r3, [r2], #-4
	for (i = 0; i < p->n_levels; i++) {
   256bc:	4285      	cmp	r5, r0
   256be:	f100 3aff 	add.w	sl, r0, #4294967295
   256c2:	dd0a      	ble.n	256da <z_sys_mem_pool_block_alloc+0x4c>
		if (i > 0) {
   256c4:	b128      	cbz	r0, 256d2 <z_sys_mem_pool_block_alloc+0x44>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   256c6:	6813      	ldr	r3, [r2, #0]
   256c8:	089b      	lsrs	r3, r3, #2
   256ca:	3303      	adds	r3, #3
   256cc:	f023 0303 	bic.w	r3, r3, #3
   256d0:	6053      	str	r3, [r2, #4]
		if (lsizes[i] < size) {
   256d2:	f852 3f04 	ldr.w	r3, [r2, #4]!
   256d6:	428b      	cmp	r3, r1
   256d8:	d208      	bcs.n	256ec <z_sys_mem_pool_block_alloc+0x5e>
	if (alloc_l < 0) {
   256da:	f1ba 3fff 	cmp.w	sl, #4294967295
   256de:	d107      	bne.n	256f0 <z_sys_mem_pool_block_alloc+0x62>
		*data_p = NULL;
   256e0:	2300      	movs	r3, #0
   256e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   256e4:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   256e6:	f06f 000b 	mvn.w	r0, #11
   256ea:	e043      	b.n	25774 <z_sys_mem_pool_block_alloc+0xe6>
	for (i = 0; i < p->n_levels; i++) {
   256ec:	3001      	adds	r0, #1
   256ee:	e7e5      	b.n	256bc <z_sys_mem_pool_block_alloc+0x2e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   256f0:	7c20      	ldrb	r0, [r4, #16]
   256f2:	f010 0001 	ands.w	r0, r0, #1
   256f6:	d001      	beq.n	256fc <z_sys_mem_pool_block_alloc+0x6e>
   256f8:	f7ff ff6e 	bl	255d8 <pool_irq_lock.isra.2.part.3>
   256fc:	230c      	movs	r3, #12
	block = sys_dlist_get(&p->levels[l].free_list);
   256fe:	4656      	mov	r6, sl
   25700:	fb03 f30a 	mul.w	r3, r3, sl
   25704:	1d1a      	adds	r2, r3, #4
   25706:	68e3      	ldr	r3, [r4, #12]
	key = pool_irq_lock(p);
   25708:	6238      	str	r0, [r7, #32]
   2570a:	4413      	add	r3, r2
	return list->head == list;
   2570c:	681d      	ldr	r5, [r3, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2570e:	42ab      	cmp	r3, r5
   25710:	d07c      	beq.n	2580c <z_sys_mem_pool_block_alloc+0x17e>
	node->prev->next = node->next;
   25712:	e9d5 1300 	ldrd	r1, r3, [r5]
   25716:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   25718:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   2571a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   2571e:	604b      	str	r3, [r1, #4]
	node->next = NULL;
   25720:	2300      	movs	r3, #0
	node->prev = NULL;
   25722:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   25726:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
   25728:	4631      	mov	r1, r6
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2572a:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   2572c:	fb93 f2f2 	sdiv	r2, r3, r2
   25730:	4620      	mov	r0, r4
   25732:	f7ff ff42 	bl	255ba <clear_free_bit>
   25736:	1c73      	adds	r3, r6, #1
   25738:	627b      	str	r3, [r7, #36]	; 0x24
   2573a:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
   2573e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   25742:	617b      	str	r3, [r7, #20]
			for (from_l = i; from_l < alloc_l; from_l++) {
   25744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25746:	3b01      	subs	r3, #1
   25748:	459a      	cmp	sl, r3
   2574a:	dc17      	bgt.n	2577c <z_sys_mem_pool_block_alloc+0xee>
	pool_irq_unlock(p, key);
   2574c:	6a39      	ldr	r1, [r7, #32]
   2574e:	7c20      	ldrb	r0, [r4, #16]
   25750:	f7ff ff4b 	bl	255ea <pool_irq_unlock.isra.4>
	*data_p = data;
   25754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   25756:	601d      	str	r5, [r3, #0]
	if (data == NULL) {
   25758:	2d00      	cmp	r5, #0
   2575a:	d0c4      	beq.n	256e6 <z_sys_mem_pool_block_alloc+0x58>
	*level_p = alloc_l;
   2575c:	68fb      	ldr	r3, [r7, #12]
	return 0;
   2575e:	2000      	movs	r0, #0
	*level_p = alloc_l;
   25760:	f8c3 a000 	str.w	sl, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   25764:	6823      	ldr	r3, [r4, #0]
   25766:	1aed      	subs	r5, r5, r3
   25768:	f859 302a 	ldr.w	r3, [r9, sl, lsl #2]
   2576c:	fb95 f5f3 	sdiv	r5, r5, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   25770:	68bb      	ldr	r3, [r7, #8]
   25772:	601d      	str	r5, [r3, #0]
}
   25774:	372c      	adds	r7, #44	; 0x2c
   25776:	46bd      	mov	sp, r7
   25778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   2577c:	6823      	ldr	r3, [r4, #0]
	bn = block_num(p, block, lsizes[l]);
   2577e:	f856 2b04 	ldr.w	r2, [r6], #4
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   25782:	1aeb      	subs	r3, r5, r3
   25784:	fb93 f3f2 	sdiv	r3, r3, r2
	for (i = 1; i < 4; i++) {
   25788:	f04f 0b01 	mov.w	fp, #1
		int lbn = 4*bn + i;
   2578c:	009b      	lsls	r3, r3, #2
   2578e:	697a      	ldr	r2, [r7, #20]
   25790:	613b      	str	r3, [r7, #16]
   25792:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   25796:	4413      	add	r3, r2
   25798:	61bb      	str	r3, [r7, #24]
		int lsz = lsizes[l + 1];
   2579a:	f8d6 8000 	ldr.w	r8, [r6]
		set_free_bit(p, l + 1, lbn);
   2579e:	6a79      	ldr	r1, [r7, #36]	; 0x24
		void *block2 = (lsz * i) + (char *)block;
   257a0:	fb0b f308 	mul.w	r3, fp, r8
   257a4:	61fb      	str	r3, [r7, #28]
   257a6:	18eb      	adds	r3, r5, r3
   257a8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
   257aa:	693b      	ldr	r3, [r7, #16]
   257ac:	4620      	mov	r0, r4
   257ae:	eb0b 0203 	add.w	r2, fp, r3
   257b2:	f7ff fef4 	bl	2559e <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   257b6:	687b      	ldr	r3, [r7, #4]
   257b8:	6822      	ldr	r2, [r4, #0]
   257ba:	f108 38ff 	add.w	r8, r8, #4294967295
   257be:	4498      	add	r8, r3
   257c0:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
   257c4:	8921      	ldrh	r1, [r4, #8]
   257c6:	6862      	ldr	r2, [r4, #4]
   257c8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
   257ca:	4590      	cmp	r8, r2
   257cc:	d20a      	bcs.n	257e4 <z_sys_mem_pool_block_alloc+0x156>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   257ce:	68e2      	ldr	r2, [r4, #12]
   257d0:	69b9      	ldr	r1, [r7, #24]
	node->next = list;
   257d2:	69f8      	ldr	r0, [r7, #28]
   257d4:	440a      	add	r2, r1
   257d6:	1d11      	adds	r1, r2, #4
   257d8:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
   257da:	6891      	ldr	r1, [r2, #8]
   257dc:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   257de:	6891      	ldr	r1, [r2, #8]
   257e0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   257e2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
   257e4:	f10b 0b01 	add.w	fp, fp, #1
   257e8:	f1bb 0f04 	cmp.w	fp, #4
   257ec:	d1d5      	bne.n	2579a <z_sys_mem_pool_block_alloc+0x10c>
				pool_irq_unlock(p, key);
   257ee:	7c20      	ldrb	r0, [r4, #16]
   257f0:	6a39      	ldr	r1, [r7, #32]
   257f2:	f7ff fefa 	bl	255ea <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   257f6:	7c20      	ldrb	r0, [r4, #16]
   257f8:	f010 0001 	ands.w	r0, r0, #1
   257fc:	d001      	beq.n	25802 <z_sys_mem_pool_block_alloc+0x174>
   257fe:	f7ff feeb 	bl	255d8 <pool_irq_lock.isra.2.part.3>
   25802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				key = pool_irq_lock(p);
   25804:	6238      	str	r0, [r7, #32]
   25806:	3301      	adds	r3, #1
   25808:	627b      	str	r3, [r7, #36]	; 0x24
   2580a:	e79b      	b.n	25744 <z_sys_mem_pool_block_alloc+0xb6>
	for (i = alloc_l; i >= 0; i--) {
   2580c:	3e01      	subs	r6, #1
   2580e:	1c72      	adds	r2, r6, #1
   25810:	f1a5 030c 	sub.w	r3, r5, #12
   25814:	f47f af7a 	bne.w	2570c <z_sys_mem_pool_block_alloc+0x7e>
   25818:	2500      	movs	r5, #0
   2581a:	e797      	b.n	2574c <z_sys_mem_pool_block_alloc+0xbe>

0002581c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2581c:	b508      	push	{r3, lr}
   2581e:	4604      	mov	r4, r0
   25820:	4608      	mov	r0, r1
   25822:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   25824:	461a      	mov	r2, r3
   25826:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   25828:	f7fe f902 	bl	23a30 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   2582c:	f7eb fe58 	bl	114e0 <z_impl_k_thread_abort>

00025830 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   25830:	b510      	push	{r4, lr}
   25832:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   25834:	f04f 31ff 	mov.w	r1, #4294967295
   25838:	4620      	mov	r0, r4
   2583a:	f7fc ff9b 	bl	22774 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2583e:	4603      	mov	r3, r0
   25840:	2800      	cmp	r0, #0
   25842:	d0f7      	beq.n	25834 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   25844:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25846:	3308      	adds	r3, #8
   25848:	e8d3 1fef 	ldaex	r1, [r3]
   2584c:	f021 0c01 	bic.w	ip, r1, #1
   25850:	e8c3 cfee 	stlex	lr, ip, [r3]
   25854:	f1be 0f00 	cmp.w	lr, #0
   25858:	d1f6      	bne.n	25848 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2585a:	07cb      	lsls	r3, r1, #31
   2585c:	d500      	bpl.n	25860 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2585e:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   25860:	f7fd ff64 	bl	2372c <z_impl_k_yield>
   25864:	e7e6      	b.n	25834 <z_work_q_main+0x4>

00025866 <z_arch_printk_char_out>:
}
   25866:	2000      	movs	r0, #0
   25868:	4770      	bx	lr

0002586a <print_err>:
{
   2586a:	b570      	push	{r4, r5, r6, lr}
   2586c:	460d      	mov	r5, r1
   2586e:	4604      	mov	r4, r0
	out('E', ctx);
   25870:	2045      	movs	r0, #69	; 0x45
   25872:	47a0      	blx	r4
	out('R', ctx);
   25874:	4629      	mov	r1, r5
   25876:	2052      	movs	r0, #82	; 0x52
   25878:	47a0      	blx	r4
	out('R', ctx);
   2587a:	4629      	mov	r1, r5
   2587c:	4623      	mov	r3, r4
}
   2587e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   25882:	2052      	movs	r0, #82	; 0x52
   25884:	4718      	bx	r3

00025886 <z_vprintk>:
{
   25886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int long_ctr = 0;
   2588a:	f04f 0a00 	mov.w	sl, #0
{
   2588e:	4606      	mov	r6, r0
   25890:	460f      	mov	r7, r1
	int min_width = -1;
   25892:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
   25896:	46d0      	mov	r8, sl
{
   25898:	b089      	sub	sp, #36	; 0x24
   2589a:	461c      	mov	r4, r3
   2589c:	1e53      	subs	r3, r2, #1
   2589e:	9303      	str	r3, [sp, #12]
			might_format = 0;
   258a0:	2500      	movs	r5, #0
						break;
   258a2:	e005      	b.n	258b0 <z_vprintk+0x2a>
		if (!might_format) {
   258a4:	b96d      	cbnz	r5, 258c2 <z_vprintk+0x3c>
			if (*fmt != '%') {
   258a6:	2825      	cmp	r0, #37	; 0x25
   258a8:	f000 813d 	beq.w	25b26 <z_vprintk+0x2a0>
				out((int)*fmt, ctx);
   258ac:	4639      	mov	r1, r7
   258ae:	47b0      	blx	r6
	while (*fmt) {
   258b0:	9b03      	ldr	r3, [sp, #12]
   258b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   258b6:	9303      	str	r3, [sp, #12]
   258b8:	2800      	cmp	r0, #0
   258ba:	d1f3      	bne.n	258a4 <z_vprintk+0x1e>
}
   258bc:	b009      	add	sp, #36	; 0x24
   258be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   258c2:	2864      	cmp	r0, #100	; 0x64
   258c4:	d062      	beq.n	2598c <z_vprintk+0x106>
   258c6:	d819      	bhi.n	258fc <z_vprintk+0x76>
   258c8:	2839      	cmp	r0, #57	; 0x39
   258ca:	d80a      	bhi.n	258e2 <z_vprintk+0x5c>
   258cc:	2831      	cmp	r0, #49	; 0x31
   258ce:	d251      	bcs.n	25974 <z_vprintk+0xee>
   258d0:	282d      	cmp	r0, #45	; 0x2d
   258d2:	d03d      	beq.n	25950 <z_vprintk+0xca>
   258d4:	2830      	cmp	r0, #48	; 0x30
   258d6:	d03e      	beq.n	25956 <z_vprintk+0xd0>
   258d8:	2825      	cmp	r0, #37	; 0x25
   258da:	d108      	bne.n	258ee <z_vprintk+0x68>
				out((int)'%', ctx);
   258dc:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
   258de:	47b0      	blx	r6
   258e0:	e7de      	b.n	258a0 <z_vprintk+0x1a>
			switch (*fmt) {
   258e2:	2858      	cmp	r0, #88	; 0x58
   258e4:	f000 80a8 	beq.w	25a38 <z_vprintk+0x1b2>
   258e8:	2863      	cmp	r0, #99	; 0x63
   258ea:	f000 8116 	beq.w	25b1a <z_vprintk+0x294>
				out((int)'%', ctx);
   258ee:	4639      	mov	r1, r7
   258f0:	2025      	movs	r0, #37	; 0x25
   258f2:	47b0      	blx	r6
				out((int)*fmt, ctx);
   258f4:	9b03      	ldr	r3, [sp, #12]
   258f6:	4639      	mov	r1, r7
   258f8:	7818      	ldrb	r0, [r3, #0]
   258fa:	e7f0      	b.n	258de <z_vprintk+0x58>
			switch (*fmt) {
   258fc:	2870      	cmp	r0, #112	; 0x70
   258fe:	f000 8091 	beq.w	25a24 <z_vprintk+0x19e>
   25902:	d806      	bhi.n	25912 <z_vprintk+0x8c>
   25904:	2869      	cmp	r0, #105	; 0x69
   25906:	d041      	beq.n	2598c <z_vprintk+0x106>
   25908:	286c      	cmp	r0, #108	; 0x6c
   2590a:	d03c      	beq.n	25986 <z_vprintk+0x100>
   2590c:	2868      	cmp	r0, #104	; 0x68
   2590e:	d0cf      	beq.n	258b0 <z_vprintk+0x2a>
   25910:	e7ed      	b.n	258ee <z_vprintk+0x68>
   25912:	2875      	cmp	r0, #117	; 0x75
   25914:	d06d      	beq.n	259f2 <z_vprintk+0x16c>
   25916:	d817      	bhi.n	25948 <z_vprintk+0xc2>
   25918:	2873      	cmp	r0, #115	; 0x73
   2591a:	d1e8      	bne.n	258ee <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   2591c:	6825      	ldr	r5, [r4, #0]
   2591e:	f104 0b04 	add.w	fp, r4, #4
   25922:	462b      	mov	r3, r5
				while (*s)
   25924:	461c      	mov	r4, r3
   25926:	f814 0b01 	ldrb.w	r0, [r4], #1
   2592a:	2800      	cmp	r0, #0
   2592c:	f040 80ec 	bne.w	25b08 <z_vprintk+0x282>
				if (padding == PAD_SPACE_AFTER) {
   25930:	f1b8 0f03 	cmp.w	r8, #3
   25934:	f040 8100 	bne.w	25b38 <z_vprintk+0x2b2>
					int remaining = min_width - (s - start);
   25938:	1b5c      	subs	r4, r3, r5
   2593a:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
   2593e:	2c00      	cmp	r4, #0
   25940:	f300 80e6 	bgt.w	25b10 <z_vprintk+0x28a>
				char *s = va_arg(ap, char *);
   25944:	465c      	mov	r4, fp
   25946:	e7ab      	b.n	258a0 <z_vprintk+0x1a>
			switch (*fmt) {
   25948:	2878      	cmp	r0, #120	; 0x78
   2594a:	d075      	beq.n	25a38 <z_vprintk+0x1b2>
   2594c:	287a      	cmp	r0, #122	; 0x7a
   2594e:	e7de      	b.n	2590e <z_vprintk+0x88>
				padding = PAD_SPACE_AFTER;
   25950:	f04f 0803 	mov.w	r8, #3
   25954:	e7ac      	b.n	258b0 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   25956:	f1b9 0f00 	cmp.w	r9, #0
   2595a:	da0e      	bge.n	2597a <z_vprintk+0xf4>
   2595c:	f1b8 0f00 	cmp.w	r8, #0
   25960:	f000 80e7 	beq.w	25b32 <z_vprintk+0x2ac>
					min_width = *fmt - '0';
   25964:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   25968:	f1b8 0f00 	cmp.w	r8, #0
   2596c:	bf08      	it	eq
   2596e:	f04f 0802 	moveq.w	r8, #2
   25972:	e79d      	b.n	258b0 <z_vprintk+0x2a>
				if (min_width < 0) {
   25974:	f1b9 0f00 	cmp.w	r9, #0
   25978:	dbf4      	blt.n	25964 <z_vprintk+0xde>
					min_width = 10 * min_width + *fmt - '0';
   2597a:	230a      	movs	r3, #10
   2597c:	fb03 0909 	mla	r9, r3, r9, r0
   25980:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   25984:	e7f0      	b.n	25968 <z_vprintk+0xe2>
				long_ctr++;
   25986:	f10a 0a01 	add.w	sl, sl, #1
   2598a:	e791      	b.n	258b0 <z_vprintk+0x2a>
				if (long_ctr == 0) {
   2598c:	f1ba 0f00 	cmp.w	sl, #0
   25990:	d112      	bne.n	259b8 <z_vprintk+0x132>
					long ld = va_arg(ap, long);
   25992:	6825      	ldr	r5, [r4, #0]
   25994:	3404      	adds	r4, #4
				if (d < 0) {
   25996:	2d00      	cmp	r5, #0
   25998:	da05      	bge.n	259a6 <z_vprintk+0x120>
					out((int)'-', ctx);
   2599a:	4639      	mov	r1, r7
   2599c:	202d      	movs	r0, #45	; 0x2d
   2599e:	47b0      	blx	r6
					d = -d;
   259a0:	426d      	negs	r5, r5
					min_width--;
   259a2:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
   259a6:	4643      	mov	r3, r8
   259a8:	462a      	mov	r2, r5
   259aa:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   259ae:	4639      	mov	r1, r7
   259b0:	4630      	mov	r0, r6
   259b2:	f7ea f8dd 	bl	fb70 <_printk_dec_ulong>
   259b6:	e773      	b.n	258a0 <z_vprintk+0x1a>
				} else if (long_ctr == 1) {
   259b8:	f1ba 0f01 	cmp.w	sl, #1
   259bc:	d0e9      	beq.n	25992 <z_vprintk+0x10c>
					if (lld > INT32_MAX ||
   259be:	f04f 0c00 	mov.w	ip, #0
   259c2:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
   259c6:	3407      	adds	r4, #7
   259c8:	f024 0307 	bic.w	r3, r4, #7
   259cc:	f103 0408 	add.w	r4, r3, #8
   259d0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
   259d4:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
   259d8:	f143 0100 	adc.w	r1, r3, #0
   259dc:	458c      	cmp	ip, r1
   259de:	bf08      	it	eq
   259e0:	4583      	cmpeq	fp, r0
   259e2:	d204      	bcs.n	259ee <z_vprintk+0x168>
						print_err(out, ctx);
   259e4:	4639      	mov	r1, r7
   259e6:	4630      	mov	r0, r6
   259e8:	f7ff ff3f 	bl	2586a <print_err>
   259ec:	e758      	b.n	258a0 <z_vprintk+0x1a>
					d = (s32_t)lld;
   259ee:	4615      	mov	r5, r2
   259f0:	e7d1      	b.n	25996 <z_vprintk+0x110>
				if (long_ctr == 0) {
   259f2:	f1ba 0f00 	cmp.w	sl, #0
   259f6:	d105      	bne.n	25a04 <z_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
   259f8:	6822      	ldr	r2, [r4, #0]
   259fa:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
   259fc:	f8cd 9000 	str.w	r9, [sp]
   25a00:	4643      	mov	r3, r8
   25a02:	e7d4      	b.n	259ae <z_vprintk+0x128>
				} else if (long_ctr == 1) {
   25a04:	f1ba 0f01 	cmp.w	sl, #1
   25a08:	d0f6      	beq.n	259f8 <z_vprintk+0x172>
					unsigned long long llu =
   25a0a:	3407      	adds	r4, #7
   25a0c:	f024 0307 	bic.w	r3, r4, #7
   25a10:	f103 0408 	add.w	r4, r3, #8
   25a14:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
   25a18:	2b00      	cmp	r3, #0
   25a1a:	bf08      	it	eq
   25a1c:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   25a20:	d3ec      	bcc.n	259fc <z_vprintk+0x176>
   25a22:	e7df      	b.n	259e4 <z_vprintk+0x15e>
				  out('0', ctx);
   25a24:	4639      	mov	r1, r7
   25a26:	2030      	movs	r0, #48	; 0x30
   25a28:	47b0      	blx	r6
				  out('x', ctx);
   25a2a:	4639      	mov	r1, r7
   25a2c:	2078      	movs	r0, #120	; 0x78
   25a2e:	47b0      	blx	r6
				  min_width = 8;
   25a30:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
   25a34:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
   25a38:	f1ba 0f01 	cmp.w	sl, #1
   25a3c:	dc27      	bgt.n	25a8e <z_vprintk+0x208>
					x = va_arg(ap, unsigned long);
   25a3e:	6823      	ldr	r3, [r4, #0]
   25a40:	3404      	adds	r4, #4
   25a42:	9307      	str	r3, [sp, #28]
   25a44:	2300      	movs	r3, #0
   25a46:	9304      	str	r3, [sp, #16]
	int remaining = 16; /* 16 digits max */
   25a48:	2210      	movs	r2, #16
	int digits = 0;
   25a4a:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
   25a4c:	4693      	mov	fp, r2
	int digits = 0;
   25a4e:	9302      	str	r3, [sp, #8]
	int found_largest_digit = 0;
   25a50:	9306      	str	r3, [sp, #24]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   25a52:	9b07      	ldr	r3, [sp, #28]
   25a54:	f10b 3bff 	add.w	fp, fp, #4294967295
   25a58:	ea4f 008b 	mov.w	r0, fp, lsl #2
   25a5c:	f1c0 0c20 	rsb	ip, r0, #32
   25a60:	f1a0 0120 	sub.w	r1, r0, #32
   25a64:	fa23 f000 	lsr.w	r0, r3, r0
   25a68:	9b04      	ldr	r3, [sp, #16]
   25a6a:	fa03 fc0c 	lsl.w	ip, r3, ip
   25a6e:	ea40 000c 	orr.w	r0, r0, ip
   25a72:	fa23 f101 	lsr.w	r1, r3, r1
   25a76:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
   25a78:	f010 000f 	ands.w	r0, r0, #15
   25a7c:	d113      	bne.n	25aa6 <z_vprintk+0x220>
   25a7e:	9b06      	ldr	r3, [sp, #24]
   25a80:	b913      	cbnz	r3, 25a88 <z_vprintk+0x202>
   25a82:	f1bb 0f00 	cmp.w	fp, #0
   25a86:	d12e      	bne.n	25ae6 <z_vprintk+0x260>
			nibble += nibble > 9 ? 87 : 48;
   25a88:	f04f 0c30 	mov.w	ip, #48	; 0x30
   25a8c:	e011      	b.n	25ab2 <z_vprintk+0x22c>
					x = va_arg(ap, unsigned long long);
   25a8e:	3407      	adds	r4, #7
   25a90:	f024 0307 	bic.w	r3, r4, #7
   25a94:	681a      	ldr	r2, [r3, #0]
   25a96:	f103 0408 	add.w	r4, r3, #8
   25a9a:	685b      	ldr	r3, [r3, #4]
   25a9c:	9207      	str	r2, [sp, #28]
   25a9e:	9304      	str	r3, [sp, #16]
   25aa0:	e7d2      	b.n	25a48 <z_vprintk+0x1c2>
	for (; size != 0; size--) {
   25aa2:	9a05      	ldr	r2, [sp, #20]
   25aa4:	e7d5      	b.n	25a52 <z_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
   25aa6:	2809      	cmp	r0, #9
   25aa8:	bf8c      	ite	hi
   25aaa:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   25aae:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
   25ab2:	4639      	mov	r1, r7
   25ab4:	4460      	add	r0, ip
   25ab6:	9205      	str	r2, [sp, #20]
   25ab8:	47b0      	blx	r6
			digits++;
   25aba:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
   25abc:	9506      	str	r5, [sp, #24]
			digits++;
   25abe:	3301      	adds	r3, #1
   25ac0:	9302      	str	r3, [sp, #8]
	for (; size != 0; size--) {
   25ac2:	f1bb 0f00 	cmp.w	fp, #0
   25ac6:	d1ec      	bne.n	25aa2 <z_vprintk+0x21c>
	if (padding == PAD_SPACE_AFTER) {
   25ac8:	f1b8 0f03 	cmp.w	r8, #3
   25acc:	f47f aee8 	bne.w	258a0 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   25ad0:	9b02      	ldr	r3, [sp, #8]
   25ad2:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
   25ad6:	2d00      	cmp	r5, #0
   25ad8:	f77f aee2 	ble.w	258a0 <z_vprintk+0x1a>
			out(' ', ctx);
   25adc:	4639      	mov	r1, r7
   25ade:	2020      	movs	r0, #32
   25ae0:	47b0      	blx	r6
   25ae2:	3d01      	subs	r5, #1
   25ae4:	e7f7      	b.n	25ad6 <z_vprintk+0x250>
		if (remaining-- <= min_width) {
   25ae6:	1e53      	subs	r3, r2, #1
   25ae8:	4591      	cmp	r9, r2
   25aea:	9305      	str	r3, [sp, #20]
   25aec:	dbe9      	blt.n	25ac2 <z_vprintk+0x23c>
			if (padding == PAD_ZERO_BEFORE) {
   25aee:	f1b8 0f01 	cmp.w	r8, #1
   25af2:	d103      	bne.n	25afc <z_vprintk+0x276>
				out('0', ctx);
   25af4:	4639      	mov	r1, r7
   25af6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   25af8:	47b0      	blx	r6
   25afa:	e7e2      	b.n	25ac2 <z_vprintk+0x23c>
			} else if (padding == PAD_SPACE_BEFORE) {
   25afc:	f1b8 0f02 	cmp.w	r8, #2
   25b00:	d1df      	bne.n	25ac2 <z_vprintk+0x23c>
				out(' ', ctx);
   25b02:	4639      	mov	r1, r7
   25b04:	2020      	movs	r0, #32
   25b06:	e7f7      	b.n	25af8 <z_vprintk+0x272>
					out((int)(*s++), ctx);
   25b08:	4639      	mov	r1, r7
   25b0a:	47b0      	blx	r6
   25b0c:	4623      	mov	r3, r4
   25b0e:	e709      	b.n	25924 <z_vprintk+0x9e>
						out(' ', ctx);
   25b10:	4639      	mov	r1, r7
   25b12:	2020      	movs	r0, #32
   25b14:	47b0      	blx	r6
   25b16:	3c01      	subs	r4, #1
   25b18:	e711      	b.n	2593e <z_vprintk+0xb8>
				out(c, ctx);
   25b1a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
   25b1c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
   25b1e:	4639      	mov	r1, r7
   25b20:	47b0      	blx	r6
				int c = va_arg(ap, int);
   25b22:	462c      	mov	r4, r5
   25b24:	e6bc      	b.n	258a0 <z_vprintk+0x1a>
				long_ctr = 0;
   25b26:	46aa      	mov	sl, r5
				padding = PAD_NONE;
   25b28:	46a8      	mov	r8, r5
				min_width = -1;
   25b2a:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
   25b2e:	2501      	movs	r5, #1
   25b30:	e6be      	b.n	258b0 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   25b32:	f04f 0801 	mov.w	r8, #1
   25b36:	e6bb      	b.n	258b0 <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
   25b38:	465c      	mov	r4, fp
			might_format = 0;
   25b3a:	4605      	mov	r5, r0
   25b3c:	e6b8      	b.n	258b0 <z_vprintk+0x2a>

00025b3e <printk>:
{
   25b3e:	b40f      	push	{r0, r1, r2, r3}
   25b40:	b507      	push	{r0, r1, r2, lr}
   25b42:	a904      	add	r1, sp, #16
   25b44:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25b48:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   25b4a:	f7ea f865 	bl	fc18 <vprintk>
}
   25b4e:	b003      	add	sp, #12
   25b50:	f85d eb04 	ldr.w	lr, [sp], #4
   25b54:	b004      	add	sp, #16
   25b56:	4770      	bx	lr

00025b58 <assert_post_action>:
__weak void assert_post_action(const char *file, unsigned int line)
{
  ARG_UNUSED(file);
  ARG_UNUSED(line);

  k_panic();
   25b58:	4040      	eors	r0, r0
   25b5a:	f380 8811 	msr	BASEPRI, r0
   25b5e:	f04f 0005 	mov.w	r0, #5
   25b62:	df02      	svc	2

00025b64 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   25b64:	4770      	bx	lr

00025b66 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   25b66:	f7ea b885 	b.w	fc74 <SystemInit>

00025b6a <nrfx_isr>:

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   25b6a:	4700      	bx	r0

00025b6c <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   25b6c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   25b6e:	2200      	movs	r2, #0
   25b70:	2101      	movs	r1, #1
   25b72:	2005      	movs	r0, #5
   25b74:	f7eb fbc4 	bl	11300 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   25b78:	2005      	movs	r0, #5
   25b7a:	f7eb fb9d 	bl	112b8 <z_arch_irq_enable>

	return 0;
}
   25b7e:	2000      	movs	r0, #0
   25b80:	bd08      	pop	{r3, pc}

00025b82 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   25b82:	4770      	bx	lr

00025b84 <z_irq_spurious>:
	__reserved();
   25b84:	f7eb b9c6 	b.w	10f14 <__bus_fault>

00025b88 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   25b88:	4770      	bx	lr

00025b8a <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
   25b8a:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->basic.r0, esf);
   25b8c:	6800      	ldr	r0, [r0, #0]
   25b8e:	f7eb bc49 	b.w	11424 <z_NanoFatalErrorHandler>

00025b92 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   25b92:	b508      	push	{r3, lr}
	handler();
   25b94:	f7eb fcfa 	bl	1158c <z_SysNmiOnReset>
	z_ExcExit();
}
   25b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   25b9c:	f7eb b936 	b.w	10e0c <_IntExit>

00025ba0 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   25ba0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   25ba2:	2100      	movs	r1, #0
   25ba4:	a801      	add	r0, sp, #4
   25ba6:	f7eb fef3 	bl	11990 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   25baa:	b003      	add	sp, #12
   25bac:	f85d fb04 	ldr.w	pc, [sp], #4

00025bb0 <mpu_configure_region>:
{
   25bb0:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   25bb2:	684b      	ldr	r3, [r1, #4]
{
   25bb4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   25bb6:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   25bb8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   25bbc:	890d      	ldrh	r5, [r1, #8]
   25bbe:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   25bc0:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25bc2:	f024 041f 	bic.w	r4, r4, #31
   25bc6:	3b01      	subs	r3, #1
   25bc8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   25bca:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   25bce:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25bd2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   25bd6:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   25bd8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   25bdc:	9303      	str	r3, [sp, #12]
   25bde:	4604      	mov	r4, r0
   25be0:	d805      	bhi.n	25bee <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   25be2:	4669      	mov	r1, sp
   25be4:	f7eb fd28 	bl	11638 <region_init>
}
   25be8:	4620      	mov	r0, r4
   25bea:	b005      	add	sp, #20
   25bec:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25bee:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   25bf2:	e7f9      	b.n	25be8 <mpu_configure_region+0x38>

00025bf4 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   25bf4:	b510      	push	{r4, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   25bf6:	7802      	ldrb	r2, [r0, #0]
   25bf8:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   25bfa:	2a20      	cmp	r2, #32
   25bfc:	f100 0001 	add.w	r0, r0, #1
   25c00:	d0f9      	beq.n	25bf6 <atoi+0x2>
   25c02:	f1a2 0109 	sub.w	r1, r2, #9
   25c06:	2904      	cmp	r1, #4
   25c08:	d9f5      	bls.n	25bf6 <atoi+0x2>
		s++;
	}
	switch (*s) {
   25c0a:	2a2b      	cmp	r2, #43	; 0x2b
   25c0c:	d008      	beq.n	25c20 <atoi+0x2c>
	int neg = 0;
   25c0e:	2a2d      	cmp	r2, #45	; 0x2d
   25c10:	bf0a      	itet	eq
   25c12:	2101      	moveq	r1, #1
   25c14:	2100      	movne	r1, #0
   25c16:	4603      	moveq	r3, r0
   25c18:	3b01      	subs	r3, #1
   25c1a:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   25c1c:	240a      	movs	r4, #10
   25c1e:	e004      	b.n	25c2a <atoi+0x36>
		s++;
   25c20:	4603      	mov	r3, r0
	int neg = 0;
   25c22:	2100      	movs	r1, #0
   25c24:	e7f8      	b.n	25c18 <atoi+0x24>
		n = 10*n - (*s++ - '0');
   25c26:	4360      	muls	r0, r4
   25c28:	1a80      	subs	r0, r0, r2
	while (isdigit(*s)) {
   25c2a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   25c2e:	3a30      	subs	r2, #48	; 0x30
   25c30:	2a09      	cmp	r2, #9
   25c32:	d9f8      	bls.n	25c26 <atoi+0x32>
	}
	return neg ? n : -n;
   25c34:	b901      	cbnz	r1, 25c38 <atoi+0x44>
   25c36:	4240      	negs	r0, r0
}
   25c38:	bd10      	pop	{r4, pc}

00025c3a <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   25c3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c3e:	4684      	mov	ip, r0
   25c40:	460f      	mov	r7, r1
	register const char *s = nptr;
   25c42:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   25c44:	462c      	mov	r4, r5
   25c46:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   25c4a:	2b20      	cmp	r3, #32
   25c4c:	d036      	beq.n	25cbc <strtol+0x82>
   25c4e:	f1a3 0109 	sub.w	r1, r3, #9
   25c52:	2904      	cmp	r1, #4
   25c54:	d932      	bls.n	25cbc <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   25c56:	2b2d      	cmp	r3, #45	; 0x2d
   25c58:	d132      	bne.n	25cc0 <strtol+0x86>
		neg = 1;
   25c5a:	2101      	movs	r1, #1
		c = *s++;
   25c5c:	786b      	ldrb	r3, [r5, #1]
   25c5e:	1cac      	adds	r4, r5, #2
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
   25c60:	2a00      	cmp	r2, #0
   25c62:	d05c      	beq.n	25d1e <strtol+0xe4>
   25c64:	2a10      	cmp	r2, #16
   25c66:	d109      	bne.n	25c7c <strtol+0x42>
   25c68:	2b30      	cmp	r3, #48	; 0x30
   25c6a:	d107      	bne.n	25c7c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   25c6c:	7823      	ldrb	r3, [r4, #0]
   25c6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25c72:	2b58      	cmp	r3, #88	; 0x58
   25c74:	d14e      	bne.n	25d14 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   25c76:	2210      	movs	r2, #16
		c = s[1];
   25c78:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   25c7a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   25c7c:	2900      	cmp	r1, #0
   25c7e:	bf0c      	ite	eq
   25c80:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
   25c84:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   25c88:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   25c8a:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   25c8e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   25c90:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   25c94:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   25c98:	2d09      	cmp	r5, #9
   25c9a:	d817      	bhi.n	25ccc <strtol+0x92>
			c -= '0';
   25c9c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   25c9e:	429a      	cmp	r2, r3
   25ca0:	dd24      	ble.n	25cec <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   25ca2:	1c75      	adds	r5, r6, #1
   25ca4:	d007      	beq.n	25cb6 <strtol+0x7c>
   25ca6:	4570      	cmp	r0, lr
   25ca8:	d81d      	bhi.n	25ce6 <strtol+0xac>
   25caa:	d101      	bne.n	25cb0 <strtol+0x76>
   25cac:	454b      	cmp	r3, r9
   25cae:	dc1a      	bgt.n	25ce6 <strtol+0xac>
			any = -1;
		} else {
			any = 1;
   25cb0:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   25cb2:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   25cb6:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   25cba:	e7eb      	b.n	25c94 <strtol+0x5a>
{
   25cbc:	4625      	mov	r5, r4
   25cbe:	e7c1      	b.n	25c44 <strtol+0xa>
	} else if (c == '+')
   25cc0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   25cc2:	bf04      	itt	eq
   25cc4:	1cac      	addeq	r4, r5, #2
   25cc6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   25cc8:	2100      	movs	r1, #0
   25cca:	e7c9      	b.n	25c60 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   25ccc:	f043 0520 	orr.w	r5, r3, #32
   25cd0:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   25cd2:	2d19      	cmp	r5, #25
   25cd4:	d80a      	bhi.n	25cec <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   25cd6:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   25cda:	2d19      	cmp	r5, #25
   25cdc:	bf8c      	ite	hi
   25cde:	2557      	movhi	r5, #87	; 0x57
   25ce0:	2537      	movls	r5, #55	; 0x37
   25ce2:	1b5b      	subs	r3, r3, r5
   25ce4:	e7db      	b.n	25c9e <strtol+0x64>
			any = -1;
   25ce6:	f04f 36ff 	mov.w	r6, #4294967295
   25cea:	e7e4      	b.n	25cb6 <strtol+0x7c>
		}
	}
	if (any < 0) {
   25cec:	1c73      	adds	r3, r6, #1
   25cee:	d107      	bne.n	25d00 <strtol+0xc6>
   25cf0:	f7fb ff9e 	bl	21c30 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   25cf4:	2326      	movs	r3, #38	; 0x26
   25cf6:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   25cf8:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL) {
   25cfa:	b937      	cbnz	r7, 25d0a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   25cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
   25d00:	b101      	cbz	r1, 25d04 <strtol+0xca>
		acc = -acc;
   25d02:	4240      	negs	r0, r0
	if (endptr != NULL) {
   25d04:	2f00      	cmp	r7, #0
   25d06:	d0f9      	beq.n	25cfc <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   25d08:	b10e      	cbz	r6, 25d0e <strtol+0xd4>
   25d0a:	f104 3cff 	add.w	ip, r4, #4294967295
   25d0e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   25d12:	e7f3      	b.n	25cfc <strtol+0xc2>
	if (base == 0) {
   25d14:	2330      	movs	r3, #48	; 0x30
   25d16:	2a00      	cmp	r2, #0
   25d18:	d1b0      	bne.n	25c7c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   25d1a:	2208      	movs	r2, #8
   25d1c:	e7ae      	b.n	25c7c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   25d1e:	2b30      	cmp	r3, #48	; 0x30
   25d20:	d0a4      	beq.n	25c6c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   25d22:	220a      	movs	r2, #10
   25d24:	e7aa      	b.n	25c7c <strtol+0x42>

00025d26 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   25d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   25d2a:	780f      	ldrb	r7, [r1, #0]
{
   25d2c:	4605      	mov	r5, r0
	if (c != 0) {
   25d2e:	b187      	cbz	r7, 25d52 <strstr+0x2c>
	c = *find++;
   25d30:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   25d32:	4620      	mov	r0, r4
   25d34:	f000 f82c 	bl	25d90 <strlen>
   25d38:	4680      	mov	r8, r0
		do {
			do {
				sc = *s++;
   25d3a:	462e      	mov	r6, r5
   25d3c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0)
   25d40:	b163      	cbz	r3, 25d5c <strstr+0x36>
				return NULL;
			} while (sc != c);
   25d42:	429f      	cmp	r7, r3
   25d44:	d108      	bne.n	25d58 <strstr+0x32>
		} while (strncmp(s, find, len) != 0);
   25d46:	4642      	mov	r2, r8
   25d48:	4621      	mov	r1, r4
   25d4a:	4630      	mov	r0, r6
   25d4c:	f000 f835 	bl	25dba <strncmp>
   25d50:	b910      	cbnz	r0, 25d58 <strstr+0x32>
	s--;
	}
	return (char *)s;
}
   25d52:	4628      	mov	r0, r5
   25d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   25d58:	4635      	mov	r5, r6
   25d5a:	e7ee      	b.n	25d3a <strstr+0x14>
				return NULL;
   25d5c:	461d      	mov	r5, r3
   25d5e:	e7f8      	b.n	25d52 <strstr+0x2c>

00025d60 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   25d60:	4603      	mov	r3, r0
   25d62:	3901      	subs	r1, #1
   25d64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   25d68:	b90a      	cbnz	r2, 25d6e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   25d6a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   25d6c:	4770      	bx	lr
		*d = *s;
   25d6e:	f803 2b01 	strb.w	r2, [r3], #1
   25d72:	e7f7      	b.n	25d64 <strcpy+0x4>

00025d74 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   25d74:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
   25d76:	7802      	ldrb	r2, [r0, #0]
   25d78:	4603      	mov	r3, r0
   25d7a:	428a      	cmp	r2, r1
   25d7c:	f100 0001 	add.w	r0, r0, #1
   25d80:	d004      	beq.n	25d8c <strchr+0x18>
   25d82:	2a00      	cmp	r2, #0
   25d84:	d1f7      	bne.n	25d76 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
   25d86:	2900      	cmp	r1, #0
   25d88:	bf18      	it	ne
   25d8a:	2300      	movne	r3, #0
}
   25d8c:	4618      	mov	r0, r3
   25d8e:	4770      	bx	lr

00025d90 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   25d90:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
   25d92:	4603      	mov	r3, r0
   25d94:	1a98      	subs	r0, r3, r2
   25d96:	f813 1b01 	ldrb.w	r1, [r3], #1
   25d9a:	2900      	cmp	r1, #0
   25d9c:	d1fa      	bne.n	25d94 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
   25d9e:	4770      	bx	lr

00025da0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   25da0:	3801      	subs	r0, #1
   25da2:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   25da4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   25da8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   25dac:	4293      	cmp	r3, r2
   25dae:	d102      	bne.n	25db6 <strcmp+0x16>
   25db0:	2b00      	cmp	r3, #0
   25db2:	d1f7      	bne.n	25da4 <strcmp+0x4>
   25db4:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   25db6:	1a98      	subs	r0, r3, r2
   25db8:	4770      	bx	lr

00025dba <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   25dba:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   25dbc:	2400      	movs	r4, #0
   25dbe:	42a2      	cmp	r2, r4
   25dc0:	d008      	beq.n	25dd4 <strncmp+0x1a>
   25dc2:	5d03      	ldrb	r3, [r0, r4]
   25dc4:	5d0d      	ldrb	r5, [r1, r4]
   25dc6:	42ab      	cmp	r3, r5
   25dc8:	d102      	bne.n	25dd0 <strncmp+0x16>
   25dca:	3401      	adds	r4, #1
   25dcc:	2b00      	cmp	r3, #0
   25dce:	d1f6      	bne.n	25dbe <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   25dd0:	1b58      	subs	r0, r3, r5
   25dd2:	e000      	b.n	25dd6 <strncmp+0x1c>
   25dd4:	2000      	movs	r0, #0
}
   25dd6:	bd30      	pop	{r4, r5, pc}

00025dd8 <strcat>:

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   25dd8:	b538      	push	{r3, r4, r5, lr}
   25dda:	4604      	mov	r4, r0
   25ddc:	460d      	mov	r5, r1
	strcpy(dest + strlen(dest), src);
   25dde:	f7ff ffd7 	bl	25d90 <strlen>
   25de2:	4629      	mov	r1, r5
   25de4:	4420      	add	r0, r4
   25de6:	f7ff ffbb 	bl	25d60 <strcpy>
	return dest;
}
   25dea:	4620      	mov	r0, r4
   25dec:	bd38      	pop	{r3, r4, r5, pc}

00025dee <strncat>:

char *strncat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src,
	      size_t n)
{
   25dee:	b570      	push	{r4, r5, r6, lr}
   25df0:	4606      	mov	r6, r0
   25df2:	460c      	mov	r4, r1
   25df4:	4615      	mov	r5, r2
	char *orig_dest = dest;
	size_t len = strlen(dest);
   25df6:	f7ff ffcb 	bl	25d90 <strlen>

	dest += len;
   25dfa:	4430      	add	r0, r6
   25dfc:	1e61      	subs	r1, r4, #1
   25dfe:	4405      	add	r5, r0
	while ((n-- > 0) && (*src != '\0')) {
   25e00:	42a8      	cmp	r0, r5
   25e02:	d002      	beq.n	25e0a <strncat+0x1c>
   25e04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   25e08:	b91b      	cbnz	r3, 25e12 <strncat+0x24>
		*dest++ = *src++;
	}
	*dest = '\0';
   25e0a:	2300      	movs	r3, #0
   25e0c:	7003      	strb	r3, [r0, #0]

	return orig_dest;
}
   25e0e:	4630      	mov	r0, r6
   25e10:	bd70      	pop	{r4, r5, r6, pc}
		*dest++ = *src++;
   25e12:	f800 3b01 	strb.w	r3, [r0], #1
   25e16:	e7f3      	b.n	25e00 <strncat+0x12>

00025e18 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   25e18:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
   25e1a:	b15a      	cbz	r2, 25e34 <memcmp+0x1c>
   25e1c:	3901      	subs	r1, #1
   25e1e:	1884      	adds	r4, r0, r2
   25e20:	f810 2b01 	ldrb.w	r2, [r0], #1
   25e24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
   25e28:	42a0      	cmp	r0, r4
   25e2a:	d001      	beq.n	25e30 <memcmp+0x18>
   25e2c:	429a      	cmp	r2, r3
   25e2e:	d0f7      	beq.n	25e20 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   25e30:	1ad0      	subs	r0, r2, r3
}
   25e32:	bd10      	pop	{r4, pc}
		return 0;
   25e34:	4610      	mov	r0, r2
   25e36:	e7fc      	b.n	25e32 <memcmp+0x1a>

00025e38 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   25e38:	1a43      	subs	r3, r0, r1
   25e3a:	4293      	cmp	r3, r2
{
   25e3c:	b510      	push	{r4, lr}
   25e3e:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   25e42:	d308      	bcc.n	25e56 <memmove+0x1e>
	char *dest = d;
   25e44:	4602      	mov	r2, r0
   25e46:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   25e48:	429a      	cmp	r2, r3
   25e4a:	d00b      	beq.n	25e64 <memmove+0x2c>
			*dest = *src;
   25e4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   25e50:	f802 4b01 	strb.w	r4, [r2], #1
   25e54:	e7f8      	b.n	25e48 <memmove+0x10>
   25e56:	440a      	add	r2, r1
			dest[n] = src[n];
   25e58:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   25e5c:	428a      	cmp	r2, r1
			dest[n] = src[n];
   25e5e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   25e62:	d1f9      	bne.n	25e58 <memmove+0x20>
			n--;
		}
	}

	return d;
}
   25e64:	bd10      	pop	{r4, pc}

00025e66 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   25e66:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
   25e68:	ea81 0400 	eor.w	r4, r1, r0
   25e6c:	07a5      	lsls	r5, r4, #30
   25e6e:	4603      	mov	r3, r0
   25e70:	d00b      	beq.n	25e8a <memcpy+0x24>
   25e72:	3b01      	subs	r3, #1
   25e74:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   25e76:	4291      	cmp	r1, r2
   25e78:	d11d      	bne.n	25eb6 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   25e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   25e7c:	2a00      	cmp	r2, #0
   25e7e:	d0fc      	beq.n	25e7a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   25e80:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   25e84:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   25e86:	f803 4b01 	strb.w	r4, [r3], #1
		while (((unsigned int)d_byte) & 0x3) {
   25e8a:	079c      	lsls	r4, r3, #30
   25e8c:	d1f6      	bne.n	25e7c <memcpy+0x16>
   25e8e:	460c      	mov	r4, r1
   25e90:	1f1d      	subs	r5, r3, #4
   25e92:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
   25e94:	1b3e      	subs	r6, r7, r4
   25e96:	2e03      	cmp	r6, #3
   25e98:	d808      	bhi.n	25eac <memcpy+0x46>
   25e9a:	f06f 0503 	mvn.w	r5, #3
   25e9e:	0894      	lsrs	r4, r2, #2
   25ea0:	fb05 2204 	mla	r2, r5, r4, r2
   25ea4:	00a4      	lsls	r4, r4, #2
   25ea6:	4423      	add	r3, r4
   25ea8:	4421      	add	r1, r4
   25eaa:	e7e2      	b.n	25e72 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   25eac:	f854 6b04 	ldr.w	r6, [r4], #4
   25eb0:	f845 6f04 	str.w	r6, [r5, #4]!
   25eb4:	e7ee      	b.n	25e94 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   25eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
   25eba:	f803 4f01 	strb.w	r4, [r3, #1]!
   25ebe:	e7da      	b.n	25e76 <memcpy+0x10>

00025ec0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   25ec0:	4603      	mov	r3, r0
{
   25ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
   25ec4:	b2c9      	uxtb	r1, r1

	while (((unsigned int)d_byte) & 0x3) {
   25ec6:	079c      	lsls	r4, r3, #30
   25ec8:	d10f      	bne.n	25eea <memset+0x2a>
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
	c_word |= c_word << 16;

	while (n >= sizeof(unsigned int)) {
   25eca:	461d      	mov	r5, r3
	c_word |= c_word << 8;
   25ecc:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   25ed0:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   25ed4:	189f      	adds	r7, r3, r2
	while (n >= sizeof(unsigned int)) {
   25ed6:	1b7e      	subs	r6, r7, r5
   25ed8:	2e03      	cmp	r6, #3
   25eda:	d80c      	bhi.n	25ef6 <memset+0x36>
   25edc:	0894      	lsrs	r4, r2, #2
   25ede:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   25ee2:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   25ee4:	429c      	cmp	r4, r3
   25ee6:	d109      	bne.n	25efc <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   25ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
   25eea:	2a00      	cmp	r2, #0
   25eec:	d0fc      	beq.n	25ee8 <memset+0x28>
		*(d_byte++) = c_byte;
   25eee:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   25ef2:	3a01      	subs	r2, #1
   25ef4:	e7e7      	b.n	25ec6 <memset+0x6>
		*(d_word++) = c_word;
   25ef6:	f845 4b04 	str.w	r4, [r5], #4
   25efa:	e7ec      	b.n	25ed6 <memset+0x16>
		*(d_byte++) = c_byte;
   25efc:	f804 1b01 	strb.w	r1, [r4], #1
   25f00:	e7f0      	b.n	25ee4 <memset+0x24>

00025f02 <_to_x>:
{
   25f02:	b570      	push	{r4, r5, r6, lr}
   25f04:	4604      	mov	r4, r0
		int d = n % base;
   25f06:	fbb1 f6f2 	udiv	r6, r1, r2
   25f0a:	fb02 1116 	mls	r1, r2, r6, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   25f0e:	2909      	cmp	r1, #9
   25f10:	b2cd      	uxtb	r5, r1
   25f12:	bf8c      	ite	hi
   25f14:	2127      	movhi	r1, #39	; 0x27
   25f16:	2100      	movls	r1, #0
   25f18:	3530      	adds	r5, #48	; 0x30
   25f1a:	4429      	add	r1, r5
   25f1c:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
   25f20:	4631      	mov	r1, r6
   25f22:	2e00      	cmp	r6, #0
   25f24:	d1ef      	bne.n	25f06 <_to_x+0x4>
		*end++ = '0';
   25f26:	2130      	movs	r1, #48	; 0x30
   25f28:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
   25f2a:	4293      	cmp	r3, r2
   25f2c:	dc07      	bgt.n	25f3e <_to_x+0x3c>
	*end = 0;
   25f2e:	4623      	mov	r3, r4
   25f30:	2100      	movs	r1, #0
   25f32:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
   25f36:	4283      	cmp	r3, r0
   25f38:	d804      	bhi.n	25f44 <_to_x+0x42>
}
   25f3a:	4610      	mov	r0, r2
   25f3c:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
   25f3e:	f804 1b01 	strb.w	r1, [r4], #1
   25f42:	e7f1      	b.n	25f28 <_to_x+0x26>
		char tmp = *end;
   25f44:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
   25f46:	7804      	ldrb	r4, [r0, #0]
   25f48:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
   25f4c:	f800 1b01 	strb.w	r1, [r0], #1
   25f50:	e7f1      	b.n	25f36 <_to_x+0x34>

00025f52 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   25f52:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   25f56:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	*v = (*v & 1) + (*v >> 1);
   25f5a:	ea5f 0c53 	movs.w	ip, r3, lsr #1
   25f5e:	ea4f 0b32 	mov.w	fp, r2, rrx
   25f62:	2500      	movs	r5, #0
   25f64:	f002 0401 	and.w	r4, r2, #1
   25f68:	eb1b 0204 	adds.w	r2, fp, r4
   25f6c:	eb4c 0305 	adc.w	r3, ip, r5
   25f70:	e9c0 2300 	strd	r2, r3, [r0]
}
   25f74:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

00025f78 <_ldiv5>:
		q = (uint64_t)(hi / 5U) << shifts[i];
   25f78:	2105      	movs	r1, #5
	uint64_t rem = *v, quot = 0U, q;
   25f7a:	e9d0 2300 	ldrd	r2, r3, [r0]
{
   25f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rem += 2U;
   25f82:	f112 0802 	adds.w	r8, r2, #2
   25f86:	f143 0900 	adc.w	r9, r3, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   25f8a:	fbb9 f5f1 	udiv	r5, r9, r1
		rem -= q * 5U;
   25f8e:	2600      	movs	r6, #0
   25f90:	fb01 f705 	mul.w	r7, r1, r5
   25f94:	ebb8 0806 	subs.w	r8, r8, r6
   25f98:	eb69 0907 	sbc.w	r9, r9, r7
		hi = rem >> shifts[i];
   25f9c:	ea4f 06d8 	mov.w	r6, r8, lsr #3
   25fa0:	ea46 7649 	orr.w	r6, r6, r9, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   25fa4:	fbb6 fcf1 	udiv	ip, r6, r1
   25fa8:	2400      	movs	r4, #0
		rem -= q * 5U;
   25faa:	46c2      	mov	sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   25fac:	ea4f 06cc 	mov.w	r6, ip, lsl #3
		rem -= q * 5U;
   25fb0:	fba6 8901 	umull	r8, r9, r6, r1
		quot += q;
   25fb4:	19a2      	adds	r2, r4, r6
		q = (uint64_t)(hi / 5U) << shifts[i];
   25fb6:	ea4f 775c 	mov.w	r7, ip, lsr #29
		quot += q;
   25fba:	eb45 0307 	adc.w	r3, r5, r7
   25fbe:	4614      	mov	r4, r2
		rem -= q * 5U;
   25fc0:	ebba 0208 	subs.w	r2, sl, r8
		q = (uint64_t)(hi / 5U) << shifts[i];
   25fc4:	fbb2 f2f1 	udiv	r2, r2, r1
		quot += q;
   25fc8:	461d      	mov	r5, r3
   25fca:	18a4      	adds	r4, r4, r2
   25fcc:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   25fd0:	e9c0 4500 	strd	r4, r5, [r0]
}
   25fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025fd8 <_get_digit>:
	if (*digit_count > 0) {
   25fd8:	680b      	ldr	r3, [r1, #0]
{
   25fda:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
	if (*digit_count > 0) {
   25fde:	2b00      	cmp	r3, #0
   25fe0:	dd13      	ble.n	2600a <_get_digit+0x32>
		*digit_count -= 1;
   25fe2:	3b01      	subs	r3, #1
   25fe4:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   25fe6:	210a      	movs	r1, #10
   25fe8:	6802      	ldr	r2, [r0, #0]
   25fea:	6844      	ldr	r4, [r0, #4]
   25fec:	fba2 bc01 	umull	fp, ip, r2, r1
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   25ff0:	465a      	mov	r2, fp
		*fr = *fr * 10U;
   25ff2:	fb01 cc04 	mla	ip, r1, r4, ip
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   25ff6:	f02c 4370 	bic.w	r3, ip, #4026531840	; 0xf0000000
   25ffa:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   25ffe:	ea4f 711c 	mov.w	r1, ip, lsr #28
   26002:	3130      	adds	r1, #48	; 0x30
}
   26004:	b2c8      	uxtb	r0, r1
   26006:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
		rval = '0';
   2600a:	2130      	movs	r1, #48	; 0x30
   2600c:	e7fa      	b.n	26004 <_get_digit+0x2c>

0002600e <_stdout_hook_default>:
}
   2600e:	f04f 30ff 	mov.w	r0, #4294967295
   26012:	4770      	bx	lr

00026014 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   26014:	684b      	ldr	r3, [r1, #4]
   26016:	2b01      	cmp	r3, #1
   26018:	dd07      	ble.n	2602a <sprintf_out+0x16>
		*(p->ptr) = c;
   2601a:	680b      	ldr	r3, [r1, #0]
   2601c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2601e:	680b      	ldr	r3, [r1, #0]
   26020:	3301      	adds	r3, #1
   26022:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   26024:	684b      	ldr	r3, [r1, #4]
   26026:	3b01      	subs	r3, #1
   26028:	604b      	str	r3, [r1, #4]
}
   2602a:	2000      	movs	r0, #0
   2602c:	4770      	bx	lr

0002602e <fixed_data_unref>:

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2602e:	4770      	bx	lr

00026030 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   26030:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   26032:	f000 f80a 	bl	2604a <net_pkt_init>

	net_context_init();
   26036:	f7ec f927 	bl	12288 <net_context_init>
	net_if_init();
   2603a:	f7ec f999 	bl	12370 <net_if_init>
	net_tc_rx_init();
   2603e:	f7ec f9e3 	bl	12408 <net_tc_rx_init>
	net_if_post_init();
   26042:	f7ec f9af 	bl	123a4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   26046:	2000      	movs	r0, #0
   26048:	bd08      	pop	{r3, pc}

0002604a <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
   2604a:	4770      	bx	lr

0002604c <net_byte_to_hex>:
{
   2604c:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   2604e:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   26050:	b1ab      	cbz	r3, 2607e <net_byte_to_hex+0x32>
		if (val < 10) {
   26052:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   26054:	bf86      	itte	hi
   26056:	f1a2 050a 	subhi.w	r5, r2, #10
   2605a:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   2605c:	3430      	addls	r4, #48	; 0x30
   2605e:	1c43      	adds	r3, r0, #1
   26060:	7004      	strb	r4, [r0, #0]
   26062:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   26066:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   26068:	bf84      	itt	hi
   2606a:	3a0a      	subhi	r2, #10
   2606c:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   2606e:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val + '0');
   26072:	bf98      	it	ls
   26074:	3130      	addls	r1, #48	; 0x30
   26076:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   26078:	705a      	strb	r2, [r3, #1]
   2607a:	1c58      	adds	r0, r3, #1
}
   2607c:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   2607e:	2c00      	cmp	r4, #0
   26080:	d1e7      	bne.n	26052 <net_byte_to_hex+0x6>
   26082:	4603      	mov	r3, r0
   26084:	e7ed      	b.n	26062 <net_byte_to_hex+0x16>

00026086 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   26086:	e9d0 2300 	ldrd	r2, r3, [r0]
   2608a:	1a9b      	subs	r3, r3, r2
   2608c:	2b01      	cmp	r3, #1
{
   2608e:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   26090:	d90c      	bls.n	260ac <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   26092:	4614      	mov	r4, r2
   26094:	1c53      	adds	r3, r2, #1
   26096:	6003      	str	r3, [r0, #0]
   26098:	f814 3b02 	ldrb.w	r3, [r4], #2
   2609c:	021b      	lsls	r3, r3, #8
   2609e:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   260a0:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   260a2:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   260a4:	7852      	ldrb	r2, [r2, #1]
   260a6:	4313      	orrs	r3, r2
   260a8:	800b      	strh	r3, [r1, #0]
}
   260aa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   260ac:	f06f 0015 	mvn.w	r0, #21
   260b0:	e7fb      	b.n	260aa <unpack_uint16+0x24>

000260b2 <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   260b2:	2300      	movs	r3, #0
{
   260b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   260b6:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   260b8:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   260ba:	6804      	ldr	r4, [r0, #0]
   260bc:	42bc      	cmp	r4, r7
   260be:	d215      	bcs.n	260ec <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   260c0:	4625      	mov	r5, r4
   260c2:	f815 2b01 	ldrb.w	r2, [r5], #1
   260c6:	680e      	ldr	r6, [r1, #0]
   260c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   260cc:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   260ce:	4432      	add	r2, r6
   260d0:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   260d2:	6005      	str	r5, [r0, #0]
   260d4:	f994 2000 	ldrsb.w	r2, [r4]
   260d8:	2a00      	cmp	r2, #0
   260da:	db01      	blt.n	260e0 <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   260dc:	2000      	movs	r0, #0
}
   260de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   260e0:	3307      	adds	r3, #7
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   260e2:	2b23      	cmp	r3, #35	; 0x23
   260e4:	d1e9      	bne.n	260ba <packet_length_decode+0x8>
			return -EINVAL;
   260e6:	f06f 0015 	mvn.w	r0, #21
   260ea:	e7f8      	b.n	260de <packet_length_decode+0x2c>
			return -EAGAIN;
   260ec:	f06f 000a 	mvn.w	r0, #10
   260f0:	e7f5      	b.n	260de <packet_length_decode+0x2c>

000260f2 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   260f2:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   260f4:	e9d0 3500 	ldrd	r3, r5, [r0]
   260f8:	429d      	cmp	r5, r3
   260fa:	d007      	beq.n	2610c <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   260fc:	1c5d      	adds	r5, r3, #1
   260fe:	6005      	str	r5, [r0, #0]
   26100:	781b      	ldrb	r3, [r3, #0]
   26102:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   26104:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   26106:	4611      	mov	r1, r2
   26108:	f7ff bfd3 	b.w	260b2 <packet_length_decode>
}
   2610c:	f06f 0015 	mvn.w	r0, #21
   26110:	bc30      	pop	{r4, r5}
   26112:	4770      	bx	lr

00026114 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   26114:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   26116:	e9d1 3400 	ldrd	r3, r4, [r1]
   2611a:	42a3      	cmp	r3, r4
   2611c:	d102      	bne.n	26124 <connect_ack_decode+0x10>
		return -EINVAL;
   2611e:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   26122:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   26124:	1c5d      	adds	r5, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   26126:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   26128:	600d      	str	r5, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2612a:	d0f8      	beq.n	2611e <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   2612c:	461d      	mov	r5, r3
   2612e:	f815 4b02 	ldrb.w	r4, [r5], #2
   26132:	600d      	str	r5, [r1, #0]
   26134:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   26136:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   2613a:	7051      	strb	r1, [r2, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2613c:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   2613e:	bf04      	itt	eq
   26140:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   26144:	7013      	strbeq	r3, [r2, #0]
	return 0;
   26146:	2000      	movs	r0, #0
   26148:	e7eb      	b.n	26122 <connect_ack_decode+0xe>

0002614a <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   2614a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2614e:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   26150:	7d9b      	ldrb	r3, [r3, #22]
{
   26152:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   26154:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   26158:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   2615c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   26160:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   26162:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   26164:	f10d 0106 	add.w	r1, sp, #6
   26168:	4610      	mov	r0, r2
{
   2616a:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   2616c:	f7ff ff8b 	bl	26086 <unpack_uint16>
	if (err_code != 0) {
   26170:	4607      	mov	r7, r0
   26172:	b940      	cbnz	r0, 26186 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   26174:	6833      	ldr	r3, [r6, #0]
   26176:	6872      	ldr	r2, [r6, #4]
   26178:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2617c:	1ad2      	subs	r2, r2, r3
   2617e:	42aa      	cmp	r2, r5
   26180:	da05      	bge.n	2618e <publish_decode+0x44>
		return -EINVAL;
   26182:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   26186:	4638      	mov	r0, r7
   26188:	b002      	add	sp, #8
   2618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   2618e:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   26190:	b15d      	cbz	r5, 261aa <publish_decode+0x60>
		str->utf8 = buf->cur;
   26192:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   26194:	442b      	add	r3, r5
   26196:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   26198:	7a23      	ldrb	r3, [r4, #8]
   2619a:	b943      	cbnz	r3, 261ae <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   2619c:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   2619e:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   261a0:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   261a4:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   261a6:	6125      	str	r5, [r4, #16]
	return 0;
   261a8:	e7ed      	b.n	26186 <publish_decode+0x3c>
		str->utf8 = NULL;
   261aa:	6025      	str	r5, [r4, #0]
   261ac:	e7f4      	b.n	26198 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   261ae:	f104 0114 	add.w	r1, r4, #20
   261b2:	4630      	mov	r0, r6
   261b4:	f7ff ff67 	bl	26086 <unpack_uint16>
		if (err_code != 0) {
   261b8:	b908      	cbnz	r0, 261be <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   261ba:	3504      	adds	r5, #4
   261bc:	e7ef      	b.n	2619e <publish_decode+0x54>
   261be:	4607      	mov	r7, r0
   261c0:	e7e1      	b.n	26186 <publish_decode+0x3c>

000261c2 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   261c2:	f7ff bf60 	b.w	26086 <unpack_uint16>

000261c6 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   261c6:	f7ff bf5e 	b.w	26086 <unpack_uint16>

000261ca <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   261ca:	f7ff bf5c 	b.w	26086 <unpack_uint16>

000261ce <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   261ce:	f7ff bf5a 	b.w	26086 <unpack_uint16>

000261d2 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   261d2:	b538      	push	{r3, r4, r5, lr}
   261d4:	4605      	mov	r5, r0
   261d6:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   261d8:	f7ff ff55 	bl	26086 <unpack_uint16>
	if (err_code != 0) {
   261dc:	b930      	cbnz	r0, 261ec <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   261de:	e9d5 2300 	ldrd	r2, r3, [r5]
   261e2:	1a99      	subs	r1, r3, r2
	str->len = length;
   261e4:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   261e6:	b111      	cbz	r1, 261ee <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   261e8:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   261ea:	602b      	str	r3, [r5, #0]
}
   261ec:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   261ee:	6060      	str	r0, [r4, #4]
   261f0:	e7fc      	b.n	261ec <subscribe_ack_decode+0x1a>

000261f2 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   261f2:	f7ff bf48 	b.w	26086 <unpack_uint16>

000261f6 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   261f6:	e9d1 3200 	ldrd	r3, r2, [r1]
   261fa:	1ad2      	subs	r2, r2, r3
   261fc:	2a01      	cmp	r2, #1
   261fe:	d909      	bls.n	26214 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   26200:	1c5a      	adds	r2, r3, #1
   26202:	600a      	str	r2, [r1, #0]
   26204:	0a02      	lsrs	r2, r0, #8
   26206:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   26208:	680b      	ldr	r3, [r1, #0]
   2620a:	1c5a      	adds	r2, r3, #1
   2620c:	600a      	str	r2, [r1, #0]
   2620e:	7018      	strb	r0, [r3, #0]
	return 0;
   26210:	2000      	movs	r0, #0
   26212:	4770      	bx	lr
		return -ENOMEM;
   26214:	f06f 000b 	mvn.w	r0, #11
}
   26218:	4770      	bx	lr

0002621a <pack_utf8_str>:
{
   2621a:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2621c:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   26220:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   26222:	6840      	ldr	r0, [r0, #4]
   26224:	1a9b      	subs	r3, r3, r2
   26226:	1c82      	adds	r2, r0, #2
   26228:	4293      	cmp	r3, r2
{
   2622a:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   2622c:	d30d      	bcc.n	2624a <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   2622e:	b280      	uxth	r0, r0
   26230:	f7ff ffe1 	bl	261f6 <pack_uint16>
	memcpy(buf->cur, str->utf8, str->size);
   26234:	e9d5 1200 	ldrd	r1, r2, [r5]
   26238:	6820      	ldr	r0, [r4, #0]
   2623a:	f7ff fe14 	bl	25e66 <memcpy>
	return 0;
   2623e:	2000      	movs	r0, #0
	buf->cur += str->size;
   26240:	6823      	ldr	r3, [r4, #0]
   26242:	686a      	ldr	r2, [r5, #4]
   26244:	4413      	add	r3, r2
   26246:	6023      	str	r3, [r4, #0]
}
   26248:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   2624a:	f06f 000b 	mvn.w	r0, #11
   2624e:	e7fb      	b.n	26248 <pack_utf8_str+0x2e>

00026250 <mqtt_encode_fixed_header>:
{
   26250:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   26252:	6815      	ldr	r5, [r2, #0]
   26254:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   26256:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   2625a:	d227      	bcs.n	262ac <mqtt_encode_fixed_header+0x5c>
   2625c:	462c      	mov	r4, r5
   2625e:	2600      	movs	r6, #0
	} while (length > 0);
   26260:	09e4      	lsrs	r4, r4, #7
   26262:	b2f3      	uxtb	r3, r6
   26264:	f106 0601 	add.w	r6, r6, #1
   26268:	d1fa      	bne.n	26260 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   2626a:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   2626c:	b2db      	uxtb	r3, r3
   2626e:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   26270:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   26272:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   26274:	42a6      	cmp	r6, r4
	buf->cur = start - fixed_header_length;
   26276:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   26278:	bf1e      	ittt	ne
   2627a:	3401      	addne	r4, #1
   2627c:	6014      	strne	r4, [r2, #0]
   2627e:	54c8      	strbne	r0, [r1, r3]
   26280:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   26282:	6811      	ldr	r1, [r2, #0]
   26284:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   26288:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   2628a:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   2628c:	bf1f      	itttt	ne
   2628e:	6814      	ldrne	r4, [r2, #0]
   26290:	7821      	ldrbne	r1, [r4, #0]
   26292:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   26296:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   26298:	6811      	ldr	r1, [r2, #0]
   2629a:	3101      	adds	r1, #1
   2629c:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   2629e:	2800      	cmp	r0, #0
   262a0:	d1ef      	bne.n	26282 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   262a2:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   262a4:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   262a6:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   262a8:	6051      	str	r1, [r2, #4]
}
   262aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   262ac:	f06f 0023 	mvn.w	r0, #35	; 0x23
   262b0:	e7fb      	b.n	262aa <mqtt_encode_fixed_header+0x5a>

000262b2 <publish_encode>:
{
   262b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   262b6:	7d86      	ldrb	r6, [r0, #22]
   262b8:	f890 8008 	ldrb.w	r8, [r0, #8]
   262bc:	f006 0901 	and.w	r9, r6, #1
{
   262c0:	4605      	mov	r5, r0
   262c2:	460c      	mov	r4, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   262c4:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   262c8:	f1b8 0f00 	cmp.w	r8, #0
   262cc:	d001      	beq.n	262d2 <publish_encode+0x20>
   262ce:	8a83      	ldrh	r3, [r0, #20]
   262d0:	b34b      	cbz	r3, 26326 <publish_encode+0x74>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   262d2:	6827      	ldr	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   262d4:	4621      	mov	r1, r4
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   262d6:	3705      	adds	r7, #5
   262d8:	6027      	str	r7, [r4, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   262da:	4628      	mov	r0, r5
   262dc:	f7ff ff9d 	bl	2621a <pack_utf8_str>
	if (err_code != 0) {
   262e0:	b998      	cbnz	r0, 2630a <publish_encode+0x58>
	if (param->message.topic.qos) {
   262e2:	7a2b      	ldrb	r3, [r5, #8]
   262e4:	b99b      	cbnz	r3, 2630e <publish_encode+0x5c>
	buf->cur += param->message.payload.len;
   262e6:	692a      	ldr	r2, [r5, #16]
   262e8:	6823      	ldr	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   262ea:	f046 0030 	orr.w	r0, r6, #48	; 0x30
	buf->cur += param->message.payload.len;
   262ee:	4413      	add	r3, r2
   262f0:	6023      	str	r3, [r4, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   262f2:	ea4f 0348 	mov.w	r3, r8, lsl #1
   262f6:	ea40 00c9 	orr.w	r0, r0, r9, lsl #3
   262fa:	f003 0306 	and.w	r3, r3, #6
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   262fe:	4622      	mov	r2, r4
   26300:	4639      	mov	r1, r7
   26302:	4318      	orrs	r0, r3
   26304:	f7ff ffa4 	bl	26250 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   26308:	b140      	cbz	r0, 2631c <publish_encode+0x6a>
}
   2630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   2630e:	4621      	mov	r1, r4
   26310:	8aa8      	ldrh	r0, [r5, #20]
   26312:	f7ff ff70 	bl	261f6 <pack_uint16>
		if (err_code != 0) {
   26316:	2800      	cmp	r0, #0
   26318:	d0e5      	beq.n	262e6 <publish_encode+0x34>
   2631a:	e7f6      	b.n	2630a <publish_encode+0x58>
	buf->end -= param->message.payload.len;
   2631c:	6863      	ldr	r3, [r4, #4]
   2631e:	692a      	ldr	r2, [r5, #16]
   26320:	1a9b      	subs	r3, r3, r2
   26322:	6063      	str	r3, [r4, #4]
	return 0;
   26324:	e7f1      	b.n	2630a <publish_encode+0x58>
		return -EINVAL;
   26326:	f06f 0015 	mvn.w	r0, #21
   2632a:	e7ee      	b.n	2630a <publish_encode+0x58>

0002632c <subscribe_encode>:
{
   2632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26330:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   26332:	88c0      	ldrh	r0, [r0, #6]
{
   26334:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   26336:	b330      	cbz	r0, 26386 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   26338:	680e      	ldr	r6, [r1, #0]
   2633a:	3605      	adds	r6, #5
   2633c:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   2633e:	f7ff ff5a 	bl	261f6 <pack_uint16>
	if (err_code != 0) {
   26342:	4604      	mov	r4, r0
   26344:	bb08      	cbnz	r0, 2638a <subscribe_encode+0x5e>
   26346:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   2634a:	88bb      	ldrh	r3, [r7, #4]
   2634c:	42a3      	cmp	r3, r4
   2634e:	dc06      	bgt.n	2635e <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   26350:	462a      	mov	r2, r5
   26352:	4631      	mov	r1, r6
}
   26354:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   26358:	2082      	movs	r0, #130	; 0x82
   2635a:	f7ff bf79 	b.w	26250 <mqtt_encode_fixed_header>
   2635e:	fb09 f804 	mul.w	r8, r9, r4
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   26362:	6838      	ldr	r0, [r7, #0]
   26364:	4629      	mov	r1, r5
   26366:	4440      	add	r0, r8
   26368:	f7ff ff57 	bl	2621a <pack_utf8_str>
		if (err_code != 0) {
   2636c:	b980      	cbnz	r0, 26390 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   2636e:	683b      	ldr	r3, [r7, #0]
   26370:	4443      	add	r3, r8
   26372:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   26374:	e9d5 3100 	ldrd	r3, r1, [r5]
   26378:	4299      	cmp	r1, r3
   2637a:	d00b      	beq.n	26394 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   2637c:	1c59      	adds	r1, r3, #1
   2637e:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   26380:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   26382:	701a      	strb	r2, [r3, #0]
   26384:	e7e1      	b.n	2634a <subscribe_encode+0x1e>
		return -EINVAL;
   26386:	f06f 0415 	mvn.w	r4, #21
}
   2638a:	4620      	mov	r0, r4
   2638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   26390:	4604      	mov	r4, r0
   26392:	e7fa      	b.n	2638a <subscribe_encode+0x5e>
		return -ENOMEM;
   26394:	f06f 040b 	mvn.w	r4, #11
   26398:	e7f7      	b.n	2638a <subscribe_encode+0x5e>

0002639a <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   2639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2639c:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   2639e:	e9d1 4100 	ldrd	r4, r1, [r1]
   263a2:	1b0c      	subs	r4, r1, r4
   263a4:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   263a6:	2c00      	cmp	r4, #0
{
   263a8:	4606      	mov	r6, r0
	if (remaining <= 0) {
   263aa:	dc01      	bgt.n	263b0 <mqtt_read_message_chunk+0x16>
		return 0;
   263ac:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   263ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   263b0:	190a      	adds	r2, r1, r4
   263b2:	e9d0 3713 	ldrd	r3, r7, [r0, #76]	; 0x4c
   263b6:	443b      	add	r3, r7
   263b8:	429a      	cmp	r2, r3
   263ba:	d811      	bhi.n	263e0 <mqtt_read_message_chunk+0x46>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   263bc:	2300      	movs	r3, #0
   263be:	4622      	mov	r2, r4
   263c0:	f7ec faee 	bl	129a0 <mqtt_transport_read>
	if (len < 0) {
   263c4:	2800      	cmp	r0, #0
   263c6:	dbf2      	blt.n	263ae <mqtt_read_message_chunk+0x14>
	if (len == 0) {
   263c8:	d00d      	beq.n	263e6 <mqtt_read_message_chunk+0x4c>
	client->internal.rx_buf_datalen += len;
   263ca:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   263cc:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   263ce:	4403      	add	r3, r0
   263d0:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   263d2:	686b      	ldr	r3, [r5, #4]
   263d4:	4403      	add	r3, r0
   263d6:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   263d8:	dde8      	ble.n	263ac <mqtt_read_message_chunk+0x12>
		return -EAGAIN;
   263da:	f06f 000a 	mvn.w	r0, #10
   263de:	e7e6      	b.n	263ae <mqtt_read_message_chunk+0x14>
		return -ENOMEM;
   263e0:	f06f 000b 	mvn.w	r0, #11
   263e4:	e7e3      	b.n	263ae <mqtt_read_message_chunk+0x14>
		return -ENOTCONN;
   263e6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   263ea:	e7e0      	b.n	263ae <mqtt_read_message_chunk+0x14>

000263ec <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   263ec:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   263ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   263f0:	69c2      	ldr	r2, [r0, #28]
{
   263f2:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   263f4:	9302      	str	r3, [sp, #8]
{
   263f6:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   263f8:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   263fa:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   263fc:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   263fe:	a902      	add	r1, sp, #8
   26400:	4628      	mov	r0, r5
   26402:	f7ff ffca 	bl	2639a <mqtt_read_message_chunk>
		if (err_code < 0) {
   26406:	1e04      	subs	r4, r0, #0
   26408:	db2b      	blt.n	26462 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   2640a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2640c:	aa01      	add	r2, sp, #4
   2640e:	f10d 0103 	add.w	r1, sp, #3
   26412:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   26414:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   26416:	f7ff fe6c 	bl	260f2 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   2641a:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   2641e:	4604      	mov	r4, r0
		chunk_size = 1U;
   26420:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   26424:	d0eb      	beq.n	263fe <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   26426:	2800      	cmp	r0, #0
   26428:	db1f      	blt.n	2646a <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   2642a:	f89d 6003 	ldrb.w	r6, [sp, #3]
   2642e:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   26432:	2b30      	cmp	r3, #48	; 0x30
   26434:	d11c      	bne.n	26470 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   26436:	2202      	movs	r2, #2
   26438:	a902      	add	r1, sp, #8
   2643a:	4628      	mov	r0, r5
   2643c:	f7ff ffad 	bl	2639a <mqtt_read_message_chunk>
	if (err_code < 0) {
   26440:	1e04      	subs	r4, r0, #0
   26442:	db0e      	blt.n	26462 <mqtt_handle_rx+0x76>
   26444:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   26446:	f016 0f06 	tst.w	r6, #6
   2644a:	881a      	ldrh	r2, [r3, #0]
   2644c:	ba52      	rev16	r2, r2
   2644e:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   26450:	bf0c      	ite	eq
   26452:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   26454:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   26456:	a902      	add	r1, sp, #8
   26458:	4628      	mov	r0, r5
   2645a:	f7ff ff9e 	bl	2639a <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   2645e:	1e04      	subs	r4, r0, #0
   26460:	da08      	bge.n	26474 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   26462:	f114 0f0b 	cmn.w	r4, #11
   26466:	d100      	bne.n	2646a <mqtt_handle_rx+0x7e>
   26468:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   2646a:	4620      	mov	r0, r4
   2646c:	b00c      	add	sp, #48	; 0x30
   2646e:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   26470:	9a01      	ldr	r2, [sp, #4]
   26472:	e7f0      	b.n	26456 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   26474:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   26476:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2647a:	9901      	ldr	r1, [sp, #4]
	switch (type_and_flags & 0xF0) {
   2647c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   26480:	2b50      	cmp	r3, #80	; 0x50
	evt.result = 0;
   26482:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   26484:	d04a      	beq.n	2651c <mqtt_handle_rx+0x130>
   26486:	d81e      	bhi.n	264c6 <mqtt_handle_rx+0xda>
   26488:	2b30      	cmp	r3, #48	; 0x30
   2648a:	d031      	beq.n	264f0 <mqtt_handle_rx+0x104>
   2648c:	2b40      	cmp	r3, #64	; 0x40
   2648e:	d03b      	beq.n	26508 <mqtt_handle_rx+0x11c>
   26490:	2b20      	cmp	r3, #32
   26492:	d11d      	bne.n	264d0 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_CONNACK;
   26494:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   26498:	a902      	add	r1, sp, #8
   2649a:	aa05      	add	r2, sp, #20
   2649c:	4628      	mov	r0, r5
   2649e:	f7ff fe39 	bl	26114 <connect_ack_decode>
		if (err_code == 0) {
   264a2:	4604      	mov	r4, r0
   264a4:	2800      	cmp	r0, #0
   264a6:	d137      	bne.n	26518 <mqtt_handle_rx+0x12c>
			if (evt.param.connack.return_code ==
   264a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
   264ac:	b91a      	cbnz	r2, 264b6 <mqtt_handle_rx+0xca>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   264ae:	69ab      	ldr	r3, [r5, #24]
   264b0:	f043 0304 	orr.w	r3, r3, #4
   264b4:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   264b6:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   264b8:	a904      	add	r1, sp, #16
   264ba:	4628      	mov	r0, r5
   264bc:	f000 f86b 	bl	26596 <event_notify>
	if (err_code < 0) {
   264c0:	2c00      	cmp	r4, #0
   264c2:	da05      	bge.n	264d0 <mqtt_handle_rx+0xe4>
   264c4:	e7d1      	b.n	2646a <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   264c6:	2b70      	cmp	r3, #112	; 0x70
   264c8:	d038      	beq.n	2653c <mqtt_handle_rx+0x150>
   264ca:	d804      	bhi.n	264d6 <mqtt_handle_rx+0xea>
   264cc:	2b60      	cmp	r3, #96	; 0x60
   264ce:	d02d      	beq.n	2652c <mqtt_handle_rx+0x140>
	client->internal.rx_buf_datalen = 0U;
   264d0:	2400      	movs	r4, #0
   264d2:	61ec      	str	r4, [r5, #28]
	return 0;
   264d4:	e7c9      	b.n	2646a <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   264d6:	2b90      	cmp	r3, #144	; 0x90
   264d8:	d038      	beq.n	2654c <mqtt_handle_rx+0x160>
   264da:	2bb0      	cmp	r3, #176	; 0xb0
   264dc:	d1f8      	bne.n	264d0 <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_UNSUBACK;
   264de:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   264e0:	a905      	add	r1, sp, #20
   264e2:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   264e6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   264ea:	f7ff fe82 	bl	261f2 <unsubscribe_ack_decode>
   264ee:	e012      	b.n	26516 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBLISH;
   264f0:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   264f2:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   264f4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   264f8:	ab05      	add	r3, sp, #20
   264fa:	f7ff fe26 	bl	2614a <publish_decode>
		client->internal.remaining_payload =
   264fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   26500:	4604      	mov	r4, r0
		evt.result = err_code;
   26502:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   26504:	622b      	str	r3, [r5, #32]
   26506:	e7d7      	b.n	264b8 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBACK;
   26508:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   2650a:	a905      	add	r1, sp, #20
   2650c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   2650e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   26512:	f7ff fe56 	bl	261c2 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   26516:	4604      	mov	r4, r0
		evt.result = err_code;
   26518:	940b      	str	r4, [sp, #44]	; 0x2c
   2651a:	e7cd      	b.n	264b8 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBREC;
   2651c:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   2651e:	a905      	add	r1, sp, #20
   26520:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   26522:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   26526:	f7ff fe4e 	bl	261c6 <publish_receive_decode>
   2652a:	e7f4      	b.n	26516 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBREL;
   2652c:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   2652e:	a905      	add	r1, sp, #20
   26530:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   26532:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   26536:	f7ff fe48 	bl	261ca <publish_release_decode>
   2653a:	e7ec      	b.n	26516 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBCOMP;
   2653c:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   2653e:	a905      	add	r1, sp, #20
   26540:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   26542:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   26546:	f7ff fe42 	bl	261ce <publish_complete_decode>
   2654a:	e7e4      	b.n	26516 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_SUBACK;
   2654c:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   2654e:	a905      	add	r1, sp, #20
   26550:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   26552:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   26556:	f7ff fe3c 	bl	261d2 <subscribe_ack_decode>
   2655a:	e7dc      	b.n	26516 <mqtt_handle_rx+0x12a>

0002655c <mqtt_client_tcp_disconnect>:
 * @param[in] client Identifies the client on which the procedure is requested.
 *
 * @retval 0 or an error code indicating reason for failure.
 */
int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   2655c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   2655e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   26560:	f7ec f8ea 	bl	12738 <close>
	if (ret < 0) {
   26564:	2800      	cmp	r0, #0
   26566:	da04      	bge.n	26572 <mqtt_client_tcp_disconnect+0x16>
   26568:	f7fb fb62 	bl	21c30 <z_impl_z_errno>
		return -errno;
   2656c:	6800      	ldr	r0, [r0, #0]
   2656e:	4240      	negs	r0, r0
	}

	return 0;
}
   26570:	bd08      	pop	{r3, pc}
	return 0;
   26572:	2000      	movs	r0, #0
   26574:	e7fc      	b.n	26570 <mqtt_client_tcp_disconnect+0x14>

00026576 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   26576:	f7ff bff1 	b.w	2655c <mqtt_client_tcp_disconnect>

0002657a <tx_buf_init>:
{
   2657a:	b538      	push	{r3, r4, r5, lr}
   2657c:	4604      	mov	r4, r0
   2657e:	460d      	mov	r5, r1
	memset(client->tx_buf, 0, client->tx_buf_size);
   26580:	6d82      	ldr	r2, [r0, #88]	; 0x58
   26582:	2100      	movs	r1, #0
   26584:	6d40      	ldr	r0, [r0, #84]	; 0x54
   26586:	f7ff fc9b 	bl	25ec0 <memset>
	buf->cur = client->tx_buf;
   2658a:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   2658c:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   2658e:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   26590:	4413      	add	r3, r2
   26592:	606b      	str	r3, [r5, #4]
}
   26594:	bd38      	pop	{r3, r4, r5, pc}

00026596 <event_notify>:
{
   26596:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   26598:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   2659a:	4604      	mov	r4, r0
   2659c:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   2659e:	b153      	cbz	r3, 265b6 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   265a0:	f7ec fa0a 	bl	129b8 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   265a4:	4620      	mov	r0, r4
   265a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   265a8:	4629      	mov	r1, r5
   265aa:	4798      	blx	r3
		mqtt_mutex_lock(client);
   265ac:	4620      	mov	r0, r4
}
   265ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   265b2:	f7ec ba2d 	b.w	12a10 <mqtt_mutex_lock>
}
   265b6:	bd38      	pop	{r3, r4, r5, pc}

000265b8 <client_disconnect>:
{
   265b8:	b530      	push	{r4, r5, lr}
   265ba:	4604      	mov	r4, r0
   265bc:	b089      	sub	sp, #36	; 0x24
   265be:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   265c0:	f7ff ffd9 	bl	26576 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   265c4:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   265c6:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   265c8:	f013 030c 	ands.w	r3, r3, #12
		evt.type = MQTT_EVT_DISCONNECT;
   265cc:	bf12      	itee	ne
   265ce:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   265d0:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   265d4:	f06f 033c 	mvneq.w	r3, #60	; 0x3c
	event_notify(client, &evt);
   265d8:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   265da:	bf16      	itet	ne
   265dc:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   265e0:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   265e2:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   265e4:	f7ff ffd7 	bl	26596 <event_notify>
	MQTT_STATE_INIT(client);
   265e8:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   265ea:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   265ee:	e9c4 3307 	strd	r3, r3, [r4, #28]
}
   265f2:	b009      	add	sp, #36	; 0x24
   265f4:	bd30      	pop	{r4, r5, pc}

000265f6 <client_write>:
{
   265f6:	b538      	push	{r3, r4, r5, lr}
   265f8:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   265fa:	f7ec f9c5 	bl	12988 <mqtt_transport_write>
	if (err_code < 0) {
   265fe:	1e04      	subs	r4, r0, #0
   26600:	da05      	bge.n	2660e <client_write+0x18>
		client_disconnect(client, err_code);
   26602:	4621      	mov	r1, r4
   26604:	4628      	mov	r0, r5
   26606:	f7ff ffd7 	bl	265b8 <client_disconnect>
}
   2660a:	4620      	mov	r0, r4
   2660c:	bd38      	pop	{r3, r4, r5, pc}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   2660e:	f001 f898 	bl	27742 <z_impl_k_uptime_get_32>
	return 0;
   26612:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   26614:	6168      	str	r0, [r5, #20]
	return 0;
   26616:	e7f8      	b.n	2660a <client_write+0x14>

00026618 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   26618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2661c:	460f      	mov	r7, r1
   2661e:	4690      	mov	r8, r2
   26620:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   26622:	4605      	mov	r5, r0
   26624:	b320      	cbz	r0, 26670 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   26626:	f7ec f9f3 	bl	12a10 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   2662a:	6a2c      	ldr	r4, [r5, #32]
   2662c:	b1b4      	cbz	r4, 2665c <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   2662e:	4544      	cmp	r4, r8
   26630:	4622      	mov	r2, r4
   26632:	4633      	mov	r3, r6
   26634:	bf28      	it	cs
   26636:	4642      	movcs	r2, r8
   26638:	4639      	mov	r1, r7
   2663a:	4628      	mov	r0, r5
   2663c:	f7ec f9b0 	bl	129a0 <mqtt_transport_read>
   26640:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   26642:	b916      	cbnz	r6, 2664a <read_publish_payload+0x32>
   26644:	f110 0f0b 	cmn.w	r0, #11
   26648:	d008      	beq.n	2665c <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   2664a:	2c00      	cmp	r4, #0
   2664c:	dc0c      	bgt.n	26668 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   2664e:	bf08      	it	eq
   26650:	f06f 0438 	mvneq.w	r4, #56	; 0x38
		}

		client_disconnect(client, ret);
   26654:	4628      	mov	r0, r5
   26656:	4621      	mov	r1, r4
   26658:	f7ff ffae 	bl	265b8 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   2665c:	4628      	mov	r0, r5
   2665e:	f7ec f9ab 	bl	129b8 <mqtt_mutex_unlock>

	return ret;
}
   26662:	4620      	mov	r0, r4
   26664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   26668:	6a2b      	ldr	r3, [r5, #32]
   2666a:	1b1b      	subs	r3, r3, r4
   2666c:	622b      	str	r3, [r5, #32]
   2666e:	e7f5      	b.n	2665c <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   26670:	f06f 0415 	mvn.w	r4, #21
   26674:	e7f5      	b.n	26662 <read_publish_payload+0x4a>

00026676 <mqtt_client_init>:
{
   26676:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   26678:	4604      	mov	r4, r0
   2667a:	b188      	cbz	r0, 266a0 <mqtt_client_init+0x2a>
	memset(client, 0, sizeof(*client));
   2667c:	2260      	movs	r2, #96	; 0x60
   2667e:	2100      	movs	r1, #0
   26680:	f7ff fc1e 	bl	25ec0 <memset>
	MQTT_STATE_INIT(client);
   26684:	2300      	movs	r3, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   26686:	4620      	mov	r0, r4
   26688:	61a3      	str	r3, [r4, #24]
   2668a:	f000 ffbc 	bl	27606 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   2668e:	2304      	movs	r3, #4
   26690:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	client->clean_session = 1U;
   26694:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   26698:	f043 0302 	orr.w	r3, r3, #2
   2669c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
   266a0:	bd10      	pop	{r4, pc}

000266a2 <mqtt_connect>:
{
   266a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   266a4:	4604      	mov	r4, r0
   266a6:	2800      	cmp	r0, #0
   266a8:	d03a      	beq.n	26720 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   266aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   266ac:	2b00      	cmp	r3, #0
   266ae:	d037      	beq.n	26720 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   266b0:	f7ec f9ae 	bl	12a10 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   266b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   266b6:	b383      	cbz	r3, 2671a <mqtt_connect+0x78>
   266b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   266ba:	b373      	cbz	r3, 2671a <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   266bc:	4620      	mov	r0, r4
   266be:	f7ec f95b 	bl	12978 <mqtt_transport_connect>
	if (err_code < 0) {
   266c2:	1e05      	subs	r5, r0, #0
   266c4:	db23      	blt.n	2670e <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   266c6:	4669      	mov	r1, sp
   266c8:	4620      	mov	r0, r4
   266ca:	f7ff ff56 	bl	2657a <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   266ce:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   266d0:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   266d2:	f043 0302 	orr.w	r3, r3, #2
   266d6:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   266d8:	4620      	mov	r0, r4
   266da:	f7eb ff81 	bl	125e0 <connect_request_encode>
	if (err_code < 0) {
   266de:	1e05      	subs	r5, r0, #0
   266e0:	db11      	blt.n	26706 <mqtt_connect+0x64>
	err_code = mqtt_transport_write(client, packet.cur,
   266e2:	e9dd 1200 	ldrd	r1, r2, [sp]
   266e6:	4620      	mov	r0, r4
   266e8:	1a52      	subs	r2, r2, r1
   266ea:	f7ec f94d 	bl	12988 <mqtt_transport_write>
	if (err_code < 0) {
   266ee:	1e05      	subs	r5, r0, #0
   266f0:	db09      	blt.n	26706 <mqtt_connect+0x64>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   266f2:	f001 f826 	bl	27742 <z_impl_k_uptime_get_32>
	return 0;
   266f6:	2500      	movs	r5, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   266f8:	6160      	str	r0, [r4, #20]
	mqtt_mutex_unlock(client);
   266fa:	4620      	mov	r0, r4
   266fc:	f7ec f95c 	bl	129b8 <mqtt_mutex_unlock>
}
   26700:	4628      	mov	r0, r5
   26702:	b003      	add	sp, #12
   26704:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   26706:	4629      	mov	r1, r5
   26708:	4620      	mov	r0, r4
   2670a:	f7ff ff55 	bl	265b8 <client_disconnect>
	MQTT_STATE_INIT(client);
   2670e:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   26710:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   26714:	e9c4 3307 	strd	r3, r3, [r4, #28]
   26718:	e7ef      	b.n	266fa <mqtt_connect+0x58>
		err_code = -ENOMEM;
   2671a:	f06f 050b 	mvn.w	r5, #11
   2671e:	e7f6      	b.n	2670e <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   26720:	f06f 0515 	mvn.w	r5, #21
   26724:	e7ec      	b.n	26700 <mqtt_connect+0x5e>

00026726 <mqtt_publish>:
{
   26726:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26728:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   2672a:	4605      	mov	r5, r0
   2672c:	b330      	cbz	r0, 2677c <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   2672e:	b329      	cbz	r1, 2677c <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   26730:	f7ec f96e 	bl	12a10 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   26734:	4669      	mov	r1, sp
   26736:	4628      	mov	r0, r5
   26738:	f7ff ff1f 	bl	2657a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   2673c:	69ab      	ldr	r3, [r5, #24]
   2673e:	075b      	lsls	r3, r3, #29
   26740:	d519      	bpl.n	26776 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   26742:	4669      	mov	r1, sp
   26744:	4630      	mov	r0, r6
   26746:	f7ff fdb4 	bl	262b2 <publish_encode>
	if (err_code < 0) {
   2674a:	1e04      	subs	r4, r0, #0
   2674c:	db0d      	blt.n	2676a <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   2674e:	e9dd 1200 	ldrd	r1, r2, [sp]
   26752:	4628      	mov	r0, r5
   26754:	1a52      	subs	r2, r2, r1
   26756:	f7ff ff4e 	bl	265f6 <client_write>
	if (err_code < 0) {
   2675a:	1e04      	subs	r4, r0, #0
   2675c:	db05      	blt.n	2676a <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   2675e:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   26762:	4628      	mov	r0, r5
   26764:	f7ff ff47 	bl	265f6 <client_write>
   26768:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   2676a:	4628      	mov	r0, r5
   2676c:	f7ec f924 	bl	129b8 <mqtt_mutex_unlock>
}
   26770:	4620      	mov	r0, r4
   26772:	b002      	add	sp, #8
   26774:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   26776:	f06f 0438 	mvn.w	r4, #56	; 0x38
   2677a:	e7f6      	b.n	2676a <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   2677c:	f06f 0415 	mvn.w	r4, #21
   26780:	e7f6      	b.n	26770 <mqtt_publish+0x4a>

00026782 <mqtt_disconnect>:
{
   26782:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   26784:	4604      	mov	r4, r0
   26786:	b300      	cbz	r0, 267ca <mqtt_disconnect+0x48>
	mqtt_mutex_lock(client);
   26788:	f7ec f942 	bl	12a10 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   2678c:	4669      	mov	r1, sp
   2678e:	4620      	mov	r0, r4
   26790:	f7ff fef3 	bl	2657a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   26794:	69a3      	ldr	r3, [r4, #24]
   26796:	075b      	lsls	r3, r3, #29
   26798:	d514      	bpl.n	267c4 <mqtt_disconnect+0x42>
	err_code = disconnect_encode(&packet);
   2679a:	4668      	mov	r0, sp
   2679c:	f7eb ffa0 	bl	126e0 <disconnect_encode>
	if (err_code < 0) {
   267a0:	1e05      	subs	r5, r0, #0
   267a2:	db09      	blt.n	267b8 <mqtt_disconnect+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   267a4:	e9dd 1200 	ldrd	r1, r2, [sp]
   267a8:	4620      	mov	r0, r4
   267aa:	1a52      	subs	r2, r2, r1
   267ac:	f7ff ff23 	bl	265f6 <client_write>
	if (err_code < 0) {
   267b0:	1e05      	subs	r5, r0, #0
   267b2:	db01      	blt.n	267b8 <mqtt_disconnect+0x36>
	MQTT_SET_STATE_EXCLUSIVE(client, MQTT_STATE_DISCONNECTING);
   267b4:	2308      	movs	r3, #8
   267b6:	61a3      	str	r3, [r4, #24]
	mqtt_mutex_unlock(client);
   267b8:	4620      	mov	r0, r4
   267ba:	f7ec f8fd 	bl	129b8 <mqtt_mutex_unlock>
}
   267be:	4628      	mov	r0, r5
   267c0:	b003      	add	sp, #12
   267c2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   267c4:	f06f 0538 	mvn.w	r5, #56	; 0x38
   267c8:	e7f6      	b.n	267b8 <mqtt_disconnect+0x36>
	NULL_PARAM_CHECK(client);
   267ca:	f06f 0515 	mvn.w	r5, #21
   267ce:	e7f6      	b.n	267be <mqtt_disconnect+0x3c>

000267d0 <mqtt_subscribe>:
{
   267d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   267d2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   267d4:	4605      	mov	r5, r0
   267d6:	b1f8      	cbz	r0, 26818 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   267d8:	b1f1      	cbz	r1, 26818 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   267da:	f7ec f919 	bl	12a10 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   267de:	4669      	mov	r1, sp
   267e0:	4628      	mov	r0, r5
   267e2:	f7ff feca 	bl	2657a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   267e6:	69ab      	ldr	r3, [r5, #24]
   267e8:	075b      	lsls	r3, r3, #29
   267ea:	d512      	bpl.n	26812 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   267ec:	4620      	mov	r0, r4
   267ee:	4669      	mov	r1, sp
   267f0:	f7ff fd9c 	bl	2632c <subscribe_encode>
	if (err_code < 0) {
   267f4:	1e04      	subs	r4, r0, #0
   267f6:	db06      	blt.n	26806 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   267f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   267fc:	4628      	mov	r0, r5
   267fe:	1a52      	subs	r2, r2, r1
   26800:	f7ff fef9 	bl	265f6 <client_write>
   26804:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   26806:	4628      	mov	r0, r5
   26808:	f7ec f8d6 	bl	129b8 <mqtt_mutex_unlock>
}
   2680c:	4620      	mov	r0, r4
   2680e:	b003      	add	sp, #12
   26810:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   26812:	f06f 0438 	mvn.w	r4, #56	; 0x38
   26816:	e7f6      	b.n	26806 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   26818:	f06f 0415 	mvn.w	r4, #21
   2681c:	e7f6      	b.n	2680c <mqtt_subscribe+0x3c>

0002681e <mqtt_ping>:
{
   2681e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   26820:	4605      	mov	r5, r0
   26822:	b1e8      	cbz	r0, 26860 <mqtt_ping+0x42>
	mqtt_mutex_lock(client);
   26824:	f7ec f8f4 	bl	12a10 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   26828:	4669      	mov	r1, sp
   2682a:	4628      	mov	r0, r5
   2682c:	f7ff fea5 	bl	2657a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   26830:	69ab      	ldr	r3, [r5, #24]
   26832:	075b      	lsls	r3, r3, #29
   26834:	d511      	bpl.n	2685a <mqtt_ping+0x3c>
	err_code = ping_request_encode(&packet);
   26836:	4668      	mov	r0, sp
   26838:	f7eb ff68 	bl	1270c <ping_request_encode>
	if (err_code < 0) {
   2683c:	1e04      	subs	r4, r0, #0
   2683e:	db06      	blt.n	2684e <mqtt_ping+0x30>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   26840:	e9dd 1200 	ldrd	r1, r2, [sp]
   26844:	4628      	mov	r0, r5
   26846:	1a52      	subs	r2, r2, r1
   26848:	f7ff fed5 	bl	265f6 <client_write>
   2684c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   2684e:	4628      	mov	r0, r5
   26850:	f7ec f8b2 	bl	129b8 <mqtt_mutex_unlock>
}
   26854:	4620      	mov	r0, r4
   26856:	b003      	add	sp, #12
   26858:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   2685a:	f06f 0438 	mvn.w	r4, #56	; 0x38
   2685e:	e7f6      	b.n	2684e <mqtt_ping+0x30>
	NULL_PARAM_CHECK(client);
   26860:	f06f 0415 	mvn.w	r4, #21
   26864:	e7f6      	b.n	26854 <mqtt_ping+0x36>

00026866 <mqtt_input>:
{
   26866:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   26868:	4605      	mov	r5, r0
   2686a:	b310      	cbz	r0, 268b2 <mqtt_input+0x4c>
	mqtt_mutex_lock(client);
   2686c:	f7ec f8d0 	bl	12a10 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   26870:	69ab      	ldr	r3, [r5, #24]
   26872:	071a      	lsls	r2, r3, #28
   26874:	d509      	bpl.n	2688a <mqtt_input+0x24>
		client_disconnect(client, 0);
   26876:	2100      	movs	r1, #0
   26878:	4628      	mov	r0, r5
   2687a:	f7ff fe9d 	bl	265b8 <client_disconnect>
	int err_code = 0;
   2687e:	2400      	movs	r4, #0
	mqtt_mutex_unlock(client);
   26880:	4628      	mov	r0, r5
   26882:	f7ec f899 	bl	129b8 <mqtt_mutex_unlock>
}
   26886:	4620      	mov	r0, r4
   26888:	bd38      	pop	{r3, r4, r5, pc}
	} else if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   2688a:	079b      	lsls	r3, r3, #30
   2688c:	d50b      	bpl.n	268a6 <mqtt_input+0x40>
	if (client->internal.remaining_payload > 0) {
   2688e:	6a2b      	ldr	r3, [r5, #32]
   26890:	b963      	cbnz	r3, 268ac <mqtt_input+0x46>
	err_code = mqtt_handle_rx(client);
   26892:	4628      	mov	r0, r5
   26894:	f7ff fdaa 	bl	263ec <mqtt_handle_rx>
	if (err_code < 0) {
   26898:	1e04      	subs	r4, r0, #0
   2689a:	daf1      	bge.n	26880 <mqtt_input+0x1a>
		client_disconnect(client, err_code);
   2689c:	4621      	mov	r1, r4
   2689e:	4628      	mov	r0, r5
   268a0:	f7ff fe8a 	bl	265b8 <client_disconnect>
   268a4:	e7ec      	b.n	26880 <mqtt_input+0x1a>
		err_code = -EACCES;
   268a6:	f06f 040c 	mvn.w	r4, #12
   268aa:	e7e9      	b.n	26880 <mqtt_input+0x1a>
		return -EBUSY;
   268ac:	f06f 040f 	mvn.w	r4, #15
   268b0:	e7e6      	b.n	26880 <mqtt_input+0x1a>
	NULL_PARAM_CHECK(client);
   268b2:	f06f 0415 	mvn.w	r4, #21
   268b6:	e7e6      	b.n	26886 <mqtt_input+0x20>

000268b8 <mqtt_read_publish_payload>:

int mqtt_read_publish_payload(struct mqtt_client *client, void *buffer,
			      size_t length)
{
	return read_publish_payload(client, buffer, length, false);
   268b8:	2300      	movs	r3, #0
   268ba:	f7ff bead 	b.w	26618 <read_publish_payload>

000268be <gpio_nrfx_write>:
{
   268be:	b510      	push	{r4, lr}
	return port->config->config_info;
   268c0:	6804      	ldr	r4, [r0, #0]
   268c2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268c4:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   268c6:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268c8:	6824      	ldr	r4, [r4, #0]
   268ca:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   268cc:	d103      	bne.n	268d6 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   268ce:	4058      	eors	r0, r3
    p_reg->OUT = value;
   268d0:	6060      	str	r0, [r4, #4]
}
   268d2:	2000      	movs	r0, #0
   268d4:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   268d6:	3300      	adds	r3, #0
   268d8:	f04f 0101 	mov.w	r1, #1
   268dc:	bf18      	it	ne
   268de:	2301      	movne	r3, #1
   268e0:	40d0      	lsrs	r0, r2
   268e2:	f000 0001 	and.w	r0, r0, #1
   268e6:	4091      	lsls	r1, r2
   268e8:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   268ea:	bf14      	ite	ne
   268ec:	60a1      	strne	r1, [r4, #8]
    p_reg->OUTCLR = clr_mask;
   268ee:	60e1      	streq	r1, [r4, #12]
   268f0:	e7ef      	b.n	268d2 <gpio_nrfx_write+0x14>

000268f2 <gpio_nrfx_read>:
{
   268f2:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   268f4:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   268f6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268f8:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   268fa:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268fc:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   268fe:	2901      	cmp	r1, #1
    return p_reg->DIR;
   26900:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   26902:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   26904:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   26906:	ea80 0004 	eor.w	r0, r0, r4
   2690a:	ea84 0405 	eor.w	r4, r4, r5
   2690e:	ea04 0406 	and.w	r4, r4, r6
   26912:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   26916:	bf1c      	itt	ne
   26918:	40d0      	lsrne	r0, r2
   2691a:	f000 0001 	andne.w	r0, r0, #1
   2691e:	6018      	str	r0, [r3, #0]
}
   26920:	2000      	movs	r0, #0
   26922:	bd70      	pop	{r4, r5, r6, pc}

00026924 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   26924:	2901      	cmp	r1, #1
{
   26926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2692a:	bf18      	it	ne
   2692c:	b2d4      	uxtbne	r4, r2
{
   2692e:	4606      	mov	r6, r0
		to_pin   = pin;
   26930:	bf12      	itee	ne
   26932:	4625      	movne	r5, r4
		to_pin   = 31U;
   26934:	251f      	moveq	r5, #31
		from_pin = 0U;
   26936:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   26938:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2693c:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2693e:	42ac      	cmp	r4, r5
   26940:	d902      	bls.n	26948 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   26942:	2000      	movs	r0, #0
}
   26944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   26948:	68fb      	ldr	r3, [r7, #12]
   2694a:	fa08 f204 	lsl.w	r2, r8, r4
   2694e:	ea23 0302 	bic.w	r3, r3, r2
   26952:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   26954:	4621      	mov	r1, r4
   26956:	4630      	mov	r0, r6
   26958:	f7ec f926 	bl	12ba8 <gpiote_pin_int_cfg>
		if (res != 0) {
   2695c:	2800      	cmp	r0, #0
   2695e:	d1f1      	bne.n	26944 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   26960:	3401      	adds	r4, #1
   26962:	b2e4      	uxtb	r4, r4
   26964:	e7eb      	b.n	2693e <gpio_nrfx_pin_disable_callback+0x1a>

00026966 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   26966:	2901      	cmp	r1, #1
{
   26968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   2696c:	bf18      	it	ne
   2696e:	b2d4      	uxtbne	r4, r2
{
   26970:	4606      	mov	r6, r0
		to_pin   = pin;
   26972:	bf12      	itee	ne
   26974:	4625      	movne	r5, r4
		to_pin   = 31U;
   26976:	251f      	moveq	r5, #31
		from_pin = 0U;
   26978:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   2697a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   2697e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   26980:	42ac      	cmp	r4, r5
   26982:	d902      	bls.n	2698a <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   26984:	2000      	movs	r0, #0
}
   26986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2698a:	68fb      	ldr	r3, [r7, #12]
   2698c:	fa08 f204 	lsl.w	r2, r8, r4
   26990:	4313      	orrs	r3, r2
   26992:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   26994:	4621      	mov	r1, r4
   26996:	4630      	mov	r0, r6
   26998:	f7ec f906 	bl	12ba8 <gpiote_pin_int_cfg>
		if (res != 0) {
   2699c:	2800      	cmp	r0, #0
   2699e:	d1f2      	bne.n	26986 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   269a0:	3401      	adds	r4, #1
   269a2:	b2e4      	uxtb	r4, r4
   269a4:	e7ec      	b.n	26980 <gpio_nrfx_pin_enable_callback+0x1a>

000269a6 <i2c_nrfx_twim_configure>:
	return dev->config->config_info;
   269a6:	6803      	ldr	r3, [r0, #0]
	if (I2C_ADDR_10_BITS & dev_config) {
   269a8:	f011 0001 	ands.w	r0, r1, #1
	return dev->config->config_info;
   269ac:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
   269ae:	d105      	bne.n	269bc <i2c_nrfx_twim_configure+0x16>
	switch (I2C_SPEED_GET(dev_config)) {
   269b0:	f3c1 0142 	ubfx	r1, r1, #1, #3
   269b4:	2901      	cmp	r1, #1
   269b6:	d004      	beq.n	269c2 <i2c_nrfx_twim_configure+0x1c>
   269b8:	2902      	cmp	r1, #2
   269ba:	d008      	beq.n	269ce <i2c_nrfx_twim_configure+0x28>
		return -EINVAL;
   269bc:	f06f 0015 	mvn.w	r0, #21
}
   269c0:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   269c2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   269c6:	681b      	ldr	r3, [r3, #0]
   269c8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   269cc:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   269ce:	681b      	ldr	r3, [r3, #0]
   269d0:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   269d4:	e7f8      	b.n	269c8 <i2c_nrfx_twim_configure+0x22>

000269d6 <gpio_pin_write>:
	return api->write(port, access_op, pin, value);
   269d6:	6843      	ldr	r3, [r0, #4]
{
   269d8:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   269da:	685c      	ldr	r4, [r3, #4]
   269dc:	4613      	mov	r3, r2
   269de:	46a4      	mov	ip, r4
   269e0:	460a      	mov	r2, r1
}
   269e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
   269e6:	2100      	movs	r1, #0
   269e8:	4760      	bx	ip

000269ea <_spi_context_cs_control.isra.7>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   269ea:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   269ec:	6804      	ldr	r4, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   269ee:	4605      	mov	r5, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   269f0:	b324      	cbz	r4, 26a3c <_spi_context_cs_control.isra.7+0x52>
   269f2:	68a3      	ldr	r3, [r4, #8]
   269f4:	b313      	cbz	r3, 26a3c <_spi_context_cs_control.isra.7+0x52>
   269f6:	6818      	ldr	r0, [r3, #0]
   269f8:	b300      	cbz	r0, 26a3c <_spi_context_cs_control.isra.7+0x52>
		if (on) {
   269fa:	b161      	cbz	r1, 26a16 <_spi_context_cs_control.isra.7+0x2c>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   269fc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   26a00:	6859      	ldr	r1, [r3, #4]
   26a02:	0fd2      	lsrs	r2, r2, #31
   26a04:	f7ff ffe7 	bl	269d6 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
   26a08:	682b      	ldr	r3, [r5, #0]
   26a0a:	689b      	ldr	r3, [r3, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
   26a0c:	6898      	ldr	r0, [r3, #8]
}
   26a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26a12:	f000 be68 	b.w	276e6 <z_impl_k_busy_wait>
			if (!force_off &&
   26a16:	b912      	cbnz	r2, 26a1e <_spi_context_cs_control.isra.7+0x34>
   26a18:	88a2      	ldrh	r2, [r4, #4]
   26a1a:	0492      	lsls	r2, r2, #18
   26a1c:	d40e      	bmi.n	26a3c <_spi_context_cs_control.isra.7+0x52>
   26a1e:	6898      	ldr	r0, [r3, #8]
   26a20:	f000 fe61 	bl	276e6 <z_impl_k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
   26a24:	682a      	ldr	r2, [r5, #0]
   26a26:	6893      	ldr	r3, [r2, #8]
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   26a28:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
			gpio_pin_write(ctx->config->cs->gpio_dev,
   26a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
   26a30:	43d2      	mvns	r2, r2
}
   26a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_write(ctx->config->cs->gpio_dev,
   26a36:	0fd2      	lsrs	r2, r2, #31
   26a38:	f7ff bfcd 	b.w	269d6 <gpio_pin_write>
}
   26a3c:	bd38      	pop	{r3, r4, r5, pc}

00026a3e <spi_context_unlock_unconditionally>:
{
   26a3e:	b510      	push	{r4, lr}
   26a40:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26a42:	2201      	movs	r2, #1
   26a44:	2100      	movs	r1, #0
   26a46:	f7ff ffd0 	bl	269ea <_spi_context_cs_control.isra.7>
	if (!k_sem_count_get(&ctx->lock)) {
   26a4a:	68e3      	ldr	r3, [r4, #12]
   26a4c:	b923      	cbnz	r3, 26a58 <spi_context_unlock_unconditionally+0x1a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   26a4e:	1d20      	adds	r0, r4, #4
}
   26a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26a54:	f7fd b828 	b.w	23aa8 <z_impl_k_sem_give>
   26a58:	bd10      	pop	{r4, pc}

00026a5a <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   26a5a:	6880      	ldr	r0, [r0, #8]
{
   26a5c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26a5e:	6803      	ldr	r3, [r0, #0]
   26a60:	428b      	cmp	r3, r1
   26a62:	d106      	bne.n	26a72 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26a64:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
   26a68:	b934      	cbnz	r4, 26a78 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26a6a:	f7ff ffe8 	bl	26a3e <spi_context_unlock_unconditionally>
	return 0;
   26a6e:	4620      	mov	r0, r4
}
   26a70:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26a72:	f06f 0015 	mvn.w	r0, #21
   26a76:	e7fb      	b.n	26a70 <spi_nrfx_release+0x16>
		return -EBUSY;
   26a78:	f06f 000f 	mvn.w	r0, #15
   26a7c:	e7f8      	b.n	26a70 <spi_nrfx_release+0x16>

00026a7e <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   26a7e:	7803      	ldrb	r3, [r0, #0]
{
   26a80:	b410      	push	{r4}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   26a82:	2b00      	cmp	r3, #0
   26a84:	d138      	bne.n	26af8 <event_handler+0x7a>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   26a86:	688b      	ldr	r3, [r1, #8]
	if (!ctx->tx_len) {
   26a88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   26a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   26a8c:	b180      	cbz	r0, 26ab0 <event_handler+0x32>
	if (len > ctx->tx_len) {
   26a8e:	4282      	cmp	r2, r0
   26a90:	d80e      	bhi.n	26ab0 <event_handler+0x32>
	ctx->tx_len -= len;
   26a92:	1a80      	subs	r0, r0, r2
   26a94:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->tx_len) {
   26a96:	bb18      	cbnz	r0, 26ae0 <event_handler+0x62>
		ctx->tx_count--;
   26a98:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   26a9a:	3801      	subs	r0, #1
   26a9c:	63d8      	str	r0, [r3, #60]	; 0x3c
		if (ctx->tx_count) {
   26a9e:	b318      	cbz	r0, 26ae8 <event_handler+0x6a>
			ctx->current_tx++;
   26aa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
   26aa2:	f100 0408 	add.w	r4, r0, #8
   26aa6:	639c      	str	r4, [r3, #56]	; 0x38
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   26aa8:	6884      	ldr	r4, [r0, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   26aaa:	68c0      	ldr	r0, [r0, #12]
			ctx->tx_buf = (const u8_t *)ctx->current_tx->buf;
   26aac:	649c      	str	r4, [r3, #72]	; 0x48
			ctx->tx_len = ctx->current_tx->len / dfs;
   26aae:	64d8      	str	r0, [r3, #76]	; 0x4c
	if (!ctx->rx_len) {
   26ab0:	6d58      	ldr	r0, [r3, #84]	; 0x54
   26ab2:	b180      	cbz	r0, 26ad6 <event_handler+0x58>
	if (len > ctx->rx_len) {
   26ab4:	4282      	cmp	r2, r0
   26ab6:	d80e      	bhi.n	26ad6 <event_handler+0x58>
	ctx->rx_len -= len;
   26ab8:	1a80      	subs	r0, r0, r2
   26aba:	6558      	str	r0, [r3, #84]	; 0x54
	if (!ctx->rx_len) {
   26abc:	b9b0      	cbnz	r0, 26aec <event_handler+0x6e>
		ctx->rx_count--;
   26abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   26ac0:	3a01      	subs	r2, #1
   26ac2:	645a      	str	r2, [r3, #68]	; 0x44
		if (ctx->rx_count) {
   26ac4:	b1b2      	cbz	r2, 26af4 <event_handler+0x76>
			ctx->current_rx++;
   26ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   26ac8:	f102 0008 	add.w	r0, r2, #8
   26acc:	6418      	str	r0, [r3, #64]	; 0x40
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   26ace:	6890      	ldr	r0, [r2, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   26ad0:	68d2      	ldr	r2, [r2, #12]
			ctx->rx_buf = (u8_t *)ctx->current_rx->buf;
   26ad2:	6518      	str	r0, [r3, #80]	; 0x50
			ctx->rx_len = ctx->current_rx->len / dfs;
   26ad4:	655a      	str	r2, [r3, #84]	; 0x54
		transfer_next_chunk(dev);
   26ad6:	4608      	mov	r0, r1
}
   26ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
		transfer_next_chunk(dev);
   26adc:	f7ec bb3c 	b.w	13158 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   26ae0:	6c98      	ldr	r0, [r3, #72]	; 0x48
   26ae2:	2800      	cmp	r0, #0
   26ae4:	d0e4      	beq.n	26ab0 <event_handler+0x32>
		ctx->tx_buf += dfs * len;
   26ae6:	4410      	add	r0, r2
   26ae8:	6498      	str	r0, [r3, #72]	; 0x48
   26aea:	e7e1      	b.n	26ab0 <event_handler+0x32>
	} else if (ctx->rx_buf) {
   26aec:	6d18      	ldr	r0, [r3, #80]	; 0x50
   26aee:	2800      	cmp	r0, #0
   26af0:	d0f1      	beq.n	26ad6 <event_handler+0x58>
		ctx->rx_buf += dfs * len;
   26af2:	4402      	add	r2, r0
   26af4:	651a      	str	r2, [r3, #80]	; 0x50
   26af6:	e7ee      	b.n	26ad6 <event_handler+0x58>
}
   26af8:	f85d 4b04 	ldr.w	r4, [sp], #4
   26afc:	4770      	bx	lr

00026afe <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   26afe:	6883      	ldr	r3, [r0, #8]
   26b00:	689b      	ldr	r3, [r3, #8]
   26b02:	7b9a      	ldrb	r2, [r3, #14]
   26b04:	b172      	cbz	r2, 26b24 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   26b06:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   26b08:	6892      	ldr	r2, [r2, #8]
   26b0a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b0c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   26b10:	b141      	cbz	r1, 26b24 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   26b12:	f44f 7180 	mov.w	r1, #256	; 0x100
   26b16:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b1a:	2101      	movs	r1, #1
   26b1c:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   26b1e:	2200      	movs	r2, #0
   26b20:	739a      	strb	r2, [r3, #14]
		return;
   26b22:	4770      	bx	lr
	if (data->int_driven->cb) {
   26b24:	681a      	ldr	r2, [r3, #0]
   26b26:	b10a      	cbz	r2, 26b2c <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   26b28:	6858      	ldr	r0, [r3, #4]
   26b2a:	4710      	bx	r2
}
   26b2c:	4770      	bx	lr

00026b2e <uarte_nrfx_config_get>:
{
   26b2e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   26b30:	6882      	ldr	r2, [r0, #8]
   26b32:	e892 0003 	ldmia.w	r2, {r0, r1}
   26b36:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26b3a:	2000      	movs	r0, #0
   26b3c:	4770      	bx	lr

00026b3e <uarte_nrfx_err_check>:
	return dev->config->config_info;
   26b3e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26b40:	689b      	ldr	r3, [r3, #8]
   26b42:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b44:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   26b48:	b118      	cbz	r0, 26b52 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26b4a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26b4e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26b52:	4770      	bx	lr

00026b54 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   26b54:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   26b56:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   26b58:	689b      	ldr	r3, [r3, #8]
   26b5a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b5c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26b60:	b138      	cbz	r0, 26b72 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   26b62:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b64:	2000      	movs	r0, #0
   26b66:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b68:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b6a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b6e:	601a      	str	r2, [r3, #0]
	return 0;
   26b70:	4770      	bx	lr
		return -1;
   26b72:	f04f 30ff 	mov.w	r0, #4294967295
}
   26b76:	4770      	bx	lr

00026b78 <uarte_nrfx_poll_out>:
{
   26b78:	b082      	sub	sp, #8
   26b7a:	aa02      	add	r2, sp, #8
   26b7c:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b80:	2100      	movs	r1, #0
	return dev->config->config_info;
   26b82:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26b84:	689b      	ldr	r3, [r3, #8]
   26b86:	681b      	ldr	r3, [r3, #0]
   26b88:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26b8c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26b90:	2201      	movs	r2, #1
   26b92:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b96:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b98:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26b9c:	2900      	cmp	r1, #0
   26b9e:	d0fb      	beq.n	26b98 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26ba0:	60da      	str	r2, [r3, #12]
}
   26ba2:	b002      	add	sp, #8
   26ba4:	4770      	bx	lr

00026ba6 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   26ba6:	6803      	ldr	r3, [r0, #0]
{
   26ba8:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   26baa:	689b      	ldr	r3, [r3, #8]
   26bac:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26bb2:	b1bb      	cbz	r3, 26be4 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26bb4:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   26bb6:	68ab      	ldr	r3, [r5, #8]
   26bb8:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bba:	2300      	movs	r3, #0
   26bbc:	4290      	cmp	r0, r2
   26bbe:	bfa8      	it	ge
   26bc0:	4610      	movge	r0, r2
   26bc2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   26bc6:	68aa      	ldr	r2, [r5, #8]
	for (int i = 0; i < len; i++) {
   26bc8:	4283      	cmp	r3, r0
   26bca:	6892      	ldr	r2, [r2, #8]
   26bcc:	db06      	blt.n	26bdc <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26bce:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26bd0:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26bd4:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26bd8:	60a3      	str	r3, [r4, #8]
}
   26bda:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   26bdc:	5cce      	ldrb	r6, [r1, r3]
   26bde:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   26be0:	3301      	adds	r3, #1
   26be2:	e7f0      	b.n	26bc6 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   26be4:	4618      	mov	r0, r3
   26be6:	e7f8      	b.n	26bda <uarte_nrfx_fifo_fill+0x34>

00026be8 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   26be8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26bea:	689b      	ldr	r3, [r3, #8]
   26bec:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bee:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26bf2:	b143      	cbz	r3, 26c06 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   26bf4:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bf6:	2000      	movs	r0, #0
   26bf8:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26bfc:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   26bfe:	7b1b      	ldrb	r3, [r3, #12]
   26c00:	700b      	strb	r3, [r1, #0]
   26c02:	6010      	str	r0, [r2, #0]
   26c04:	4770      	bx	lr
	int num_rx = 0;
   26c06:	4618      	mov	r0, r3
}
   26c08:	4770      	bx	lr

00026c0a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   26c0a:	2100      	movs	r1, #0
	return dev->config->config_info;
   26c0c:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   26c0e:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   26c10:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   26c12:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   26c14:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   26c16:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   26c18:	f44f 7280 	mov.w	r2, #256	; 0x100
   26c1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26c20:	4770      	bx	lr

00026c22 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   26c22:	2201      	movs	r2, #1
   26c24:	6883      	ldr	r3, [r0, #8]
   26c26:	689b      	ldr	r3, [r3, #8]
   26c28:	739a      	strb	r2, [r3, #14]
}
   26c2a:	4770      	bx	lr

00026c2c <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   26c2c:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c2e:	689b      	ldr	r3, [r3, #8]
   26c30:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26c32:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   26c36:	b118      	cbz	r0, 26c40 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   26c38:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   26c3c:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   26c40:	4770      	bx	lr

00026c42 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   26c42:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c44:	689b      	ldr	r3, [r3, #8]
   26c46:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26c48:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   26c4c:	3000      	adds	r0, #0
   26c4e:	bf18      	it	ne
   26c50:	2001      	movne	r0, #1
   26c52:	4770      	bx	lr

00026c54 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   26c54:	2210      	movs	r2, #16
	return dev->config->config_info;
   26c56:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c58:	689b      	ldr	r3, [r3, #8]
   26c5a:	681b      	ldr	r3, [r3, #0]
   26c5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26c60:	4770      	bx	lr

00026c62 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   26c62:	2210      	movs	r2, #16
	return dev->config->config_info;
   26c64:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c66:	689b      	ldr	r3, [r3, #8]
   26c68:	681b      	ldr	r3, [r3, #0]
   26c6a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26c6e:	4770      	bx	lr

00026c70 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   26c70:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   26c74:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c76:	689b      	ldr	r3, [r3, #8]
   26c78:	681b      	ldr	r3, [r3, #0]
   26c7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26c7e:	4770      	bx	lr

00026c80 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   26c80:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   26c84:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   26c86:	689b      	ldr	r3, [r3, #8]
   26c88:	681b      	ldr	r3, [r3, #0]
   26c8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26c8e:	4770      	bx	lr

00026c90 <uarte_nrfx_irq_update>:
}
   26c90:	2001      	movs	r0, #1
   26c92:	4770      	bx	lr

00026c94 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   26c94:	6883      	ldr	r3, [r0, #8]
   26c96:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   26c98:	e9c3 1200 	strd	r1, r2, [r3]
}
   26c9c:	4770      	bx	lr

00026c9e <uarte_nrfx_irq_is_pending>:
{
   26c9e:	b508      	push	{r3, lr}
	return dev->config->config_info;
   26ca0:	6803      	ldr	r3, [r0, #0]
{
   26ca2:	4602      	mov	r2, r0
	return config->uarte_regs;
   26ca4:	689b      	ldr	r3, [r3, #8]
   26ca6:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   26ca8:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   26cac:	05db      	lsls	r3, r3, #23
   26cae:	d405      	bmi.n	26cbc <uarte_nrfx_irq_is_pending+0x1e>
   26cb0:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   26cb4:	f010 0010 	ands.w	r0, r0, #16
   26cb8:	d106      	bne.n	26cc8 <uarte_nrfx_irq_is_pending+0x2a>
}
   26cba:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   26cbc:	f7ff ffb6 	bl	26c2c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   26cc0:	2800      	cmp	r0, #0
   26cc2:	d0f5      	beq.n	26cb0 <uarte_nrfx_irq_is_pending+0x12>
		||
   26cc4:	2001      	movs	r0, #1
   26cc6:	e7f8      	b.n	26cba <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   26cc8:	4610      	mov	r0, r2
   26cca:	f7ff ffba 	bl	26c42 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   26cce:	3000      	adds	r0, #0
   26cd0:	bf18      	it	ne
   26cd2:	2001      	movne	r0, #1
   26cd4:	e7f1      	b.n	26cba <uarte_nrfx_irq_is_pending+0x1c>

00026cd6 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable here, that is done through bsd_init.
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   26cd6:	2200      	movs	r2, #0
{
   26cd8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   26cda:	4611      	mov	r1, r2
   26cdc:	202a      	movs	r0, #42	; 0x2a
   26cde:	f7ea fb0f 	bl	11300 <z_irq_priority_set>
			   ipc_proxy_irq_handler, 0);
	bsd_init();
   26ce2:	f7f5 fd3b 	bl	1c75c <bsd_init>

	return 0;
}
   26ce6:	2000      	movs	r0, #0
   26ce8:	bd08      	pop	{r3, pc}

00026cea <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   26cea:	4668      	mov	r0, sp
   26cec:	f020 0107 	bic.w	r1, r0, #7
   26cf0:	468d      	mov	sp, r1
   26cf2:	b501      	push	{r0, lr}
   26cf4:	f7fe ff48 	bl	25b88 <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   26cf8:	f7f5 ff2c 	bl	1cb54 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26cfc:	f7ea fb32 	bl	11364 <_arch_isr_direct_pm>
   26d00:	f7ea f884 	bl	10e0c <_IntExit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   26d04:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26d08:	4685      	mov	sp, r0
   26d0a:	4770      	bx	lr

00026d0c <bsd_os_errno_set>:
	switch (err_code) {
   26d0c:	282f      	cmp	r0, #47	; 0x2f
{
   26d0e:	b510      	push	{r4, lr}
   26d10:	4604      	mov	r4, r0
	switch (err_code) {
   26d12:	d00c      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d14:	dc23      	bgt.n	26d5e <bsd_os_errno_set+0x52>
   26d16:	2816      	cmp	r0, #22
   26d18:	d009      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d1a:	dc12      	bgt.n	26d42 <bsd_os_errno_set+0x36>
   26d1c:	2809      	cmp	r0, #9
   26d1e:	d006      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d20:	dc09      	bgt.n	26d36 <bsd_os_errno_set+0x2a>
   26d22:	2802      	cmp	r0, #2
   26d24:	d003      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d26:	2805      	cmp	r0, #5
   26d28:	d001      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d2a:	2801      	cmp	r0, #1
   26d2c:	d13b      	bne.n	26da6 <bsd_os_errno_set+0x9a>
   26d2e:	f7fa ff7f 	bl	21c30 <z_impl_z_errno>
		errno = ETIMEDOUT;
   26d32:	6004      	str	r4, [r0, #0]
}
   26d34:	bd10      	pop	{r4, pc}
	switch (err_code) {
   26d36:	280d      	cmp	r0, #13
   26d38:	d0f9      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d3a:	280e      	cmp	r0, #14
   26d3c:	d0f7      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d3e:	280c      	cmp	r0, #12
   26d40:	e7f4      	b.n	26d2c <bsd_os_errno_set+0x20>
   26d42:	282a      	cmp	r0, #42	; 0x2a
   26d44:	d0f3      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d46:	dc05      	bgt.n	26d54 <bsd_os_errno_set+0x48>
   26d48:	2823      	cmp	r0, #35	; 0x23
   26d4a:	d030      	beq.n	26dae <bsd_os_errno_set+0xa2>
   26d4c:	2829      	cmp	r0, #41	; 0x29
   26d4e:	d0ee      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d50:	2818      	cmp	r0, #24
   26d52:	e7eb      	b.n	26d2c <bsd_os_errno_set+0x20>
   26d54:	282c      	cmp	r0, #44	; 0x2c
   26d56:	d0ea      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d58:	db2e      	blt.n	26db8 <bsd_os_errno_set+0xac>
   26d5a:	282d      	cmp	r0, #45	; 0x2d
   26d5c:	e7e6      	b.n	26d2c <bsd_os_errno_set+0x20>
   26d5e:	2869      	cmp	r0, #105	; 0x69
   26d60:	d032      	beq.n	26dc8 <bsd_os_errno_set+0xbc>
   26d62:	dc0e      	bgt.n	26d82 <bsd_os_errno_set+0x76>
   26d64:	2836      	cmp	r0, #54	; 0x36
   26d66:	d0e2      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d68:	dc05      	bgt.n	26d76 <bsd_os_errno_set+0x6a>
   26d6a:	2832      	cmp	r0, #50	; 0x32
   26d6c:	d028      	beq.n	26dc0 <bsd_os_errno_set+0xb4>
   26d6e:	2833      	cmp	r0, #51	; 0x33
   26d70:	d0dd      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d72:	2830      	cmp	r0, #48	; 0x30
   26d74:	e7da      	b.n	26d2c <bsd_os_errno_set+0x20>
   26d76:	2839      	cmp	r0, #57	; 0x39
   26d78:	d0d9      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d7a:	283c      	cmp	r0, #60	; 0x3c
   26d7c:	d0d7      	beq.n	26d2e <bsd_os_errno_set+0x22>
   26d7e:	2838      	cmp	r0, #56	; 0x38
   26d80:	e7d4      	b.n	26d2c <bsd_os_errno_set+0x20>
   26d82:	287e      	cmp	r0, #126	; 0x7e
   26d84:	d02c      	beq.n	26de0 <bsd_os_errno_set+0xd4>
   26d86:	dc09      	bgt.n	26d9c <bsd_os_errno_set+0x90>
   26d88:	2873      	cmp	r0, #115	; 0x73
   26d8a:	d021      	beq.n	26dd0 <bsd_os_errno_set+0xc4>
   26d8c:	287d      	cmp	r0, #125	; 0x7d
   26d8e:	d023      	beq.n	26dd8 <bsd_os_errno_set+0xcc>
   26d90:	2870      	cmp	r0, #112	; 0x70
   26d92:	d108      	bne.n	26da6 <bsd_os_errno_set+0x9a>
   26d94:	f7fa ff4c 	bl	21c30 <z_impl_z_errno>
		errno = EHOSTDOWN;
   26d98:	2343      	movs	r3, #67	; 0x43
   26d9a:	e00b      	b.n	26db4 <bsd_os_errno_set+0xa8>
	switch (err_code) {
   26d9c:	2880      	cmp	r0, #128	; 0x80
   26d9e:	d029      	beq.n	26df4 <bsd_os_errno_set+0xe8>
   26da0:	db23      	blt.n	26dea <bsd_os_errno_set+0xde>
   26da2:	2881      	cmp	r0, #129	; 0x81
   26da4:	d02b      	beq.n	26dfe <bsd_os_errno_set+0xf2>
   26da6:	f7fa ff43 	bl	21c30 <z_impl_z_errno>
		errno = EINVAL;
   26daa:	2316      	movs	r3, #22
   26dac:	e002      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dae:	f7fa ff3f 	bl	21c30 <z_impl_z_errno>
		errno = EAGAIN;
   26db2:	230b      	movs	r3, #11
		errno = EINVAL;
   26db4:	6003      	str	r3, [r0, #0]
}
   26db6:	e7bd      	b.n	26d34 <bsd_os_errno_set+0x28>
   26db8:	f7fa ff3a 	bl	21c30 <z_impl_z_errno>
		errno = EPROTONOSUPPORT;
   26dbc:	232b      	movs	r3, #43	; 0x2b
   26dbe:	e7f9      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dc0:	f7fa ff36 	bl	21c30 <z_impl_z_errno>
		errno = ENETDOWN;
   26dc4:	233e      	movs	r3, #62	; 0x3e
   26dc6:	e7f5      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dc8:	f7fa ff32 	bl	21c30 <z_impl_z_errno>
		errno = ENOBUFS;
   26dcc:	2337      	movs	r3, #55	; 0x37
   26dce:	e7f1      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dd0:	f7fa ff2e 	bl	21c30 <z_impl_z_errno>
		errno = EINPROGRESS;
   26dd4:	2344      	movs	r3, #68	; 0x44
   26dd6:	e7ed      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dd8:	f7fa ff2a 	bl	21c30 <z_impl_z_errno>
		errno = ECANCELED;
   26ddc:	2348      	movs	r3, #72	; 0x48
   26dde:	e7e9      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26de0:	f7fa ff26 	bl	21c30 <z_impl_z_errno>
		errno = ENOKEY;
   26de4:	f240 73d1 	movw	r3, #2001	; 0x7d1
   26de8:	e7e4      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dea:	f7fa ff21 	bl	21c30 <z_impl_z_errno>
		errno = EKEYEXPIRED;
   26dee:	f240 73d2 	movw	r3, #2002	; 0x7d2
   26df2:	e7df      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26df4:	f7fa ff1c 	bl	21c30 <z_impl_z_errno>
		errno = EKEYREVOKED;
   26df8:	f240 73d3 	movw	r3, #2003	; 0x7d3
   26dfc:	e7da      	b.n	26db4 <bsd_os_errno_set+0xa8>
   26dfe:	f7fa ff17 	bl	21c30 <z_impl_z_errno>
		errno = EKEYREJECTED;
   26e02:	f240 73d4 	movw	r3, #2004	; 0x7d4
   26e06:	e7d5      	b.n	26db4 <bsd_os_errno_set+0xa8>

00026e08 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   26e08:	4668      	mov	r0, sp
   26e0a:	f020 0107 	bic.w	r1, r0, #7
   26e0e:	468d      	mov	sp, r1
   26e10:	b501      	push	{r0, lr}
   26e12:	f7fe feb9 	bl	25b88 <z_arch_isr_direct_header>
	IPC_IRQHandler();
   26e16:	f7f6 fa95 	bl	1d344 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26e1a:	f7ea faa3 	bl	11364 <_arch_isr_direct_pm>
   26e1e:	f7e9 fff5 	bl	10e0c <_IntExit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   26e22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26e26:	4685      	mov	sp, r0
   26e28:	4770      	bx	lr

00026e2a <trace_task_create>:
{
   26e2a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   26e2c:	201d      	movs	r0, #29
   26e2e:	2200      	movs	r2, #0
   26e30:	2106      	movs	r1, #6
   26e32:	f7ea fa65 	bl	11300 <z_irq_priority_set>
}
   26e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   26e3a:	201d      	movs	r0, #29
   26e3c:	f7ea ba3c 	b.w	112b8 <z_arch_irq_enable>

00026e40 <read_task_create>:
{
   26e40:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   26e42:	201c      	movs	r0, #28
   26e44:	2200      	movs	r2, #0
   26e46:	2106      	movs	r1, #6
   26e48:	f7ea fa5a 	bl	11300 <z_irq_priority_set>
}
   26e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   26e50:	201c      	movs	r0, #28
   26e52:	f7ea ba31 	b.w	112b8 <z_arch_irq_enable>

00026e56 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   26e56:	2000      	movs	r0, #0
   26e58:	4770      	bx	lr

00026e5a <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   26e5a:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   26e5e:	bf18      	it	ne
   26e60:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   26e62:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   26e64:	bf48      	it	mi
   26e66:	f043 0308 	orrmi.w	r3, r3, #8
}
   26e6a:	4618      	mov	r0, r3
   26e6c:	4770      	bx	lr

00026e6e <z_to_nrf_protocol>:
	switch (proto) {
   26e6e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   26e72:	d017      	beq.n	26ea4 <z_to_nrf_protocol+0x36>
   26e74:	dc05      	bgt.n	26e82 <z_to_nrf_protocol+0x14>
   26e76:	2806      	cmp	r0, #6
   26e78:	d01a      	beq.n	26eb0 <z_to_nrf_protocol+0x42>
   26e7a:	2811      	cmp	r0, #17
   26e7c:	d010      	beq.n	26ea0 <z_to_nrf_protocol+0x32>
   26e7e:	b9a0      	cbnz	r0, 26eaa <z_to_nrf_protocol+0x3c>
   26e80:	4770      	bx	lr
   26e82:	f240 2301 	movw	r3, #513	; 0x201
   26e86:	4298      	cmp	r0, r3
   26e88:	d013      	beq.n	26eb2 <z_to_nrf_protocol+0x44>
   26e8a:	f240 2302 	movw	r3, #514	; 0x202
   26e8e:	4298      	cmp	r0, r3
   26e90:	d00f      	beq.n	26eb2 <z_to_nrf_protocol+0x44>
   26e92:	f240 1311 	movw	r3, #273	; 0x111
   26e96:	4298      	cmp	r0, r3
   26e98:	d107      	bne.n	26eaa <z_to_nrf_protocol+0x3c>
		return NRF_SPROTO_DTLS1v2;
   26e9a:	f44f 7087 	mov.w	r0, #270	; 0x10e
   26e9e:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   26ea0:	2002      	movs	r0, #2
   26ea2:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   26ea4:	f44f 7082 	mov.w	r0, #260	; 0x104
   26ea8:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   26eaa:	f06f 002a 	mvn.w	r0, #42	; 0x2a
   26eae:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   26eb0:	2001      	movs	r0, #1
}
   26eb2:	4770      	bx	lr

00026eb4 <nrf91_bsdlib_socket_offload_init>:
}
   26eb4:	2000      	movs	r0, #0
   26eb6:	4770      	bx	lr

00026eb8 <nrf91_socket_offload_freeaddrinfo>:
{
   26eb8:	b538      	push	{r3, r4, r5, lr}
   26eba:	4604      	mov	r4, r0
	while (next != NULL) {
   26ebc:	b904      	cbnz	r4, 26ec0 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   26ebe:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   26ec0:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   26ec2:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   26ec4:	f000 fb9a 	bl	275fc <k_free>
		k_free(this);
   26ec8:	4620      	mov	r0, r4
   26eca:	f000 fb97 	bl	275fc <k_free>
		next = next->ai_next;
   26ece:	462c      	mov	r4, r5
   26ed0:	e7f4      	b.n	26ebc <nrf91_socket_offload_freeaddrinfo+0x4>

00026ed2 <z_to_nrf_addrinfo_hints>:
{
   26ed2:	b538      	push	{r3, r4, r5, lr}
   26ed4:	460c      	mov	r4, r1
   26ed6:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   26ed8:	2220      	movs	r2, #32
   26eda:	2100      	movs	r1, #0
   26edc:	4620      	mov	r0, r4
   26ede:	f7fe ffef 	bl	25ec0 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   26ee2:	2300      	movs	r3, #0
   26ee4:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   26ee6:	68ab      	ldr	r3, [r5, #8]
		return NRF_SOCK_MGMT;
   26ee8:	2b04      	cmp	r3, #4
   26eea:	bf08      	it	eq
   26eec:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   26ef0:	60a3      	str	r3, [r4, #8]
	switch (z_family) {
   26ef2:	88ab      	ldrh	r3, [r5, #4]
   26ef4:	2b02      	cmp	r3, #2
   26ef6:	d005      	beq.n	26f04 <z_to_nrf_addrinfo_hints+0x32>
   26ef8:	2b66      	cmp	r3, #102	; 0x66
   26efa:	d004      	beq.n	26f06 <z_to_nrf_addrinfo_hints+0x34>
   26efc:	2b01      	cmp	r3, #1
   26efe:	d10f      	bne.n	26f20 <z_to_nrf_addrinfo_hints+0x4e>
		return NRF_AF_INET;
   26f00:	2302      	movs	r3, #2
   26f02:	e000      	b.n	26f06 <z_to_nrf_addrinfo_hints+0x34>
		return NRF_AF_INET6;
   26f04:	230a      	movs	r3, #10
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   26f06:	68e8      	ldr	r0, [r5, #12]
	nrf_out->ai_family = family;
   26f08:	6063      	str	r3, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   26f0a:	f7ff ffb0 	bl	26e6e <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   26f0e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   26f12:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   26f14:	d003      	beq.n	26f1e <z_to_nrf_addrinfo_hints+0x4c>
	if (z_in->ai_canonname != NULL) {
   26f16:	69a8      	ldr	r0, [r5, #24]
   26f18:	b108      	cbz	r0, 26f1e <z_to_nrf_addrinfo_hints+0x4c>
		nrf_out->ai_canonname = z_in->ai_canonname;
   26f1a:	61a0      	str	r0, [r4, #24]
	return 0;
   26f1c:	2000      	movs	r0, #0
}
   26f1e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAFNOSUPPORT;
   26f20:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   26f24:	e7fb      	b.n	26f1e <z_to_nrf_addrinfo_hints+0x4c>

00026f26 <nrf91_socket_offload_send>:
{
   26f26:	b570      	push	{r4, r5, r6, lr}
   26f28:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   26f2a:	4618      	mov	r0, r3
{
   26f2c:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   26f2e:	f7ff ff94 	bl	26e5a <z_to_nrf_flags>
   26f32:	462a      	mov	r2, r5
   26f34:	4603      	mov	r3, r0
   26f36:	4620      	mov	r0, r4
}
   26f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   26f3c:	f7fa bd62 	b.w	21a04 <nrf_send>

00026f40 <nrf91_socket_offload_recv>:
{
   26f40:	b570      	push	{r4, r5, r6, lr}
   26f42:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   26f44:	4618      	mov	r0, r3
{
   26f46:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   26f48:	f7ff ff87 	bl	26e5a <z_to_nrf_flags>
   26f4c:	462a      	mov	r2, r5
   26f4e:	4603      	mov	r3, r0
   26f50:	4620      	mov	r0, r4
}
   26f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   26f56:	f7fa bd8b 	b.w	21a70 <nrf_recv>

00026f5a <nrf91_socket_offload_poll>:
{
   26f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f5c:	b091      	sub	sp, #68	; 0x44
   26f5e:	4605      	mov	r5, r0
   26f60:	460c      	mov	r4, r1
   26f62:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   26f64:	2100      	movs	r1, #0
   26f66:	2240      	movs	r2, #64	; 0x40
   26f68:	4668      	mov	r0, sp
   26f6a:	f7fe ffa9 	bl	25ec0 <memset>
	for (int i = 0; i < nfds; i++) {
   26f6e:	2204      	movs	r2, #4
   26f70:	2100      	movs	r1, #0
   26f72:	42a1      	cmp	r1, r4
   26f74:	db0c      	blt.n	26f90 <nrf91_socket_offload_poll+0x36>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   26f76:	4632      	mov	r2, r6
   26f78:	4621      	mov	r1, r4
   26f7a:	4668      	mov	r0, sp
   26f7c:	f7fa fe18 	bl	21bb0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   26f80:	2200      	movs	r2, #0
   26f82:	462b      	mov	r3, r5
		fds[i].revents = 0;
   26f84:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   26f86:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   26f88:	42a2      	cmp	r2, r4
   26f8a:	db1b      	blt.n	26fc4 <nrf91_socket_offload_poll+0x6a>
}
   26f8c:	b011      	add	sp, #68	; 0x44
   26f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   26f90:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   26f94:	5aa8      	ldrh	r0, [r5, r2]
		tmp[i].handle = fds[i].fd;
   26f96:	f84d 3031 	str.w	r3, [sp, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   26f9a:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   26f9c:	bf48      	it	mi
   26f9e:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
	for (int i = 0; i < nfds; i++) {
   26fa2:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   26fa6:	bf44      	itt	mi
   26fa8:	f043 0301 	orrmi.w	r3, r3, #1
   26fac:	f82d 3002 	strhmi.w	r3, [sp, r2]
		if (fds[i].events & POLLOUT) {
   26fb0:	0747      	lsls	r7, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   26fb2:	bf42      	ittt	mi
   26fb4:	f83d 3002 	ldrhmi.w	r3, [sp, r2]
   26fb8:	f043 0302 	orrmi.w	r3, r3, #2
   26fbc:	f82d 3002 	strhmi.w	r3, [sp, r2]
   26fc0:	3208      	adds	r2, #8
   26fc2:	e7d6      	b.n	26f72 <nrf91_socket_offload_poll+0x18>
		if (tmp[i].returned & NRF_POLLIN) {
   26fc4:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   26fc8:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   26fca:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   26fcc:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   26fce:	bf48      	it	mi
   26fd0:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   26fd2:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   26fd4:	bf48      	it	mi
   26fd6:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   26fd8:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   26fdc:	bf44      	itt	mi
   26fde:	f045 0504 	orrmi.w	r5, r5, #4
   26fe2:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   26fe4:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   26fe6:	bf48      	it	mi
   26fe8:	88dd      	ldrhmi	r5, [r3, #6]
   26fea:	f103 0308 	add.w	r3, r3, #8
   26fee:	bf44      	itt	mi
   26ff0:	f045 0508 	orrmi.w	r5, r5, #8
   26ff4:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   26ff8:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   26ffa:	bf42      	ittt	mi
   26ffc:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   27000:	f045 0520 	orrmi.w	r5, r5, #32
   27004:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   27008:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   2700a:	bf42      	ittt	mi
   2700c:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   27010:	f041 0110 	orrmi.w	r1, r1, #16
   27014:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   27018:	e7b6      	b.n	26f88 <nrf91_socket_offload_poll+0x2e>

0002701a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2701a:	f7fa bd55 	b.w	21ac8 <nrf_listen>

0002701e <nrf91_socket_offload_close>:
	return nrf_close(sd);
   2701e:	f7fa bcc7 	b.w	219b0 <nrf_close>

00027022 <nrf91_socket_offload_getsockopt>:
{
   27022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27026:	461c      	mov	r4, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   27028:	2300      	movs	r3, #0
{
   2702a:	b086      	sub	sp, #24
   2702c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   27030:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   27034:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   27038:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   2703c:	4607      	mov	r7, r0
   2703e:	460d      	mov	r5, r1
   27040:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   27042:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   27044:	d005      	beq.n	27052 <nrf91_socket_offload_getsockopt+0x30>
   27046:	f240 2302 	movw	r3, #514	; 0x202
   2704a:	4299      	cmp	r1, r3
   2704c:	d001      	beq.n	27052 <nrf91_socket_offload_getsockopt+0x30>
   2704e:	2901      	cmp	r1, #1
   27050:	d135      	bne.n	270be <nrf91_socket_offload_getsockopt+0x9c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   27052:	aa02      	add	r2, sp, #8
   27054:	4631      	mov	r1, r6
   27056:	4628      	mov	r0, r5
   27058:	f7ec fc26 	bl	138a8 <z_to_nrf_optname>
   2705c:	2800      	cmp	r0, #0
   2705e:	db2e      	blt.n	270be <nrf91_socket_offload_getsockopt+0x9c>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   27060:	2d01      	cmp	r5, #1
   27062:	d120      	bne.n	270a6 <nrf91_socket_offload_getsockopt+0x84>
   27064:	2e14      	cmp	r6, #20
   27066:	d11e      	bne.n	270a6 <nrf91_socket_offload_getsockopt+0x84>
		nrf_optlen = sizeof(struct nrf_timeval);
   27068:	2308      	movs	r3, #8
   2706a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   2706c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2706e:	aa03      	add	r2, sp, #12
   27070:	9200      	str	r2, [sp, #0]
   27072:	4638      	mov	r0, r7
   27074:	9a02      	ldr	r2, [sp, #8]
   27076:	4629      	mov	r1, r5
   27078:	f7fa fd7a 	bl	21b70 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2707c:	4607      	mov	r7, r0
   2707e:	b970      	cbnz	r0, 2709e <nrf91_socket_offload_getsockopt+0x7c>
   27080:	b16c      	cbz	r4, 2709e <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   27082:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   27084:	2d01      	cmp	r5, #1
		*optlen = nrf_optlen;
   27086:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2708a:	d108      	bne.n	2709e <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   2708c:	2e04      	cmp	r6, #4
   2708e:	d10c      	bne.n	270aa <nrf91_socket_offload_getsockopt+0x88>
				bsd_os_errno_set(*(int *)optval);
   27090:	6820      	ldr	r0, [r4, #0]
   27092:	f7ff fe3b 	bl	26d0c <bsd_os_errno_set>
   27096:	f7fa fdcb 	bl	21c30 <z_impl_z_errno>
				*(int *)optval = errno;
   2709a:	6803      	ldr	r3, [r0, #0]
   2709c:	6023      	str	r3, [r4, #0]
}
   2709e:	4638      	mov	r0, r7
   270a0:	b006      	add	sp, #24
   270a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   270a6:	4623      	mov	r3, r4
   270a8:	e7e1      	b.n	2706e <nrf91_socket_offload_getsockopt+0x4c>
			} else if (optname == SO_RCVTIMEO) {
   270aa:	2e14      	cmp	r6, #20
   270ac:	d1f7      	bne.n	2709e <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   270ae:	9b04      	ldr	r3, [sp, #16]
   270b0:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   270b2:	9b05      	ldr	r3, [sp, #20]
   270b4:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   270b6:	2308      	movs	r3, #8
   270b8:	f8c8 3000 	str.w	r3, [r8]
   270bc:	e7ef      	b.n	2709e <nrf91_socket_offload_getsockopt+0x7c>
   270be:	f7fa fdb7 	bl	21c30 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   270c2:	232a      	movs	r3, #42	; 0x2a
	return retval;
   270c4:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   270c8:	6003      	str	r3, [r0, #0]
	return retval;
   270ca:	e7e8      	b.n	2709e <nrf91_socket_offload_getsockopt+0x7c>

000270cc <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   270cc:	2903      	cmp	r1, #3
{
   270ce:	b508      	push	{r3, lr}
	switch (cmd) {
   270d0:	d00b      	beq.n	270ea <nrf91_socket_offload_fcntl+0x1e>
   270d2:	2904      	cmp	r1, #4
   270d4:	d111      	bne.n	270fa <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   270d6:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   270d8:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   270dc:	d10d      	bne.n	270fa <nrf91_socket_offload_fcntl+0x2e>
}
   270de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   270e2:	1392      	asrs	r2, r2, #14
   270e4:	2101      	movs	r1, #1
   270e6:	f7fa bd65 	b.w	21bb4 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   270ea:	2200      	movs	r2, #0
   270ec:	2102      	movs	r1, #2
   270ee:	f7fa fd61 	bl	21bb4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   270f2:	0380      	lsls	r0, r0, #14
   270f4:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   270f8:	bd08      	pop	{r3, pc}
   270fa:	f7fa fd99 	bl	21c30 <z_impl_z_errno>
	errno = EINVAL;
   270fe:	2316      	movs	r3, #22
   27100:	6003      	str	r3, [r0, #0]
	return retval;
   27102:	f04f 30ff 	mov.w	r0, #4294967295
   27106:	e7f7      	b.n	270f8 <nrf91_socket_offload_fcntl+0x2c>

00027108 <nrf91_socket_offload_recvfrom>:
{
   27108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2710c:	4607      	mov	r7, r0
   2710e:	b08c      	sub	sp, #48	; 0x30
   27110:	4618      	mov	r0, r3
   27112:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   27116:	4690      	mov	r8, r2
   27118:	f7ff fe9f 	bl	26e5a <z_to_nrf_flags>
   2711c:	4603      	mov	r3, r0
	if (from == NULL) {
   2711e:	b954      	cbnz	r4, 27136 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   27120:	e9cd 4400 	strd	r4, r4, [sp]
   27124:	4642      	mov	r2, r8
   27126:	4638      	mov	r0, r7
   27128:	f7fa fc86 	bl	21a38 <nrf_recvfrom>
   2712c:	4605      	mov	r5, r0
}
   2712e:	4628      	mov	r0, r5
   27130:	b00c      	add	sp, #48	; 0x30
   27132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   27136:	2224      	movs	r2, #36	; 0x24
   27138:	ad0c      	add	r5, sp, #48	; 0x30
   2713a:	f845 2d28 	str.w	r2, [r5, #-40]!
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2713e:	aa03      	add	r2, sp, #12
   27140:	9501      	str	r5, [sp, #4]
   27142:	9200      	str	r2, [sp, #0]
   27144:	4638      	mov	r0, r7
   27146:	4642      	mov	r2, r8
   27148:	f7fa fc76 	bl	21a38 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2714c:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   2714e:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   27150:	2b02      	cmp	r3, #2
   27152:	d109      	bne.n	27168 <nrf91_socket_offload_recvfrom+0x60>
	ptr->sin_port = nrf_in->sin_port;
   27154:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27158:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2715a:	2301      	movs	r3, #1
   2715c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2715e:	9b06      	ldr	r3, [sp, #24]
   27160:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   27162:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   27164:	6033      	str	r3, [r6, #0]
	return retval;
   27166:	e7e2      	b.n	2712e <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   27168:	2b0a      	cmp	r3, #10
   2716a:	d1e0      	bne.n	2712e <nrf91_socket_offload_recvfrom+0x26>
	ptr->sin6_port = nrf_in->sin6_port;
   2716c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	ptr->sin6_family = AF_INET6;
   27170:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   27172:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   27174:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   27176:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   27178:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2717c:	a907      	add	r1, sp, #28
   2717e:	f7fe fe72 	bl	25e66 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   27182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27184:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   27186:	2318      	movs	r3, #24
   27188:	e7ec      	b.n	27164 <nrf91_socket_offload_recvfrom+0x5c>

0002718a <nrf91_socket_offload_connect>:
{
   2718a:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   2718c:	880b      	ldrh	r3, [r1, #0]
{
   2718e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   27190:	2b01      	cmp	r3, #1
{
   27192:	4606      	mov	r6, r0
   27194:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   27196:	d10e      	bne.n	271b6 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   27198:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2719a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2719c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   271a0:	2302      	movs	r3, #2
   271a2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   271a4:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   271a6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   271aa:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   271ac:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   271ae:	f7fa fc79 	bl	21aa4 <nrf_connect>
}
   271b2:	b00a      	add	sp, #40	; 0x28
   271b4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   271b6:	2b02      	cmp	r3, #2
   271b8:	d112      	bne.n	271e0 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   271ba:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   271bc:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   271be:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   271c2:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   271c4:	2210      	movs	r2, #16
   271c6:	3104      	adds	r1, #4
   271c8:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   271ca:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   271cc:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   271d0:	f7fe fe49 	bl	25e66 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   271d4:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   271d6:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   271d8:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   271da:	a901      	add	r1, sp, #4
   271dc:	4630      	mov	r0, r6
   271de:	e7e6      	b.n	271ae <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   271e0:	f7fa fc60 	bl	21aa4 <nrf_connect>
		if (retval < 0) {
   271e4:	2800      	cmp	r0, #0
   271e6:	dae4      	bge.n	271b2 <nrf91_socket_offload_connect+0x28>
   271e8:	f7fa fd22 	bl	21c30 <z_impl_z_errno>
	errno = ENOTSUP;
   271ec:	2323      	movs	r3, #35	; 0x23
   271ee:	6003      	str	r3, [r0, #0]
   271f0:	f04f 30ff 	mov.w	r0, #4294967295
   271f4:	e7dd      	b.n	271b2 <nrf91_socket_offload_connect+0x28>

000271f6 <nrf91_socket_offload_socket>:
{
   271f6:	b510      	push	{r4, lr}
	switch (z_family) {
   271f8:	b284      	uxth	r4, r0
   271fa:	2c02      	cmp	r4, #2
   271fc:	d00a      	beq.n	27214 <nrf91_socket_offload_socket+0x1e>
   271fe:	2c66      	cmp	r4, #102	; 0x66
   27200:	d009      	beq.n	27216 <nrf91_socket_offload_socket+0x20>
   27202:	2c01      	cmp	r4, #1
   27204:	d016      	beq.n	27234 <nrf91_socket_offload_socket+0x3e>
   27206:	f7fa fd13 	bl	21c30 <z_impl_z_errno>
		errno = EAFNOSUPPORT;
   2720a:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   2720c:	6003      	str	r3, [r0, #0]
}
   2720e:	f04f 30ff 	mov.w	r0, #4294967295
   27212:	bd10      	pop	{r4, pc}
		return NRF_AF_INET6;
   27214:	240a      	movs	r4, #10
	switch (socktype) {
   27216:	2904      	cmp	r1, #4
	proto = z_to_nrf_protocol(proto);
   27218:	4610      	mov	r0, r2
		return NRF_SOCK_MGMT;
   2721a:	bf08      	it	eq
   2721c:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   27220:	f7ff fe25 	bl	26e6e <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   27224:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   27228:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2722a:	d105      	bne.n	27238 <nrf91_socket_offload_socket+0x42>
   2722c:	f7fa fd00 	bl	21c30 <z_impl_z_errno>
		errno = EPROTONOSUPPORT;
   27230:	232b      	movs	r3, #43	; 0x2b
   27232:	e7eb      	b.n	2720c <nrf91_socket_offload_socket+0x16>
		return NRF_AF_INET;
   27234:	2402      	movs	r4, #2
   27236:	e7ee      	b.n	27216 <nrf91_socket_offload_socket+0x20>
	retval = nrf_socket(family, type, proto);
   27238:	4620      	mov	r0, r4
}
   2723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   2723e:	f7fa bba5 	b.w	2198c <nrf_socket>

00027242 <nrf91_socket_offload_accept>:
{
   27242:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   27244:	2708      	movs	r7, #8
{
   27246:	b085      	sub	sp, #20
   27248:	4616      	mov	r6, r2
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2724a:	aa04      	add	r2, sp, #16
{
   2724c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   2724e:	f842 7d0c 	str.w	r7, [r2, #-12]!
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   27252:	eb0d 0107 	add.w	r1, sp, r7
   27256:	f7fa fc47 	bl	21ae8 <nrf_accept>
	if (retval < 0) {
   2725a:	1e05      	subs	r5, r0, #0
   2725c:	db23      	blt.n	272a6 <nrf91_socket_offload_accept+0x64>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   2725e:	9b03      	ldr	r3, [sp, #12]
   27260:	2b02      	cmp	r3, #2
   27262:	d10a      	bne.n	2727a <nrf91_socket_offload_accept+0x38>
	ptr->sin_port = nrf_in->sin_port;
   27264:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   27268:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2726a:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2726c:	2301      	movs	r3, #1
   2726e:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27270:	9b05      	ldr	r3, [sp, #20]
   27272:	6063      	str	r3, [r4, #4]
}
   27274:	4628      	mov	r0, r5
   27276:	b005      	add	sp, #20
   27278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   2727a:	2b0a      	cmp	r3, #10
   2727c:	d10f      	bne.n	2729e <nrf91_socket_offload_accept+0x5c>
		*addrlen = sizeof(struct sockaddr_in6);
   2727e:	2318      	movs	r3, #24
	ptr->sin6_port = nrf_in->sin6_port;
   27280:	a904      	add	r1, sp, #16
		*addrlen = sizeof(struct sockaddr_in6);
   27282:	6033      	str	r3, [r6, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   27284:	f831 3b08 	ldrh.w	r3, [r1], #8
	ptr->sin6_family = AF_INET6;
   27288:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   2728a:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   2728c:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2728e:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   27290:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   27294:	f7fe fde7 	bl	25e66 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   27298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2729a:	7523      	strb	r3, [r4, #20]
   2729c:	e7ea      	b.n	27274 <nrf91_socket_offload_accept+0x32>
   2729e:	f7fa fcc7 	bl	21c30 <z_impl_z_errno>
	errno = ENOTSUP;
   272a2:	2323      	movs	r3, #35	; 0x23
   272a4:	6003      	str	r3, [r0, #0]
		return -1;
   272a6:	f04f 35ff 	mov.w	r5, #4294967295
   272aa:	e7e3      	b.n	27274 <nrf91_socket_offload_accept+0x32>

000272ac <nrf91_socket_offload_setsockopt>:
{
   272ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   272b0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   272b4:	b086      	sub	sp, #24
   272b6:	4680      	mov	r8, r0
   272b8:	460c      	mov	r4, r1
   272ba:	4617      	mov	r7, r2
   272bc:	461d      	mov	r5, r3
   272be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   272c0:	d005      	beq.n	272ce <nrf91_socket_offload_setsockopt+0x22>
   272c2:	f240 2302 	movw	r3, #514	; 0x202
   272c6:	4299      	cmp	r1, r3
   272c8:	d001      	beq.n	272ce <nrf91_socket_offload_setsockopt+0x22>
   272ca:	2901      	cmp	r1, #1
   272cc:	d11a      	bne.n	27304 <nrf91_socket_offload_setsockopt+0x58>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   272ce:	aa03      	add	r2, sp, #12
   272d0:	4639      	mov	r1, r7
   272d2:	4620      	mov	r0, r4
   272d4:	f7ec fae8 	bl	138a8 <z_to_nrf_optname>
   272d8:	2800      	cmp	r0, #0
   272da:	db13      	blt.n	27304 <nrf91_socket_offload_setsockopt+0x58>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   272dc:	2c01      	cmp	r4, #1
   272de:	d107      	bne.n	272f0 <nrf91_socket_offload_setsockopt+0x44>
   272e0:	2f14      	cmp	r7, #20
   272e2:	d105      	bne.n	272f0 <nrf91_socket_offload_setsockopt+0x44>
		nrf_optlen = sizeof(struct nrf_timeval);
   272e4:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   272e6:	682b      	ldr	r3, [r5, #0]
   272e8:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   272ea:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   272ec:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   272ee:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   272f0:	9600      	str	r6, [sp, #0]
   272f2:	462b      	mov	r3, r5
   272f4:	9a03      	ldr	r2, [sp, #12]
   272f6:	4621      	mov	r1, r4
   272f8:	4640      	mov	r0, r8
   272fa:	f7fa fc1d 	bl	21b38 <nrf_setsockopt>
}
   272fe:	b006      	add	sp, #24
   27300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27304:	f7fa fc94 	bl	21c30 <z_impl_z_errno>
	errno = ENOPROTOOPT;
   27308:	232a      	movs	r3, #42	; 0x2a
   2730a:	6003      	str	r3, [r0, #0]
   2730c:	f04f 30ff 	mov.w	r0, #4294967295
   27310:	e7f5      	b.n	272fe <nrf91_socket_offload_setsockopt+0x52>

00027312 <nrf91_socket_offload_getaddrinfo>:
{
   27312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27316:	4614      	mov	r4, r2
   27318:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   2731a:	2100      	movs	r1, #0
{
   2731c:	b093      	sub	sp, #76	; 0x4c
   2731e:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   27320:	2220      	movs	r2, #32
   27322:	a802      	add	r0, sp, #8
{
   27324:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   27326:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   27328:	f7fe fdca 	bl	25ec0 <memset>
	if (hints != NULL) {
   2732c:	b19c      	cbz	r4, 27356 <nrf91_socket_offload_getaddrinfo+0x44>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2732e:	a902      	add	r1, sp, #8
   27330:	4620      	mov	r0, r4
   27332:	f7ff fdce 	bl	26ed2 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   27336:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   2733a:	f000 80a3 	beq.w	27484 <nrf91_socket_offload_getaddrinfo+0x172>
		} else if (error == -EAFNOSUPPORT) {
   2733e:	302f      	adds	r0, #47	; 0x2f
   27340:	f000 80a3 	beq.w	2748a <nrf91_socket_offload_getaddrinfo+0x178>
		if (hints->ai_next != NULL) {
   27344:	69e0      	ldr	r0, [r4, #28]
   27346:	b120      	cbz	r0, 27352 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   27348:	ac0a      	add	r4, sp, #40	; 0x28
   2734a:	4621      	mov	r1, r4
   2734c:	f7ff fdc1 	bl	26ed2 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   27350:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   27352:	aa02      	add	r2, sp, #8
   27354:	e000      	b.n	27358 <nrf91_socket_offload_getaddrinfo+0x46>
	struct nrf_addrinfo *nrf_hints_ptr = NULL;
   27356:	4622      	mov	r2, r4
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   27358:	4631      	mov	r1, r6
   2735a:	4628      	mov	r0, r5
   2735c:	ab01      	add	r3, sp, #4
   2735e:	f7fa fc23 	bl	21ba8 <nrf_getaddrinfo>
	*res = NULL;
   27362:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   27364:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   27366:	f8c8 7000 	str.w	r7, [r8]
		return AF_INET6;
   2736a:	f04f 0902 	mov.w	r9, #2
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2736e:	4605      	mov	r5, r0
   27370:	2800      	cmp	r0, #0
   27372:	d057      	beq.n	27424 <nrf91_socket_offload_getaddrinfo+0x112>
		nrf91_socket_offload_freeaddrinfo(*res);
   27374:	f8d8 0000 	ldr.w	r0, [r8]
   27378:	f7ff fd9e 	bl	26eb8 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2737c:	2300      	movs	r3, #0
   2737e:	f8c8 3000 	str.w	r3, [r8]
   27382:	e051      	b.n	27428 <nrf91_socket_offload_getaddrinfo+0x116>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   27384:	2020      	movs	r0, #32
   27386:	f7fa fe69 	bl	2205c <k_malloc>
		if (next_z_res == NULL) {
   2738a:	4604      	mov	r4, r0
   2738c:	2800      	cmp	r0, #0
   2738e:	d074      	beq.n	2747a <nrf91_socket_offload_getaddrinfo+0x168>
	family = nrf_to_z_family(nrf_in->ai_family);
   27390:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   27392:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   27394:	2a0a      	cmp	r2, #10
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   27396:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   2739a:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2739c:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   2739e:	d017      	beq.n	273d0 <nrf91_socket_offload_getaddrinfo+0xbe>
   273a0:	2a66      	cmp	r2, #102	; 0x66
   273a2:	d017      	beq.n	273d4 <nrf91_socket_offload_getaddrinfo+0xc2>
   273a4:	2a02      	cmp	r2, #2
   273a6:	d173      	bne.n	27490 <nrf91_socket_offload_getaddrinfo+0x17e>
		return AF_INET;
   273a8:	2301      	movs	r3, #1
	z_out->ai_family = family;
   273aa:	6063      	str	r3, [r4, #4]
	switch (proto) {
   273ac:	68f3      	ldr	r3, [r6, #12]
   273ae:	2b02      	cmp	r3, #2
   273b0:	d041      	beq.n	27436 <nrf91_socket_offload_getaddrinfo+0x124>
   273b2:	dc11      	bgt.n	273d8 <nrf91_socket_offload_getaddrinfo+0xc6>
   273b4:	b1fb      	cbz	r3, 273f6 <nrf91_socket_offload_getaddrinfo+0xe4>
   273b6:	2b01      	cmp	r3, #1
   273b8:	d03f      	beq.n	2743a <nrf91_socket_offload_getaddrinfo+0x128>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   273ba:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   273be:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   273c0:	2300      	movs	r3, #0
   273c2:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   273c4:	4620      	mov	r0, r4
   273c6:	f000 f919 	bl	275fc <k_free>
			retval = DNS_EAI_SOCKTYPE;
   273ca:	f06f 0506 	mvn.w	r5, #6
   273ce:	e7d1      	b.n	27374 <nrf91_socket_offload_getaddrinfo+0x62>
		return AF_INET6;
   273d0:	2302      	movs	r3, #2
   273d2:	e7ea      	b.n	273aa <nrf91_socket_offload_getaddrinfo+0x98>
		return AF_LTE;
   273d4:	4613      	mov	r3, r2
   273d6:	e7e8      	b.n	273aa <nrf91_socket_offload_getaddrinfo+0x98>
	switch (proto) {
   273d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   273dc:	d009      	beq.n	273f2 <nrf91_socket_offload_getaddrinfo+0xe0>
   273de:	f240 2101 	movw	r1, #513	; 0x201
   273e2:	428b      	cmp	r3, r1
   273e4:	d007      	beq.n	273f6 <nrf91_socket_offload_getaddrinfo+0xe4>
   273e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   273ea:	d1e6      	bne.n	273ba <nrf91_socket_offload_getaddrinfo+0xa8>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   273ec:	f44f 7381 	mov.w	r3, #258	; 0x102
   273f0:	e001      	b.n	273f6 <nrf91_socket_offload_getaddrinfo+0xe4>
   273f2:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   273f6:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   273f8:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   273fa:	d120      	bne.n	2743e <nrf91_socket_offload_getaddrinfo+0x12c>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   273fc:	2008      	movs	r0, #8
   273fe:	f7fa fe2d 	bl	2205c <k_malloc>
   27402:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   27404:	2800      	cmp	r0, #0
   27406:	d035      	beq.n	27474 <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   27408:	2308      	movs	r3, #8
   2740a:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2740c:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2740e:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27410:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   27412:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   27414:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27416:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   27418:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2741a:	bb8f      	cbnz	r7, 27480 <nrf91_socket_offload_getaddrinfo+0x16e>
			*res = next_z_res;
   2741c:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   27420:	4627      	mov	r7, r4
   27422:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   27424:	2e00      	cmp	r6, #0
   27426:	d1ad      	bne.n	27384 <nrf91_socket_offload_getaddrinfo+0x72>
	nrf_freeaddrinfo(nrf_res);
   27428:	9801      	ldr	r0, [sp, #4]
   2742a:	f7fa fbbf 	bl	21bac <nrf_freeaddrinfo>
}
   2742e:	4628      	mov	r0, r5
   27430:	b013      	add	sp, #76	; 0x4c
   27432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   27436:	2311      	movs	r3, #17
   27438:	e7dd      	b.n	273f6 <nrf91_socket_offload_getaddrinfo+0xe4>
   2743a:	2306      	movs	r3, #6
   2743c:	e7db      	b.n	273f6 <nrf91_socket_offload_getaddrinfo+0xe4>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2743e:	2a0a      	cmp	r2, #10
   27440:	d1c0      	bne.n	273c4 <nrf91_socket_offload_getaddrinfo+0xb2>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   27442:	2018      	movs	r0, #24
   27444:	f7fa fe0a 	bl	2205c <k_malloc>
   27448:	4682      	mov	sl, r0
   2744a:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   2744c:	b190      	cbz	r0, 27474 <nrf91_socket_offload_getaddrinfo+0x162>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2744e:	2318      	movs	r3, #24
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   27450:	2210      	movs	r2, #16
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   27452:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   27456:	6123      	str	r3, [r4, #16]
	ptr->sin6_port = nrf_in->sin6_port;
   27458:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   2745c:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_port = nrf_in->sin6_port;
   27460:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   27462:	f820 9b04 	strh.w	r9, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   27466:	f7fe fcfe 	bl	25e66 <memcpy>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   2746a:	f8db 3020 	ldr.w	r3, [fp, #32]
   2746e:	f88a 3014 	strb.w	r3, [sl, #20]
   27472:	e7d2      	b.n	2741a <nrf91_socket_offload_getaddrinfo+0x108>
			k_free(next_z_res);
   27474:	4620      	mov	r0, r4
   27476:	f000 f8c1 	bl	275fc <k_free>
			retval = DNS_EAI_MEMORY;
   2747a:	f06f 0509 	mvn.w	r5, #9
   2747e:	e779      	b.n	27374 <nrf91_socket_offload_getaddrinfo+0x62>
			latest_z_res->ai_next = next_z_res;
   27480:	61fc      	str	r4, [r7, #28]
   27482:	e7cd      	b.n	27420 <nrf91_socket_offload_getaddrinfo+0x10e>
			return DNS_EAI_SOCKTYPE;
   27484:	f06f 0506 	mvn.w	r5, #6
   27488:	e7d1      	b.n	2742e <nrf91_socket_offload_getaddrinfo+0x11c>
			return DNS_EAI_ADDRFAMILY;
   2748a:	f06f 0508 	mvn.w	r5, #8
   2748e:	e7ce      	b.n	2742e <nrf91_socket_offload_getaddrinfo+0x11c>
			k_free(next_z_res);
   27490:	f000 f8b4 	bl	275fc <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   27494:	f06f 0508 	mvn.w	r5, #8
   27498:	e76c      	b.n	27374 <nrf91_socket_offload_getaddrinfo+0x62>

0002749a <nrf91_socket_offload_sendto>:
{
   2749a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2749e:	b08d      	sub	sp, #52	; 0x34
   274a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   274a2:	4605      	mov	r5, r0
   274a4:	460e      	mov	r6, r1
   274a6:	4617      	mov	r7, r2
   274a8:	4698      	mov	r8, r3
	if (to == NULL) {
   274aa:	b96c      	cbnz	r4, 274c8 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   274ac:	4618      	mov	r0, r3
   274ae:	f7ff fcd4 	bl	26e5a <z_to_nrf_flags>
   274b2:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   274b6:	4603      	mov	r3, r0
   274b8:	463a      	mov	r2, r7
   274ba:	4631      	mov	r1, r6
   274bc:	4628      	mov	r0, r5
   274be:	f7fa fa85 	bl	219cc <nrf_sendto>
}
   274c2:	b00d      	add	sp, #52	; 0x34
   274c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   274c8:	8823      	ldrh	r3, [r4, #0]
   274ca:	2b01      	cmp	r3, #1
   274cc:	d110      	bne.n	274f0 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   274ce:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   274d0:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   274d2:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   274d6:	2302      	movs	r3, #2
   274d8:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   274da:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   274dc:	4640      	mov	r0, r8
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   274de:	f88d 100c 	strb.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   274e2:	9306      	str	r3, [sp, #24]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   274e4:	f7ff fcb9 	bl	26e5a <z_to_nrf_flags>
   274e8:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   274ea:	ab03      	add	r3, sp, #12
   274ec:	9300      	str	r3, [sp, #0]
   274ee:	e7e2      	b.n	274b6 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   274f0:	2b02      	cmp	r3, #2
   274f2:	d115      	bne.n	27520 <nrf91_socket_offload_sendto+0x86>
	nrf_out->sin6_port = ptr->sin6_port;
   274f4:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   274f6:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   274fa:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   274fe:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   27500:	2210      	movs	r2, #16
   27502:	1d21      	adds	r1, r4, #4
   27504:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   27506:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   27508:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   2750c:	f7fe fcab 	bl	25e66 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   27510:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   27512:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   27514:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   27516:	f7ff fca0 	bl	26e5a <z_to_nrf_flags>
   2751a:	f8cd 9004 	str.w	r9, [sp, #4]
   2751e:	e7e4      	b.n	274ea <nrf91_socket_offload_sendto+0x50>
   27520:	f7fa fb86 	bl	21c30 <z_impl_z_errno>
	errno = ENOTSUP;
   27524:	2323      	movs	r3, #35	; 0x23
   27526:	6003      	str	r3, [r0, #0]
	return retval;
   27528:	f04f 30ff 	mov.w	r0, #4294967295
   2752c:	e7c9      	b.n	274c2 <nrf91_socket_offload_sendto+0x28>

0002752e <nrf91_socket_offload_bind>:
{
   2752e:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   27530:	880b      	ldrh	r3, [r1, #0]
{
   27532:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   27534:	2b01      	cmp	r3, #1
{
   27536:	4606      	mov	r6, r0
   27538:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   2753a:	d10e      	bne.n	2755a <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   2753c:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2753e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   27540:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   27544:	2302      	movs	r3, #2
   27546:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   27548:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2754a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2754e:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   27550:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   27552:	f7fa fadf 	bl	21b14 <nrf_bind>
}
   27556:	b00a      	add	sp, #40	; 0x28
   27558:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   2755a:	2b02      	cmp	r3, #2
   2755c:	d112      	bne.n	27584 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   2755e:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   27560:	2524      	movs	r5, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   27562:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   27566:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   27568:	2210      	movs	r2, #16
   2756a:	3104      	adds	r1, #4
   2756c:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   2756e:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   27570:	f88d 5004 	strb.w	r5, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   27574:	f7fe fc77 	bl	25e66 <memcpy>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   27578:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2757a:	462a      	mov	r2, r5
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   2757c:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2757e:	a901      	add	r1, sp, #4
   27580:	4630      	mov	r0, r6
   27582:	e7e6      	b.n	27552 <nrf91_socket_offload_bind+0x24>
   27584:	f7fa fb54 	bl	21c30 <z_impl_z_errno>
	errno = ENOTSUP;
   27588:	2323      	movs	r3, #35	; 0x23
   2758a:	6003      	str	r3, [r0, #0]
   2758c:	f04f 30ff 	mov.w	r0, #4294967295
   27590:	e7e1      	b.n	27556 <nrf91_socket_offload_bind+0x28>

00027592 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   27592:	6843      	ldr	r3, [r0, #4]
   27594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27596:	b103      	cbz	r3, 2759a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   27598:	4718      	bx	r3
}
   2759a:	4770      	bx	lr

0002759c <response_handler>:
{
   2759c:	b510      	push	{r4, lr}
   2759e:	4604      	mov	r4, r0
	int len = strlen(response) + 1;
   275a0:	f7fe fbf6 	bl	25d90 <strlen>
   275a4:	1c41      	adds	r1, r0, #1
	if (len > 1) {
   275a6:	2901      	cmp	r1, #1
   275a8:	dd04      	ble.n	275b4 <response_handler+0x18>
		write_uart_string(response, len);
   275aa:	4620      	mov	r0, r4
}
   275ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		write_uart_string(response, len);
   275b0:	f7ec b9b2 	b.w	13918 <write_uart_string>
}
   275b4:	bd10      	pop	{r4, pc}

000275b6 <callback_worker>:
{
   275b6:	b510      	push	{r4, lr}
	if ((data != NULL) && (data->callback != NULL)) {
   275b8:	4604      	mov	r4, r0
   275ba:	b120      	cbz	r0, 275c6 <callback_worker+0x10>
   275bc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   275c0:	b10b      	cbz	r3, 275c6 <callback_worker+0x10>
		data->callback(data->data);
   275c2:	300c      	adds	r0, #12
   275c4:	4798      	blx	r3
	k_free(data);
   275c6:	4620      	mov	r0, r4
}
   275c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_free(data);
   275cc:	f000 b816 	b.w	275fc <k_free>

000275d0 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   275d0:	f7fe bad7 	b.w	25b82 <z_clock_idle_exit>

000275d4 <k_mem_pool_malloc>:
{
   275d4:	b513      	push	{r0, r1, r4, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   275d6:	2404      	movs	r4, #4
   275d8:	190a      	adds	r2, r1, r4
   275da:	d204      	bcs.n	275e6 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   275dc:	2300      	movs	r3, #0
   275de:	4669      	mov	r1, sp
   275e0:	f7fa fc52 	bl	21e88 <k_mem_pool_alloc>
   275e4:	b110      	cbz	r0, 275ec <k_mem_pool_malloc+0x18>
		return NULL;
   275e6:	2000      	movs	r0, #0
}
   275e8:	b002      	add	sp, #8
   275ea:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   275ec:	4622      	mov	r2, r4
   275ee:	a901      	add	r1, sp, #4
   275f0:	9800      	ldr	r0, [sp, #0]
   275f2:	f7fe fc38 	bl	25e66 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   275f6:	9800      	ldr	r0, [sp, #0]
   275f8:	3004      	adds	r0, #4
   275fa:	e7f5      	b.n	275e8 <k_mem_pool_malloc+0x14>

000275fc <k_free>:
	if (ptr != NULL) {
   275fc:	b110      	cbz	r0, 27604 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   275fe:	3804      	subs	r0, #4
   27600:	f7fa bcd0 	b.w	21fa4 <k_mem_pool_free_id>
}
   27604:	4770      	bx	lr

00027606 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   27606:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   27608:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   2760c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   27610:	4770      	bx	lr

00027612 <z_queue_node_peek>:
{
   27612:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   27614:	4604      	mov	r4, r0
   27616:	b130      	cbz	r0, 27626 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27618:	6802      	ldr	r2, [r0, #0]
   2761a:	0793      	lsls	r3, r2, #30
   2761c:	d003      	beq.n	27626 <z_queue_node_peek+0x14>
		ret = anode->data;
   2761e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27620:	b109      	cbz	r1, 27626 <z_queue_node_peek+0x14>
			k_free(anode);
   27622:	f7ff ffeb 	bl	275fc <k_free>
}
   27626:	4620      	mov	r0, r4
   27628:	bd10      	pop	{r4, pc}

0002762a <z_impl_k_queue_init>:
	list->head = NULL;
   2762a:	2300      	movs	r3, #0
	list->tail = NULL;
   2762c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   27630:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   27632:	f100 030c 	add.w	r3, r0, #12
   27636:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   2763a:	4770      	bx	lr

0002763c <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2763c:	460a      	mov	r2, r1
   2763e:	2300      	movs	r3, #0
   27640:	6841      	ldr	r1, [r0, #4]
   27642:	f7fb b811 	b.w	22668 <queue_insert>

00027646 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   27646:	7b43      	ldrb	r3, [r0, #13]
   27648:	06db      	lsls	r3, r3, #27
   2764a:	bf03      	ittte	eq
   2764c:	6980      	ldreq	r0, [r0, #24]
   2764e:	fab0 f080 	clzeq	r0, r0
   27652:	0940      	lsreq	r0, r0, #5
   27654:	2000      	movne	r0, #0
}
   27656:	4770      	bx	lr

00027658 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   27658:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2765c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   27660:	4298      	cmp	r0, r3
   27662:	bfac      	ite	ge
   27664:	2000      	movge	r0, #0
   27666:	2001      	movlt	r0, #1
   27668:	4770      	bx	lr

0002766a <z_reschedule_irqlock>:
{
   2766a:	b508      	push	{r3, lr}
   2766c:	4602      	mov	r2, r0
	if (resched()) {
   2766e:	f7fb f96f 	bl	22950 <resched>
   27672:	b120      	cbz	r0, 2767e <z_reschedule_irqlock+0x14>
}
   27674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27678:	4610      	mov	r0, r2
   2767a:	f7e9 bc89 	b.w	10f90 <__swap>
   2767e:	f382 8811 	msr	BASEPRI, r2
   27682:	f3bf 8f6f 	isb	sy
   27686:	bd08      	pop	{r3, pc}

00027688 <z_reschedule_unlocked>:
	__asm__ volatile(
   27688:	f04f 0320 	mov.w	r3, #32
   2768c:	f3ef 8011 	mrs	r0, BASEPRI
   27690:	f383 8811 	msr	BASEPRI, r3
   27694:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   27698:	f7ff bfe7 	b.w	2766a <z_reschedule_irqlock>

0002769c <z_priq_dumb_best>:
	return list->head == list;
   2769c:	6803      	ldr	r3, [r0, #0]
}
   2769e:	4298      	cmp	r0, r3
   276a0:	bf14      	ite	ne
   276a2:	4618      	movne	r0, r3
   276a4:	2000      	moveq	r0, #0
   276a6:	4770      	bx	lr

000276a8 <z_unpend_all>:
{
   276a8:	b570      	push	{r4, r5, r6, lr}
   276aa:	4606      	mov	r6, r0
	int need_sched = 0;
   276ac:	2500      	movs	r5, #0
   276ae:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276b0:	42a6      	cmp	r6, r4
   276b2:	d000      	beq.n	276b6 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   276b4:	b90c      	cbnz	r4, 276ba <z_unpend_all+0x12>
}
   276b6:	4628      	mov	r0, r5
   276b8:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   276ba:	4620      	mov	r0, r4
   276bc:	f7fb fb1c 	bl	22cf8 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   276c0:	4620      	mov	r0, r4
   276c2:	f7ff ffc0 	bl	27646 <z_is_thread_ready>
		need_sched = 1;
   276c6:	2501      	movs	r5, #1
   276c8:	2800      	cmp	r0, #0
   276ca:	d0f0      	beq.n	276ae <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   276cc:	4620      	mov	r0, r4
   276ce:	f7fb fc1f 	bl	22f10 <z_add_thread_to_ready_q>
   276d2:	e7ec      	b.n	276ae <z_unpend_all+0x6>

000276d4 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   276d4:	7b43      	ldrb	r3, [r0, #13]
   276d6:	06db      	lsls	r3, r3, #27
   276d8:	bf03      	ittte	eq
   276da:	6980      	ldreq	r0, [r0, #24]
   276dc:	fab0 f080 	clzeq	r0, r0
   276e0:	0940      	lsreq	r0, r0, #5
   276e2:	2000      	movne	r0, #0
}
   276e4:	4770      	bx	lr

000276e6 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   276e6:	f7e8 babb 	b.w	fc60 <z_arch_busy_wait>

000276ea <z_impl_k_thread_name_set>:
}
   276ea:	4770      	bx	lr

000276ec <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   276ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   276ee:	b510      	push	{r4, lr}
   276f0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   276f2:	b103      	cbz	r3, 276f6 <z_thread_single_abort+0xa>
		thread->fn_abort();
   276f4:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   276f6:	4620      	mov	r0, r4
   276f8:	f7ff ffec 	bl	276d4 <z_is_thread_ready>
   276fc:	b138      	cbz	r0, 2770e <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   276fe:	4620      	mov	r0, r4
   27700:	f7fb fdac 	bl	2325c <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   27704:	7b63      	ldrb	r3, [r4, #13]
   27706:	f043 0308 	orr.w	r3, r3, #8
   2770a:	7363      	strb	r3, [r4, #13]
}
   2770c:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   2770e:	7b63      	ldrb	r3, [r4, #13]
   27710:	079b      	lsls	r3, r3, #30
   27712:	d502      	bpl.n	2771a <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   27714:	4620      	mov	r0, r4
   27716:	f7fb f9b7 	bl	22a88 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   2771a:	69a3      	ldr	r3, [r4, #24]
   2771c:	2b00      	cmp	r3, #0
   2771e:	d0f1      	beq.n	27704 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   27720:	f104 0018 	add.w	r0, r4, #24
   27724:	f7fc fd20 	bl	24168 <z_abort_timeout>
   27728:	e7ec      	b.n	27704 <z_thread_single_abort+0x18>

0002772a <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   2772a:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   2772c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   2772e:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   27730:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   27732:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   27734:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   27738:	4770      	bx	lr

0002773a <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   2773a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2773c:	f7fc fea2 	bl	24484 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   27740:	bd08      	pop	{r3, pc}

00027742 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   27742:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   27744:	f7ff fff9 	bl	2773a <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC /
   27748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2774c:	fba0 2302 	umull	r2, r3, r0, r2
   27750:	09d0      	lsrs	r0, r2, #7
}
   27752:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   27756:	bd08      	pop	{r3, pc}

00027758 <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   27758:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   2775a:	f7fc fe93 	bl	24484 <z_tick_get>
   2775e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   27762:	fba0 2304 	umull	r2, r3, r0, r4
   27766:	fb04 3301 	mla	r3, r4, r1, r3
   2776a:	09d0      	lsrs	r0, r2, #7
}
   2776c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
   27770:	09d9      	lsrs	r1, r3, #7
   27772:	bd10      	pop	{r4, pc}

00027774 <k_timer_init>:
	timer->status = 0U;
   27774:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27776:	e9c0 1206 	strd	r1, r2, [r0, #24]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2777a:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
   2777e:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   27780:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   27784:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   27788:	6283      	str	r3, [r0, #40]	; 0x28
}
   2778a:	4770      	bx	lr

0002778c <add_event>:
{
   2778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2778e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27790:	e9d0 2300 	ldrd	r2, r3, [r0]
   27794:	4290      	cmp	r0, r2
   27796:	4604      	mov	r4, r0
   27798:	460d      	mov	r5, r1
   2779a:	d106      	bne.n	277aa <add_event+0x1e>
	node->prev = list->tail;
   2779c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2779e:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   277a0:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   277a2:	6863      	ldr	r3, [r4, #4]
   277a4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   277a6:	6065      	str	r5, [r4, #4]
   277a8:	e019      	b.n	277de <add_event+0x52>
	if ((pending == NULL) ||
   277aa:	2b00      	cmp	r3, #0
   277ac:	d0f6      	beq.n	2779c <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   277ae:	689b      	ldr	r3, [r3, #8]
   277b0:	6839      	ldr	r1, [r7, #0]
   277b2:	6818      	ldr	r0, [r3, #0]
   277b4:	f7ff ff50 	bl	27658 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   277b8:	2800      	cmp	r0, #0
   277ba:	d1ef      	bne.n	2779c <add_event+0x10>
	return list->head == list;
   277bc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   277be:	42b4      	cmp	r4, r6
   277c0:	d0ec      	beq.n	2779c <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   277c2:	2e00      	cmp	r6, #0
   277c4:	d0ea      	beq.n	2779c <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   277c6:	68b3      	ldr	r3, [r6, #8]
   277c8:	6838      	ldr	r0, [r7, #0]
   277ca:	6819      	ldr	r1, [r3, #0]
   277cc:	f7ff ff44 	bl	27658 <z_is_t1_higher_prio_than_t2>
   277d0:	b130      	cbz	r0, 277e0 <add_event+0x54>
	node->prev = successor->prev;
   277d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   277d4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   277d8:	6873      	ldr	r3, [r6, #4]
   277da:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   277dc:	6075      	str	r5, [r6, #4]
}
   277de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   277e0:	6863      	ldr	r3, [r4, #4]
   277e2:	429e      	cmp	r6, r3
   277e4:	d0da      	beq.n	2779c <add_event+0x10>
   277e6:	6836      	ldr	r6, [r6, #0]
   277e8:	e7eb      	b.n	277c2 <add_event+0x36>

000277ea <z_handle_obj_poll_events>:
	return list->head == list;
   277ea:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   277ec:	4298      	cmp	r0, r3
   277ee:	d00a      	beq.n	27806 <z_handle_obj_poll_events+0x1c>
	node->prev->next = node->next;
   277f0:	e9d3 0200 	ldrd	r0, r2, [r3]
   277f4:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   277f6:	6818      	ldr	r0, [r3, #0]
   277f8:	6042      	str	r2, [r0, #4]
	node->next = NULL;
   277fa:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   277fc:	4618      	mov	r0, r3
	node->prev = NULL;
   277fe:	e9c3 2200 	strd	r2, r2, [r3]
   27802:	f7fc bfb3 	b.w	2476c <signal_poll_event>
	}
}
   27806:	4770      	bx	lr

00027808 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   27808:	4770      	bx	lr
